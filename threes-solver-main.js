// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 13800;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 13840;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(14667);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });


/* memory initializer */ allocate([98,108,117,101,0,0,0,0,114,101,100,0,0,0,0,0,119,104,105,116,101,0,0,0,105,110,118,97,108,105,100,32,99,111,108,111,114,0,0,0,102,97,108,115,101,0,0,0,116,104,114,101,101,115,45,115,111,108,118,101,114,46,99,99,0,0,0,0,0,0,0,0,110,101,120,116,95,99,111,108,111,114,95,116,111,95,104,117,109,97,110,95,115,116,114,105,110,103,0,0,0,0,0,0,83,87,73,80,69,95,85,80,0,0,0,0,0,0,0,0,83,87,73,80,69,95,68,79,87,78,0,0,0,0,0,0,83,87,73,80,69,95,76,69,70,84,0,0,0,0,0,0,83,87,73,80,69,95,82,73,71,72,84,0,0,0,0,0,85,78,75,78,79,87,78,0,116,111,95,115,116,114,105,110,103,0,0,0,0,0,0,0,105,110,112,117,116,32,118,97,108,105,100,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,114,100,33,0,0,0,32,0,0,0,0,0,0,0,119,101,98,95,119,111,114,107,101,114,0,0,0,0,0,0,98,97,100,32,112,108,97,121,101,114,115,32,109,111,118,101,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,136,1,0,0,4,0,0,0,5,0,0,0,200,255,255,255,200,255,255,255,136,1,0,0,6,0,0,0,7,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,24,54,0,0,64,1,0,0,80,15,0,0,0,0,0,0,56,0,0,0,0,0,0,0,80,15,0,0,8,0,0,0,9,0,0,0,200,255,255,255,200,255,255,255,80,15,0,0,10,0,0,0,11,0,0,0,0,0,0,0,72,2,0,0,12,0,0,0,13,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,24,54,0,0,0,2,0,0,72,14,0,0,0,0,0,0,99,97,110,39,116,32,99,111,109,98,105,110,101,32,99,97,114,100,115,0,0,0,0,0,95,115,104,105,102,116,95,105,110,110,101,114,0,0,0,0,105,115,95,118,97,108,105,100,95,99,97,114,100,95,112,111,115,105,116,105,111,110,40,112,111,115,41,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,60,0,0,0,0,0,0,0,32,3,0,0,14,0,0,0,15,0,0,0,196,255,255,255,196,255,255,255,32,3,0,0,16,0,0,0,17,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,24,54,0,0,216,2,0,0,192,14,0,0,0,0,0,0,60,0,0,0,0,0,0,0,192,14,0,0,18,0,0,0,19,0,0,0,196,255,255,255,196,255,255,255,192,14,0,0,20,0,0,0,21,0,0,0,98,97,100,32,99,97,114,100,32,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,115,97,109,101,32,99,97,114,100,32,116,119,105,99,101,33,0,0,0,0,0,0,0,0,99,97,110,39,116,32,115,104,105,102,116,0,0,0,0,0,99,111,109,112,117,116,101,114,115,95,109,111,118,101,0,0,99,97,110,39,116,32,112,108,97,99,101,32,99,97,114,100,32,116,104,101,114,101,0,0,98,97,100,32,99,97,114,100,32,118,97,108,117,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([88,8,0,0,22,0,0,0,23,0,0,0,5,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,11,0,0,0,6,0,0,0,9,0,0,0,7,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,24,54,0,0,56,8,0,0,136,14,0,0,0,0,0,0,0,0,0,0,192,8,0,0,24,0,0,0,25,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,12,0,0,0,9,0,0,0,8,0,0,0,13,0,0,0,14,0,0,0,8,0,0,0,10,0,0,0,9,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,24,54,0,0,168,8,0,0,136,14,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,88,9,0,0,26,0,0,0,27,0,0,0,7,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,5,0,0,0,5,0,0,0,16,0,0,0,7,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,24,54,0,0,56,9,0,0,72,14,0,0,0,0,0,0,0,0,0,0,192,9,0,0,28,0,0,0,29,0,0,0,8,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,17,0,0,0,18,0,0,0,12,0,0,0,6,0,0,0,13,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,24,54,0,0,168,9,0,0,72,14,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,240,53,0,0,208,9,0,0,0,0,0,0,56,10,0,0,30,0,0,0,31,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,160,10,0,0,32,0,0,0,33,0,0,0,20,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,24,54,0,0,40,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,10,0,0,30,0,0,0,34,0,0,0,19,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,24,54,0,0,96,10,0,0,56,10,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,24,54,0,0,136,10,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,232,10,0,0,35,0,0,0,36,0,0,0,20,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,24,54,0,0,208,10,0,0,160,10,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,240,53,0,0,248,10,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,24,54,0,0,32,11,0,0,24,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,72,14,0,0,37,0,0,0,38,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,16,0,0,0,7,0,0,0,10,0,0,0,6,0,0,0,13,0,0,0,0,0,0,0,136,14,0,0,39,0,0,0,40,0,0,0,9,0,0,0,7,0,0,0,5,0,0,0,5,0,0,0,12,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,11,0,0,0,6,0,0,0,10,0,0,0,9,0,0,0,8,0,0,0,0,0,0,0,192,14,0,0,18,0,0,0,19,0,0,0,248,255,255,255,248,255,255,255,192,14,0,0,20,0,0,0,21,0,0,0,8,0,0,0,0,0,0,0,8,15,0,0,41,0,0,0,42,0,0,0,248,255,255,255,248,255,255,255,8,15,0,0,43,0,0,0,44,0,0,0,4,0,0,0,0,0,0,0,80,15,0,0,8,0,0,0,9,0,0,0,252,255,255,255,252,255,255,255,80,15,0,0,10,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,152,15,0,0,45,0,0,0,46,0,0,0,252,255,255,255,252,255,255,255,152,15,0,0,47,0,0,0,48,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,13,0,0,49,0,0,0,50,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,136,13,0,0,51,0,0,0,52,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,24,54,0,0,64,13,0,0,232,10,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,240,53,0,0,112,13,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,24,54,0,0,144,13,0,0,136,13,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,24,54,0,0,208,13,0,0,136,13,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,240,53,0,0,16,14,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,240,53,0,0,80,14,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,54,0,0,144,14,0,0,0,0,0,0,1,0,0,0,192,13,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,120,54,0,0,216,14,0,0,0,0,0,0,1,0,0,0,0,14,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,54,0,0,32,15,0,0,0,0,0,0,1,0,0,0,192,13,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,120,54,0,0,104,15,0,0,0,0,0,0,1,0,0,0,0,14,0,0,3,244,255,255,0,0,0,0,248,15,0,0,53,0,0,0,54,0,0,0,21,0,0,0,4,0,0,0,12,0,0,0,13,0,0,0,5,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,24,54,0,0,216,15,0,0,56,11,0,0,0,0,0,0,0,0,0,0,32,30,0,0,55,0,0,0,56,0,0,0,57,0,0,0,4,0,0,0,7,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,30,0,0,58,0,0,0,59,0,0,0,57,0,0,0,5,0,0,0,8,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,34,0,0,60,0,0,0,61,0,0,0,57,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,144,35,0,0,62,0,0,0,63,0,0,0,57,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,36,0,0,64,0,0,0,65,0,0,0,57,0,0,0,7,0,0,0,8,0,0,0,26,0,0,0,9,0,0,0,27,0,0,0,4,0,0,0,5,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,0,0,66,0,0,0,67,0,0,0,57,0,0,0,11,0,0,0,12,0,0,0,28,0,0,0,13,0,0,0,29,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,16,32,0,0,68,0,0,0,69,0,0,0,57,0,0,0,22,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,4,0,0,0,248,255,255,255,16,32,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,176,32,0,0,70,0,0,0,71,0,0,0,57,0,0,0,30,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,5,0,0,0,248,255,255,255,176,32,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,64,33,0,0,72,0,0,0,73,0,0,0,57,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,33,0,0,74,0,0,0,75,0,0,0,57,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,30,0,0,76,0,0,0,77,0,0,0,57,0,0,0,38,0,0,0,39,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,40,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,30,0,0,78,0,0,0,79,0,0,0,57,0,0,0,41,0,0,0,42,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,43,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,31,0,0,80,0,0,0,81,0,0,0,57,0,0,0,44,0,0,0,45,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,46,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,31,0,0,82,0,0,0,83,0,0,0,57,0,0,0,47,0,0,0,48,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,49,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,37,0,0,84,0,0,0,85,0,0,0,57,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,8,38,0,0,86,0,0,0,87,0,0,0,57,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,152,38,0,0,88,0,0,0,89,0,0,0,57,0,0,0,4,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,40,39,0,0,90,0,0,0,91,0,0,0,57,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,92,0,0,0,93,0,0,0,57,0,0,0,16,0,0,0,15,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,94,0,0,0,95,0,0,0,57,0,0,0,17,0,0,0,16,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,248,29,0,0,96,0,0,0,97,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,26,0,0,98,0,0,0,99,0,0,0,57,0,0,0,14,0,0,0,18,0,0,0,15,0,0,0,19,0,0,0,16,0,0,0,4,0,0,0,20,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,27,0,0,100,0,0,0,101,0,0,0,57,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,50,0,0,0,51,0,0,0,8,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,29,0,0,102,0,0,0,103,0,0,0,57,0,0,0,53,0,0,0,54,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,0,0,0,0,208,29,0,0,104,0,0,0,105,0,0,0,57,0,0,0,55,0,0,0,56,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,8,26,0,0,106,0,0,0,107,0,0,0,57,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,24,54,0,0,240,25,0,0,240,9,0,0,0,0,0,0,0,0,0,0,152,26,0,0,106,0,0,0,108,0,0,0,57,0,0,0,21,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,17,0,0,0,22,0,0,0,18,0,0,0,23,0,0,0,19,0,0,0,8,0,0,0,24,0,0,0,9,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,240,53,0,0,120,26,0,0,120,54,0,0,96,26,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,26,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,120,54,0,0,184,26,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,26,0,0,2,0,0,0,0,0,0,0,104,27,0,0,106,0,0,0,109,0,0,0,57,0,0,0,6,0,0,0,7,0,0,0,10,0,0,0,57,0,0,0,58,0,0,0,11,0,0,0,59,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,240,53,0,0,72,27,0,0,120,54,0,0,32,27,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,96,27,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,120,54,0,0,136,27,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,96,27,0,0,2,0,0,0,0,0,0,0,40,28,0,0,106,0,0,0,110,0,0,0,57,0,0,0,8,0,0,0,9,0,0,0,12,0,0,0,60,0,0,0,61,0,0,0,13,0,0,0,62,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,120,54,0,0,0,28,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,96,27,0,0,2,0,0,0,0,0,0,0,160,28,0,0,106,0,0,0,111,0,0,0,57,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,63,0,0,0,64,0,0,0,15,0,0,0,65,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,120,54,0,0,120,28,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,96,27,0,0,2,0,0,0,0,0,0,0,24,29,0,0,106,0,0,0,112,0,0,0,57,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,63,0,0,0,64,0,0,0,15,0,0,0,65,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,24,54,0,0,240,28,0,0,160,28,0,0,0,0,0,0,0,0,0,0,128,29,0,0,106,0,0,0,113,0,0,0,57,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,63,0,0,0,64,0,0,0,15,0,0,0,65,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,24,54,0,0,88,29,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,24,54,0,0,144,29,0,0,8,26,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,24,54,0,0,184,29,0,0,8,26,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,24,54,0,0,224,29,0,0,8,26,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,24,54,0,0,8,30,0,0,8,26,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,24,54,0,0,48,30,0,0,8,26,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,240,53,0,0,120,30,0,0,120,54,0,0,88,30,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,30,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,120,54,0,0,184,30,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,30,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,120,54,0,0,248,30,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,30,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,120,54,0,0,56,31,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,30,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,240,53,0,0,192,31,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,240,53,0,0,224,31,0,0,120,54,0,0,120,31,0,0,0,0,0,0,3,0,0,0,8,26,0,0,2,0,0,0,216,31,0,0,2,0,0,0,8,32,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,240,53,0,0,128,32,0,0,120,54,0,0,56,32,0,0,0,0,0,0,3,0,0,0,8,26,0,0,2,0,0,0,216,31,0,0,2,0,0,0,168,32,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,240,53,0,0,32,33,0,0,120,54,0,0,216,32,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,56,33,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,120,54,0,0,96,33,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,56,33,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,240,53,0,0,224,33,0,0,120,54,0,0,200,33,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,248,33,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,120,54,0,0,32,34,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,248,33,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,240,53,0,0,184,34,0,0,120,54,0,0,160,34,0,0,0,0,0,0,1,0,0,0,216,34,0,0,0,0,0,0,120,54,0,0,88,34,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,224,34,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,120,54,0,0,96,35,0,0,0,0,0,0,1,0,0,0,216,34,0,0,0,0,0,0,120,54,0,0,24,35,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,120,35,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,240,53,0,0,16,36,0,0,120,54,0,0,248,35,0,0,0,0,0,0,1,0,0,0,48,36,0,0,0,0,0,0,120,54,0,0,176,35,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,56,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,120,54,0,0,184,36,0,0,0,0,0,0,1,0,0,0,48,36,0,0,0,0,0,0,120,54,0,0,112,36,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,208,36,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,240,53,0,0,80,37,0,0,120,54,0,0,8,37,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,112,37,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,240,53,0,0,224,37,0,0,120,54,0,0,152,37,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,0,38,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,240,53,0,0,112,38,0,0,120,54,0,0,40,38,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,144,38,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,240,53,0,0,0,39,0,0,120,54,0,0,184,38,0,0,0,0,0,0,2,0,0,0,8,26,0,0,2,0,0,0,32,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2036);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,53,0,0,114,0,0,0,115,0,0,0,66,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,240,53,0,0,64,53,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,24,54,0,0,88,53,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,54,0,0,120,53,0,0,80,53,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,54,0,0,176,53,0,0,160,53,0,0,0,0,0,0,0,0,0,0,216,53,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,25,0,0,0,17,0,0,0,4,0,0,0,9,0,0,0,0,0,0,0,96,54,0,0,116,0,0,0,120,0,0,0,118,0,0,0,119,0,0,0,25,0,0,0,18,0,0,0,5,0,0,0,10,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,24,54,0,0,56,54,0,0,216,53,0,0,0,0,0,0,0,0,0,0,192,54,0,0,116,0,0,0,121,0,0,0,118,0,0,0,119,0,0,0,25,0,0,0,19,0,0,0,6,0,0,0,11,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,24,54,0,0,152,54,0,0,216,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,122,0,0,0,123,0,0,0,67,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,24,54,0,0,240,56,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+12296);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _llvm_lifetime_end() {}

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
   
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  var _llvm_dbg_value=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _pthread_mutex_lock() {}

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }


  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }


  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _abort() {
      Module['abort']();
    }

  function _fmod(x, y) {
      return x % y;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

  var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _emscripten_create_worker(url) {
      url = Pointer_stringify(url);
      var id = Browser.workers.length;
      var info = {
        worker: new Worker(url),
        callbacks: [],
        awaited: 0,
        buffer: 0,
        bufferSize: 0
      };
      info.worker.onmessage = function info_worker_onmessage(msg) {
        var info = Browser.workers[id];
        if (!info) return; // worker was destroyed meanwhile
        var callbackId = msg.data['callbackId'];
        var callbackInfo = info.callbacks[callbackId];
        if (!callbackInfo) return; // no callback or callback removed meanwhile
        info.awaited--;
        info.callbacks[callbackId] = null; // TODO: reuse callbackIds, compress this
        var data = msg.data['data'];
        if (data) {
          if (!data.byteLength) data = new Uint8Array(data);
          if (!info.buffer || info.bufferSize < data.length) {
            if (info.buffer) _free(info.buffer);
            info.bufferSize = data.length;
            info.buffer = _malloc(data.length);
          }
          HEAPU8.set(data, info.buffer);
          callbackInfo.func(info.buffer, data.length, callbackInfo.arg);
        } else {
          callbackInfo.func(0, 0, callbackInfo.arg);
        }
      };
      Browser.workers.push(info);
      return id;
    }

  function _emscripten_call_worker(id, funcName, data, size, callback, arg) {
      Module['noExitRuntime'] = true; // should we only do this if there is a callback?
  
      funcName = Pointer_stringify(funcName);
      var info = Browser.workers[id];
      var callbackId = -1;
      if (callback) {
        callbackId = info.callbacks.length;
        info.callbacks.push({
          func: Runtime.getFuncWrapper(callback, 'viii'),
          arg: arg
        });
        info.awaited++;
      }
      info.worker.postMessage({
        'funcName': funcName,
        'callbackId': callbackId,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0 // XXX copy to a new typed array as a workaround for chrome bug 169705
      });
    }

  function _pthread_cond_wait() {
      return 0;
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  var _fabs=Math_abs;

  function _llvm_lifetime_start() {}


  var _getc=_fgetc;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        var canvasContainer = canvas.parentNode;
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            var canvasContainer = canvas.parentNode;
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

   
  Module["_tolower"] = _tolower;

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }


  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  function __ZNSt9exceptionD2Ev() {}

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _llvm_dbg_declare=undefined;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __exit=env.__exit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _send=env._send;
  var _emscripten_call_worker=env._emscripten_call_worker;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var _sprintf=env._sprintf;
  var _vasprintf=env._vasprintf;
  var _vsnprintf=env._vsnprintf;
  var _emscripten_create_worker=env._emscripten_create_worker;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _strtoll=env._strtoll;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var _snprintf=env._snprintf;
  var __scanString=env.__scanString;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _isxdigit=env._isxdigit;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _isspace=env._isspace;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var _ungetc=env._ungetc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _sscanf=env._sscanf;
  var _catgets=env._catgets;
  var _asprintf=env._asprintf;
  var _strtoll_l=env._strtoll_l;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var ___cxa_throw=env.___cxa_throw;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i21$i = 0, $$sum2$i23$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1005 = 0, $1012 = 0, $1013 = 0, $102 = 0, $1024 = 0, $1028 = 0, $103 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1052 = 0, $1053 = 0, $1055 = 0, $106 = 0, $1067 = 0, $1069 = 0, $107 = 0, $1072 = 0, $1073 = 0, $1078 = 0, $108 = 0, $1083 = 0, $1084 = 0, $1088 = 0, $1089 = 0, $1090 = 0, $1093 = 0, $1098 = 0, $1101 = 0, $1111 = 0, $1114 = 0, $1115 = 0, $112 = 0, $1122 = 0, $1125 = 0, $113 = 0, $1131 = 0, $1133 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1141 = 0, $1142 = 0, $1149 = 0, $1150 = 0, $1155 = 0, $1156 = 0, $1159 = 0, $1161 = 0, $1164 = 0, $1169 = 0, $1175 = 0, $1179 = 0, $1180 = 0, $1187 = 0, $1191 = 0, $1203 = 0, $1204 = 0, $121 = 0, $1212 = 0, $1213 = 0, $1215 = 0, $1223 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $17 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $182 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $20 = 0, $201 = 0, $202 = 0, $212 = 0, $222 = 0, $230 = 0, $238 = 0, $242 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $264 = 0, $265 = 0, $275 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $289 = 0, $291 = 0, $294 = 0, $299 = 0, $306 = 0, $31 = 0, $311 = 0, $315 = 0, $316 = 0, $320 = 0, $323 = 0, $330 = 0, $333 = 0, $337 = 0, $339 = 0, $340 = 0, $342 = 0, $344 = 0, $346 = 0, $348 = 0, $350 = 0, $352 = 0, $354 = 0, $36 = 0, $364 = 0, $365 = 0, $367 = 0, $370 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $383 = 0, $385 = 0, $388 = 0, $391 = 0, $394 = 0, $397 = 0, $398 = 0, $400 = 0, $401 = 0, $403 = 0, $404 = 0, $406 = 0, $407 = 0, $413 = 0, $414 = 0, $424 = 0, $434 = 0, $44 = 0, $442 = 0, $450 = 0, $454 = 0, $464 = 0, $466 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $474 = 0, $475 = 0, $484 = 0, $485 = 0, $490 = 0, $491 = 0, $494 = 0, $496 = 0, $499 = 0, $5 = 0, $50 = 0, $504 = 0, $510 = 0, $517 = 0, $518 = 0, $52 = 0, $529 = 0, $53 = 0, $533 = 0, $545 = 0, $546 = 0, $55 = 0, $557 = 0, $558 = 0, $560 = 0, $57 = 0, $573 = 0, $575 = 0, $576 = 0, $578 = 0, $59 = 0, $592 = 0, $597 = 0, $599 = 0, $6 = 0, $600 = 0, $601 = 0, $61 = 0, $613 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $627 = 0, $629 = 0, $63 = 0, $630 = 0, $636 = 0, $638 = 0, $639 = 0, $640 = 0, $642 = 0, $647 = 0, $65 = 0, $650 = 0, $652 = 0, $653 = 0, $654 = 0, $662 = 0, $663 = 0, $666 = 0, $67 = 0, $670 = 0, $671 = 0, $674 = 0, $676 = 0, $680 = 0, $681 = 0, $686 = 0, $690 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $706 = 0, $708 = 0, $71 = 0, $711 = 0, $713 = 0, $717 = 0, $719 = 0, $725 = 0, $73 = 0, $730 = 0, $733 = 0, $74 = 0, $741 = 0, $742 = 0, $743 = 0, $747 = 0, $75 = 0, $753 = 0, $758 = 0, $76 = 0, $760 = 0, $765 = 0, $768 = 0, $77 = 0, $777 = 0, $778 = 0, $782 = 0, $788 = 0, $792 = 0, $797 = 0, $8 = 0, $800 = 0, $805 = 0, $806 = 0, $807 = 0, $811 = 0, $812 = 0, $813 = 0, $820 = 0, $827 = 0, $835 = 0, $838 = 0, $839 = 0, $843 = 0, $846 = 0, $849 = 0, $85 = 0, $866 = 0, $870 = 0, $873 = 0, $876 = 0, $88 = 0, $880 = 0, $884 = 0, $887 = 0, $89 = 0, $891 = 0, $892 = 0, $895 = 0, $896 = 0, $898 = 0, $899 = 0, $901 = 0, $902 = 0, $910 = 0, $911 = 0, $92 = 0, $921 = 0, $932 = 0, $94 = 0, $941 = 0, $951 = 0, $959 = 0, $961 = 0, $963 = 0, $964 = 0, $965 = 0, $969 = 0, $970 = 0, $979 = 0, $980 = 0, $985 = 0, $986 = 0, $989 = 0, $991 = 0, $994 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rsize$329$i$phi = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, $v$330$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14666
 do {
  if ($bytes >>> 0 < 245) {
   if ($bytes >>> 0 < 11) {
    $5 = 16; //@line 14672
   } else {
    $5 = $bytes + 11 & -8; //@line 14676
   }
   $6 = $5 >>> 3; //@line 14678
   $7 = HEAP32[3508] | 0; //@line 14679
   $8 = $7 >>> $6; //@line 14680
   if (($8 & 3 | 0) != 0) {
    $13 = ($8 & 1 ^ 1) + $6 | 0; //@line 14686
    $14 = $13 << 1; //@line 14687
    $16 = 14072 + ($14 << 2) | 0; //@line 14689
    $17 = 14072 + ($14 + 2 << 2) | 0; //@line 14691
    $18 = HEAP32[$17 >> 2] | 0; //@line 14692
    $19 = $18 + 8 | 0; //@line 14693
    $20 = HEAP32[$19 >> 2] | 0; //@line 14694
    do {
     if (($16 | 0) == ($20 | 0)) {
      HEAP32[3508] = $7 & ~(1 << $13); //@line 14701
     } else {
      if ($20 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
       _abort(); //@line 14707
      }
      $28 = $20 + 12 | 0; //@line 14710
      if ((HEAP32[$28 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$28 >> 2] = $16; //@line 14714
       HEAP32[$17 >> 2] = $20; //@line 14715
       break;
      } else {
       _abort(); //@line 14718
      }
     }
    } while (0);
    $31 = $13 << 3; //@line 14723
    HEAP32[$18 + 4 >> 2] = $31 | 3; //@line 14726
    $36 = $18 + ($31 | 4) | 0; //@line 14730
    HEAP32[$36 >> 2] = HEAP32[$36 >> 2] | 1; //@line 14733
    $mem$0 = $19; //@line 14735
    STACKTOP = sp; //@line 14736
    return $mem$0 | 0; //@line 14736
   }
   if (!($5 >>> 0 > (HEAP32[14040 >> 2] | 0) >>> 0)) {
    $nb$0 = $5; //@line 14741
    break;
   }
   if (($8 | 0) != 0) {
    $44 = 2 << $6; //@line 14747
    $47 = $8 << $6 & ($44 | 0 - $44); //@line 14750
    $50 = ($47 & 0 - $47) + -1 | 0; //@line 14753
    $52 = $50 >>> 12 & 16; //@line 14755
    $53 = $50 >>> $52; //@line 14756
    $55 = $53 >>> 5 & 8; //@line 14758
    $57 = $53 >>> $55; //@line 14760
    $59 = $57 >>> 2 & 4; //@line 14762
    $61 = $57 >>> $59; //@line 14764
    $63 = $61 >>> 1 & 2; //@line 14766
    $65 = $61 >>> $63; //@line 14768
    $67 = $65 >>> 1 & 1; //@line 14770
    $70 = ($55 | $52 | $59 | $63 | $67) + ($65 >>> $67) | 0; //@line 14773
    $71 = $70 << 1; //@line 14774
    $73 = 14072 + ($71 << 2) | 0; //@line 14776
    $74 = 14072 + ($71 + 2 << 2) | 0; //@line 14778
    $75 = HEAP32[$74 >> 2] | 0; //@line 14779
    $76 = $75 + 8 | 0; //@line 14780
    $77 = HEAP32[$76 >> 2] | 0; //@line 14781
    do {
     if (($73 | 0) == ($77 | 0)) {
      HEAP32[3508] = $7 & ~(1 << $70); //@line 14788
     } else {
      if ($77 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
       _abort(); //@line 14794
      }
      $85 = $77 + 12 | 0; //@line 14797
      if ((HEAP32[$85 >> 2] | 0) == ($75 | 0)) {
       HEAP32[$85 >> 2] = $73; //@line 14801
       HEAP32[$74 >> 2] = $77; //@line 14802
       break;
      } else {
       _abort(); //@line 14805
      }
     }
    } while (0);
    $88 = $70 << 3; //@line 14810
    $89 = $88 - $5 | 0; //@line 14811
    HEAP32[$75 + 4 >> 2] = $5 | 3; //@line 14814
    $92 = $75; //@line 14815
    $94 = $92 + $5 | 0; //@line 14817
    HEAP32[$92 + ($5 | 4) >> 2] = $89 | 1; //@line 14822
    HEAP32[$92 + $88 >> 2] = $89; //@line 14825
    $100 = HEAP32[14040 >> 2] | 0; //@line 14826
    if (($100 | 0) != 0) {
     $102 = HEAP32[14052 >> 2] | 0; //@line 14829
     $103 = $100 >>> 3; //@line 14830
     $104 = $103 << 1; //@line 14831
     $106 = 14072 + ($104 << 2) | 0; //@line 14833
     $107 = HEAP32[3508] | 0; //@line 14834
     $108 = 1 << $103; //@line 14835
     do {
      if (($107 & $108 | 0) == 0) {
       HEAP32[3508] = $107 | $108; //@line 14841
       $$pre$phiZ2D = 14072 + ($104 + 2 << 2) | 0; //@line 14844
       $F4$0 = $106; //@line 14844
      } else {
       $112 = 14072 + ($104 + 2 << 2) | 0; //@line 14847
       $113 = HEAP32[$112 >> 2] | 0; //@line 14848
       if (!($113 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
        $$pre$phiZ2D = $112; //@line 14853
        $F4$0 = $113; //@line 14853
        break;
       }
       _abort(); //@line 14856
      }
     } while (0);
     HEAP32[$$pre$phiZ2D >> 2] = $102; //@line 14860
     HEAP32[$F4$0 + 12 >> 2] = $102; //@line 14862
     HEAP32[$102 + 8 >> 2] = $F4$0; //@line 14864
     HEAP32[$102 + 12 >> 2] = $106; //@line 14866
    }
    HEAP32[14040 >> 2] = $89; //@line 14868
    HEAP32[14052 >> 2] = $94; //@line 14869
    $mem$0 = $76; //@line 14871
    STACKTOP = sp; //@line 14872
    return $mem$0 | 0; //@line 14872
   }
   $121 = HEAP32[14036 >> 2] | 0; //@line 14874
   if (($121 | 0) == 0) {
    $nb$0 = $5; //@line 14877
    break;
   }
   $125 = ($121 & 0 - $121) + -1 | 0; //@line 14882
   $127 = $125 >>> 12 & 16; //@line 14884
   $128 = $125 >>> $127; //@line 14885
   $130 = $128 >>> 5 & 8; //@line 14887
   $132 = $128 >>> $130; //@line 14889
   $134 = $132 >>> 2 & 4; //@line 14891
   $136 = $132 >>> $134; //@line 14893
   $138 = $136 >>> 1 & 2; //@line 14895
   $140 = $136 >>> $138; //@line 14897
   $142 = $140 >>> 1 & 1; //@line 14899
   $147 = HEAP32[14336 + (($130 | $127 | $134 | $138 | $142) + ($140 >>> $142) << 2) >> 2] | 0; //@line 14904
   $rsize$0$i = (HEAP32[$147 + 4 >> 2] & -8) - $5 | 0; //@line 14909
   $t$0$i = $147; //@line 14909
   $v$0$i = $147; //@line 14909
   while (1) {
    $153 = HEAP32[$t$0$i + 16 >> 2] | 0; //@line 14912
    if (($153 | 0) == 0) {
     $156 = HEAP32[$t$0$i + 20 >> 2] | 0; //@line 14916
     if (($156 | 0) == 0) {
      break;
     } else {
      $158 = $156; //@line 14921
     }
    } else {
     $158 = $153; //@line 14924
    }
    $162 = (HEAP32[$158 + 4 >> 2] & -8) - $5 | 0; //@line 14929
    $163 = $162 >>> 0 < $rsize$0$i >>> 0; //@line 14930
    $rsize$0$i = $163 ? $162 : $rsize$0$i; //@line 14933
    $t$0$i = $158; //@line 14933
    $v$0$i = $163 ? $158 : $v$0$i; //@line 14933
   }
   $164 = $v$0$i; //@line 14935
   $165 = HEAP32[14048 >> 2] | 0; //@line 14936
   if ($164 >>> 0 < $165 >>> 0) {
    _abort(); //@line 14939
   }
   $167 = $164 + $5 | 0; //@line 14942
   $168 = $167; //@line 14943
   if (!($164 >>> 0 < $167 >>> 0)) {
    _abort(); //@line 14946
   }
   $171 = HEAP32[$v$0$i + 24 >> 2] | 0; //@line 14950
   $173 = HEAP32[$v$0$i + 12 >> 2] | 0; //@line 14952
   do {
    if (($173 | 0) == ($v$0$i | 0)) {
     $185 = $v$0$i + 20 | 0; //@line 14956
     $186 = HEAP32[$185 >> 2] | 0; //@line 14957
     if (($186 | 0) == 0) {
      $188 = $v$0$i + 16 | 0; //@line 14960
      $189 = HEAP32[$188 >> 2] | 0; //@line 14961
      if (($189 | 0) == 0) {
       $R$1$i = 0; //@line 14964
       break;
      } else {
       $R$0$i = $189; //@line 14967
       $RP$0$i = $188; //@line 14967
      }
     } else {
      $R$0$i = $186; //@line 14970
      $RP$0$i = $185; //@line 14970
     }
     while (1) {
      $191 = $R$0$i + 20 | 0; //@line 14973
      $192 = HEAP32[$191 >> 2] | 0; //@line 14974
      if (($192 | 0) != 0) {
       $RP$0$i = $191; //@line 14977
       $R$0$i = $192; //@line 14977
       continue;
      }
      $194 = $R$0$i + 16 | 0; //@line 14980
      $195 = HEAP32[$194 >> 2] | 0; //@line 14981
      if (($195 | 0) == 0) {
       break;
      } else {
       $R$0$i = $195; //@line 14986
       $RP$0$i = $194; //@line 14986
      }
     }
     if ($RP$0$i >>> 0 < $165 >>> 0) {
      _abort(); //@line 14992
     } else {
      HEAP32[$RP$0$i >> 2] = 0; //@line 14995
      $R$1$i = $R$0$i; //@line 14996
      break;
     }
    } else {
     $176 = HEAP32[$v$0$i + 8 >> 2] | 0; //@line 15001
     if ($176 >>> 0 < $165 >>> 0) {
      _abort(); //@line 15005
     }
     $179 = $176 + 12 | 0; //@line 15008
     if ((HEAP32[$179 >> 2] | 0) != ($v$0$i | 0)) {
      _abort(); //@line 15012
     }
     $182 = $173 + 8 | 0; //@line 15015
     if ((HEAP32[$182 >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$179 >> 2] = $173; //@line 15019
      HEAP32[$182 >> 2] = $176; //@line 15020
      $R$1$i = $173; //@line 15021
      break;
     } else {
      _abort(); //@line 15024
     }
    }
   } while (0);
   L78 : do {
    if (($171 | 0) != 0) {
     $201 = HEAP32[$v$0$i + 28 >> 2] | 0; //@line 15033
     $202 = 14336 + ($201 << 2) | 0; //@line 15034
     do {
      if (($v$0$i | 0) == (HEAP32[$202 >> 2] | 0)) {
       HEAP32[$202 >> 2] = $R$1$i; //@line 15039
       if (($R$1$i | 0) != 0) {
        break;
       }
       HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $201); //@line 15048
       break L78;
      } else {
       if ($171 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 15055
       }
       $212 = $171 + 16 | 0; //@line 15058
       if ((HEAP32[$212 >> 2] | 0) == ($v$0$i | 0)) {
        HEAP32[$212 >> 2] = $R$1$i; //@line 15062
       } else {
        HEAP32[$171 + 20 >> 2] = $R$1$i; //@line 15065
       }
       if (($R$1$i | 0) == 0) {
        break L78;
       }
      }
     } while (0);
     if ($R$1$i >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 15077
     }
     HEAP32[$R$1$i + 24 >> 2] = $171; //@line 15081
     $222 = HEAP32[$v$0$i + 16 >> 2] | 0; //@line 15083
     do {
      if (($222 | 0) != 0) {
       if ($222 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 15091
       } else {
        HEAP32[$R$1$i + 16 >> 2] = $222; //@line 15095
        HEAP32[$222 + 24 >> 2] = $R$1$i; //@line 15097
        break;
       }
      }
     } while (0);
     $230 = HEAP32[$v$0$i + 20 >> 2] | 0; //@line 15103
     if (($230 | 0) == 0) {
      break;
     }
     if ($230 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 15112
     } else {
      HEAP32[$R$1$i + 20 >> 2] = $230; //@line 15116
      HEAP32[$230 + 24 >> 2] = $R$1$i; //@line 15118
      break;
     }
    }
   } while (0);
   if ($rsize$0$i >>> 0 < 16) {
    $238 = $rsize$0$i + $5 | 0; //@line 15125
    HEAP32[$v$0$i + 4 >> 2] = $238 | 3; //@line 15128
    $242 = $164 + ($238 + 4) | 0; //@line 15131
    HEAP32[$242 >> 2] = HEAP32[$242 >> 2] | 1; //@line 15134
   } else {
    HEAP32[$v$0$i + 4 >> 2] = $5 | 3; //@line 15138
    HEAP32[$164 + ($5 | 4) >> 2] = $rsize$0$i | 1; //@line 15143
    HEAP32[$164 + ($rsize$0$i + $5) >> 2] = $rsize$0$i; //@line 15147
    $252 = HEAP32[14040 >> 2] | 0; //@line 15148
    if (($252 | 0) != 0) {
     $254 = HEAP32[14052 >> 2] | 0; //@line 15151
     $255 = $252 >>> 3; //@line 15152
     $256 = $255 << 1; //@line 15153
     $258 = 14072 + ($256 << 2) | 0; //@line 15155
     $259 = HEAP32[3508] | 0; //@line 15156
     $260 = 1 << $255; //@line 15157
     do {
      if (($259 & $260 | 0) == 0) {
       HEAP32[3508] = $259 | $260; //@line 15163
       $$pre$phi$iZ2D = 14072 + ($256 + 2 << 2) | 0; //@line 15166
       $F1$0$i = $258; //@line 15166
      } else {
       $264 = 14072 + ($256 + 2 << 2) | 0; //@line 15169
       $265 = HEAP32[$264 >> 2] | 0; //@line 15170
       if (!($265 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
        $$pre$phi$iZ2D = $264; //@line 15175
        $F1$0$i = $265; //@line 15175
        break;
       }
       _abort(); //@line 15178
      }
     } while (0);
     HEAP32[$$pre$phi$iZ2D >> 2] = $254; //@line 15182
     HEAP32[$F1$0$i + 12 >> 2] = $254; //@line 15184
     HEAP32[$254 + 8 >> 2] = $F1$0$i; //@line 15186
     HEAP32[$254 + 12 >> 2] = $258; //@line 15188
    }
    HEAP32[14040 >> 2] = $rsize$0$i; //@line 15190
    HEAP32[14052 >> 2] = $168; //@line 15191
   }
   $mem$0 = $v$0$i + 8 | 0; //@line 15195
   STACKTOP = sp; //@line 15196
   return $mem$0 | 0; //@line 15196
  } else {
   if ($bytes >>> 0 > 4294967231) {
    $nb$0 = -1; //@line 15200
    break;
   }
   $275 = $bytes + 11 | 0; //@line 15203
   $276 = $275 & -8; //@line 15204
   $277 = HEAP32[14036 >> 2] | 0; //@line 15205
   if (($277 | 0) == 0) {
    $nb$0 = $276; //@line 15208
    break;
   }
   $279 = 0 - $276 | 0; //@line 15211
   $280 = $275 >>> 8; //@line 15212
   do {
    if (($280 | 0) == 0) {
     $idx$0$i = 0; //@line 15216
    } else {
     if ($276 >>> 0 > 16777215) {
      $idx$0$i = 31; //@line 15220
      break;
     }
     $285 = ($280 + 1048320 | 0) >>> 16 & 8; //@line 15225
     $286 = $280 << $285; //@line 15226
     $289 = ($286 + 520192 | 0) >>> 16 & 4; //@line 15229
     $291 = $286 << $289; //@line 15231
     $294 = ($291 + 245760 | 0) >>> 16 & 2; //@line 15234
     $299 = 14 - ($289 | $285 | $294) + ($291 << $294 >>> 15) | 0; //@line 15239
     $idx$0$i = $276 >>> ($299 + 7 | 0) & 1 | $299 << 1; //@line 15245
    }
   } while (0);
   $306 = HEAP32[14336 + ($idx$0$i << 2) >> 2] | 0; //@line 15249
   L126 : do {
    if (($306 | 0) == 0) {
     $rsize$2$i = $279; //@line 15253
     $t$1$i = 0; //@line 15253
     $v$2$i = 0; //@line 15253
    } else {
     if (($idx$0$i | 0) == 31) {
      $311 = 0; //@line 15257
     } else {
      $311 = 25 - ($idx$0$i >>> 1) | 0; //@line 15261
     }
     $rsize$0$i15 = $279; //@line 15264
     $rst$0$i = 0; //@line 15264
     $sizebits$0$i = $276 << $311; //@line 15264
     $t$0$i14 = $306; //@line 15264
     $v$0$i16 = 0; //@line 15264
     while (1) {
      $315 = HEAP32[$t$0$i14 + 4 >> 2] & -8; //@line 15268
      $316 = $315 - $276 | 0; //@line 15269
      if ($316 >>> 0 < $rsize$0$i15 >>> 0) {
       if (($315 | 0) == ($276 | 0)) {
        $rsize$2$i = $316; //@line 15274
        $t$1$i = $t$0$i14; //@line 15274
        $v$2$i = $t$0$i14; //@line 15274
        break L126;
       } else {
        $rsize$1$i = $316; //@line 15277
        $v$1$i = $t$0$i14; //@line 15277
       }
      } else {
       $rsize$1$i = $rsize$0$i15; //@line 15280
       $v$1$i = $v$0$i16; //@line 15280
      }
      $320 = HEAP32[$t$0$i14 + 20 >> 2] | 0; //@line 15283
      $323 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0; //@line 15286
      $rst$1$i = ($320 | 0) == 0 | ($320 | 0) == ($323 | 0) ? $rst$0$i : $320; //@line 15290
      if (($323 | 0) == 0) {
       $rsize$2$i = $rsize$1$i; //@line 15294
       $t$1$i = $rst$1$i; //@line 15294
       $v$2$i = $v$1$i; //@line 15294
       break;
      } else {
       $rsize$0$i15 = $rsize$1$i; //@line 15297
       $rst$0$i = $rst$1$i; //@line 15297
       $sizebits$0$i = $sizebits$0$i << 1; //@line 15297
       $t$0$i14 = $323; //@line 15297
       $v$0$i16 = $v$1$i; //@line 15297
      }
     }
    }
   } while (0);
   if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
    $330 = 2 << $idx$0$i; //@line 15306
    $333 = $277 & ($330 | 0 - $330); //@line 15309
    if (($333 | 0) == 0) {
     $nb$0 = $276; //@line 15312
     break;
    }
    $337 = ($333 & 0 - $333) + -1 | 0; //@line 15317
    $339 = $337 >>> 12 & 16; //@line 15319
    $340 = $337 >>> $339; //@line 15320
    $342 = $340 >>> 5 & 8; //@line 15322
    $344 = $340 >>> $342; //@line 15324
    $346 = $344 >>> 2 & 4; //@line 15326
    $348 = $344 >>> $346; //@line 15328
    $350 = $348 >>> 1 & 2; //@line 15330
    $352 = $348 >>> $350; //@line 15332
    $354 = $352 >>> 1 & 1; //@line 15334
    $t$2$ph$i = HEAP32[14336 + (($342 | $339 | $346 | $350 | $354) + ($352 >>> $354) << 2) >> 2] | 0; //@line 15340
   } else {
    $t$2$ph$i = $t$1$i; //@line 15342
   }
   if (($t$2$ph$i | 0) == 0) {
    $rsize$3$lcssa$i = $rsize$2$i; //@line 15346
    $v$3$lcssa$i = $v$2$i; //@line 15346
   } else {
    $rsize$329$i = $rsize$2$i; //@line 15348
    $t$228$i = $t$2$ph$i; //@line 15348
    $v$330$i = $v$2$i; //@line 15348
    while (1) {
     $364 = (HEAP32[$t$228$i + 4 >> 2] & -8) - $276 | 0; //@line 15353
     $365 = $364 >>> 0 < $rsize$329$i >>> 0; //@line 15354
     $$rsize$3$i = $365 ? $364 : $rsize$329$i; //@line 15355
     $t$2$v$3$i = $365 ? $t$228$i : $v$330$i; //@line 15356
     $367 = HEAP32[$t$228$i + 16 >> 2] | 0; //@line 15358
     if (($367 | 0) != 0) {
      $v$330$i$phi = $t$2$v$3$i; //@line 15361
      $rsize$329$i$phi = $$rsize$3$i; //@line 15361
      $v$330$i = $v$330$i$phi; //@line 15361
      $t$228$i = $367; //@line 15361
      $rsize$329$i = $rsize$329$i$phi; //@line 15361
      continue;
     }
     $370 = HEAP32[$t$228$i + 20 >> 2] | 0; //@line 15365
     if (($370 | 0) == 0) {
      $rsize$3$lcssa$i = $$rsize$3$i; //@line 15368
      $v$3$lcssa$i = $t$2$v$3$i; //@line 15368
      break;
     } else {
      $v$330$i$phi = $t$2$v$3$i; //@line 15371
      $rsize$329$i$phi = $$rsize$3$i; //@line 15371
      $t$228$i = $370; //@line 15371
      $v$330$i = $v$330$i$phi; //@line 15371
      $rsize$329$i = $rsize$329$i$phi; //@line 15371
     }
    }
   }
   if (($v$3$lcssa$i | 0) == 0) {
    $nb$0 = $276; //@line 15377
    break;
   }
   if (!($rsize$3$lcssa$i >>> 0 < ((HEAP32[14040 >> 2] | 0) - $276 | 0) >>> 0)) {
    $nb$0 = $276; //@line 15384
    break;
   }
   $376 = $v$3$lcssa$i; //@line 15387
   $377 = HEAP32[14048 >> 2] | 0; //@line 15388
   if ($376 >>> 0 < $377 >>> 0) {
    _abort(); //@line 15391
   }
   $379 = $376 + $276 | 0; //@line 15394
   $380 = $379; //@line 15395
   if (!($376 >>> 0 < $379 >>> 0)) {
    _abort(); //@line 15398
   }
   $383 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0; //@line 15402
   $385 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0; //@line 15404
   do {
    if (($385 | 0) == ($v$3$lcssa$i | 0)) {
     $397 = $v$3$lcssa$i + 20 | 0; //@line 15408
     $398 = HEAP32[$397 >> 2] | 0; //@line 15409
     if (($398 | 0) == 0) {
      $400 = $v$3$lcssa$i + 16 | 0; //@line 15412
      $401 = HEAP32[$400 >> 2] | 0; //@line 15413
      if (($401 | 0) == 0) {
       $R$1$i20 = 0; //@line 15416
       break;
      } else {
       $R$0$i18 = $401; //@line 15419
       $RP$0$i17 = $400; //@line 15419
      }
     } else {
      $R$0$i18 = $398; //@line 15422
      $RP$0$i17 = $397; //@line 15422
     }
     while (1) {
      $403 = $R$0$i18 + 20 | 0; //@line 15425
      $404 = HEAP32[$403 >> 2] | 0; //@line 15426
      if (($404 | 0) != 0) {
       $RP$0$i17 = $403; //@line 15429
       $R$0$i18 = $404; //@line 15429
       continue;
      }
      $406 = $R$0$i18 + 16 | 0; //@line 15432
      $407 = HEAP32[$406 >> 2] | 0; //@line 15433
      if (($407 | 0) == 0) {
       break;
      } else {
       $R$0$i18 = $407; //@line 15438
       $RP$0$i17 = $406; //@line 15438
      }
     }
     if ($RP$0$i17 >>> 0 < $377 >>> 0) {
      _abort(); //@line 15444
     } else {
      HEAP32[$RP$0$i17 >> 2] = 0; //@line 15447
      $R$1$i20 = $R$0$i18; //@line 15448
      break;
     }
    } else {
     $388 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0; //@line 15453
     if ($388 >>> 0 < $377 >>> 0) {
      _abort(); //@line 15457
     }
     $391 = $388 + 12 | 0; //@line 15460
     if ((HEAP32[$391 >> 2] | 0) != ($v$3$lcssa$i | 0)) {
      _abort(); //@line 15464
     }
     $394 = $385 + 8 | 0; //@line 15467
     if ((HEAP32[$394 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$391 >> 2] = $385; //@line 15471
      HEAP32[$394 >> 2] = $388; //@line 15472
      $R$1$i20 = $385; //@line 15473
      break;
     } else {
      _abort(); //@line 15476
     }
    }
   } while (0);
   L176 : do {
    if (($383 | 0) != 0) {
     $413 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0; //@line 15485
     $414 = 14336 + ($413 << 2) | 0; //@line 15486
     do {
      if (($v$3$lcssa$i | 0) == (HEAP32[$414 >> 2] | 0)) {
       HEAP32[$414 >> 2] = $R$1$i20; //@line 15491
       if (($R$1$i20 | 0) != 0) {
        break;
       }
       HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $413); //@line 15500
       break L176;
      } else {
       if ($383 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 15507
       }
       $424 = $383 + 16 | 0; //@line 15510
       if ((HEAP32[$424 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
        HEAP32[$424 >> 2] = $R$1$i20; //@line 15514
       } else {
        HEAP32[$383 + 20 >> 2] = $R$1$i20; //@line 15517
       }
       if (($R$1$i20 | 0) == 0) {
        break L176;
       }
      }
     } while (0);
     if ($R$1$i20 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 15529
     }
     HEAP32[$R$1$i20 + 24 >> 2] = $383; //@line 15533
     $434 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0; //@line 15535
     do {
      if (($434 | 0) != 0) {
       if ($434 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 15543
       } else {
        HEAP32[$R$1$i20 + 16 >> 2] = $434; //@line 15547
        HEAP32[$434 + 24 >> 2] = $R$1$i20; //@line 15549
        break;
       }
      }
     } while (0);
     $442 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0; //@line 15555
     if (($442 | 0) == 0) {
      break;
     }
     if ($442 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 15564
     } else {
      HEAP32[$R$1$i20 + 20 >> 2] = $442; //@line 15568
      HEAP32[$442 + 24 >> 2] = $R$1$i20; //@line 15570
      break;
     }
    }
   } while (0);
   L204 : do {
    if ($rsize$3$lcssa$i >>> 0 < 16) {
     $450 = $rsize$3$lcssa$i + $276 | 0; //@line 15578
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $450 | 3; //@line 15581
     $454 = $376 + ($450 + 4) | 0; //@line 15584
     HEAP32[$454 >> 2] = HEAP32[$454 >> 2] | 1; //@line 15587
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $276 | 3; //@line 15591
     HEAP32[$376 + ($276 | 4) >> 2] = $rsize$3$lcssa$i | 1; //@line 15596
     HEAP32[$376 + ($rsize$3$lcssa$i + $276) >> 2] = $rsize$3$lcssa$i; //@line 15600
     $464 = $rsize$3$lcssa$i >>> 3; //@line 15601
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $466 = $464 << 1; //@line 15604
      $468 = 14072 + ($466 << 2) | 0; //@line 15606
      $469 = HEAP32[3508] | 0; //@line 15607
      $470 = 1 << $464; //@line 15608
      do {
       if (($469 & $470 | 0) == 0) {
        HEAP32[3508] = $469 | $470; //@line 15614
        $$pre$phi$i26Z2D = 14072 + ($466 + 2 << 2) | 0; //@line 15617
        $F5$0$i = $468; //@line 15617
       } else {
        $474 = 14072 + ($466 + 2 << 2) | 0; //@line 15620
        $475 = HEAP32[$474 >> 2] | 0; //@line 15621
        if (!($475 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
         $$pre$phi$i26Z2D = $474; //@line 15626
         $F5$0$i = $475; //@line 15626
         break;
        }
        _abort(); //@line 15629
       }
      } while (0);
      HEAP32[$$pre$phi$i26Z2D >> 2] = $380; //@line 15633
      HEAP32[$F5$0$i + 12 >> 2] = $380; //@line 15635
      HEAP32[$376 + ($276 + 8) >> 2] = $F5$0$i; //@line 15639
      HEAP32[$376 + ($276 + 12) >> 2] = $468; //@line 15643
      break;
     }
     $484 = $379; //@line 15646
     $485 = $rsize$3$lcssa$i >>> 8; //@line 15647
     do {
      if (($485 | 0) == 0) {
       $I7$0$i = 0; //@line 15651
      } else {
       if ($rsize$3$lcssa$i >>> 0 > 16777215) {
        $I7$0$i = 31; //@line 15655
        break;
       }
       $490 = ($485 + 1048320 | 0) >>> 16 & 8; //@line 15660
       $491 = $485 << $490; //@line 15661
       $494 = ($491 + 520192 | 0) >>> 16 & 4; //@line 15664
       $496 = $491 << $494; //@line 15666
       $499 = ($496 + 245760 | 0) >>> 16 & 2; //@line 15669
       $504 = 14 - ($494 | $490 | $499) + ($496 << $499 >>> 15) | 0; //@line 15674
       $I7$0$i = $rsize$3$lcssa$i >>> ($504 + 7 | 0) & 1 | $504 << 1; //@line 15680
      }
     } while (0);
     $510 = 14336 + ($I7$0$i << 2) | 0; //@line 15683
     HEAP32[$376 + ($276 + 28) >> 2] = $I7$0$i; //@line 15687
     HEAP32[$376 + ($276 + 20) >> 2] = 0; //@line 15693
     HEAP32[$376 + ($276 + 16) >> 2] = 0; //@line 15695
     $517 = HEAP32[14036 >> 2] | 0; //@line 15696
     $518 = 1 << $I7$0$i; //@line 15697
     if (($517 & $518 | 0) == 0) {
      HEAP32[14036 >> 2] = $517 | $518; //@line 15702
      HEAP32[$510 >> 2] = $484; //@line 15703
      HEAP32[$376 + ($276 + 24) >> 2] = $510; //@line 15708
      HEAP32[$376 + ($276 + 12) >> 2] = $484; //@line 15712
      HEAP32[$376 + ($276 + 8) >> 2] = $484; //@line 15716
      break;
     }
     $529 = HEAP32[$510 >> 2] | 0; //@line 15719
     if (($I7$0$i | 0) == 31) {
      $533 = 0; //@line 15722
     } else {
      $533 = 25 - ($I7$0$i >>> 1) | 0; //@line 15726
     }
     L225 : do {
      if ((HEAP32[$529 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
       $T$0$lcssa$i = $529; //@line 15734
      } else {
       $K12$025$i = $rsize$3$lcssa$i << $533; //@line 15737
       $T$024$i = $529; //@line 15737
       while (1) {
        $545 = $T$024$i + ($K12$025$i >>> 31 << 2) + 16 | 0; //@line 15740
        $546 = HEAP32[$545 >> 2] | 0; //@line 15741
        if (($546 | 0) == 0) {
         break;
        }
        if ((HEAP32[$546 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
         $T$0$lcssa$i = $546; //@line 15752
         break L225;
        } else {
         $K12$025$i = $K12$025$i << 1; //@line 15755
         $T$024$i = $546; //@line 15755
        }
       }
       if ($545 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 15762
       } else {
        HEAP32[$545 >> 2] = $484; //@line 15765
        HEAP32[$376 + ($276 + 24) >> 2] = $T$024$i; //@line 15769
        HEAP32[$376 + ($276 + 12) >> 2] = $484; //@line 15773
        HEAP32[$376 + ($276 + 8) >> 2] = $484; //@line 15777
        break L204;
       }
      }
     } while (0);
     $557 = $T$0$lcssa$i + 8 | 0; //@line 15782
     $558 = HEAP32[$557 >> 2] | 0; //@line 15783
     $560 = HEAP32[14048 >> 2] | 0; //@line 15785
     if ($T$0$lcssa$i >>> 0 < $560 >>> 0) {
      _abort(); //@line 15788
     }
     if ($558 >>> 0 < $560 >>> 0) {
      _abort(); //@line 15794
     } else {
      HEAP32[$558 + 12 >> 2] = $484; //@line 15798
      HEAP32[$557 >> 2] = $484; //@line 15799
      HEAP32[$376 + ($276 + 8) >> 2] = $558; //@line 15803
      HEAP32[$376 + ($276 + 12) >> 2] = $T$0$lcssa$i; //@line 15807
      HEAP32[$376 + ($276 + 24) >> 2] = 0; //@line 15811
      break;
     }
    }
   } while (0);
   $mem$0 = $v$3$lcssa$i + 8 | 0; //@line 15818
   STACKTOP = sp; //@line 15819
   return $mem$0 | 0; //@line 15819
  }
 } while (0);
 $573 = HEAP32[14040 >> 2] | 0; //@line 15822
 if (!($nb$0 >>> 0 > $573 >>> 0)) {
  $575 = $573 - $nb$0 | 0; //@line 15825
  $576 = HEAP32[14052 >> 2] | 0; //@line 15826
  if ($575 >>> 0 > 15) {
   $578 = $576; //@line 15829
   HEAP32[14052 >> 2] = $578 + $nb$0; //@line 15832
   HEAP32[14040 >> 2] = $575; //@line 15833
   HEAP32[$578 + ($nb$0 + 4) >> 2] = $575 | 1; //@line 15838
   HEAP32[$578 + $573 >> 2] = $575; //@line 15841
   HEAP32[$576 + 4 >> 2] = $nb$0 | 3; //@line 15844
  } else {
   HEAP32[14040 >> 2] = 0; //@line 15846
   HEAP32[14052 >> 2] = 0; //@line 15847
   HEAP32[$576 + 4 >> 2] = $573 | 3; //@line 15850
   $592 = $576 + ($573 + 4) | 0; //@line 15854
   HEAP32[$592 >> 2] = HEAP32[$592 >> 2] | 1; //@line 15857
  }
  $mem$0 = $576 + 8 | 0; //@line 15861
  STACKTOP = sp; //@line 15862
  return $mem$0 | 0; //@line 15862
 }
 $597 = HEAP32[14044 >> 2] | 0; //@line 15864
 if ($nb$0 >>> 0 < $597 >>> 0) {
  $599 = $597 - $nb$0 | 0; //@line 15867
  HEAP32[14044 >> 2] = $599; //@line 15868
  $600 = HEAP32[14056 >> 2] | 0; //@line 15869
  $601 = $600; //@line 15870
  HEAP32[14056 >> 2] = $601 + $nb$0; //@line 15873
  HEAP32[$601 + ($nb$0 + 4) >> 2] = $599 | 1; //@line 15878
  HEAP32[$600 + 4 >> 2] = $nb$0 | 3; //@line 15881
  $mem$0 = $600 + 8 | 0; //@line 15884
  STACKTOP = sp; //@line 15885
  return $mem$0 | 0; //@line 15885
 }
 do {
  if ((HEAP32[3626] | 0) == 0) {
   $613 = _sysconf(30) | 0; //@line 15891
   if (($613 + -1 & $613 | 0) == 0) {
    HEAP32[14512 >> 2] = $613; //@line 15896
    HEAP32[14508 >> 2] = $613; //@line 15897
    HEAP32[14516 >> 2] = -1; //@line 15898
    HEAP32[14520 >> 2] = -1; //@line 15899
    HEAP32[14524 >> 2] = 0; //@line 15900
    HEAP32[14476 >> 2] = 0; //@line 15901
    HEAP32[3626] = (_time(0) | 0) & -16 ^ 1431655768; //@line 15905
    break;
   } else {
    _abort(); //@line 15908
   }
  }
 } while (0);
 $620 = $nb$0 + 48 | 0; //@line 15913
 $621 = HEAP32[14512 >> 2] | 0; //@line 15914
 $622 = $nb$0 + 47 | 0; //@line 15915
 $623 = $621 + $622 | 0; //@line 15916
 $624 = 0 - $621 | 0; //@line 15917
 $625 = $623 & $624; //@line 15918
 if (!($625 >>> 0 > $nb$0 >>> 0)) {
  $mem$0 = 0; //@line 15921
  STACKTOP = sp; //@line 15922
  return $mem$0 | 0; //@line 15922
 }
 $627 = HEAP32[14472 >> 2] | 0; //@line 15924
 do {
  if (($627 | 0) != 0) {
   $629 = HEAP32[14464 >> 2] | 0; //@line 15928
   $630 = $629 + $625 | 0; //@line 15929
   if ($630 >>> 0 <= $629 >>> 0 | $630 >>> 0 > $627 >>> 0) {
    $mem$0 = 0; //@line 15934
   } else {
    break;
   }
   STACKTOP = sp; //@line 15938
   return $mem$0 | 0; //@line 15938
  }
 } while (0);
 L269 : do {
  if ((HEAP32[14476 >> 2] & 4 | 0) == 0) {
   $636 = HEAP32[14056 >> 2] | 0; //@line 15946
   L271 : do {
    if (($636 | 0) == 0) {
     label = 182; //@line 15950
    } else {
     $638 = $636; //@line 15952
     $sp$0$i$i = 14480 | 0; //@line 15953
     while (1) {
      $639 = $sp$0$i$i; //@line 15955
      $640 = HEAP32[$639 >> 2] | 0; //@line 15956
      if (!($640 >>> 0 > $638 >>> 0)) {
       $642 = $sp$0$i$i + 4 | 0; //@line 15959
       if (($640 + (HEAP32[$642 >> 2] | 0) | 0) >>> 0 > $638 >>> 0) {
        break;
       }
      }
      $647 = HEAP32[$sp$0$i$i + 8 >> 2] | 0; //@line 15968
      if (($647 | 0) == 0) {
       label = 182; //@line 15971
       break L271;
      } else {
       $sp$0$i$i = $647; //@line 15974
      }
     }
     if (($sp$0$i$i | 0) == 0) {
      label = 182; //@line 15979
      break;
     }
     $674 = $623 - (HEAP32[14044 >> 2] | 0) & $624; //@line 15984
     if (!($674 >>> 0 < 2147483647)) {
      $tsize$0323841$i = 0; //@line 15987
      break;
     }
     $676 = _sbrk($674 | 0) | 0; //@line 15990
     $680 = ($676 | 0) == ((HEAP32[$639 >> 2] | 0) + (HEAP32[$642 >> 2] | 0) | 0); //@line 15994
     $br$0$i = $676; //@line 15997
     $ssize$1$i = $674; //@line 15997
     $tbase$0$i = $680 ? $676 : -1; //@line 15997
     $tsize$0$i = $680 ? $674 : 0; //@line 15997
     label = 191; //@line 15998
    }
   } while (0);
   do {
    if ((label | 0) == 182) {
     $650 = _sbrk(0) | 0; //@line 16003
     if (($650 | 0) == (-1 | 0)) {
      $tsize$0323841$i = 0; //@line 16006
      break;
     }
     $652 = $650; //@line 16009
     $653 = HEAP32[14508 >> 2] | 0; //@line 16010
     $654 = $653 + -1 | 0; //@line 16011
     if (($654 & $652 | 0) == 0) {
      $ssize$0$i = $625; //@line 16015
     } else {
      $ssize$0$i = $625 - $652 + ($654 + $652 & 0 - $653) | 0; //@line 16022
     }
     $662 = HEAP32[14464 >> 2] | 0; //@line 16024
     $663 = $662 + $ssize$0$i | 0; //@line 16025
     if (!($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647)) {
      $tsize$0323841$i = 0; //@line 16030
      break;
     }
     $666 = HEAP32[14472 >> 2] | 0; //@line 16033
     if (($666 | 0) != 0) {
      if ($663 >>> 0 <= $662 >>> 0 | $663 >>> 0 > $666 >>> 0) {
       $tsize$0323841$i = 0; //@line 16040
       break;
      }
     }
     $670 = _sbrk($ssize$0$i | 0) | 0; //@line 16044
     $671 = ($670 | 0) == ($650 | 0); //@line 16045
     $br$0$i = $670; //@line 16048
     $ssize$1$i = $ssize$0$i; //@line 16048
     $tbase$0$i = $671 ? $650 : -1; //@line 16048
     $tsize$0$i = $671 ? $ssize$0$i : 0; //@line 16048
     label = 191; //@line 16049
    }
   } while (0);
   L291 : do {
    if ((label | 0) == 191) {
     $681 = 0 - $ssize$1$i | 0; //@line 16054
     if (($tbase$0$i | 0) != (-1 | 0)) {
      $tbase$247$i = $tbase$0$i; //@line 16057
      $tsize$246$i = $tsize$0$i; //@line 16057
      label = 202; //@line 16058
      break L269;
     }
     do {
      if (($br$0$i | 0) != (-1 | 0) & $ssize$1$i >>> 0 < 2147483647 & $ssize$1$i >>> 0 < $620 >>> 0) {
       $686 = HEAP32[14512 >> 2] | 0; //@line 16068
       $690 = $622 - $ssize$1$i + $686 & 0 - $686; //@line 16072
       if (!($690 >>> 0 < 2147483647)) {
        $ssize$2$i = $ssize$1$i; //@line 16075
        break;
       }
       if ((_sbrk($690 | 0) | 0) == (-1 | 0)) {
        _sbrk($681 | 0) | 0; //@line 16081
        $tsize$0323841$i = $tsize$0$i; //@line 16082
        break L291;
       } else {
        $ssize$2$i = $690 + $ssize$1$i | 0; //@line 16086
        break;
       }
      } else {
       $ssize$2$i = $ssize$1$i; //@line 16090
      }
     } while (0);
     if (($br$0$i | 0) == (-1 | 0)) {
      $tsize$0323841$i = $tsize$0$i; //@line 16095
     } else {
      $tbase$247$i = $br$0$i; //@line 16097
      $tsize$246$i = $ssize$2$i; //@line 16097
      label = 202; //@line 16098
      break L269;
     }
    }
   } while (0);
   HEAP32[14476 >> 2] = HEAP32[14476 >> 2] | 4; //@line 16105
   $tsize$1$i = $tsize$0323841$i; //@line 16106
   label = 199; //@line 16107
  } else {
   $tsize$1$i = 0; //@line 16109
   label = 199; //@line 16110
  }
 } while (0);
 do {
  if ((label | 0) == 199) {
   if (!($625 >>> 0 < 2147483647)) {
    break;
   }
   $699 = _sbrk($625 | 0) | 0; //@line 16119
   $700 = _sbrk(0) | 0; //@line 16120
   if (!(($700 | 0) != (-1 | 0) & ($699 | 0) != (-1 | 0) & $699 >>> 0 < $700 >>> 0)) {
    break;
   }
   $704 = $700 - $699 | 0; //@line 16131
   $706 = $704 >>> 0 > ($nb$0 + 40 | 0) >>> 0; //@line 16133
   if ($706) {
    $tbase$247$i = $699; //@line 16136
    $tsize$246$i = $706 ? $704 : $tsize$1$i; //@line 16136
    label = 202; //@line 16137
   }
  }
 } while (0);
 do {
  if ((label | 0) == 202) {
   $708 = (HEAP32[14464 >> 2] | 0) + $tsize$246$i | 0; //@line 16144
   HEAP32[14464 >> 2] = $708; //@line 16145
   if ($708 >>> 0 > (HEAP32[14468 >> 2] | 0) >>> 0) {
    HEAP32[14468 >> 2] = $708; //@line 16149
   }
   $711 = HEAP32[14056 >> 2] | 0; //@line 16151
   L311 : do {
    if (($711 | 0) == 0) {
     $713 = HEAP32[14048 >> 2] | 0; //@line 16155
     if (($713 | 0) == 0 | $tbase$247$i >>> 0 < $713 >>> 0) {
      HEAP32[14048 >> 2] = $tbase$247$i; //@line 16160
     }
     HEAP32[14480 >> 2] = $tbase$247$i; //@line 16162
     HEAP32[14484 >> 2] = $tsize$246$i; //@line 16163
     HEAP32[14492 >> 2] = 0; //@line 16164
     HEAP32[14068 >> 2] = HEAP32[3626]; //@line 16166
     HEAP32[14064 >> 2] = -1; //@line 16167
     $i$02$i$i = 0; //@line 16168
     do {
      $717 = $i$02$i$i << 1; //@line 16170
      $719 = 14072 + ($717 << 2) | 0; //@line 16172
      HEAP32[14072 + ($717 + 3 << 2) >> 2] = $719; //@line 16175
      HEAP32[14072 + ($717 + 2 << 2) >> 2] = $719; //@line 16178
      $i$02$i$i = $i$02$i$i + 1 | 0; //@line 16179
     } while (($i$02$i$i | 0) != 32);
     $725 = $tbase$247$i + 8 | 0; //@line 16189
     if (($725 & 7 | 0) == 0) {
      $730 = 0; //@line 16193
     } else {
      $730 = 0 - $725 & 7; //@line 16197
     }
     $733 = $tsize$246$i + -40 - $730 | 0; //@line 16201
     HEAP32[14056 >> 2] = $tbase$247$i + $730; //@line 16202
     HEAP32[14044 >> 2] = $733; //@line 16203
     HEAP32[$tbase$247$i + ($730 + 4) >> 2] = $733 | 1; //@line 16208
     HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40; //@line 16212
     HEAP32[14060 >> 2] = HEAP32[14520 >> 2]; //@line 16214
    } else {
     $sp$075$i = 14480 | 0; //@line 16216
     while (1) {
      $741 = HEAP32[$sp$075$i >> 2] | 0; //@line 16219
      $742 = $sp$075$i + 4 | 0; //@line 16220
      $743 = HEAP32[$742 >> 2] | 0; //@line 16221
      if (($tbase$247$i | 0) == ($741 + $743 | 0)) {
       label = 214; //@line 16225
       break;
      }
      $747 = HEAP32[$sp$075$i + 8 >> 2] | 0; //@line 16229
      if (($747 | 0) == 0) {
       break;
      } else {
       $sp$075$i = $747; //@line 16234
      }
     }
     do {
      if ((label | 0) == 214) {
       if ((HEAP32[$sp$075$i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       $753 = $711; //@line 16246
       if (!($753 >>> 0 >= $741 >>> 0 & $753 >>> 0 < $tbase$247$i >>> 0)) {
        break;
       }
       HEAP32[$742 >> 2] = $743 + $tsize$246$i; //@line 16254
       $758 = (HEAP32[14044 >> 2] | 0) + $tsize$246$i | 0; //@line 16256
       $760 = $711 + 8 | 0; //@line 16258
       if (($760 & 7 | 0) == 0) {
        $765 = 0; //@line 16262
       } else {
        $765 = 0 - $760 & 7; //@line 16266
       }
       $768 = $758 - $765 | 0; //@line 16270
       HEAP32[14056 >> 2] = $753 + $765; //@line 16271
       HEAP32[14044 >> 2] = $768; //@line 16272
       HEAP32[$753 + ($765 + 4) >> 2] = $768 | 1; //@line 16277
       HEAP32[$753 + ($758 + 4) >> 2] = 40; //@line 16281
       HEAP32[14060 >> 2] = HEAP32[14520 >> 2]; //@line 16283
       break L311;
      }
     } while (0);
     if ($tbase$247$i >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      HEAP32[14048 >> 2] = $tbase$247$i; //@line 16290
     }
     $777 = $tbase$247$i + $tsize$246$i | 0; //@line 16292
     $sp$168$i = 14480 | 0; //@line 16293
     while (1) {
      $778 = $sp$168$i; //@line 16295
      if ((HEAP32[$778 >> 2] | 0) == ($777 | 0)) {
       label = 224; //@line 16299
       break;
      }
      $782 = HEAP32[$sp$168$i + 8 >> 2] | 0; //@line 16303
      if (($782 | 0) == 0) {
       break;
      } else {
       $sp$168$i = $782; //@line 16308
      }
     }
     do {
      if ((label | 0) == 224) {
       if ((HEAP32[$sp$168$i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       HEAP32[$778 >> 2] = $tbase$247$i; //@line 16320
       $788 = $sp$168$i + 4 | 0; //@line 16321
       HEAP32[$788 >> 2] = (HEAP32[$788 >> 2] | 0) + $tsize$246$i; //@line 16324
       $792 = $tbase$247$i + 8 | 0; //@line 16326
       if (($792 & 7 | 0) == 0) {
        $797 = 0; //@line 16330
       } else {
        $797 = 0 - $792 & 7; //@line 16334
       }
       $800 = $tbase$247$i + ($tsize$246$i + 8) | 0; //@line 16339
       if (($800 & 7 | 0) == 0) {
        $805 = 0; //@line 16343
       } else {
        $805 = 0 - $800 & 7; //@line 16347
       }
       $806 = $tbase$247$i + ($805 + $tsize$246$i) | 0; //@line 16350
       $807 = $806; //@line 16351
       $$sum$i21$i = $797 + $nb$0 | 0; //@line 16355
       $811 = $tbase$247$i + $$sum$i21$i | 0; //@line 16356
       $812 = $811; //@line 16357
       $813 = $806 - ($tbase$247$i + $797) - $nb$0 | 0; //@line 16358
       HEAP32[$tbase$247$i + ($797 + 4) >> 2] = $nb$0 | 3; //@line 16363
       L348 : do {
        if (($807 | 0) == (HEAP32[14056 >> 2] | 0)) {
         $820 = (HEAP32[14044 >> 2] | 0) + $813 | 0; //@line 16369
         HEAP32[14044 >> 2] = $820; //@line 16370
         HEAP32[14056 >> 2] = $812; //@line 16371
         HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $820 | 1; //@line 16376
        } else {
         if (($807 | 0) == (HEAP32[14052 >> 2] | 0)) {
          $827 = (HEAP32[14040 >> 2] | 0) + $813 | 0; //@line 16382
          HEAP32[14040 >> 2] = $827; //@line 16383
          HEAP32[14052 >> 2] = $812; //@line 16384
          HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $827 | 1; //@line 16389
          HEAP32[$tbase$247$i + ($827 + $$sum$i21$i) >> 2] = $827; //@line 16393
          break;
         }
         $$sum2$i23$i = $tsize$246$i + 4 | 0; //@line 16396
         $835 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $805) >> 2] | 0; //@line 16400
         if (($835 & 3 | 0) == 1) {
          $838 = $835 & -8; //@line 16404
          $839 = $835 >>> 3; //@line 16405
          L356 : do {
           if ($835 >>> 0 < 256) {
            $843 = HEAP32[$tbase$247$i + (($805 | 8) + $tsize$246$i) >> 2] | 0; //@line 16413
            $846 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $805) >> 2] | 0; //@line 16418
            $849 = 14072 + ($839 << 1 << 2) | 0; //@line 16421
            do {
             if (($843 | 0) != ($849 | 0)) {
              if ($843 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16429
              }
              if ((HEAP32[$843 + 12 >> 2] | 0) == ($807 | 0)) {
               break;
              }
              _abort(); //@line 16438
             }
            } while (0);
            if (($846 | 0) == ($843 | 0)) {
             HEAP32[3508] = HEAP32[3508] & ~(1 << $839); //@line 16448
             break;
            }
            do {
             if (($846 | 0) == ($849 | 0)) {
              $$pre$phi58$i$iZ2D = $846 + 8 | 0; //@line 16455
             } else {
              if ($846 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16461
              }
              $866 = $846 + 8 | 0; //@line 16464
              if ((HEAP32[$866 >> 2] | 0) == ($807 | 0)) {
               $$pre$phi58$i$iZ2D = $866; //@line 16468
               break;
              }
              _abort(); //@line 16471
             }
            } while (0);
            HEAP32[$843 + 12 >> 2] = $846; //@line 16476
            HEAP32[$$pre$phi58$i$iZ2D >> 2] = $843; //@line 16477
           } else {
            $870 = $806; //@line 16479
            $873 = HEAP32[$tbase$247$i + (($805 | 24) + $tsize$246$i) >> 2] | 0; //@line 16484
            $876 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $805) >> 2] | 0; //@line 16489
            do {
             if (($876 | 0) == ($870 | 0)) {
              $$sum67$i$i = $805 | 16; //@line 16493
              $891 = $tbase$247$i + ($$sum2$i23$i + $$sum67$i$i) | 0; //@line 16496
              $892 = HEAP32[$891 >> 2] | 0; //@line 16497
              if (($892 | 0) == 0) {
               $895 = $tbase$247$i + ($$sum67$i$i + $tsize$246$i) | 0; //@line 16502
               $896 = HEAP32[$895 >> 2] | 0; //@line 16503
               if (($896 | 0) == 0) {
                $R$1$i$i = 0; //@line 16506
                break;
               } else {
                $R$0$i$i = $896; //@line 16509
                $RP$0$i$i = $895; //@line 16509
               }
              } else {
               $R$0$i$i = $892; //@line 16512
               $RP$0$i$i = $891; //@line 16512
              }
              while (1) {
               $898 = $R$0$i$i + 20 | 0; //@line 16515
               $899 = HEAP32[$898 >> 2] | 0; //@line 16516
               if (($899 | 0) != 0) {
                $RP$0$i$i = $898; //@line 16519
                $R$0$i$i = $899; //@line 16519
                continue;
               }
               $901 = $R$0$i$i + 16 | 0; //@line 16522
               $902 = HEAP32[$901 >> 2] | 0; //@line 16523
               if (($902 | 0) == 0) {
                break;
               } else {
                $R$0$i$i = $902; //@line 16528
                $RP$0$i$i = $901; //@line 16528
               }
              }
              if ($RP$0$i$i >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16535
              } else {
               HEAP32[$RP$0$i$i >> 2] = 0; //@line 16538
               $R$1$i$i = $R$0$i$i; //@line 16539
               break;
              }
             } else {
              $880 = HEAP32[$tbase$247$i + (($805 | 8) + $tsize$246$i) >> 2] | 0; //@line 16547
              if ($880 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16552
              }
              $884 = $880 + 12 | 0; //@line 16555
              if ((HEAP32[$884 >> 2] | 0) != ($870 | 0)) {
               _abort(); //@line 16559
              }
              $887 = $876 + 8 | 0; //@line 16562
              if ((HEAP32[$887 >> 2] | 0) == ($870 | 0)) {
               HEAP32[$884 >> 2] = $876; //@line 16566
               HEAP32[$887 >> 2] = $880; //@line 16567
               $R$1$i$i = $876; //@line 16568
               break;
              } else {
               _abort(); //@line 16571
              }
             }
            } while (0);
            if (($873 | 0) == 0) {
             break;
            }
            $910 = HEAP32[$tbase$247$i + ($tsize$246$i + 28 + $805) >> 2] | 0; //@line 16584
            $911 = 14336 + ($910 << 2) | 0; //@line 16585
            do {
             if (($870 | 0) == (HEAP32[$911 >> 2] | 0)) {
              HEAP32[$911 >> 2] = $R$1$i$i; //@line 16590
              if (($R$1$i$i | 0) != 0) {
               break;
              }
              HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $910); //@line 16599
              break L356;
             } else {
              if ($873 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16606
              }
              $921 = $873 + 16 | 0; //@line 16609
              if ((HEAP32[$921 >> 2] | 0) == ($870 | 0)) {
               HEAP32[$921 >> 2] = $R$1$i$i; //@line 16613
              } else {
               HEAP32[$873 + 20 >> 2] = $R$1$i$i; //@line 16616
              }
              if (($R$1$i$i | 0) == 0) {
               break L356;
              }
             }
            } while (0);
            if ($R$1$i$i >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
             _abort(); //@line 16628
            }
            HEAP32[$R$1$i$i + 24 >> 2] = $873; //@line 16632
            $$sum3132$i$i = $805 | 16; //@line 16633
            $932 = HEAP32[$tbase$247$i + ($$sum3132$i$i + $tsize$246$i) >> 2] | 0; //@line 16637
            do {
             if (($932 | 0) != 0) {
              if ($932 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
               _abort(); //@line 16645
              } else {
               HEAP32[$R$1$i$i + 16 >> 2] = $932; //@line 16649
               HEAP32[$932 + 24 >> 2] = $R$1$i$i; //@line 16651
               break;
              }
             }
            } while (0);
            $941 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $$sum3132$i$i) >> 2] | 0; //@line 16659
            if (($941 | 0) == 0) {
             break;
            }
            if ($941 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
             _abort(); //@line 16668
            } else {
             HEAP32[$R$1$i$i + 20 >> 2] = $941; //@line 16672
             HEAP32[$941 + 24 >> 2] = $R$1$i$i; //@line 16674
             break;
            }
           }
          } while (0);
          $oldfirst$0$i$i = $tbase$247$i + (($838 | $805) + $tsize$246$i) | 0; //@line 16684
          $qsize$0$i$i = $838 + $813 | 0; //@line 16684
         } else {
          $oldfirst$0$i$i = $807; //@line 16686
          $qsize$0$i$i = $813; //@line 16686
         }
         $951 = $oldfirst$0$i$i + 4 | 0; //@line 16688
         HEAP32[$951 >> 2] = HEAP32[$951 >> 2] & -2; //@line 16691
         HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $qsize$0$i$i | 1; //@line 16696
         HEAP32[$tbase$247$i + ($qsize$0$i$i + $$sum$i21$i) >> 2] = $qsize$0$i$i; //@line 16700
         $959 = $qsize$0$i$i >>> 3; //@line 16701
         if ($qsize$0$i$i >>> 0 < 256) {
          $961 = $959 << 1; //@line 16704
          $963 = 14072 + ($961 << 2) | 0; //@line 16706
          $964 = HEAP32[3508] | 0; //@line 16707
          $965 = 1 << $959; //@line 16708
          do {
           if (($964 & $965 | 0) == 0) {
            HEAP32[3508] = $964 | $965; //@line 16714
            $$pre$phi$i26$iZ2D = 14072 + ($961 + 2 << 2) | 0; //@line 16717
            $F4$0$i$i = $963; //@line 16717
           } else {
            $969 = 14072 + ($961 + 2 << 2) | 0; //@line 16720
            $970 = HEAP32[$969 >> 2] | 0; //@line 16721
            if (!($970 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
             $$pre$phi$i26$iZ2D = $969; //@line 16726
             $F4$0$i$i = $970; //@line 16726
             break;
            }
            _abort(); //@line 16729
           }
          } while (0);
          HEAP32[$$pre$phi$i26$iZ2D >> 2] = $812; //@line 16733
          HEAP32[$F4$0$i$i + 12 >> 2] = $812; //@line 16735
          HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $F4$0$i$i; //@line 16739
          HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $963; //@line 16743
          break;
         }
         $979 = $811; //@line 16746
         $980 = $qsize$0$i$i >>> 8; //@line 16747
         do {
          if (($980 | 0) == 0) {
           $I7$0$i$i = 0; //@line 16751
          } else {
           if ($qsize$0$i$i >>> 0 > 16777215) {
            $I7$0$i$i = 31; //@line 16755
            break;
           }
           $985 = ($980 + 1048320 | 0) >>> 16 & 8; //@line 16760
           $986 = $980 << $985; //@line 16761
           $989 = ($986 + 520192 | 0) >>> 16 & 4; //@line 16764
           $991 = $986 << $989; //@line 16766
           $994 = ($991 + 245760 | 0) >>> 16 & 2; //@line 16769
           $999 = 14 - ($989 | $985 | $994) + ($991 << $994 >>> 15) | 0; //@line 16774
           $I7$0$i$i = $qsize$0$i$i >>> ($999 + 7 | 0) & 1 | $999 << 1; //@line 16780
          }
         } while (0);
         $1005 = 14336 + ($I7$0$i$i << 2) | 0; //@line 16783
         HEAP32[$tbase$247$i + ($$sum$i21$i + 28) >> 2] = $I7$0$i$i; //@line 16787
         HEAP32[$tbase$247$i + ($$sum$i21$i + 20) >> 2] = 0; //@line 16793
         HEAP32[$tbase$247$i + ($$sum$i21$i + 16) >> 2] = 0; //@line 16795
         $1012 = HEAP32[14036 >> 2] | 0; //@line 16796
         $1013 = 1 << $I7$0$i$i; //@line 16797
         if (($1012 & $1013 | 0) == 0) {
          HEAP32[14036 >> 2] = $1012 | $1013; //@line 16802
          HEAP32[$1005 >> 2] = $979; //@line 16803
          HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $1005; //@line 16808
          HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $979; //@line 16812
          HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $979; //@line 16816
          break;
         }
         $1024 = HEAP32[$1005 >> 2] | 0; //@line 16819
         if (($I7$0$i$i | 0) == 31) {
          $1028 = 0; //@line 16822
         } else {
          $1028 = 25 - ($I7$0$i$i >>> 1) | 0; //@line 16826
         }
         L445 : do {
          if ((HEAP32[$1024 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
           $T$0$lcssa$i28$i = $1024; //@line 16834
          } else {
           $K8$052$i$i = $qsize$0$i$i << $1028; //@line 16837
           $T$051$i$i = $1024; //@line 16837
           while (1) {
            $1040 = $T$051$i$i + ($K8$052$i$i >>> 31 << 2) + 16 | 0; //@line 16840
            $1041 = HEAP32[$1040 >> 2] | 0; //@line 16841
            if (($1041 | 0) == 0) {
             break;
            }
            if ((HEAP32[$1041 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
             $T$0$lcssa$i28$i = $1041; //@line 16852
             break L445;
            } else {
             $K8$052$i$i = $K8$052$i$i << 1; //@line 16855
             $T$051$i$i = $1041; //@line 16855
            }
           }
           if ($1040 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
            _abort(); //@line 16862
           } else {
            HEAP32[$1040 >> 2] = $979; //@line 16865
            HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $T$051$i$i; //@line 16869
            HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $979; //@line 16873
            HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $979; //@line 16877
            break L348;
           }
          }
         } while (0);
         $1052 = $T$0$lcssa$i28$i + 8 | 0; //@line 16882
         $1053 = HEAP32[$1052 >> 2] | 0; //@line 16883
         $1055 = HEAP32[14048 >> 2] | 0; //@line 16885
         if ($T$0$lcssa$i28$i >>> 0 < $1055 >>> 0) {
          _abort(); //@line 16888
         }
         if ($1053 >>> 0 < $1055 >>> 0) {
          _abort(); //@line 16894
         } else {
          HEAP32[$1053 + 12 >> 2] = $979; //@line 16898
          HEAP32[$1052 >> 2] = $979; //@line 16899
          HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $1053; //@line 16903
          HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $T$0$lcssa$i28$i; //@line 16907
          HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = 0; //@line 16911
          break;
         }
        }
       } while (0);
       $mem$0 = $tbase$247$i + ($797 | 8) | 0; //@line 16918
       STACKTOP = sp; //@line 16919
       return $mem$0 | 0; //@line 16919
      }
     } while (0);
     $1067 = $711; //@line 16922
     $sp$0$i$i$i = 14480 | 0; //@line 16923
     while (1) {
      $1069 = HEAP32[$sp$0$i$i$i >> 2] | 0; //@line 16926
      if (!($1069 >>> 0 > $1067 >>> 0)) {
       $1072 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0; //@line 16930
       $1073 = $1069 + $1072 | 0; //@line 16931
       if ($1073 >>> 0 > $1067 >>> 0) {
        break;
       }
      }
      $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0; //@line 16939
     }
     $1078 = $1069 + ($1072 + -39) | 0; //@line 16944
     if (($1078 & 7 | 0) == 0) {
      $1083 = 0; //@line 16948
     } else {
      $1083 = 0 - $1078 & 7; //@line 16952
     }
     $1084 = $1069 + ($1072 + -47 + $1083) | 0; //@line 16955
     $1088 = $1084 >>> 0 < ($711 + 16 | 0) >>> 0 ? $1067 : $1084; //@line 16959
     $1089 = $1088 + 8 | 0; //@line 16960
     $1090 = $1089; //@line 16961
     $1093 = $tbase$247$i + 8 | 0; //@line 16964
     if (($1093 & 7 | 0) == 0) {
      $1098 = 0; //@line 16968
     } else {
      $1098 = 0 - $1093 & 7; //@line 16972
     }
     $1101 = $tsize$246$i + -40 - $1098 | 0; //@line 16976
     HEAP32[14056 >> 2] = $tbase$247$i + $1098; //@line 16977
     HEAP32[14044 >> 2] = $1101; //@line 16978
     HEAP32[$tbase$247$i + ($1098 + 4) >> 2] = $1101 | 1; //@line 16983
     HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40; //@line 16987
     HEAP32[14060 >> 2] = HEAP32[14520 >> 2]; //@line 16989
     HEAP32[$1088 + 4 >> 2] = 27; //@line 16992
     HEAP32[$1089 + 0 >> 2] = HEAP32[14480 >> 2]; //@line 16993
     HEAP32[$1089 + 4 >> 2] = HEAP32[14484 >> 2]; //@line 16993
     HEAP32[$1089 + 8 >> 2] = HEAP32[14488 >> 2]; //@line 16993
     HEAP32[$1089 + 12 >> 2] = HEAP32[14492 >> 2]; //@line 16993
     HEAP32[14480 >> 2] = $tbase$247$i; //@line 16994
     HEAP32[14484 >> 2] = $tsize$246$i; //@line 16995
     HEAP32[14492 >> 2] = 0; //@line 16996
     HEAP32[14488 >> 2] = $1090; //@line 16997
     $1111 = $1088 + 28 | 0; //@line 16999
     HEAP32[$1111 >> 2] = 7; //@line 17000
     if (($1088 + 32 | 0) >>> 0 < $1073 >>> 0) {
      $1114 = $1111; //@line 17004
      while (1) {
       $1115 = $1114 + 4 | 0; //@line 17006
       HEAP32[$1115 >> 2] = 7; //@line 17007
       if (($1114 + 8 | 0) >>> 0 < $1073 >>> 0) {
        $1114 = $1115; //@line 17012
       } else {
        break;
       }
      }
     }
     if (($1088 | 0) == ($1067 | 0)) {
      break;
     }
     $1122 = $1088 - $711 | 0; //@line 17024
     $1125 = $1067 + ($1122 + 4) | 0; //@line 17028
     HEAP32[$1125 >> 2] = HEAP32[$1125 >> 2] & -2; //@line 17031
     HEAP32[$711 + 4 >> 2] = $1122 | 1; //@line 17034
     HEAP32[$1067 + $1122 >> 2] = $1122; //@line 17036
     $1131 = $1122 >>> 3; //@line 17037
     if ($1122 >>> 0 < 256) {
      $1133 = $1131 << 1; //@line 17040
      $1135 = 14072 + ($1133 << 2) | 0; //@line 17042
      $1136 = HEAP32[3508] | 0; //@line 17043
      $1137 = 1 << $1131; //@line 17044
      do {
       if (($1136 & $1137 | 0) == 0) {
        HEAP32[3508] = $1136 | $1137; //@line 17050
        $$pre$phi$i$iZ2D = 14072 + ($1133 + 2 << 2) | 0; //@line 17053
        $F$0$i$i = $1135; //@line 17053
       } else {
        $1141 = 14072 + ($1133 + 2 << 2) | 0; //@line 17056
        $1142 = HEAP32[$1141 >> 2] | 0; //@line 17057
        if (!($1142 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
         $$pre$phi$i$iZ2D = $1141; //@line 17062
         $F$0$i$i = $1142; //@line 17062
         break;
        }
        _abort(); //@line 17065
       }
      } while (0);
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $711; //@line 17069
      HEAP32[$F$0$i$i + 12 >> 2] = $711; //@line 17071
      HEAP32[$711 + 8 >> 2] = $F$0$i$i; //@line 17073
      HEAP32[$711 + 12 >> 2] = $1135; //@line 17075
      break;
     }
     $1149 = $711; //@line 17078
     $1150 = $1122 >>> 8; //@line 17079
     do {
      if (($1150 | 0) == 0) {
       $I1$0$i$i = 0; //@line 17083
      } else {
       if ($1122 >>> 0 > 16777215) {
        $I1$0$i$i = 31; //@line 17087
        break;
       }
       $1155 = ($1150 + 1048320 | 0) >>> 16 & 8; //@line 17092
       $1156 = $1150 << $1155; //@line 17093
       $1159 = ($1156 + 520192 | 0) >>> 16 & 4; //@line 17096
       $1161 = $1156 << $1159; //@line 17098
       $1164 = ($1161 + 245760 | 0) >>> 16 & 2; //@line 17101
       $1169 = 14 - ($1159 | $1155 | $1164) + ($1161 << $1164 >>> 15) | 0; //@line 17106
       $I1$0$i$i = $1122 >>> ($1169 + 7 | 0) & 1 | $1169 << 1; //@line 17112
      }
     } while (0);
     $1175 = 14336 + ($I1$0$i$i << 2) | 0; //@line 17115
     HEAP32[$711 + 28 >> 2] = $I1$0$i$i; //@line 17118
     HEAP32[$711 + 20 >> 2] = 0; //@line 17120
     HEAP32[$711 + 16 >> 2] = 0; //@line 17122
     $1179 = HEAP32[14036 >> 2] | 0; //@line 17123
     $1180 = 1 << $I1$0$i$i; //@line 17124
     if (($1179 & $1180 | 0) == 0) {
      HEAP32[14036 >> 2] = $1179 | $1180; //@line 17129
      HEAP32[$1175 >> 2] = $1149; //@line 17130
      HEAP32[$711 + 24 >> 2] = $1175; //@line 17133
      HEAP32[$711 + 12 >> 2] = $711; //@line 17135
      HEAP32[$711 + 8 >> 2] = $711; //@line 17137
      break;
     }
     $1187 = HEAP32[$1175 >> 2] | 0; //@line 17140
     if (($I1$0$i$i | 0) == 31) {
      $1191 = 0; //@line 17143
     } else {
      $1191 = 25 - ($I1$0$i$i >>> 1) | 0; //@line 17147
     }
     L499 : do {
      if ((HEAP32[$1187 + 4 >> 2] & -8 | 0) == ($1122 | 0)) {
       $T$0$lcssa$i$i = $1187; //@line 17155
      } else {
       $K2$014$i$i = $1122 << $1191; //@line 17158
       $T$013$i$i = $1187; //@line 17158
       while (1) {
        $1203 = $T$013$i$i + ($K2$014$i$i >>> 31 << 2) + 16 | 0; //@line 17161
        $1204 = HEAP32[$1203 >> 2] | 0; //@line 17162
        if (($1204 | 0) == 0) {
         break;
        }
        if ((HEAP32[$1204 + 4 >> 2] & -8 | 0) == ($1122 | 0)) {
         $T$0$lcssa$i$i = $1204; //@line 17173
         break L499;
        } else {
         $K2$014$i$i = $K2$014$i$i << 1; //@line 17176
         $T$013$i$i = $1204; //@line 17176
        }
       }
       if ($1203 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17183
       } else {
        HEAP32[$1203 >> 2] = $1149; //@line 17186
        HEAP32[$711 + 24 >> 2] = $T$013$i$i; //@line 17189
        HEAP32[$711 + 12 >> 2] = $711; //@line 17191
        HEAP32[$711 + 8 >> 2] = $711; //@line 17193
        break L311;
       }
      }
     } while (0);
     $1212 = $T$0$lcssa$i$i + 8 | 0; //@line 17198
     $1213 = HEAP32[$1212 >> 2] | 0; //@line 17199
     $1215 = HEAP32[14048 >> 2] | 0; //@line 17201
     if ($T$0$lcssa$i$i >>> 0 < $1215 >>> 0) {
      _abort(); //@line 17204
     }
     if ($1213 >>> 0 < $1215 >>> 0) {
      _abort(); //@line 17210
     } else {
      HEAP32[$1213 + 12 >> 2] = $1149; //@line 17214
      HEAP32[$1212 >> 2] = $1149; //@line 17215
      HEAP32[$711 + 8 >> 2] = $1213; //@line 17218
      HEAP32[$711 + 12 >> 2] = $T$0$lcssa$i$i; //@line 17221
      HEAP32[$711 + 24 >> 2] = 0; //@line 17223
      break;
     }
    }
   } while (0);
   $1223 = HEAP32[14044 >> 2] | 0; //@line 17228
   if (!($1223 >>> 0 > $nb$0 >>> 0)) {
    break;
   }
   $1225 = $1223 - $nb$0 | 0; //@line 17233
   HEAP32[14044 >> 2] = $1225; //@line 17234
   $1226 = HEAP32[14056 >> 2] | 0; //@line 17235
   $1227 = $1226; //@line 17236
   HEAP32[14056 >> 2] = $1227 + $nb$0; //@line 17239
   HEAP32[$1227 + ($nb$0 + 4) >> 2] = $1225 | 1; //@line 17244
   HEAP32[$1226 + 4 >> 2] = $nb$0 | 3; //@line 17247
   $mem$0 = $1226 + 8 | 0; //@line 17250
   STACKTOP = sp; //@line 17251
   return $mem$0 | 0; //@line 17251
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 17255
 $mem$0 = 0; //@line 17256
 STACKTOP = sp; //@line 17257
 return $mem$0 | 0; //@line 17257
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0, $$465 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre574 = 0, $105 = 0, $106 = 0, $11 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $134 = 0, $135 = 0, $137 = 0, $15 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $177 = 0, $179 = 0, $183 = 0, $189 = 0, $19 = 0, $194 = 0, $199 = 0, $2 = 0, $201 = 0, $203 = 0, $206 = 0, $21 = 0, $211 = 0, $214 = 0, $22 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $232 = 0, $238 = 0, $24 = 0, $244 = 0, $247 = 0, $25 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $265 = 0, $27 = 0, $271 = 0, $273 = 0, $275 = 0, $277 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $297 = 0, $30 = 0, $303 = 0, $309 = 0, $31 = 0, $32 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $35 = 0, $351 = 0, $352 = 0, $354 = 0, $363 = 0, $364 = 0, $366 = 0, $376 = 0, $377 = 0, $379 = 0, $383 = 0, $385 = 0, $386 = 0, $389 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $396 = 0, $397 = 0, $4 = 0, $401 = 0, $404 = 0, $405 = 0, $406 = 0, $413 = 0, $414 = 0, $417 = 0, $430 = 0, $431 = 0, $445 = 0, $446 = 0, $448 = 0, $462 = 0, $463 = 0, $464 = 0, $474 = 0, $48 = 0, $481 = 0, $482 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $50 = 0, $504 = 0, $505 = 0, $506 = 0, $519 = 0, $521 = 0, $532 = 0, $539 = 0, $542 = 0, $543 = 0, $546 = 0, $550 = 0, $554 = 0, $555 = 0, $558 = 0, $559 = 0, $562 = 0, $568 = 0, $577 = 0, $581 = 0, $582 = 0, $583 = 0, $588 = 0, $589 = 0, $590 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $613 = 0, $617 = 0, $618 = 0, $619 = 0, $624 = 0, $625 = 0, $626 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $633 = 0, $646 = 0, $647 = 0, $648 = 0, $661 = 0, $662 = 0, $664 = 0, $67 = 0, $680 = 0, $681 = 0, $682 = 0, $69 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $7 = 0, $707 = 0, $708 = 0, $722 = 0, $723 = 0, $725 = 0, $745 = 0, $748 = 0, $749 = 0, $752 = 0, $756 = 0, $760 = 0, $761 = 0, $764 = 0, $765 = 0, $766 = 0, $768 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $795 = 0, $8 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $808 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $819 = 0, $821 = 0, $834 = 0, $835 = 0, $836 = 0, $849 = 0, $851 = 0, $867 = 0, $87 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0, $89 = 0, $890 = 0, $9 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free208 = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16745
 STACKTOP = STACKTOP + 408 | 0; //@line 16746
 $__gbuf = sp; //@line 16747
 $__pat = sp + 400 | 0; //@line 16748
 $tmpcast = $__pat; //@line 16749
 $__dp = STACKTOP; //@line 16750
 STACKTOP = STACKTOP + 8 | 0; //@line 16750
 $__ts = STACKTOP; //@line 16751
 STACKTOP = STACKTOP + 8 | 0; //@line 16751
 $__grp = STACKTOP; //@line 16752
 STACKTOP = STACKTOP + 16 | 0; //@line 16752
 $__sym = STACKTOP; //@line 16753
 STACKTOP = STACKTOP + 16 | 0; //@line 16753
 $__psn = STACKTOP; //@line 16754
 STACKTOP = STACKTOP + 16 | 0; //@line 16754
 $__nsn = STACKTOP; //@line 16755
 STACKTOP = STACKTOP + 16 | 0; //@line 16755
 $__spaces = STACKTOP; //@line 16756
 STACKTOP = STACKTOP + 16 | 0; //@line 16756
 $__fd = STACKTOP; //@line 16757
 STACKTOP = STACKTOP + 8 | 0; //@line 16757
 $__et = STACKTOP; //@line 16758
 STACKTOP = STACKTOP + 8 | 0; //@line 16758
 $2 = $__gbuf; //@line 16760
 HEAP32[$__pat >> 2] = 0; //@line 16761
 $this2$i$i$i = $__grp; //@line 16762
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16763
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16763
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16763
 $this2$i$i$i9 = $__sym; //@line 16764
 HEAP32[$this2$i$i$i9 + 0 >> 2] = 0; //@line 16765
 HEAP32[$this2$i$i$i9 + 4 >> 2] = 0; //@line 16765
 HEAP32[$this2$i$i$i9 + 8 >> 2] = 0; //@line 16765
 $this2$i$i$i10 = $__psn; //@line 16766
 HEAP32[$this2$i$i$i10 + 0 >> 2] = 0; //@line 16767
 HEAP32[$this2$i$i$i10 + 4 >> 2] = 0; //@line 16767
 HEAP32[$this2$i$i$i10 + 8 >> 2] = 0; //@line 16767
 $this2$i$i$i12 = $__nsn; //@line 16768
 HEAP32[$this2$i$i$i12 + 0 >> 2] = 0; //@line 16769
 HEAP32[$this2$i$i$i12 + 4 >> 2] = 0; //@line 16769
 HEAP32[$this2$i$i$i12 + 8 >> 2] = 0; //@line 16769
 $this2$i$i$i15 = $__spaces; //@line 16770
 HEAP32[$this2$i$i$i15 + 0 >> 2] = 0; //@line 16771
 HEAP32[$this2$i$i$i15 + 4 >> 2] = 0; //@line 16771
 HEAP32[$this2$i$i$i15 + 8 >> 2] = 0; //@line 16771
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd); //@line 16772
 $4 = $__wb; //@line 16774
 HEAP32[$__wn >> 2] = HEAP32[$4 >> 2]; //@line 16776
 $6 = $__b; //@line 16777
 $7 = $__e; //@line 16778
 $8 = $__pat; //@line 16779
 $9 = $__ct + 8 | 0; //@line 16780
 $11 = $__nsn + 1 | 0; //@line 16782
 $12 = $__nsn + 4 | 0; //@line 16783
 $13 = $__nsn + 8 | 0; //@line 16784
 $15 = $__psn + 1 | 0; //@line 16786
 $16 = $__psn + 4 | 0; //@line 16787
 $17 = $__psn + 8 | 0; //@line 16788
 $19 = ($__flags & 512 | 0) != 0; //@line 16790
 $21 = $__sym + 1 | 0; //@line 16792
 $22 = $__sym + 8 | 0; //@line 16793
 $23 = $__sym + 4 | 0; //@line 16794
 $24 = $__spaces; //@line 16795
 $25 = $24 + 1 | 0; //@line 16796
 $26 = $__spaces + 8 | 0; //@line 16797
 $27 = $__spaces + 4 | 0; //@line 16798
 $28 = $8 + 3 | 0; //@line 16799
 $29 = $__wb + 4 | 0; //@line 16800
 $30 = $__grp + 4 | 0; //@line 16801
 $31 = $__gbuf + 400 | 0; //@line 16802
 $32 = $2; //@line 16802
 $33 = $2; //@line 16802
 $34 = $__we; //@line 16802
 $__p$0353 = 0; //@line 16802
 $__trailing_sign$0355 = 0; //@line 16802
 $free202349 = 127; //@line 16802
 L1 : while (1) {
  $35 = HEAP32[$6 >> 2] | 0; //@line 16804
  do {
   if (($35 | 0) == 0) {
    $48 = 0; //@line 16808
   } else {
    if ((HEAP32[$35 + 12 >> 2] | 0) != (HEAP32[$35 + 16 >> 2] | 0)) {
     $48 = $35; //@line 16816
     break;
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0) == -1) {
     HEAP32[$6 >> 2] = 0; //@line 16826
     $48 = 0; //@line 16827
     break;
    } else {
     $48 = HEAP32[$6 >> 2] | 0; //@line 16831
     break;
    }
   }
  } while (0);
  $49 = ($48 | 0) == 0; //@line 16836
  $50 = HEAP32[$7 >> 2] | 0; //@line 16837
  do {
   if (($50 | 0) == 0) {
    label = 12; //@line 16841
   } else {
    if ((HEAP32[$50 + 12 >> 2] | 0) != (HEAP32[$50 + 16 >> 2] | 0)) {
     if ($49) {
      $63 = $50; //@line 16850
      break;
     } else {
      $$lcssa293 = $33; //@line 16853
      $$lcssa309 = $32; //@line 16853
      $__trailing_sign$0$lcssa = $__trailing_sign$0355; //@line 16853
      $free202$lcssa = $free202349; //@line 16853
      label = 269; //@line 16854
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 127]($50) | 0) == -1) {
     HEAP32[$7 >> 2] = 0; //@line 16865
     label = 12; //@line 16866
     break;
    } else {
     if ($49) {
      $63 = $50; //@line 16870
      break;
     } else {
      $$lcssa293 = $33; //@line 16873
      $$lcssa309 = $32; //@line 16873
      $__trailing_sign$0$lcssa = $__trailing_sign$0355; //@line 16873
      $free202$lcssa = $free202349; //@line 16873
      label = 269; //@line 16874
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0; //@line 16881
   if ($49) {
    $$lcssa293 = $33; //@line 16883
    $$lcssa309 = $32; //@line 16883
    $__trailing_sign$0$lcssa = $__trailing_sign$0355; //@line 16883
    $free202$lcssa = $free202349; //@line 16883
    label = 269; //@line 16884
    break;
   } else {
    $63 = 0; //@line 16887
   }
  }
  L21 : do {
   switch (HEAP8[$8 + $__p$0353 | 0] | 0) {
   case 1:
    {
     if (($__p$0353 | 0) == 3) {
      $$lcssa293 = $33; //@line 16898
      $$lcssa309 = $32; //@line 16898
      $__trailing_sign$0$lcssa = $__trailing_sign$0355; //@line 16898
      $free202$lcssa = $free202349; //@line 16898
      label = 269; //@line 16899
      break L1;
     }
     $67 = HEAP32[$6 >> 2] | 0; //@line 16902
     $69 = HEAP32[$67 + 12 >> 2] | 0; //@line 16904
     if (($69 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) {
      $$0$i$i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($67) | 0; //@line 16914
     } else {
      $$0$i$i29 = HEAPU8[$69] | 0; //@line 16918
     }
     if (!(($$0$i$i29 & 255) << 24 >> 24 > -1)) {
      label = 25; //@line 16923
      break L1;
     }
     if ((HEAP16[(HEAP32[$9 >> 2] | 0) + ($$0$i$i29 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      label = 25; //@line 16934
      break L1;
     }
     $87 = HEAP32[$6 >> 2] | 0; //@line 16937
     $88 = $87 + 12 | 0; //@line 16938
     $89 = HEAP32[$88 >> 2] | 0; //@line 16939
     if (($89 | 0) == (HEAP32[$87 + 16 >> 2] | 0)) {
      $$0$i$i32 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$87 >> 2] | 0) + 40 >> 2] & 127]($87) | 0; //@line 16949
     } else {
      HEAP32[$88 >> 2] = $89 + 1; //@line 16952
      $$0$i$i32 = HEAPU8[$89] | 0; //@line 16955
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i32 & 255); //@line 16958
     label = 26; //@line 16959
     break;
    }
   case 0:
    {
     label = 26; //@line 16963
     break;
    }
   case 3:
    {
     $170 = HEAP8[$this2$i$i$i10] | 0; //@line 16967
     $172 = ($170 & 1) == 0; //@line 16969
     if ($172) {
      $176 = ($170 & 255) >>> 1; //@line 16973
     } else {
      $176 = HEAP32[$16 >> 2] | 0; //@line 16976
     }
     $177 = HEAP8[$this2$i$i$i12] | 0; //@line 16978
     $179 = ($177 & 1) == 0; //@line 16980
     if ($179) {
      $183 = ($177 & 255) >>> 1; //@line 16984
     } else {
      $183 = HEAP32[$12 >> 2] | 0; //@line 16987
     }
     if (($176 | 0) == (0 - $183 | 0)) {
      $801 = $34; //@line 16992
      $802 = $33; //@line 16992
      $803 = $32; //@line 16992
      $804 = $31; //@line 16992
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 16992
      $free203 = $free202349; //@line 16992
      break L21;
     }
     if ($172) {
      $189 = ($170 & 255) >>> 1; //@line 16998
     } else {
      $189 = HEAP32[$16 >> 2] | 0; //@line 17001
     }
     do {
      if (($189 | 0) != 0) {
       if ($179) {
        $194 = ($177 & 255) >>> 1; //@line 17009
       } else {
        $194 = HEAP32[$12 >> 2] | 0; //@line 17012
       }
       if (($194 | 0) == 0) {
        break;
       }
       $273 = HEAP32[$6 >> 2] | 0; //@line 17018
       $275 = HEAP32[$273 + 12 >> 2] | 0; //@line 17020
       $277 = HEAP32[$273 + 16 >> 2] | 0; //@line 17022
       if (($275 | 0) == ($277 | 0)) {
        $283 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$273 >> 2] | 0) + 36 >> 2] & 127]($273) | 0; //@line 17029
        $$pre574 = HEAP32[$6 >> 2] | 0; //@line 17031
        $$0$i$i96 = $283; //@line 17036
        $286 = HEAP32[$$pre574 + 16 >> 2] | 0; //@line 17036
        $287 = HEAP32[$$pre574 + 12 >> 2] | 0; //@line 17036
        $288 = $$pre574; //@line 17036
        $289 = HEAP8[$this2$i$i$i10] | 0; //@line 17036
       } else {
        $$0$i$i96 = HEAPU8[$275] | 0; //@line 17040
        $286 = $277; //@line 17040
        $287 = $275; //@line 17040
        $288 = $273; //@line 17040
        $289 = $170; //@line 17040
       }
       $296 = $288 + 12 | 0; //@line 17049
       $297 = ($287 | 0) == ($286 | 0); //@line 17050
       if (($$0$i$i96 & 255) << 24 >> 24 == (HEAP8[($289 & 1) == 0 ? $15 : HEAP32[$17 >> 2] | 0] | 0)) {
        if ($297) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$288 >> 2] | 0) + 40 >> 2] & 127]($288) | 0; //@line 17057
        } else {
         HEAP32[$296 >> 2] = $287 + 1; //@line 17060
        }
        $303 = HEAP8[$this2$i$i$i10] | 0; //@line 17062
        if (($303 & 1) == 0) {
         $309 = ($303 & 255) >>> 1; //@line 17068
        } else {
         $309 = HEAP32[$16 >> 2] | 0; //@line 17071
        }
        $801 = $34; //@line 17075
        $802 = $33; //@line 17075
        $803 = $32; //@line 17075
        $804 = $31; //@line 17075
        $__trailing_sign$1 = $309 >>> 0 > 1 ? $__psn : $__trailing_sign$0355; //@line 17075
        $free203 = $free202349; //@line 17075
        break L21;
       }
       if ($297) {
        $$0$i$i114 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$288 >> 2] | 0) + 36 >> 2] & 127]($288) | 0; //@line 17084
       } else {
        $$0$i$i114 = HEAPU8[$287] | 0; //@line 17088
       }
       if (!(($$0$i$i114 & 255) << 24 >> 24 == (HEAP8[(HEAP8[$this2$i$i$i12] & 1) == 0 ? $11 : HEAP32[$13 >> 2] | 0] | 0))) {
        label = 112; //@line 17099
        break L1;
       }
       $325 = HEAP32[$6 >> 2] | 0; //@line 17102
       $326 = $325 + 12 | 0; //@line 17103
       $327 = HEAP32[$326 >> 2] | 0; //@line 17104
       if (($327 | 0) == (HEAP32[$325 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$325 >> 2] | 0) + 40 >> 2] & 127]($325) | 0; //@line 17113
       } else {
        HEAP32[$326 >> 2] = $327 + 1; //@line 17116
       }
       HEAP8[$__neg] = 1; //@line 17118
       $336 = HEAP8[$this2$i$i$i12] | 0; //@line 17119
       if (($336 & 1) == 0) {
        $342 = ($336 & 255) >>> 1; //@line 17125
       } else {
        $342 = HEAP32[$12 >> 2] | 0; //@line 17128
       }
       $801 = $34; //@line 17132
       $802 = $33; //@line 17132
       $803 = $32; //@line 17132
       $804 = $31; //@line 17132
       $__trailing_sign$1 = $342 >>> 0 > 1 ? $__nsn : $__trailing_sign$0355; //@line 17132
       $free203 = $free202349; //@line 17132
       break L21;
      }
     } while (0);
     if ($172) {
      $199 = ($170 & 255) >>> 1; //@line 17139
     } else {
      $199 = HEAP32[$16 >> 2] | 0; //@line 17142
     }
     $201 = HEAP32[$6 >> 2] | 0; //@line 17145
     $203 = HEAP32[$201 + 12 >> 2] | 0; //@line 17147
     $206 = ($203 | 0) == (HEAP32[$201 + 16 >> 2] | 0); //@line 17150
     if (($199 | 0) == 0) {
      if ($206) {
       $244 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$201 >> 2] | 0) + 36 >> 2] & 127]($201) | 0; //@line 17157
       $$0$i$i84 = $244; //@line 17159
       $247 = HEAP8[$this2$i$i$i12] | 0; //@line 17159
      } else {
       $$0$i$i84 = HEAPU8[$203] | 0; //@line 17163
       $247 = $177; //@line 17163
      }
      if (!(($$0$i$i84 & 255) << 24 >> 24 == (HEAP8[($247 & 1) == 0 ? $11 : HEAP32[$13 >> 2] | 0] | 0))) {
       $801 = $34; //@line 17173
       $802 = $33; //@line 17173
       $803 = $32; //@line 17173
       $804 = $31; //@line 17173
       $__trailing_sign$1 = $__trailing_sign$0355; //@line 17173
       $free203 = $free202349; //@line 17173
       break L21;
      }
      $254 = HEAP32[$6 >> 2] | 0; //@line 17176
      $255 = $254 + 12 | 0; //@line 17177
      $256 = HEAP32[$255 >> 2] | 0; //@line 17178
      if (($256 | 0) == (HEAP32[$254 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$254 >> 2] | 0) + 40 >> 2] & 127]($254) | 0; //@line 17187
      } else {
       HEAP32[$255 >> 2] = $256 + 1; //@line 17190
      }
      HEAP8[$__neg] = 1; //@line 17192
      $265 = HEAP8[$this2$i$i$i12] | 0; //@line 17193
      if (($265 & 1) == 0) {
       $271 = ($265 & 255) >>> 1; //@line 17199
      } else {
       $271 = HEAP32[$12 >> 2] | 0; //@line 17202
      }
      $801 = $34; //@line 17206
      $802 = $33; //@line 17206
      $803 = $32; //@line 17206
      $804 = $31; //@line 17206
      $__trailing_sign$1 = $271 >>> 0 > 1 ? $__nsn : $__trailing_sign$0355; //@line 17206
      $free203 = $free202349; //@line 17206
      break L21;
     }
     if ($206) {
      $211 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$201 >> 2] | 0) + 36 >> 2] & 127]($201) | 0; //@line 17214
      $$0$i$i67 = $211; //@line 17216
      $214 = HEAP8[$this2$i$i$i10] | 0; //@line 17216
     } else {
      $$0$i$i67 = HEAPU8[$203] | 0; //@line 17220
      $214 = $170; //@line 17220
     }
     if (!(($$0$i$i67 & 255) << 24 >> 24 == (HEAP8[($214 & 1) == 0 ? $15 : HEAP32[$17 >> 2] | 0] | 0))) {
      HEAP8[$__neg] = 1; //@line 17230
      $801 = $34; //@line 17231
      $802 = $33; //@line 17231
      $803 = $32; //@line 17231
      $804 = $31; //@line 17231
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 17231
      $free203 = $free202349; //@line 17231
      break L21;
     }
     $221 = HEAP32[$6 >> 2] | 0; //@line 17234
     $222 = $221 + 12 | 0; //@line 17235
     $223 = HEAP32[$222 >> 2] | 0; //@line 17236
     if (($223 | 0) == (HEAP32[$221 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$221 >> 2] | 0) + 40 >> 2] & 127]($221) | 0; //@line 17245
     } else {
      HEAP32[$222 >> 2] = $223 + 1; //@line 17248
     }
     $232 = HEAP8[$this2$i$i$i10] | 0; //@line 17250
     if (($232 & 1) == 0) {
      $238 = ($232 & 255) >>> 1; //@line 17256
     } else {
      $238 = HEAP32[$16 >> 2] | 0; //@line 17259
     }
     $801 = $34; //@line 17263
     $802 = $33; //@line 17263
     $803 = $32; //@line 17263
     $804 = $31; //@line 17263
     $__trailing_sign$1 = $238 >>> 0 > 1 ? $__psn : $__trailing_sign$0355; //@line 17263
     $free203 = $free202349; //@line 17263
     break;
    }
   case 2:
    {
     if (!(($__trailing_sign$0355 | 0) != 0 | $__p$0353 >>> 0 < 2)) {
      if (($__p$0353 | 0) == 2) {
       $351 = (HEAP8[$28] | 0) != 0; //@line 17275
      } else {
       $351 = 0; //@line 17277
      }
      if (!($19 | $351)) {
       $801 = $34; //@line 17281
       $802 = $33; //@line 17281
       $803 = $32; //@line 17281
       $804 = $31; //@line 17281
       $__trailing_sign$1 = 0; //@line 17281
       $free203 = $free202349; //@line 17281
       break L21;
      }
     }
     $352 = HEAP8[$this2$i$i$i9] | 0; //@line 17285
     $354 = ($352 & 1) == 0; //@line 17287
     $$465 = $354 ? $21 : HEAP32[$22 >> 2] | 0; //@line 17289
     L126 : do {
      if (($__p$0353 | 0) == 0) {
       $$pre$i2$i$i180 = $63; //@line 17293
       $404 = $63; //@line 17293
       $405 = $352; //@line 17293
       $406 = $$465; //@line 17293
      } else {
       if ((HEAPU8[$8 + ($__p$0353 + -1) | 0] | 0) >= 2) {
        $$pre$i2$i$i180 = $63; //@line 17300
        $404 = $63; //@line 17300
        $405 = $352; //@line 17300
        $406 = $$465; //@line 17300
        break;
       }
       $363 = $$465 + ($354 ? ($352 & 255) >>> 1 : HEAP32[$23 >> 2] | 0) | 0; //@line 17307
       $364 = $$465; //@line 17308
       while (1) {
        if (($364 | 0) == ($363 | 0)) {
         $$lcssa535 = $363; //@line 17312
         break;
        }
        $366 = HEAP8[$364] | 0; //@line 17315
        if (!($366 << 24 >> 24 > -1)) {
         $$lcssa535 = $364; //@line 17318
         break;
        }
        if ((HEAP16[(HEAP32[$9 >> 2] | 0) + ($366 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
         $$lcssa535 = $364; //@line 17329
         break;
        } else {
         $364 = $364 + 1 | 0; //@line 17332
        }
       }
       $376 = $$lcssa535 - $$465 | 0; //@line 17337
       $377 = HEAP8[$this2$i$i$i15] | 0; //@line 17338
       $379 = ($377 & 1) == 0; //@line 17340
       if ($379) {
        $383 = ($377 & 255) >>> 1; //@line 17344
       } else {
        $383 = HEAP32[$27 >> 2] | 0; //@line 17347
       }
       if ($376 >>> 0 > $383 >>> 0) {
        $$pre$i2$i$i180 = $63; //@line 17351
        $404 = $63; //@line 17351
        $405 = $352; //@line 17351
        $406 = $$465; //@line 17351
        break;
       }
       if ($379) {
        $389 = ($377 & 255) >>> 1; //@line 17356
        $391 = $24 + ($389 - $376) + 1 | 0; //@line 17359
        $392 = $25; //@line 17359
        $393 = $389; //@line 17359
       } else {
        $385 = HEAP32[$26 >> 2] | 0; //@line 17361
        $386 = HEAP32[$27 >> 2] | 0; //@line 17362
        $391 = $385 + ($386 - $376) | 0; //@line 17365
        $392 = $385; //@line 17365
        $393 = $386; //@line 17365
       }
       $394 = $392 + $393 | 0; //@line 17367
       if (($391 | 0) == ($394 | 0)) {
        $$pre$i2$i$i180 = $63; //@line 17370
        $404 = $63; //@line 17370
        $405 = $352; //@line 17370
        $406 = $$lcssa535; //@line 17370
        break;
       } else {
        $396 = $$465; //@line 17373
        $397 = $391; //@line 17373
       }
       while (1) {
        if ((HEAP8[$397] | 0) != (HEAP8[$396] | 0)) {
         $$pre$i2$i$i180 = $63; //@line 17380
         $404 = $63; //@line 17380
         $405 = $352; //@line 17380
         $406 = $$465; //@line 17380
         break L126;
        }
        $401 = $397 + 1 | 0; //@line 17383
        if (($401 | 0) == ($394 | 0)) {
         $$pre$i2$i$i180 = $63; //@line 17387
         $404 = $63; //@line 17387
         $405 = $352; //@line 17387
         $406 = $$lcssa535; //@line 17387
         break;
        } else {
         $396 = $396 + 1 | 0; //@line 17390
         $397 = $401; //@line 17390
        }
       }
      }
     } while (0);
     L146 : while (1) {
      if (($405 & 1) == 0) {
       $413 = $21; //@line 17401
       $414 = ($405 & 255) >>> 1; //@line 17401
      } else {
       $413 = HEAP32[$22 >> 2] | 0; //@line 17405
       $414 = HEAP32[$23 >> 2] | 0; //@line 17405
      }
      if (($406 | 0) == ($413 + $414 | 0)) {
       break;
      }
      $417 = HEAP32[$6 >> 2] | 0; //@line 17412
      do {
       if (($417 | 0) == 0) {
        $430 = 0; //@line 17416
       } else {
        if ((HEAP32[$417 + 12 >> 2] | 0) != (HEAP32[$417 + 16 >> 2] | 0)) {
         $430 = $417; //@line 17424
         break;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$417 >> 2] | 0) + 36 >> 2] & 127]($417) | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 17434
         $430 = 0; //@line 17435
         break;
        } else {
         $430 = HEAP32[$6 >> 2] | 0; //@line 17439
         break;
        }
       }
      } while (0);
      $431 = ($430 | 0) == 0; //@line 17444
      do {
       if (($404 | 0) == 0) {
        $$pre$i2$i$i180428 = $$pre$i2$i$i180; //@line 17448
        label = 147; //@line 17449
       } else {
        if ((HEAP32[$404 + 12 >> 2] | 0) != (HEAP32[$404 + 16 >> 2] | 0)) {
         if ($431) {
          $$pre$i2$i$i180427 = $$pre$i2$i$i180; //@line 17458
          $445 = $404; //@line 17458
          break;
         } else {
          break L146;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$404 >> 2] | 0) + 36 >> 2] & 127]($404) | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 17471
         $$pre$i2$i$i180428 = 0; //@line 17472
         label = 147; //@line 17473
         break;
        } else {
         if ($431 ^ ($$pre$i2$i$i180 | 0) == 0) {
          $$pre$i2$i$i180427 = $$pre$i2$i$i180; //@line 17479
          $445 = $$pre$i2$i$i180; //@line 17479
          break;
         } else {
          break L146;
         }
        }
       }
      } while (0);
      if ((label | 0) == 147) {
       label = 0; //@line 17488
       if ($431) {
        break;
       } else {
        $$pre$i2$i$i180427 = $$pre$i2$i$i180428; //@line 17492
        $445 = 0; //@line 17492
       }
      }
      $446 = HEAP32[$6 >> 2] | 0; //@line 17495
      $448 = HEAP32[$446 + 12 >> 2] | 0; //@line 17497
      if (($448 | 0) == (HEAP32[$446 + 16 >> 2] | 0)) {
       $$0$i$i172 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$446 >> 2] | 0) + 36 >> 2] & 127]($446) | 0; //@line 17507
      } else {
       $$0$i$i172 = HEAPU8[$448] | 0; //@line 17511
      }
      if (!(($$0$i$i172 & 255) << 24 >> 24 == (HEAP8[$406] | 0))) {
       break;
      }
      $462 = HEAP32[$6 >> 2] | 0; //@line 17519
      $463 = $462 + 12 | 0; //@line 17520
      $464 = HEAP32[$463 >> 2] | 0; //@line 17521
      if (($464 | 0) == (HEAP32[$462 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$462 >> 2] | 0) + 40 >> 2] & 127]($462) | 0; //@line 17530
      } else {
       HEAP32[$463 >> 2] = $464 + 1; //@line 17533
      }
      $$pre$i2$i$i180 = $$pre$i2$i$i180427; //@line 17537
      $404 = $445; //@line 17537
      $405 = HEAP8[$this2$i$i$i9] | 0; //@line 17537
      $406 = $406 + 1 | 0; //@line 17537
     }
     if (!$19) {
      $801 = $34; //@line 17540
      $802 = $33; //@line 17540
      $803 = $32; //@line 17540
      $804 = $31; //@line 17540
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 17540
      $free203 = $free202349; //@line 17540
      break L21;
     }
     $474 = HEAP8[$this2$i$i$i9] | 0; //@line 17543
     if (($474 & 1) == 0) {
      $481 = $21; //@line 17549
      $482 = ($474 & 255) >>> 1; //@line 17549
     } else {
      $481 = HEAP32[$22 >> 2] | 0; //@line 17553
      $482 = HEAP32[$23 >> 2] | 0; //@line 17553
     }
     if (($406 | 0) == ($481 + $482 | 0)) {
      $801 = $34; //@line 17558
      $802 = $33; //@line 17558
      $803 = $32; //@line 17558
      $804 = $31; //@line 17558
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 17558
      $free203 = $free202349; //@line 17558
     } else {
      label = 162; //@line 17560
      break L1;
     }
     break;
    }
   case 4:
    {
     $487 = $34; //@line 17566
     $488 = $33; //@line 17566
     $489 = $32; //@line 17566
     $490 = $31; //@line 17566
     $__ng$0 = 0; //@line 17566
     $free201 = $free202349; //@line 17566
     L186 : while (1) {
      $491 = HEAP32[$6 >> 2] | 0; //@line 17568
      do {
       if (($491 | 0) == 0) {
        $504 = 0; //@line 17572
       } else {
        if ((HEAP32[$491 + 12 >> 2] | 0) != (HEAP32[$491 + 16 >> 2] | 0)) {
         $504 = $491; //@line 17580
         break;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$491 >> 2] | 0) + 36 >> 2] & 127]($491) | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 17590
         $504 = 0; //@line 17591
         break;
        } else {
         $504 = HEAP32[$6 >> 2] | 0; //@line 17595
         break;
        }
       }
      } while (0);
      $505 = ($504 | 0) == 0; //@line 17600
      $506 = HEAP32[$7 >> 2] | 0; //@line 17601
      do {
       if (($506 | 0) == 0) {
        label = 173; //@line 17605
       } else {
        if ((HEAP32[$506 + 12 >> 2] | 0) != (HEAP32[$506 + 16 >> 2] | 0)) {
         if ($505) {
          break;
         } else {
          break L186;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$506 >> 2] | 0) + 36 >> 2] & 127]($506) | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 17626
         label = 173; //@line 17627
         break;
        } else {
         if ($505) {
          break;
         } else {
          break L186;
         }
        }
       }
      } while (0);
      if ((label | 0) == 173) {
       label = 0; //@line 17639
       if ($505) {
        break;
       }
      }
      $519 = HEAP32[$6 >> 2] | 0; //@line 17644
      $521 = HEAP32[$519 + 12 >> 2] | 0; //@line 17646
      if (($521 | 0) == (HEAP32[$519 + 16 >> 2] | 0)) {
       $$0$i$i151 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$519 >> 2] | 0) + 36 >> 2] & 127]($519) | 0; //@line 17656
      } else {
       $$0$i$i151 = HEAPU8[$521] | 0; //@line 17660
      }
      $532 = $$0$i$i151 & 255; //@line 17662
      do {
       if ($532 << 24 >> 24 > -1) {
        if ((HEAP16[(HEAP32[$9 >> 2] | 0) + ($$0$i$i151 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
         label = 189; //@line 17674
         break;
        }
        $539 = HEAP32[$__wn >> 2] | 0; //@line 17677
        if (($539 | 0) == ($487 | 0)) {
         $542 = (HEAP32[$29 >> 2] | 0) != 127; //@line 17681
         $543 = HEAP32[$4 >> 2] | 0; //@line 17682
         $546 = $487 - $543 | 0; //@line 17685
         $$$i140 = $546 >>> 0 < 2147483647 ? $546 << 1 : -1; //@line 17688
         $550 = _realloc($542 ? $543 : 0, $$$i140) | 0; //@line 17690
         if (($550 | 0) == 0) {
          label = 182; //@line 17693
          break L1;
         }
         do {
          if ($542) {
           HEAP32[$4 >> 2] = $550; //@line 17698
           $554 = $550; //@line 17699
          } else {
           $$pr$i142 = HEAP32[$4 >> 2] | 0; //@line 17701
           HEAP32[$4 >> 2] = $550; //@line 17702
           if (($$pr$i142 | 0) == 0) {
            $554 = $550; //@line 17705
            break;
           }
           FUNCTION_TABLE_vi[HEAP32[$29 >> 2] & 255]($$pr$i142); //@line 17709
           $554 = HEAP32[$4 >> 2] | 0; //@line 17711
          }
         } while (0);
         HEAP32[$29 >> 2] = 128; //@line 17714
         $555 = $554 + $546 | 0; //@line 17715
         HEAP32[$__wn >> 2] = $555; //@line 17716
         $558 = $555; //@line 17719
         $559 = (HEAP32[$4 >> 2] | 0) + $$$i140 | 0; //@line 17719
        } else {
         $558 = $539; //@line 17721
         $559 = $487; //@line 17721
        }
        HEAP32[$__wn >> 2] = $558 + 1; //@line 17724
        HEAP8[$558] = $532; //@line 17725
        $592 = $559; //@line 17727
        $593 = $488; //@line 17727
        $594 = $489; //@line 17727
        $595 = $490; //@line 17727
        $__ng$1 = $__ng$0 + 1 | 0; //@line 17727
        $free = $free201; //@line 17727
       } else {
        label = 189; //@line 17729
       }
      } while (0);
      if ((label | 0) == 189) {
       label = 0; //@line 17733
       $562 = HEAP8[$this2$i$i$i] | 0; //@line 17734
       if (($562 & 1) == 0) {
        $568 = ($562 & 255) >>> 1; //@line 17740
       } else {
        $568 = HEAP32[$30 >> 2] | 0; //@line 17743
       }
       if (($568 | 0) == 0 | ($__ng$0 | 0) == 0) {
        break;
       }
       if (!($532 << 24 >> 24 == (HEAP8[$__ts] | 0))) {
        break;
       }
       if (($489 | 0) == ($490 | 0)) {
        $577 = $489 - $488 | 0; //@line 17761
        $$$i128 = $577 >>> 0 < 2147483647 ? $577 << 1 : -1; //@line 17764
        if (($free201 | 0) == 127) {
         $581 = 0; //@line 17767
        } else {
         $581 = $488; //@line 17770
        }
        $582 = _realloc($581, $$$i128) | 0; //@line 17772
        $583 = $582; //@line 17773
        if (($582 | 0) == 0) {
         label = 198; //@line 17776
         break L1;
        }
        $588 = $583; //@line 17782
        $589 = $583 + ($577 >> 2 << 2) | 0; //@line 17782
        $590 = $583 + ($$$i128 >>> 2 << 2) | 0; //@line 17782
        $free200 = 128; //@line 17782
       } else {
        $588 = $488; //@line 17784
        $589 = $489; //@line 17784
        $590 = $490; //@line 17784
        $free200 = $free201; //@line 17784
       }
       HEAP32[$589 >> 2] = $__ng$0; //@line 17787
       $592 = $487; //@line 17788
       $593 = $588; //@line 17788
       $594 = $589 + 4 | 0; //@line 17788
       $595 = $590; //@line 17788
       $__ng$1 = 0; //@line 17788
       $free = $free200; //@line 17788
      }
      $596 = HEAP32[$6 >> 2] | 0; //@line 17790
      $597 = $596 + 12 | 0; //@line 17791
      $598 = HEAP32[$597 >> 2] | 0; //@line 17792
      if (($598 | 0) == (HEAP32[$596 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$596 >> 2] | 0) + 40 >> 2] & 127]($596) | 0; //@line 17801
       $487 = $592; //@line 17802
       $488 = $593; //@line 17802
       $489 = $594; //@line 17802
       $490 = $595; //@line 17802
       $__ng$0 = $__ng$1; //@line 17802
       $free201 = $free; //@line 17802
       continue;
      } else {
       HEAP32[$597 >> 2] = $598 + 1; //@line 17806
       $487 = $592; //@line 17807
       $488 = $593; //@line 17807
       $489 = $594; //@line 17807
       $490 = $595; //@line 17807
       $__ng$0 = $__ng$1; //@line 17807
       $free201 = $free; //@line 17807
       continue;
      }
     }
     if (($488 | 0) == ($489 | 0) | ($__ng$0 | 0) == 0) {
      $628 = $488; //@line 17815
      $629 = $489; //@line 17815
      $630 = $490; //@line 17815
      $free204 = $free201; //@line 17815
     } else {
      if (($489 | 0) == ($490 | 0)) {
       $613 = $489 - $488 | 0; //@line 17822
       $$$i118 = $613 >>> 0 < 2147483647 ? $613 << 1 : -1; //@line 17825
       if (($free201 | 0) == 127) {
        $617 = 0; //@line 17828
       } else {
        $617 = $488; //@line 17831
       }
       $618 = _realloc($617, $$$i118) | 0; //@line 17833
       $619 = $618; //@line 17834
       if (($618 | 0) == 0) {
        label = 209; //@line 17837
        break L1;
       }
       $624 = $619; //@line 17843
       $625 = $619 + ($613 >> 2 << 2) | 0; //@line 17843
       $626 = $619 + ($$$i118 >>> 2 << 2) | 0; //@line 17843
       $free205 = 128; //@line 17843
      } else {
       $624 = $488; //@line 17845
       $625 = $489; //@line 17845
       $626 = $490; //@line 17845
       $free205 = $free201; //@line 17845
      }
      HEAP32[$625 >> 2] = $__ng$0; //@line 17848
      $628 = $624; //@line 17849
      $629 = $625 + 4 | 0; //@line 17849
      $630 = $626; //@line 17849
      $free204 = $free205; //@line 17849
     }
     $631 = HEAP32[$__fd >> 2] | 0; //@line 17851
     if (($631 | 0) > 0) {
      $633 = HEAP32[$6 >> 2] | 0; //@line 17854
      do {
       if (($633 | 0) == 0) {
        $646 = 0; //@line 17858
       } else {
        if ((HEAP32[$633 + 12 >> 2] | 0) != (HEAP32[$633 + 16 >> 2] | 0)) {
         $646 = $633; //@line 17866
         break;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$633 >> 2] | 0) + 36 >> 2] & 127]($633) | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 17876
         $646 = 0; //@line 17877
         break;
        } else {
         $646 = HEAP32[$6 >> 2] | 0; //@line 17881
         break;
        }
       }
      } while (0);
      $647 = ($646 | 0) == 0; //@line 17886
      $648 = HEAP32[$7 >> 2] | 0; //@line 17887
      do {
       if (($648 | 0) == 0) {
        label = 223; //@line 17891
       } else {
        if ((HEAP32[$648 + 12 >> 2] | 0) != (HEAP32[$648 + 16 >> 2] | 0)) {
         if ($647) {
          $661 = $648; //@line 17900
          break;
         } else {
          label = 229; //@line 17903
          break L1;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$648 >> 2] | 0) + 36 >> 2] & 127]($648) | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 17914
         label = 223; //@line 17915
         break;
        } else {
         if ($647) {
          $661 = $648; //@line 17919
          break;
         } else {
          label = 229; //@line 17922
          break L1;
         }
        }
       }
      } while (0);
      if ((label | 0) == 223) {
       label = 0; //@line 17929
       if ($647) {
        label = 229; //@line 17931
        break L1;
       } else {
        $661 = 0; //@line 17934
       }
      }
      $662 = HEAP32[$6 >> 2] | 0; //@line 17937
      $664 = HEAP32[$662 + 12 >> 2] | 0; //@line 17939
      if (($664 | 0) == (HEAP32[$662 + 16 >> 2] | 0)) {
       $$0$i$i93 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$662 >> 2] | 0) + 36 >> 2] & 127]($662) | 0; //@line 17949
      } else {
       $$0$i$i93 = HEAPU8[$664] | 0; //@line 17953
      }
      if (!(($$0$i$i93 & 255) << 24 >> 24 == (HEAP8[$__dp] | 0))) {
       label = 229; //@line 17959
       break L1;
      }
      $680 = HEAP32[$6 >> 2] | 0; //@line 17962
      $681 = $680 + 12 | 0; //@line 17963
      $682 = HEAP32[$681 >> 2] | 0; //@line 17964
      if (($682 | 0) == (HEAP32[$680 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$680 >> 2] | 0) + 40 >> 2] & 127]($680) | 0; //@line 17973
       $$pre$i2$i$i75 = $661; //@line 17974
       $691 = $631; //@line 17974
       $692 = $661; //@line 17974
       $693 = $487; //@line 17974
      } else {
       HEAP32[$681 >> 2] = $682 + 1; //@line 17977
       $$pre$i2$i$i75 = $661; //@line 17978
       $691 = $631; //@line 17978
       $692 = $661; //@line 17978
       $693 = $487; //@line 17978
      }
      while (1) {
       $694 = HEAP32[$6 >> 2] | 0; //@line 17981
       do {
        if (($694 | 0) == 0) {
         $707 = 0; //@line 17985
        } else {
         if ((HEAP32[$694 + 12 >> 2] | 0) != (HEAP32[$694 + 16 >> 2] | 0)) {
          $707 = $694; //@line 17993
          break;
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$694 >> 2] | 0) + 36 >> 2] & 127]($694) | 0) == -1) {
          HEAP32[$6 >> 2] = 0; //@line 18003
          $707 = 0; //@line 18004
          break;
         } else {
          $707 = HEAP32[$6 >> 2] | 0; //@line 18008
          break;
         }
        }
       } while (0);
       $708 = ($707 | 0) == 0; //@line 18013
       do {
        if (($692 | 0) == 0) {
         $$pre$i2$i$i75431$ph = $$pre$i2$i$i75; //@line 18017
         label = 243; //@line 18018
        } else {
         if ((HEAP32[$692 + 12 >> 2] | 0) != (HEAP32[$692 + 16 >> 2] | 0)) {
          if ($708) {
           $$pre$i2$i$i75431458 = $$pre$i2$i$i75; //@line 18027
           $722 = $692; //@line 18027
           break;
          } else {
           label = 250; //@line 18030
           break L1;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$692 >> 2] | 0) + 36 >> 2] & 127]($692) | 0) == -1) {
          HEAP32[$7 >> 2] = 0; //@line 18041
          $$pre$i2$i$i75431$ph = 0; //@line 18042
          label = 243; //@line 18043
          break;
         } else {
          if ($708 ^ ($$pre$i2$i$i75 | 0) == 0) {
           $$pre$i2$i$i75431458 = $$pre$i2$i$i75; //@line 18049
           $722 = $$pre$i2$i$i75; //@line 18049
           break;
          } else {
           label = 250; //@line 18052
           break L1;
          }
         }
        }
       } while (0);
       if ((label | 0) == 243) {
        label = 0; //@line 18059
        if ($708) {
         label = 250; //@line 18061
         break L1;
        } else {
         $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph; //@line 18064
         $722 = 0; //@line 18064
        }
       }
       $723 = HEAP32[$6 >> 2] | 0; //@line 18067
       $725 = HEAP32[$723 + 12 >> 2] | 0; //@line 18069
       if (($725 | 0) == (HEAP32[$723 + 16 >> 2] | 0)) {
        $$0$i$i64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$723 >> 2] | 0) + 36 >> 2] & 127]($723) | 0; //@line 18079
       } else {
        $$0$i$i64 = HEAPU8[$725] | 0; //@line 18083
       }
       if (!(($$0$i$i64 & 255) << 24 >> 24 > -1)) {
        label = 250; //@line 18088
        break L1;
       }
       if ((HEAP16[(HEAP32[$9 >> 2] | 0) + ($$0$i$i64 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        label = 250; //@line 18099
        break L1;
       }
       $745 = HEAP32[$__wn >> 2] | 0; //@line 18102
       if (($745 | 0) == ($693 | 0)) {
        $748 = (HEAP32[$29 >> 2] | 0) != 127; //@line 18106
        $749 = HEAP32[$4 >> 2] | 0; //@line 18107
        $752 = $693 - $749 | 0; //@line 18110
        $$$i = $752 >>> 0 < 2147483647 ? $752 << 1 : -1; //@line 18113
        $756 = _realloc($748 ? $749 : 0, $$$i) | 0; //@line 18115
        if (($756 | 0) == 0) {
         label = 253; //@line 18118
         break L1;
        }
        do {
         if ($748) {
          HEAP32[$4 >> 2] = $756; //@line 18123
          $760 = $756; //@line 18124
         } else {
          $$pr$i = HEAP32[$4 >> 2] | 0; //@line 18126
          HEAP32[$4 >> 2] = $756; //@line 18127
          if (($$pr$i | 0) == 0) {
           $760 = $756; //@line 18130
           break;
          }
          FUNCTION_TABLE_vi[HEAP32[$29 >> 2] & 255]($$pr$i); //@line 18134
          $760 = HEAP32[$4 >> 2] | 0; //@line 18136
         }
        } while (0);
        HEAP32[$29 >> 2] = 128; //@line 18139
        $761 = $760 + $752 | 0; //@line 18140
        HEAP32[$__wn >> 2] = $761; //@line 18141
        $764 = $761; //@line 18144
        $765 = (HEAP32[$4 >> 2] | 0) + $$$i | 0; //@line 18144
       } else {
        $764 = $745; //@line 18146
        $765 = $693; //@line 18146
       }
       $766 = HEAP32[$6 >> 2] | 0; //@line 18148
       $768 = HEAP32[$766 + 12 >> 2] | 0; //@line 18150
       if (($768 | 0) == (HEAP32[$766 + 16 >> 2] | 0)) {
        $776 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$766 >> 2] | 0) + 36 >> 2] & 127]($766) | 0; //@line 18159
        $$0$i$i53 = $776; //@line 18161
        $779 = HEAP32[$__wn >> 2] | 0; //@line 18161
       } else {
        $$0$i$i53 = HEAPU8[$768] | 0; //@line 18165
        $779 = $764; //@line 18165
       }
       HEAP32[$__wn >> 2] = $779 + 1; //@line 18169
       HEAP8[$779] = $$0$i$i53; //@line 18170
       $782 = $691 + -1 | 0; //@line 18171
       HEAP32[$__fd >> 2] = $782; //@line 18172
       $783 = HEAP32[$6 >> 2] | 0; //@line 18173
       $784 = $783 + 12 | 0; //@line 18174
       $785 = HEAP32[$784 >> 2] | 0; //@line 18175
       if (($785 | 0) == (HEAP32[$783 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$783 >> 2] | 0) + 40 >> 2] & 127]($783) | 0; //@line 18184
       } else {
        HEAP32[$784 >> 2] = $785 + 1; //@line 18187
       }
       if (($782 | 0) > 0) {
        $$pre$i2$i$i75 = $$pre$i2$i$i75431458; //@line 18191
        $691 = $782; //@line 18191
        $692 = $722; //@line 18191
        $693 = $765; //@line 18191
       } else {
        $795 = $765; //@line 18193
        break;
       }
      }
     } else {
      $795 = $487; //@line 18198
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
      label = 267; //@line 18204
      break L1;
     } else {
      $801 = $795; //@line 18207
      $802 = $628; //@line 18207
      $803 = $629; //@line 18207
      $804 = $630; //@line 18207
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 18207
      $free203 = $free204; //@line 18207
     }
     break;
    }
   default:
    {
     $801 = $34; //@line 18212
     $802 = $33; //@line 18212
     $803 = $32; //@line 18212
     $804 = $31; //@line 18212
     $__trailing_sign$1 = $__trailing_sign$0355; //@line 18212
     $free203 = $free202349; //@line 18212
    }
   }
  } while (0);
  L324 : do {
   if ((label | 0) == 26) {
    label = 0; //@line 18218
    if (($__p$0353 | 0) == 3) {
     $$lcssa293 = $33; //@line 18221
     $$lcssa309 = $32; //@line 18221
     $__trailing_sign$0$lcssa = $__trailing_sign$0355; //@line 18221
     $free202$lcssa = $free202349; //@line 18221
     label = 269; //@line 18222
     break L1;
    } else {
     $$pre$i2$i$i39 = $63; //@line 18225
     $105 = $63; //@line 18225
    }
    while (1) {
     $106 = HEAP32[$6 >> 2] | 0; //@line 18228
     do {
      if (($106 | 0) == 0) {
       $119 = 0; //@line 18232
      } else {
       if ((HEAP32[$106 + 12 >> 2] | 0) != (HEAP32[$106 + 16 >> 2] | 0)) {
        $119 = $106; //@line 18240
        break;
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0) == -1) {
        HEAP32[$6 >> 2] = 0; //@line 18250
        $119 = 0; //@line 18251
        break;
       } else {
        $119 = HEAP32[$6 >> 2] | 0; //@line 18255
        break;
       }
      }
     } while (0);
     $120 = ($119 | 0) == 0; //@line 18260
     do {
      if (($105 | 0) == 0) {
       $$pre$i2$i$i39424 = $$pre$i2$i$i39; //@line 18264
       label = 37; //@line 18265
      } else {
       if ((HEAP32[$105 + 12 >> 2] | 0) != (HEAP32[$105 + 16 >> 2] | 0)) {
        if ($120) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39; //@line 18274
         $134 = $105; //@line 18274
         break;
        } else {
         $801 = $34; //@line 18277
         $802 = $33; //@line 18277
         $803 = $32; //@line 18277
         $804 = $31; //@line 18277
         $__trailing_sign$1 = $__trailing_sign$0355; //@line 18277
         $free203 = $free202349; //@line 18277
         break L324;
        }
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$105 >> 2] | 0) + 36 >> 2] & 127]($105) | 0) == -1) {
        HEAP32[$7 >> 2] = 0; //@line 18288
        $$pre$i2$i$i39424 = 0; //@line 18289
        label = 37; //@line 18290
        break;
       } else {
        if ($120 ^ ($$pre$i2$i$i39 | 0) == 0) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39; //@line 18296
         $134 = $$pre$i2$i$i39; //@line 18296
         break;
        } else {
         $801 = $34; //@line 18299
         $802 = $33; //@line 18299
         $803 = $32; //@line 18299
         $804 = $31; //@line 18299
         $__trailing_sign$1 = $__trailing_sign$0355; //@line 18299
         $free203 = $free202349; //@line 18299
         break L324;
        }
       }
      }
     } while (0);
     if ((label | 0) == 37) {
      label = 0; //@line 18306
      if ($120) {
       $801 = $34; //@line 18308
       $802 = $33; //@line 18308
       $803 = $32; //@line 18308
       $804 = $31; //@line 18308
       $__trailing_sign$1 = $__trailing_sign$0355; //@line 18308
       $free203 = $free202349; //@line 18308
       break L324;
      } else {
       $$pre$i2$i$i39426 = $$pre$i2$i$i39424; //@line 18311
       $134 = 0; //@line 18311
      }
     }
     $135 = HEAP32[$6 >> 2] | 0; //@line 18314
     $137 = HEAP32[$135 + 12 >> 2] | 0; //@line 18316
     if (($137 | 0) == (HEAP32[$135 + 16 >> 2] | 0)) {
      $$0$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($135) | 0; //@line 18326
     } else {
      $$0$i$i45 = HEAPU8[$137] | 0; //@line 18330
     }
     if (!(($$0$i$i45 & 255) << 24 >> 24 > -1)) {
      $801 = $34; //@line 18335
      $802 = $33; //@line 18335
      $803 = $32; //@line 18335
      $804 = $31; //@line 18335
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 18335
      $free203 = $free202349; //@line 18335
      break L324;
     }
     if ((HEAP16[(HEAP32[$9 >> 2] | 0) + ($$0$i$i45 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      $801 = $34; //@line 18346
      $802 = $33; //@line 18346
      $803 = $32; //@line 18346
      $804 = $31; //@line 18346
      $__trailing_sign$1 = $__trailing_sign$0355; //@line 18346
      $free203 = $free202349; //@line 18346
      break L324;
     }
     $155 = HEAP32[$6 >> 2] | 0; //@line 18349
     $156 = $155 + 12 | 0; //@line 18350
     $157 = HEAP32[$156 >> 2] | 0; //@line 18351
     if (($157 | 0) == (HEAP32[$155 + 16 >> 2] | 0)) {
      $$0$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$155 >> 2] | 0) + 40 >> 2] & 127]($155) | 0; //@line 18361
     } else {
      HEAP32[$156 >> 2] = $157 + 1; //@line 18364
      $$0$i$i50 = HEAPU8[$157] | 0; //@line 18367
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i50 & 255); //@line 18370
     $$pre$i2$i$i39 = $$pre$i2$i$i39426; //@line 18371
     $105 = $134; //@line 18371
    }
   }
  } while (0);
  $805 = $__p$0353 + 1 | 0; //@line 18375
  if ($805 >>> 0 < 4) {
   $31 = $804; //@line 18378
   $32 = $803; //@line 18378
   $33 = $802; //@line 18378
   $34 = $801; //@line 18378
   $__p$0353 = $805; //@line 18378
   $__trailing_sign$0355 = $__trailing_sign$1; //@line 18378
   $free202349 = $free203; //@line 18378
  } else {
   $$lcssa293 = $802; //@line 18380
   $$lcssa309 = $803; //@line 18380
   $__trailing_sign$0$lcssa = $__trailing_sign$1; //@line 18380
   $free202$lcssa = $free203; //@line 18380
   label = 269; //@line 18381
   break;
  }
 }
 L357 : do {
  if ((label | 0) == 25) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18389
   $$0 = 0; //@line 18390
   $890 = $33; //@line 18390
   $free208 = $free202349; //@line 18390
  } else if ((label | 0) == 112) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18395
   $$0 = 0; //@line 18396
   $890 = $33; //@line 18396
   $free208 = $free202349; //@line 18396
  } else if ((label | 0) == 162) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18401
   $$0 = 0; //@line 18402
   $890 = $33; //@line 18402
   $free208 = $free202349; //@line 18402
  } else if ((label | 0) == 182) {
   __ZSt17__throw_bad_allocv(); //@line 18405
  } else if ((label | 0) == 198) {
   __ZSt17__throw_bad_allocv(); //@line 18409
  } else if ((label | 0) == 209) {
   __ZSt17__throw_bad_allocv(); //@line 18413
  } else if ((label | 0) == 229) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18419
   $$0 = 0; //@line 18420
   $890 = $628; //@line 18420
   $free208 = $free204; //@line 18420
  } else if ((label | 0) == 250) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18425
   $$0 = 0; //@line 18426
   $890 = $628; //@line 18426
   $free208 = $free204; //@line 18426
  } else if ((label | 0) == 253) {
   __ZSt17__throw_bad_allocv(); //@line 18429
  } else if ((label | 0) == 267) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18435
   $$0 = 0; //@line 18436
   $890 = $628; //@line 18436
   $free208 = $free204; //@line 18436
  } else if ((label | 0) == 269) {
   L369 : do {
    if (($__trailing_sign$0$lcssa | 0) != 0) {
     $808 = $__trailing_sign$0$lcssa; //@line 18442
     $810 = $__trailing_sign$0$lcssa + 1 | 0; //@line 18444
     $811 = $__trailing_sign$0$lcssa + 8 | 0; //@line 18445
     $812 = $__trailing_sign$0$lcssa + 4 | 0; //@line 18446
     $__i$0 = 1; //@line 18447
     L371 : while (1) {
      $813 = HEAP8[$808] | 0; //@line 18449
      if (($813 & 1) == 0) {
       $819 = ($813 & 255) >>> 1; //@line 18455
      } else {
       $819 = HEAP32[$812 >> 2] | 0; //@line 18458
      }
      if (!($__i$0 >>> 0 < $819 >>> 0)) {
       break L369;
      }
      $821 = HEAP32[$6 >> 2] | 0; //@line 18464
      do {
       if (($821 | 0) == 0) {
        $834 = 0; //@line 18468
       } else {
        if ((HEAP32[$821 + 12 >> 2] | 0) != (HEAP32[$821 + 16 >> 2] | 0)) {
         $834 = $821; //@line 18476
         break;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$821 >> 2] | 0) + 36 >> 2] & 127]($821) | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 18486
         $834 = 0; //@line 18487
         break;
        } else {
         $834 = HEAP32[$6 >> 2] | 0; //@line 18491
         break;
        }
       }
      } while (0);
      $835 = ($834 | 0) == 0; //@line 18496
      $836 = HEAP32[$7 >> 2] | 0; //@line 18497
      do {
       if (($836 | 0) == 0) {
        label = 285; //@line 18501
       } else {
        if ((HEAP32[$836 + 12 >> 2] | 0) != (HEAP32[$836 + 16 >> 2] | 0)) {
         if ($835) {
          break;
         } else {
          break L371;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$836 >> 2] | 0) + 36 >> 2] & 127]($836) | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 18522
         label = 285; //@line 18523
         break;
        } else {
         if ($835) {
          break;
         } else {
          break L371;
         }
        }
       }
      } while (0);
      if ((label | 0) == 285) {
       label = 0; //@line 18535
       if ($835) {
        break;
       }
      }
      $849 = HEAP32[$6 >> 2] | 0; //@line 18540
      $851 = HEAP32[$849 + 12 >> 2] | 0; //@line 18542
      if (($851 | 0) == (HEAP32[$849 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$849 >> 2] | 0) + 36 >> 2] & 127]($849) | 0; //@line 18552
      } else {
       $$0$i$i = HEAPU8[$851] | 0; //@line 18556
      }
      if ((HEAP8[$808] & 1) == 0) {
       $867 = $810; //@line 18563
      } else {
       $867 = HEAP32[$811 >> 2] | 0; //@line 18566
      }
      if (!(($$0$i$i & 255) << 24 >> 24 == (HEAP8[$867 + $__i$0 | 0] | 0))) {
       break;
      }
      $873 = $__i$0 + 1 | 0; //@line 18574
      $874 = HEAP32[$6 >> 2] | 0; //@line 18575
      $875 = $874 + 12 | 0; //@line 18576
      $876 = HEAP32[$875 >> 2] | 0; //@line 18577
      if (($876 | 0) == (HEAP32[$874 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$874 >> 2] | 0) + 40 >> 2] & 127]($874) | 0; //@line 18586
       $__i$0 = $873; //@line 18587
       continue;
      } else {
       HEAP32[$875 >> 2] = $876 + 1; //@line 18591
       $__i$0 = $873; //@line 18592
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18598
     $$0 = 0; //@line 18599
     $890 = $$lcssa293; //@line 18599
     $free208 = $free202$lcssa; //@line 18599
     break L357;
    }
   } while (0);
   if (($$lcssa293 | 0) == ($$lcssa309 | 0)) {
    $$0 = 1; //@line 18605
    $890 = $$lcssa309; //@line 18605
    $free208 = $free202$lcssa; //@line 18605
    break;
   }
   HEAP32[$__et >> 2] = 0; //@line 18608
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $$lcssa293, $$lcssa309, $__et); //@line 18609
   if ((HEAP32[$__et >> 2] | 0) == 0) {
    $$0 = 1; //@line 18613
    $890 = $$lcssa293; //@line 18613
    $free208 = $free202$lcssa; //@line 18613
    break;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 18618
   $$0 = 0; //@line 18619
   $890 = $$lcssa293; //@line 18619
   $free208 = $free202$lcssa; //@line 18619
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces); //@line 18622
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn); //@line 18623
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn); //@line 18624
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym); //@line 18625
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 18626
 if (($890 | 0) == 0) {
  STACKTOP = sp; //@line 18629
  return $$0 | 0; //@line 18629
 }
 FUNCTION_TABLE_vi[$free208 & 255]($890); //@line 18632
 STACKTOP = sp; //@line 18633
 return $$0 | 0; //@line 18633
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$480 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $10 = 0, $107 = 0, $11 = 0, $110 = 0, $12 = 0, $121 = 0, $122 = 0, $124 = 0, $13 = 0, $138 = 0, $139 = 0, $140 = 0, $15 = 0, $151 = 0, $153 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $17 = 0, $170 = 0, $175 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $187 = 0, $19 = 0, $192 = 0, $194 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $211 = 0, $217 = 0, $22 = 0, $223 = 0, $225 = 0, $23 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $242 = 0, $248 = 0, $25 = 0, $250 = 0, $252 = 0, $26 = 0, $260 = 0, $262 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $273 = 0, $279 = 0, $285 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $310 = 0, $316 = 0, $325 = 0, $326 = 0, $334 = 0, $335 = 0, $342 = 0, $343 = 0, $352 = 0, $354 = 0, $359 = 0, $360 = 0, $362 = 0, $366 = 0, $368 = 0, $369 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $382 = 0, $383 = 0, $387 = 0, $391 = 0, $392 = 0, $393 = 0, $4 = 0, $400 = 0, $401 = 0, $404 = 0, $407 = 0, $41 = 0, $418 = 0, $42 = 0, $421 = 0, $432 = 0, $433 = 0, $435 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $459 = 0, $466 = 0, $467 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $479 = 0, $490 = 0, $491 = 0, $494 = 0, $505 = 0, $507 = 0, $521 = 0, $524 = 0, $525 = 0, $528 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $539 = 0, $541 = 0, $544 = 0, $545 = 0, $548 = 0, $554 = 0, $56 = 0, $563 = 0, $567 = 0, $568 = 0, $569 = 0, $574 = 0, $575 = 0, $576 = 0, $578 = 0, $579 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $599 = 0, $6 = 0, $60 = 0, $603 = 0, $604 = 0, $605 = 0, $610 = 0, $611 = 0, $612 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $619 = 0, $62 = 0, $622 = 0, $633 = 0, $634 = 0, $637 = 0, $648 = 0, $649 = 0, $651 = 0, $665 = 0, $666 = 0, $667 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $682 = 0, $693 = 0, $696 = 0, $7 = 0, $707 = 0, $708 = 0, $710 = 0, $726 = 0, $729 = 0, $730 = 0, $733 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $744 = 0, $746 = 0, $749 = 0, $750 = 0, $751 = 0, $753 = 0, $76 = 0, $761 = 0, $763 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $77 = 0, $778 = 0, $78 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $8 = 0, $800 = 0, $802 = 0, $805 = 0, $816 = 0, $817 = 0, $820 = 0, $831 = 0, $833 = 0, $847 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $870 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0377 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0, $free234 = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 63
 STACKTOP = STACKTOP + 408 | 0; //@line 64
 $__gbuf = sp; //@line 65
 $__pat = sp + 400 | 0; //@line 66
 $tmpcast = $__pat; //@line 67
 $__dp = STACKTOP; //@line 68
 STACKTOP = STACKTOP + 8 | 0; //@line 68
 $__ts = STACKTOP; //@line 69
 STACKTOP = STACKTOP + 8 | 0; //@line 69
 $__grp = STACKTOP; //@line 70
 STACKTOP = STACKTOP + 16 | 0; //@line 70
 $__sym = STACKTOP; //@line 71
 STACKTOP = STACKTOP + 16 | 0; //@line 71
 $__psn = STACKTOP; //@line 72
 STACKTOP = STACKTOP + 16 | 0; //@line 72
 $__nsn = STACKTOP; //@line 73
 STACKTOP = STACKTOP + 16 | 0; //@line 73
 $__spaces = STACKTOP; //@line 74
 STACKTOP = STACKTOP + 16 | 0; //@line 74
 $__fd = STACKTOP; //@line 75
 STACKTOP = STACKTOP + 8 | 0; //@line 75
 $__et = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 8 | 0; //@line 76
 $2 = $__gbuf; //@line 78
 HEAP32[$__pat >> 2] = 0; //@line 79
 $this2$i$i$i = $__grp; //@line 80
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 81
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 81
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 81
 $this2$i$i$i9 = $__sym; //@line 82
 HEAP32[$this2$i$i$i9 + 0 >> 2] = 0; //@line 83
 HEAP32[$this2$i$i$i9 + 4 >> 2] = 0; //@line 83
 HEAP32[$this2$i$i$i9 + 8 >> 2] = 0; //@line 83
 $this2$i$i$i10 = $__psn; //@line 84
 HEAP32[$this2$i$i$i10 + 0 >> 2] = 0; //@line 85
 HEAP32[$this2$i$i$i10 + 4 >> 2] = 0; //@line 85
 HEAP32[$this2$i$i$i10 + 8 >> 2] = 0; //@line 85
 $this2$i$i$i12 = $__nsn; //@line 86
 HEAP32[$this2$i$i$i12 + 0 >> 2] = 0; //@line 87
 HEAP32[$this2$i$i$i12 + 4 >> 2] = 0; //@line 87
 HEAP32[$this2$i$i$i12 + 8 >> 2] = 0; //@line 87
 $this2$i$i$i15 = $__spaces; //@line 88
 HEAP32[$this2$i$i$i15 + 0 >> 2] = 0; //@line 89
 HEAP32[$this2$i$i$i15 + 4 >> 2] = 0; //@line 89
 HEAP32[$this2$i$i$i15 + 8 >> 2] = 0; //@line 89
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd); //@line 90
 $4 = $__wb; //@line 92
 HEAP32[$__wn >> 2] = HEAP32[$4 >> 2]; //@line 94
 $6 = $__b; //@line 95
 $7 = $__e; //@line 96
 $8 = $__pat; //@line 97
 $9 = $__ct; //@line 98
 $10 = $__nsn + 4 | 0; //@line 99
 $11 = $__nsn + 8 | 0; //@line 100
 $12 = $__psn + 4 | 0; //@line 101
 $13 = $__psn + 8 | 0; //@line 102
 $15 = ($__flags & 512 | 0) != 0; //@line 104
 $16 = $__sym + 4 | 0; //@line 105
 $17 = $__sym + 8 | 0; //@line 106
 $18 = $__spaces + 4 | 0; //@line 107
 $19 = $__spaces + 8 | 0; //@line 108
 $20 = $8 + 3 | 0; //@line 109
 $21 = $__wb + 4 | 0; //@line 110
 $22 = $__grp + 4 | 0; //@line 111
 $23 = $__gbuf + 400 | 0; //@line 112
 $24 = $2; //@line 112
 $25 = $2; //@line 112
 $26 = $__we; //@line 112
 $__p$0377 = 0; //@line 112
 $__trailing_sign$0379 = 0; //@line 112
 $free228372 = 127; //@line 112
 L1 : while (1) {
  $27 = HEAP32[$6 >> 2] | 0; //@line 114
  do {
   if (($27 | 0) == 0) {
    $41 = 1; //@line 118
   } else {
    $30 = HEAP32[$27 + 12 >> 2] | 0; //@line 121
    if (($30 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) {
     $$0$i$i$i$i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; //@line 131
    } else {
     $$0$i$i$i$i18 = HEAP32[$30 >> 2] | 0; //@line 134
    }
    if (($$0$i$i$i$i18 | 0) == -1) {
     HEAP32[$6 >> 2] = 0; //@line 138
     $41 = 1; //@line 139
     break;
    } else {
     $41 = (HEAP32[$6 >> 2] | 0) == 0; //@line 144
     break;
    }
   }
  } while (0);
  $42 = HEAP32[$7 >> 2] | 0; //@line 149
  do {
   if (($42 | 0) == 0) {
    label = 15; //@line 153
   } else {
    $45 = HEAP32[$42 + 12 >> 2] | 0; //@line 156
    if (($45 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; //@line 166
    } else {
     $$0$i$i1$i$i24 = HEAP32[$45 >> 2] | 0; //@line 169
    }
    if (($$0$i$i1$i$i24 | 0) == -1) {
     HEAP32[$7 >> 2] = 0; //@line 173
     label = 15; //@line 174
     break;
    } else {
     if ($41) {
      $56 = $42; //@line 178
      break;
     } else {
      $$lcssa313 = $25; //@line 181
      $$lcssa330 = $24; //@line 181
      $__trailing_sign$0$lcssa = $__trailing_sign$0379; //@line 181
      $free228$lcssa = $free228372; //@line 181
      label = 292; //@line 182
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 189
   if ($41) {
    $$lcssa313 = $25; //@line 191
    $$lcssa330 = $24; //@line 191
    $__trailing_sign$0$lcssa = $__trailing_sign$0379; //@line 191
    $free228$lcssa = $free228372; //@line 191
    label = 292; //@line 192
    break;
   } else {
    $56 = 0; //@line 195
   }
  }
  L25 : do {
   switch (HEAP8[$8 + $__p$0377 | 0] | 0) {
   case 1:
    {
     if (($__p$0377 | 0) == 3) {
      $$lcssa313 = $25; //@line 206
      $$lcssa330 = $24; //@line 206
      $__trailing_sign$0$lcssa = $__trailing_sign$0379; //@line 206
      $free228$lcssa = $free228372; //@line 206
      label = 292; //@line 207
      break L1;
     }
     $60 = HEAP32[$6 >> 2] | 0; //@line 210
     $62 = HEAP32[$60 + 12 >> 2] | 0; //@line 212
     if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
      $$0$i$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0; //@line 222
     } else {
      $$0$i$i33 = HEAP32[$62 >> 2] | 0; //@line 225
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i33) | 0)) {
      label = 27; //@line 232
      break L1;
     }
     $76 = HEAP32[$6 >> 2] | 0; //@line 235
     $77 = $76 + 12 | 0; //@line 236
     $78 = HEAP32[$77 >> 2] | 0; //@line 237
     if (($78 | 0) == (HEAP32[$76 + 16 >> 2] | 0)) {
      $$0$i$i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 40 >> 2] & 127]($76) | 0; //@line 247
     } else {
      HEAP32[$77 >> 2] = $78 + 4; //@line 250
      $$0$i$i37 = HEAP32[$78 >> 2] | 0; //@line 252
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i37); //@line 254
     label = 28; //@line 255
     break;
    }
   case 0:
    {
     label = 28; //@line 259
     break;
    }
   case 3:
    {
     $151 = HEAP8[$this2$i$i$i10] | 0; //@line 263
     $153 = ($151 & 1) == 0; //@line 265
     if ($153) {
      $157 = ($151 & 255) >>> 1; //@line 269
     } else {
      $157 = HEAP32[$12 >> 2] | 0; //@line 272
     }
     $158 = HEAP8[$this2$i$i$i12] | 0; //@line 274
     $160 = ($158 & 1) == 0; //@line 276
     if ($160) {
      $164 = ($158 & 255) >>> 1; //@line 280
     } else {
      $164 = HEAP32[$10 >> 2] | 0; //@line 283
     }
     if (($157 | 0) == (0 - $164 | 0)) {
      $784 = $26; //@line 288
      $785 = $25; //@line 288
      $786 = $24; //@line 288
      $787 = $23; //@line 288
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 288
      $free229 = $free228372; //@line 288
      break L25;
     }
     if ($153) {
      $170 = ($151 & 255) >>> 1; //@line 294
     } else {
      $170 = HEAP32[$12 >> 2] | 0; //@line 297
     }
     do {
      if (($170 | 0) != 0) {
       if ($160) {
        $175 = ($158 & 255) >>> 1; //@line 305
       } else {
        $175 = HEAP32[$10 >> 2] | 0; //@line 308
       }
       if (($175 | 0) == 0) {
        break;
       }
       $250 = HEAP32[$6 >> 2] | 0; //@line 314
       $252 = HEAP32[$250 + 12 >> 2] | 0; //@line 316
       if (($252 | 0) == (HEAP32[$250 + 16 >> 2] | 0)) {
        $260 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$250 >> 2] | 0) + 36 >> 2] & 127]($250) | 0; //@line 325
        $$0$i$i104 = $260; //@line 327
        $262 = HEAP8[$this2$i$i$i10] | 0; //@line 327
       } else {
        $$0$i$i104 = HEAP32[$252 >> 2] | 0; //@line 330
        $262 = $151; //@line 330
       }
       $268 = HEAP32[$6 >> 2] | 0; //@line 338
       $269 = $268 + 12 | 0; //@line 339
       $270 = HEAP32[$269 >> 2] | 0; //@line 340
       $273 = ($270 | 0) == (HEAP32[$268 + 16 >> 2] | 0); //@line 343
       if (($$0$i$i104 | 0) == (HEAP32[(($262 & 1) == 0 ? $12 : HEAP32[$13 >> 2] | 0) >> 2] | 0)) {
        if ($273) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$268 >> 2] | 0) + 40 >> 2] & 127]($268) | 0; //@line 350
        } else {
         HEAP32[$269 >> 2] = $270 + 4; //@line 353
        }
        $279 = HEAP8[$this2$i$i$i10] | 0; //@line 355
        if (($279 & 1) == 0) {
         $285 = ($279 & 255) >>> 1; //@line 361
        } else {
         $285 = HEAP32[$12 >> 2] | 0; //@line 364
        }
        $784 = $26; //@line 368
        $785 = $25; //@line 368
        $786 = $24; //@line 368
        $787 = $23; //@line 368
        $__trailing_sign$1 = $285 >>> 0 > 1 ? $__psn : $__trailing_sign$0379; //@line 368
        $free229 = $free228372; //@line 368
        break L25;
       }
       if ($273) {
        $$0$i$i113 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$268 >> 2] | 0) + 36 >> 2] & 127]($268) | 0; //@line 377
       } else {
        $$0$i$i113 = HEAP32[$270 >> 2] | 0; //@line 380
       }
       if (($$0$i$i113 | 0) != (HEAP32[((HEAP8[$this2$i$i$i12] & 1) == 0 ? $10 : HEAP32[$11 >> 2] | 0) >> 2] | 0)) {
        label = 116; //@line 390
        break L1;
       }
       $299 = HEAP32[$6 >> 2] | 0; //@line 393
       $300 = $299 + 12 | 0; //@line 394
       $301 = HEAP32[$300 >> 2] | 0; //@line 395
       if (($301 | 0) == (HEAP32[$299 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$299 >> 2] | 0) + 40 >> 2] & 127]($299) | 0; //@line 404
       } else {
        HEAP32[$300 >> 2] = $301 + 4; //@line 407
       }
       HEAP8[$__neg] = 1; //@line 409
       $310 = HEAP8[$this2$i$i$i12] | 0; //@line 410
       if (($310 & 1) == 0) {
        $316 = ($310 & 255) >>> 1; //@line 416
       } else {
        $316 = HEAP32[$10 >> 2] | 0; //@line 419
       }
       $784 = $26; //@line 423
       $785 = $25; //@line 423
       $786 = $24; //@line 423
       $787 = $23; //@line 423
       $__trailing_sign$1 = $316 >>> 0 > 1 ? $__nsn : $__trailing_sign$0379; //@line 423
       $free229 = $free228372; //@line 423
       break L25;
      }
     } while (0);
     if ($153) {
      $180 = ($151 & 255) >>> 1; //@line 430
     } else {
      $180 = HEAP32[$12 >> 2] | 0; //@line 433
     }
     $182 = HEAP32[$6 >> 2] | 0; //@line 436
     $184 = HEAP32[$182 + 12 >> 2] | 0; //@line 438
     $187 = ($184 | 0) == (HEAP32[$182 + 16 >> 2] | 0); //@line 441
     if (($180 | 0) == 0) {
      if ($187) {
       $223 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$182 >> 2] | 0) + 36 >> 2] & 127]($182) | 0; //@line 448
       $$0$i$i79 = $223; //@line 450
       $225 = HEAP8[$this2$i$i$i12] | 0; //@line 450
      } else {
       $$0$i$i79 = HEAP32[$184 >> 2] | 0; //@line 453
       $225 = $158; //@line 453
      }
      if (($$0$i$i79 | 0) != (HEAP32[(($225 & 1) == 0 ? $10 : HEAP32[$11 >> 2] | 0) >> 2] | 0)) {
       $784 = $26; //@line 462
       $785 = $25; //@line 462
       $786 = $24; //@line 462
       $787 = $23; //@line 462
       $__trailing_sign$1 = $__trailing_sign$0379; //@line 462
       $free229 = $free228372; //@line 462
       break L25;
      }
      $231 = HEAP32[$6 >> 2] | 0; //@line 465
      $232 = $231 + 12 | 0; //@line 466
      $233 = HEAP32[$232 >> 2] | 0; //@line 467
      if (($233 | 0) == (HEAP32[$231 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$231 >> 2] | 0) + 40 >> 2] & 127]($231) | 0; //@line 476
      } else {
       HEAP32[$232 >> 2] = $233 + 4; //@line 479
      }
      HEAP8[$__neg] = 1; //@line 481
      $242 = HEAP8[$this2$i$i$i12] | 0; //@line 482
      if (($242 & 1) == 0) {
       $248 = ($242 & 255) >>> 1; //@line 488
      } else {
       $248 = HEAP32[$10 >> 2] | 0; //@line 491
      }
      $784 = $26; //@line 495
      $785 = $25; //@line 495
      $786 = $24; //@line 495
      $787 = $23; //@line 495
      $__trailing_sign$1 = $248 >>> 0 > 1 ? $__nsn : $__trailing_sign$0379; //@line 495
      $free229 = $free228372; //@line 495
      break L25;
     }
     if ($187) {
      $192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$182 >> 2] | 0) + 36 >> 2] & 127]($182) | 0; //@line 503
      $$0$i$i71 = $192; //@line 505
      $194 = HEAP8[$this2$i$i$i10] | 0; //@line 505
     } else {
      $$0$i$i71 = HEAP32[$184 >> 2] | 0; //@line 508
      $194 = $151; //@line 508
     }
     if (($$0$i$i71 | 0) != (HEAP32[(($194 & 1) == 0 ? $12 : HEAP32[$13 >> 2] | 0) >> 2] | 0)) {
      HEAP8[$__neg] = 1; //@line 517
      $784 = $26; //@line 518
      $785 = $25; //@line 518
      $786 = $24; //@line 518
      $787 = $23; //@line 518
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 518
      $free229 = $free228372; //@line 518
      break L25;
     }
     $200 = HEAP32[$6 >> 2] | 0; //@line 521
     $201 = $200 + 12 | 0; //@line 522
     $202 = HEAP32[$201 >> 2] | 0; //@line 523
     if (($202 | 0) == (HEAP32[$200 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$200 >> 2] | 0) + 40 >> 2] & 127]($200) | 0; //@line 532
     } else {
      HEAP32[$201 >> 2] = $202 + 4; //@line 535
     }
     $211 = HEAP8[$this2$i$i$i10] | 0; //@line 537
     if (($211 & 1) == 0) {
      $217 = ($211 & 255) >>> 1; //@line 543
     } else {
      $217 = HEAP32[$12 >> 2] | 0; //@line 546
     }
     $784 = $26; //@line 550
     $785 = $25; //@line 550
     $786 = $24; //@line 550
     $787 = $23; //@line 550
     $__trailing_sign$1 = $217 >>> 0 > 1 ? $__psn : $__trailing_sign$0379; //@line 550
     $free229 = $free228372; //@line 550
     break;
    }
   case 2:
    {
     if (!(($__trailing_sign$0379 | 0) != 0 | $__p$0377 >>> 0 < 2)) {
      if (($__p$0377 | 0) == 2) {
       $325 = (HEAP8[$20] | 0) != 0; //@line 562
      } else {
       $325 = 0; //@line 564
      }
      if (!($15 | $325)) {
       $784 = $26; //@line 568
       $785 = $25; //@line 568
       $786 = $24; //@line 568
       $787 = $23; //@line 568
       $__trailing_sign$1 = 0; //@line 568
       $free229 = $free228372; //@line 568
       break L25;
      }
     }
     $326 = HEAP8[$this2$i$i$i9] | 0; //@line 572
     $$480 = ($326 & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0; //@line 576
     L129 : do {
      if (($__p$0377 | 0) == 0) {
       $$pre$i3$i$i200 = $56; //@line 580
       $391 = $56; //@line 580
       $392 = $326; //@line 580
       $393 = $$480; //@line 580
      } else {
       if ((HEAPU8[$8 + ($__p$0377 + -1) | 0] | 0) < 2) {
        $334 = $326; //@line 587
        $335 = $$480; //@line 587
       } else {
        $$pre$i3$i$i200 = $56; //@line 589
        $391 = $56; //@line 589
        $392 = $326; //@line 589
        $393 = $$480; //@line 589
        break;
       }
       while (1) {
        if (($334 & 1) == 0) {
         $342 = $16; //@line 598
         $343 = ($334 & 255) >>> 1; //@line 598
        } else {
         $342 = HEAP32[$17 >> 2] | 0; //@line 602
         $343 = HEAP32[$16 >> 2] | 0; //@line 602
        }
        if (($335 | 0) == ($342 + ($343 << 2) | 0)) {
         $352 = $334; //@line 607
         break;
        }
        if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$335 >> 2] | 0) | 0)) {
         label = 129; //@line 616
         break;
        }
        $334 = HEAP8[$this2$i$i$i9] | 0; //@line 621
        $335 = $335 + 4 | 0; //@line 621
       }
       if ((label | 0) == 129) {
        label = 0; //@line 624
        $352 = HEAP8[$this2$i$i$i9] | 0; //@line 626
       }
       $354 = ($352 & 1) == 0; //@line 629
       $359 = $335 - ($354 ? $16 : HEAP32[$17 >> 2] | 0) >> 2; //@line 635
       $360 = HEAP8[$this2$i$i$i15] | 0; //@line 636
       $362 = ($360 & 1) == 0; //@line 638
       if ($362) {
        $366 = ($360 & 255) >>> 1; //@line 642
       } else {
        $366 = HEAP32[$18 >> 2] | 0; //@line 645
       }
       L146 : do {
        if (!($359 >>> 0 > $366 >>> 0)) {
         if ($362) {
          $376 = $18 + ((($360 & 255) >>> 1) - $359 << 2) | 0; //@line 657
          $377 = $18; //@line 657
          $378 = ($360 & 255) >>> 1; //@line 657
         } else {
          $368 = HEAP32[$19 >> 2] | 0; //@line 659
          $369 = HEAP32[$18 >> 2] | 0; //@line 660
          $376 = $368 + ($369 - $359 << 2) | 0; //@line 663
          $377 = $368; //@line 663
          $378 = $369; //@line 663
         }
         $379 = $377 + ($378 << 2) | 0; //@line 665
         if (($376 | 0) == ($379 | 0)) {
          $$pre$i3$i$i200 = $56; //@line 670
          $391 = $56; //@line 670
          $392 = $352; //@line 670
          $393 = $335; //@line 670
          break L129;
         } else {
          $382 = $354 ? $16 : HEAP32[$17 >> 2] | 0; //@line 673
          $383 = $376; //@line 673
         }
         while (1) {
          if ((HEAP32[$383 >> 2] | 0) != (HEAP32[$382 >> 2] | 0)) {
           break L146;
          }
          $387 = $383 + 4 | 0; //@line 682
          if (($387 | 0) == ($379 | 0)) {
           $$pre$i3$i$i200 = $56; //@line 685
           $391 = $56; //@line 685
           $392 = $352; //@line 685
           $393 = $335; //@line 685
           break L129;
          }
          $382 = $382 + 4 | 0; //@line 689
          $383 = $387; //@line 689
         }
        }
       } while (0);
       $$pre$i3$i$i200 = $56; //@line 695
       $391 = $56; //@line 695
       $392 = $352; //@line 695
       $393 = $354 ? $16 : HEAP32[$17 >> 2] | 0; //@line 695
      }
     } while (0);
     L157 : while (1) {
      if (($392 & 1) == 0) {
       $400 = $16; //@line 704
       $401 = ($392 & 255) >>> 1; //@line 704
      } else {
       $400 = HEAP32[$17 >> 2] | 0; //@line 708
       $401 = HEAP32[$16 >> 2] | 0; //@line 708
      }
      if (($393 | 0) == ($400 + ($401 << 2) | 0)) {
       break;
      }
      $404 = HEAP32[$6 >> 2] | 0; //@line 715
      do {
       if (($404 | 0) == 0) {
        $418 = 1; //@line 719
       } else {
        $407 = HEAP32[$404 + 12 >> 2] | 0; //@line 722
        if (($407 | 0) == (HEAP32[$404 + 16 >> 2] | 0)) {
         $$0$i$i$i$i192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$404 >> 2] | 0) + 36 >> 2] & 127]($404) | 0; //@line 732
        } else {
         $$0$i$i$i$i192 = HEAP32[$407 >> 2] | 0; //@line 735
        }
        if (($$0$i$i$i$i192 | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 739
         $418 = 1; //@line 740
         break;
        } else {
         $418 = (HEAP32[$6 >> 2] | 0) == 0; //@line 745
         break;
        }
       }
      } while (0);
      do {
       if (($391 | 0) == 0) {
        $$pre$i3$i$i200456 = $$pre$i3$i$i200; //@line 753
        label = 159; //@line 754
       } else {
        $421 = HEAP32[$391 + 12 >> 2] | 0; //@line 757
        if (($421 | 0) == (HEAP32[$391 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i198 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$391 >> 2] | 0) + 36 >> 2] & 127]($391) | 0; //@line 767
        } else {
         $$0$i$i1$i$i198 = HEAP32[$421 >> 2] | 0; //@line 770
        }
        if (($$0$i$i1$i$i198 | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 774
         $$pre$i3$i$i200456 = 0; //@line 775
         label = 159; //@line 776
         break;
        } else {
         if ($418 ^ ($$pre$i3$i$i200 | 0) == 0) {
          $$pre$i3$i$i200455 = $$pre$i3$i$i200; //@line 782
          $432 = $$pre$i3$i$i200; //@line 782
          break;
         } else {
          break L157;
         }
        }
       }
      } while (0);
      if ((label | 0) == 159) {
       label = 0; //@line 791
       if ($418) {
        break;
       } else {
        $$pre$i3$i$i200455 = $$pre$i3$i$i200456; //@line 795
        $432 = 0; //@line 795
       }
      }
      $433 = HEAP32[$6 >> 2] | 0; //@line 798
      $435 = HEAP32[$433 + 12 >> 2] | 0; //@line 800
      if (($435 | 0) == (HEAP32[$433 + 16 >> 2] | 0)) {
       $$0$i$i207 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$433 >> 2] | 0) + 36 >> 2] & 127]($433) | 0; //@line 810
      } else {
       $$0$i$i207 = HEAP32[$435 >> 2] | 0; //@line 813
      }
      if (($$0$i$i207 | 0) != (HEAP32[$393 >> 2] | 0)) {
       break;
      }
      $447 = HEAP32[$6 >> 2] | 0; //@line 820
      $448 = $447 + 12 | 0; //@line 821
      $449 = HEAP32[$448 >> 2] | 0; //@line 822
      if (($449 | 0) == (HEAP32[$447 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$447 >> 2] | 0) + 40 >> 2] & 127]($447) | 0; //@line 831
      } else {
       HEAP32[$448 >> 2] = $449 + 4; //@line 834
      }
      $$pre$i3$i$i200 = $$pre$i3$i$i200455; //@line 838
      $391 = $432; //@line 838
      $392 = HEAP8[$this2$i$i$i9] | 0; //@line 838
      $393 = $393 + 4 | 0; //@line 838
     }
     if (!$15) {
      $784 = $26; //@line 841
      $785 = $25; //@line 841
      $786 = $24; //@line 841
      $787 = $23; //@line 841
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 841
      $free229 = $free228372; //@line 841
      break L25;
     }
     $459 = HEAP8[$this2$i$i$i9] | 0; //@line 844
     if (($459 & 1) == 0) {
      $466 = $16; //@line 850
      $467 = ($459 & 255) >>> 1; //@line 850
     } else {
      $466 = HEAP32[$17 >> 2] | 0; //@line 854
      $467 = HEAP32[$16 >> 2] | 0; //@line 854
     }
     if (($393 | 0) == ($466 + ($467 << 2) | 0)) {
      $784 = $26; //@line 859
      $785 = $25; //@line 859
      $786 = $24; //@line 859
      $787 = $23; //@line 859
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 859
      $free229 = $free228372; //@line 859
     } else {
      label = 174; //@line 861
      break L1;
     }
     break;
    }
   case 4:
    {
     $472 = $26; //@line 867
     $473 = $25; //@line 867
     $474 = $24; //@line 867
     $475 = $23; //@line 867
     $__ng$0 = 0; //@line 867
     $free227 = $free228372; //@line 867
     L201 : while (1) {
      $476 = HEAP32[$6 >> 2] | 0; //@line 869
      do {
       if (($476 | 0) == 0) {
        $490 = 1; //@line 873
       } else {
        $479 = HEAP32[$476 + 12 >> 2] | 0; //@line 876
        if (($479 | 0) == (HEAP32[$476 + 16 >> 2] | 0)) {
         $$0$i$i$i$i177 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$476 >> 2] | 0) + 36 >> 2] & 127]($476) | 0; //@line 886
        } else {
         $$0$i$i$i$i177 = HEAP32[$479 >> 2] | 0; //@line 889
        }
        if (($$0$i$i$i$i177 | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 893
         $490 = 1; //@line 894
         break;
        } else {
         $490 = (HEAP32[$6 >> 2] | 0) == 0; //@line 899
         break;
        }
       }
      } while (0);
      $491 = HEAP32[$7 >> 2] | 0; //@line 904
      do {
       if (($491 | 0) == 0) {
        label = 188; //@line 908
       } else {
        $494 = HEAP32[$491 + 12 >> 2] | 0; //@line 911
        if (($494 | 0) == (HEAP32[$491 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i183 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$491 >> 2] | 0) + 36 >> 2] & 127]($491) | 0; //@line 921
        } else {
         $$0$i$i1$i$i183 = HEAP32[$494 >> 2] | 0; //@line 924
        }
        if (($$0$i$i1$i$i183 | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 928
         label = 188; //@line 929
         break;
        } else {
         if ($490) {
          break;
         } else {
          break L201;
         }
        }
       }
      } while (0);
      if ((label | 0) == 188) {
       label = 0; //@line 941
       if ($490) {
        break;
       }
      }
      $505 = HEAP32[$6 >> 2] | 0; //@line 946
      $507 = HEAP32[$505 + 12 >> 2] | 0; //@line 948
      if (($507 | 0) == (HEAP32[$505 + 16 >> 2] | 0)) {
       $$0$i$i173 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$505 >> 2] | 0) + 36 >> 2] & 127]($505) | 0; //@line 958
      } else {
       $$0$i$i173 = HEAP32[$507 >> 2] | 0; //@line 961
      }
      if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i173) | 0) {
       $521 = HEAP32[$__wn >> 2] | 0; //@line 968
       if (($521 | 0) == ($472 | 0)) {
        $524 = (HEAP32[$21 >> 2] | 0) != 127; //@line 972
        $525 = HEAP32[$4 >> 2] | 0; //@line 973
        $528 = $472 - $525 | 0; //@line 976
        $$$i159 = $528 >>> 0 < 2147483647 ? $528 << 1 : -1; //@line 979
        $531 = $528 >> 2; //@line 980
        if ($524) {
         $532 = $525; //@line 983
        } else {
         $532 = 0; //@line 985
        }
        $533 = _realloc($532, $$$i159) | 0; //@line 987
        $534 = $533; //@line 988
        if (($533 | 0) == 0) {
         label = 198; //@line 991
         break L1;
        }
        do {
         if ($524) {
          HEAP32[$4 >> 2] = $534; //@line 996
          $539 = $534; //@line 997
         } else {
          $$pr$i162 = HEAP32[$4 >> 2] | 0; //@line 999
          HEAP32[$4 >> 2] = $534; //@line 1000
          if (($$pr$i162 | 0) == 0) {
           $539 = $534; //@line 1003
           break;
          }
          FUNCTION_TABLE_vi[HEAP32[$21 >> 2] & 255]($$pr$i162); //@line 1008
          $539 = HEAP32[$4 >> 2] | 0; //@line 1010
         }
        } while (0);
        HEAP32[$21 >> 2] = 128; //@line 1013
        $541 = $539 + ($531 << 2) | 0; //@line 1015
        HEAP32[$__wn >> 2] = $541; //@line 1016
        $544 = $541; //@line 1019
        $545 = (HEAP32[$4 >> 2] | 0) + ($$$i159 >>> 2 << 2) | 0; //@line 1019
       } else {
        $544 = $521; //@line 1021
        $545 = $472; //@line 1021
       }
       HEAP32[$__wn >> 2] = $544 + 4; //@line 1024
       HEAP32[$544 >> 2] = $$0$i$i173; //@line 1025
       $578 = $545; //@line 1027
       $579 = $473; //@line 1027
       $580 = $474; //@line 1027
       $581 = $475; //@line 1027
       $__ng$1 = $__ng$0 + 1 | 0; //@line 1027
       $free = $free227; //@line 1027
      } else {
       $548 = HEAP8[$this2$i$i$i] | 0; //@line 1029
       if (($548 & 1) == 0) {
        $554 = ($548 & 255) >>> 1; //@line 1035
       } else {
        $554 = HEAP32[$22 >> 2] | 0; //@line 1038
       }
       if (($554 | 0) == 0 | ($__ng$0 | 0) == 0) {
        break;
       }
       if (($$0$i$i173 | 0) != (HEAP32[$__ts >> 2] | 0)) {
        break;
       }
       if (($474 | 0) == ($475 | 0)) {
        $563 = $474 - $473 | 0; //@line 1056
        $$$i149 = $563 >>> 0 < 2147483647 ? $563 << 1 : -1; //@line 1059
        if (($free227 | 0) != 127) {
         $567 = $473; //@line 1063
        } else {
         $567 = 0; //@line 1065
        }
        $568 = _realloc($567, $$$i149) | 0; //@line 1067
        $569 = $568; //@line 1068
        if (($568 | 0) == 0) {
         label = 214; //@line 1071
         break L1;
        }
        $574 = $569; //@line 1077
        $575 = $569 + ($563 >> 2 << 2) | 0; //@line 1077
        $576 = $569 + ($$$i149 >>> 2 << 2) | 0; //@line 1077
        $free226 = 128; //@line 1077
       } else {
        $574 = $473; //@line 1079
        $575 = $474; //@line 1079
        $576 = $475; //@line 1079
        $free226 = $free227; //@line 1079
       }
       HEAP32[$575 >> 2] = $__ng$0; //@line 1082
       $578 = $472; //@line 1083
       $579 = $574; //@line 1083
       $580 = $575 + 4 | 0; //@line 1083
       $581 = $576; //@line 1083
       $__ng$1 = 0; //@line 1083
       $free = $free226; //@line 1083
      }
      $582 = HEAP32[$6 >> 2] | 0; //@line 1085
      $583 = $582 + 12 | 0; //@line 1086
      $584 = HEAP32[$583 >> 2] | 0; //@line 1087
      if (($584 | 0) == (HEAP32[$582 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$582 >> 2] | 0) + 40 >> 2] & 127]($582) | 0; //@line 1096
       $472 = $578; //@line 1097
       $473 = $579; //@line 1097
       $474 = $580; //@line 1097
       $475 = $581; //@line 1097
       $__ng$0 = $__ng$1; //@line 1097
       $free227 = $free; //@line 1097
       continue;
      } else {
       HEAP32[$583 >> 2] = $584 + 4; //@line 1101
       $472 = $578; //@line 1102
       $473 = $579; //@line 1102
       $474 = $580; //@line 1102
       $475 = $581; //@line 1102
       $__ng$0 = $__ng$1; //@line 1102
       $free227 = $free; //@line 1102
       continue;
      }
     }
     if (($473 | 0) == ($474 | 0) | ($__ng$0 | 0) == 0) {
      $614 = $473; //@line 1110
      $615 = $474; //@line 1110
      $616 = $475; //@line 1110
      $free230 = $free227; //@line 1110
     } else {
      if (($474 | 0) == ($475 | 0)) {
       $599 = $474 - $473 | 0; //@line 1117
       $$$i138 = $599 >>> 0 < 2147483647 ? $599 << 1 : -1; //@line 1120
       if (($free227 | 0) != 127) {
        $603 = $473; //@line 1124
       } else {
        $603 = 0; //@line 1126
       }
       $604 = _realloc($603, $$$i138) | 0; //@line 1128
       $605 = $604; //@line 1129
       if (($604 | 0) == 0) {
        label = 225; //@line 1132
        break L1;
       }
       $610 = $605; //@line 1138
       $611 = $605 + ($599 >> 2 << 2) | 0; //@line 1138
       $612 = $605 + ($$$i138 >>> 2 << 2) | 0; //@line 1138
       $free231 = 128; //@line 1138
      } else {
       $610 = $473; //@line 1140
       $611 = $474; //@line 1140
       $612 = $475; //@line 1140
       $free231 = $free227; //@line 1140
      }
      HEAP32[$611 >> 2] = $__ng$0; //@line 1143
      $614 = $610; //@line 1144
      $615 = $611 + 4 | 0; //@line 1144
      $616 = $612; //@line 1144
      $free230 = $free231; //@line 1144
     }
     $617 = HEAP32[$__fd >> 2] | 0; //@line 1146
     if (($617 | 0) > 0) {
      $619 = HEAP32[$6 >> 2] | 0; //@line 1149
      do {
       if (($619 | 0) == 0) {
        $633 = 1; //@line 1153
       } else {
        $622 = HEAP32[$619 + 12 >> 2] | 0; //@line 1156
        if (($622 | 0) == (HEAP32[$619 + 16 >> 2] | 0)) {
         $$0$i$i$i$i123 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$619 >> 2] | 0) + 36 >> 2] & 127]($619) | 0; //@line 1166
        } else {
         $$0$i$i$i$i123 = HEAP32[$622 >> 2] | 0; //@line 1169
        }
        if (($$0$i$i$i$i123 | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 1173
         $633 = 1; //@line 1174
         break;
        } else {
         $633 = (HEAP32[$6 >> 2] | 0) == 0; //@line 1179
         break;
        }
       }
      } while (0);
      $634 = HEAP32[$7 >> 2] | 0; //@line 1184
      do {
       if (($634 | 0) == 0) {
        label = 242; //@line 1188
       } else {
        $637 = HEAP32[$634 + 12 >> 2] | 0; //@line 1191
        if (($637 | 0) == (HEAP32[$634 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i129 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$634 >> 2] | 0) + 36 >> 2] & 127]($634) | 0; //@line 1201
        } else {
         $$0$i$i1$i$i129 = HEAP32[$637 >> 2] | 0; //@line 1204
        }
        if (($$0$i$i1$i$i129 | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 1208
         label = 242; //@line 1209
         break;
        } else {
         if ($633) {
          $648 = $634; //@line 1213
          break;
         } else {
          label = 248; //@line 1216
          break L1;
         }
        }
       }
      } while (0);
      if ((label | 0) == 242) {
       label = 0; //@line 1223
       if ($633) {
        label = 248; //@line 1225
        break L1;
       } else {
        $648 = 0; //@line 1228
       }
      }
      $649 = HEAP32[$6 >> 2] | 0; //@line 1231
      $651 = HEAP32[$649 + 12 >> 2] | 0; //@line 1233
      if (($651 | 0) == (HEAP32[$649 + 16 >> 2] | 0)) {
       $$0$i$i117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$649 >> 2] | 0) + 36 >> 2] & 127]($649) | 0; //@line 1243
      } else {
       $$0$i$i117 = HEAP32[$651 >> 2] | 0; //@line 1246
      }
      if (($$0$i$i117 | 0) != (HEAP32[$__dp >> 2] | 0)) {
       label = 248; //@line 1251
       break L1;
      }
      $665 = HEAP32[$6 >> 2] | 0; //@line 1254
      $666 = $665 + 12 | 0; //@line 1255
      $667 = HEAP32[$666 >> 2] | 0; //@line 1256
      if (($667 | 0) == (HEAP32[$665 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$665 >> 2] | 0) + 40 >> 2] & 127]($665) | 0; //@line 1265
       $$pre$i3$i$i97 = $648; //@line 1266
       $676 = $617; //@line 1266
       $677 = $648; //@line 1266
       $678 = $472; //@line 1266
      } else {
       HEAP32[$666 >> 2] = $667 + 4; //@line 1269
       $$pre$i3$i$i97 = $648; //@line 1270
       $676 = $617; //@line 1270
       $677 = $648; //@line 1270
       $678 = $472; //@line 1270
      }
      while (1) {
       $679 = HEAP32[$6 >> 2] | 0; //@line 1273
       do {
        if (($679 | 0) == 0) {
         $693 = 1; //@line 1277
        } else {
         $682 = HEAP32[$679 + 12 >> 2] | 0; //@line 1280
         if (($682 | 0) == (HEAP32[$679 + 16 >> 2] | 0)) {
          $$0$i$i$i$i89 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$679 >> 2] | 0) + 36 >> 2] & 127]($679) | 0; //@line 1290
         } else {
          $$0$i$i$i$i89 = HEAP32[$682 >> 2] | 0; //@line 1293
         }
         if (($$0$i$i$i$i89 | 0) == -1) {
          HEAP32[$6 >> 2] = 0; //@line 1297
          $693 = 1; //@line 1298
          break;
         } else {
          $693 = (HEAP32[$6 >> 2] | 0) == 0; //@line 1303
          break;
         }
        }
       } while (0);
       do {
        if (($677 | 0) == 0) {
         $$pre$i3$i$i97459$ph = $$pre$i3$i$i97; //@line 1311
         label = 265; //@line 1312
        } else {
         $696 = HEAP32[$677 + 12 >> 2] | 0; //@line 1315
         if (($696 | 0) == (HEAP32[$677 + 16 >> 2] | 0)) {
          $$0$i$i1$i$i95 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$677 >> 2] | 0) + 36 >> 2] & 127]($677) | 0; //@line 1325
         } else {
          $$0$i$i1$i$i95 = HEAP32[$696 >> 2] | 0; //@line 1328
         }
         if (($$0$i$i1$i$i95 | 0) == -1) {
          HEAP32[$7 >> 2] = 0; //@line 1332
          $$pre$i3$i$i97459$ph = 0; //@line 1333
          label = 265; //@line 1334
          break;
         } else {
          if ($693 ^ ($$pre$i3$i$i97 | 0) == 0) {
           $$pre$i3$i$i97459475 = $$pre$i3$i$i97; //@line 1340
           $707 = $$pre$i3$i$i97; //@line 1340
           break;
          } else {
           label = 271; //@line 1343
           break L1;
          }
         }
        }
       } while (0);
       if ((label | 0) == 265) {
        label = 0; //@line 1350
        if ($693) {
         label = 271; //@line 1352
         break L1;
        } else {
         $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph; //@line 1355
         $707 = 0; //@line 1355
        }
       }
       $708 = HEAP32[$6 >> 2] | 0; //@line 1358
       $710 = HEAP32[$708 + 12 >> 2] | 0; //@line 1360
       if (($710 | 0) == (HEAP32[$708 + 16 >> 2] | 0)) {
        $$0$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$708 >> 2] | 0) + 36 >> 2] & 127]($708) | 0; //@line 1370
       } else {
        $$0$i$i83 = HEAP32[$710 >> 2] | 0; //@line 1373
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i83) | 0)) {
        label = 271; //@line 1380
        break L1;
       }
       $726 = HEAP32[$__wn >> 2] | 0; //@line 1383
       if (($726 | 0) == ($678 | 0)) {
        $729 = (HEAP32[$21 >> 2] | 0) != 127; //@line 1387
        $730 = HEAP32[$4 >> 2] | 0; //@line 1388
        $733 = $678 - $730 | 0; //@line 1391
        $$$i = $733 >>> 0 < 2147483647 ? $733 << 1 : -1; //@line 1394
        $736 = $733 >> 2; //@line 1395
        if ($729) {
         $737 = $730; //@line 1398
        } else {
         $737 = 0; //@line 1400
        }
        $738 = _realloc($737, $$$i) | 0; //@line 1402
        $739 = $738; //@line 1403
        if (($738 | 0) == 0) {
         label = 276; //@line 1406
         break L1;
        }
        do {
         if ($729) {
          HEAP32[$4 >> 2] = $739; //@line 1411
          $744 = $739; //@line 1412
         } else {
          $$pr$i = HEAP32[$4 >> 2] | 0; //@line 1414
          HEAP32[$4 >> 2] = $739; //@line 1415
          if (($$pr$i | 0) == 0) {
           $744 = $739; //@line 1418
           break;
          }
          FUNCTION_TABLE_vi[HEAP32[$21 >> 2] & 255]($$pr$i); //@line 1423
          $744 = HEAP32[$4 >> 2] | 0; //@line 1425
         }
        } while (0);
        HEAP32[$21 >> 2] = 128; //@line 1428
        $746 = $744 + ($736 << 2) | 0; //@line 1430
        HEAP32[$__wn >> 2] = $746; //@line 1431
        $749 = $746; //@line 1434
        $750 = (HEAP32[$4 >> 2] | 0) + ($$$i >>> 2 << 2) | 0; //@line 1434
       } else {
        $749 = $726; //@line 1436
        $750 = $678; //@line 1436
       }
       $751 = HEAP32[$6 >> 2] | 0; //@line 1438
       $753 = HEAP32[$751 + 12 >> 2] | 0; //@line 1440
       if (($753 | 0) == (HEAP32[$751 + 16 >> 2] | 0)) {
        $761 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$751 >> 2] | 0) + 36 >> 2] & 127]($751) | 0; //@line 1449
        $$0$i$i64 = $761; //@line 1451
        $763 = HEAP32[$__wn >> 2] | 0; //@line 1451
       } else {
        $$0$i$i64 = HEAP32[$753 >> 2] | 0; //@line 1454
        $763 = $749; //@line 1454
       }
       HEAP32[$__wn >> 2] = $763 + 4; //@line 1457
       HEAP32[$763 >> 2] = $$0$i$i64; //@line 1458
       $765 = $676 + -1 | 0; //@line 1459
       HEAP32[$__fd >> 2] = $765; //@line 1460
       $766 = HEAP32[$6 >> 2] | 0; //@line 1461
       $767 = $766 + 12 | 0; //@line 1462
       $768 = HEAP32[$767 >> 2] | 0; //@line 1463
       if (($768 | 0) == (HEAP32[$766 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$766 >> 2] | 0) + 40 >> 2] & 127]($766) | 0; //@line 1472
       } else {
        HEAP32[$767 >> 2] = $768 + 4; //@line 1475
       }
       if (($765 | 0) > 0) {
        $$pre$i3$i$i97 = $$pre$i3$i$i97459475; //@line 1479
        $676 = $765; //@line 1479
        $677 = $707; //@line 1479
        $678 = $750; //@line 1479
       } else {
        $778 = $750; //@line 1481
        break;
       }
      }
     } else {
      $778 = $472; //@line 1486
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
      label = 290; //@line 1492
      break L1;
     } else {
      $784 = $778; //@line 1495
      $785 = $614; //@line 1495
      $786 = $615; //@line 1495
      $787 = $616; //@line 1495
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 1495
      $free229 = $free230; //@line 1495
     }
     break;
    }
   default:
    {
     $784 = $26; //@line 1500
     $785 = $25; //@line 1500
     $786 = $24; //@line 1500
     $787 = $23; //@line 1500
     $__trailing_sign$1 = $__trailing_sign$0379; //@line 1500
     $free229 = $free228372; //@line 1500
    }
   }
  } while (0);
  L354 : do {
   if ((label | 0) == 28) {
    label = 0; //@line 1506
    if (($__p$0377 | 0) == 3) {
     $$lcssa313 = $25; //@line 1509
     $$lcssa330 = $24; //@line 1509
     $__trailing_sign$0$lcssa = $__trailing_sign$0379; //@line 1509
     $free228$lcssa = $free228372; //@line 1509
     label = 292; //@line 1510
     break L1;
    } else {
     $$pre$i3$i$i47 = $56; //@line 1513
     $92 = $56; //@line 1513
    }
    while (1) {
     $93 = HEAP32[$6 >> 2] | 0; //@line 1516
     do {
      if (($93 | 0) == 0) {
       $107 = 1; //@line 1520
      } else {
       $96 = HEAP32[$93 + 12 >> 2] | 0; //@line 1523
       if (($96 | 0) == (HEAP32[$93 + 16 >> 2] | 0)) {
        $$0$i$i$i$i39 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 36 >> 2] & 127]($93) | 0; //@line 1533
       } else {
        $$0$i$i$i$i39 = HEAP32[$96 >> 2] | 0; //@line 1536
       }
       if (($$0$i$i$i$i39 | 0) == -1) {
        HEAP32[$6 >> 2] = 0; //@line 1540
        $107 = 1; //@line 1541
        break;
       } else {
        $107 = (HEAP32[$6 >> 2] | 0) == 0; //@line 1546
        break;
       }
      }
     } while (0);
     do {
      if (($92 | 0) == 0) {
       $$pre$i3$i$i47452 = $$pre$i3$i$i47; //@line 1554
       label = 42; //@line 1555
      } else {
       $110 = HEAP32[$92 + 12 >> 2] | 0; //@line 1558
       if (($110 | 0) == (HEAP32[$92 + 16 >> 2] | 0)) {
        $$0$i$i1$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 36 >> 2] & 127]($92) | 0; //@line 1568
       } else {
        $$0$i$i1$i$i45 = HEAP32[$110 >> 2] | 0; //@line 1571
       }
       if (($$0$i$i1$i$i45 | 0) == -1) {
        HEAP32[$7 >> 2] = 0; //@line 1575
        $$pre$i3$i$i47452 = 0; //@line 1576
        label = 42; //@line 1577
        break;
       } else {
        if ($107 ^ ($$pre$i3$i$i47 | 0) == 0) {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47; //@line 1583
         $121 = $$pre$i3$i$i47; //@line 1583
         break;
        } else {
         $784 = $26; //@line 1586
         $785 = $25; //@line 1586
         $786 = $24; //@line 1586
         $787 = $23; //@line 1586
         $__trailing_sign$1 = $__trailing_sign$0379; //@line 1586
         $free229 = $free228372; //@line 1586
         break L354;
        }
       }
      }
     } while (0);
     if ((label | 0) == 42) {
      label = 0; //@line 1593
      if ($107) {
       $784 = $26; //@line 1595
       $785 = $25; //@line 1595
       $786 = $24; //@line 1595
       $787 = $23; //@line 1595
       $__trailing_sign$1 = $__trailing_sign$0379; //@line 1595
       $free229 = $free228372; //@line 1595
       break L354;
      } else {
       $$pre$i3$i$i47454 = $$pre$i3$i$i47452; //@line 1598
       $121 = 0; //@line 1598
      }
     }
     $122 = HEAP32[$6 >> 2] | 0; //@line 1601
     $124 = HEAP32[$122 + 12 >> 2] | 0; //@line 1603
     if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) {
      $$0$i$i54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 36 >> 2] & 127]($122) | 0; //@line 1613
     } else {
      $$0$i$i54 = HEAP32[$124 >> 2] | 0; //@line 1616
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i54) | 0)) {
      $784 = $26; //@line 1623
      $785 = $25; //@line 1623
      $786 = $24; //@line 1623
      $787 = $23; //@line 1623
      $__trailing_sign$1 = $__trailing_sign$0379; //@line 1623
      $free229 = $free228372; //@line 1623
      break L354;
     }
     $138 = HEAP32[$6 >> 2] | 0; //@line 1626
     $139 = $138 + 12 | 0; //@line 1627
     $140 = HEAP32[$139 >> 2] | 0; //@line 1628
     if (($140 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) {
      $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 40 >> 2] & 127]($138) | 0; //@line 1638
     } else {
      HEAP32[$139 >> 2] = $140 + 4; //@line 1641
      $$0$i$i59 = HEAP32[$140 >> 2] | 0; //@line 1643
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i59); //@line 1645
     $$pre$i3$i$i47 = $$pre$i3$i$i47454; //@line 1646
     $92 = $121; //@line 1646
    }
   }
  } while (0);
  $788 = $__p$0377 + 1 | 0; //@line 1650
  if ($788 >>> 0 < 4) {
   $23 = $787; //@line 1653
   $24 = $786; //@line 1653
   $25 = $785; //@line 1653
   $26 = $784; //@line 1653
   $__p$0377 = $788; //@line 1653
   $__trailing_sign$0379 = $__trailing_sign$1; //@line 1653
   $free228372 = $free229; //@line 1653
  } else {
   $$lcssa313 = $785; //@line 1655
   $$lcssa330 = $786; //@line 1655
   $__trailing_sign$0$lcssa = $__trailing_sign$1; //@line 1655
   $free228$lcssa = $free229; //@line 1655
   label = 292; //@line 1656
   break;
  }
 }
 L390 : do {
  if ((label | 0) == 27) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1664
   $$0 = 0; //@line 1665
   $870 = $25; //@line 1665
   $free234 = $free228372; //@line 1665
  } else if ((label | 0) == 116) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1670
   $$0 = 0; //@line 1671
   $870 = $25; //@line 1671
   $free234 = $free228372; //@line 1671
  } else if ((label | 0) == 174) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1676
   $$0 = 0; //@line 1677
   $870 = $25; //@line 1677
   $free234 = $free228372; //@line 1677
  } else if ((label | 0) == 198) {
   __ZSt17__throw_bad_allocv(); //@line 1680
  } else if ((label | 0) == 214) {
   __ZSt17__throw_bad_allocv(); //@line 1684
  } else if ((label | 0) == 225) {
   __ZSt17__throw_bad_allocv(); //@line 1688
  } else if ((label | 0) == 248) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1694
   $$0 = 0; //@line 1695
   $870 = $614; //@line 1695
   $free234 = $free230; //@line 1695
  } else if ((label | 0) == 271) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1700
   $$0 = 0; //@line 1701
   $870 = $614; //@line 1701
   $free234 = $free230; //@line 1701
  } else if ((label | 0) == 276) {
   __ZSt17__throw_bad_allocv(); //@line 1704
  } else if ((label | 0) == 290) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1710
   $$0 = 0; //@line 1711
   $870 = $614; //@line 1711
   $free234 = $free230; //@line 1711
  } else if ((label | 0) == 292) {
   L402 : do {
    if (($__trailing_sign$0$lcssa | 0) != 0) {
     $791 = $__trailing_sign$0$lcssa; //@line 1717
     $792 = $__trailing_sign$0$lcssa + 4 | 0; //@line 1718
     $793 = $__trailing_sign$0$lcssa + 8 | 0; //@line 1719
     $__i$0 = 1; //@line 1720
     L404 : while (1) {
      $794 = HEAP8[$791] | 0; //@line 1722
      if (($794 & 1) == 0) {
       $800 = ($794 & 255) >>> 1; //@line 1728
      } else {
       $800 = HEAP32[$792 >> 2] | 0; //@line 1731
      }
      if (!($__i$0 >>> 0 < $800 >>> 0)) {
       break L402;
      }
      $802 = HEAP32[$6 >> 2] | 0; //@line 1737
      do {
       if (($802 | 0) == 0) {
        $816 = 1; //@line 1741
       } else {
        $805 = HEAP32[$802 + 12 >> 2] | 0; //@line 1744
        if (($805 | 0) == (HEAP32[$802 + 16 >> 2] | 0)) {
         $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$802 >> 2] | 0) + 36 >> 2] & 127]($802) | 0; //@line 1754
        } else {
         $$0$i$i$i$i = HEAP32[$805 >> 2] | 0; //@line 1757
        }
        if (($$0$i$i$i$i | 0) == -1) {
         HEAP32[$6 >> 2] = 0; //@line 1761
         $816 = 1; //@line 1762
         break;
        } else {
         $816 = (HEAP32[$6 >> 2] | 0) == 0; //@line 1767
         break;
        }
       }
      } while (0);
      $817 = HEAP32[$7 >> 2] | 0; //@line 1772
      do {
       if (($817 | 0) == 0) {
        label = 311; //@line 1776
       } else {
        $820 = HEAP32[$817 + 12 >> 2] | 0; //@line 1779
        if (($820 | 0) == (HEAP32[$817 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$817 >> 2] | 0) + 36 >> 2] & 127]($817) | 0; //@line 1789
        } else {
         $$0$i$i1$i$i = HEAP32[$820 >> 2] | 0; //@line 1792
        }
        if (($$0$i$i1$i$i | 0) == -1) {
         HEAP32[$7 >> 2] = 0; //@line 1796
         label = 311; //@line 1797
         break;
        } else {
         if ($816) {
          break;
         } else {
          break L404;
         }
        }
       }
      } while (0);
      if ((label | 0) == 311) {
       label = 0; //@line 1809
       if ($816) {
        break;
       }
      }
      $831 = HEAP32[$6 >> 2] | 0; //@line 1814
      $833 = HEAP32[$831 + 12 >> 2] | 0; //@line 1816
      if (($833 | 0) == (HEAP32[$831 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$831 >> 2] | 0) + 36 >> 2] & 127]($831) | 0; //@line 1826
      } else {
       $$0$i$i = HEAP32[$833 >> 2] | 0; //@line 1829
      }
      if ((HEAP8[$791] & 1) == 0) {
       $847 = $792; //@line 1835
      } else {
       $847 = HEAP32[$793 >> 2] | 0; //@line 1838
      }
      if (($$0$i$i | 0) != (HEAP32[$847 + ($__i$0 << 2) >> 2] | 0)) {
       break;
      }
      $853 = $__i$0 + 1 | 0; //@line 1846
      $854 = HEAP32[$6 >> 2] | 0; //@line 1847
      $855 = $854 + 12 | 0; //@line 1848
      $856 = HEAP32[$855 >> 2] | 0; //@line 1849
      if (($856 | 0) == (HEAP32[$854 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$854 >> 2] | 0) + 40 >> 2] & 127]($854) | 0; //@line 1858
       $__i$0 = $853; //@line 1859
       continue;
      } else {
       HEAP32[$855 >> 2] = $856 + 4; //@line 1863
       $__i$0 = $853; //@line 1864
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1870
     $$0 = 0; //@line 1871
     $870 = $$lcssa313; //@line 1871
     $free234 = $free228$lcssa; //@line 1871
     break L390;
    }
   } while (0);
   if (($$lcssa313 | 0) == ($$lcssa330 | 0)) {
    $$0 = 1; //@line 1877
    $870 = $$lcssa330; //@line 1877
    $free234 = $free228$lcssa; //@line 1877
    break;
   }
   HEAP32[$__et >> 2] = 0; //@line 1880
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $$lcssa313, $$lcssa330, $__et); //@line 1881
   if ((HEAP32[$__et >> 2] | 0) == 0) {
    $$0 = 1; //@line 1885
    $870 = $$lcssa313; //@line 1885
    $free234 = $free228$lcssa; //@line 1885
    break;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1890
   $$0 = 0; //@line 1891
   $870 = $$lcssa313; //@line 1891
   $free234 = $free228$lcssa; //@line 1891
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces); //@line 1894
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn); //@line 1895
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn); //@line 1896
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym); //@line 1897
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 1898
 if (($870 | 0) == 0) {
  STACKTOP = sp; //@line 1901
  return $$0 | 0; //@line 1901
 }
 FUNCTION_TABLE_vi[$free234 & 255]($870); //@line 1904
 STACKTOP = sp; //@line 1905
 return $$0 | 0; //@line 1905
}
function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$lcssa43$i = 0, $$pn$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $1 = 0, $10 = 0, $104 = 0, $115 = 0, $122 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $148 = 0, $149 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $169 = 0, $17 = 0, $186 = 0.0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $208 = 0, $211 = 0, $217 = 0, $218 = 0, $219 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $237 = 0, $238 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $257 = 0, $271 = 0, $273 = 0, $284 = 0, $285 = 0, $287 = 0, $290 = 0, $291 = 0, $293 = 0, $294 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $310 = 0.0, $311 = 0.0, $314 = 0, $322 = 0.0, $331 = 0, $332 = 0, $339 = 0, $347 = 0, $348 = 0, $349 = 0, $357 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $382 = 0, $383 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $398 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $415 = 0, $416 = 0, $424 = 0, $425 = 0, $426 = 0, $43 = 0, $433 = 0, $434 = 0, $436 = 0, $454 = 0, $456 = 0, $466 = 0, $468 = 0, $480 = 0, $481 = 0, $504 = 0, $516 = 0, $520 = 0, $523 = 0, $525 = 0, $526 = 0, $527 = 0, $530 = 0, $531 = 0, $534 = 0, $544 = 0, $547 = 0, $549 = 0, $551 = 0, $552 = 0, $558 = 0, $559 = 0, $563 = 0, $566 = 0, $571 = 0, $573 = 0, $575 = 0, $576 = 0, $582 = 0, $583 = 0, $587 = 0, $590 = 0, $594 = 0, $597 = 0, $60 = 0, $602 = 0, $608 = 0, $611 = 0, $613 = 0, $616 = 0, $618 = 0, $620 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $629 = 0, $641 = 0, $644 = 0, $645 = 0, $653 = 0.0, $655 = 0, $661 = 0.0, $664 = 0.0, $668 = 0, $67 = 0, $671 = 0, $69 = 0, $695 = 0.0, $712 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0, $76 = 0, $82 = 0, $89 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $or$cond15$i = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 51
 STACKTOP = STACKTOP + 512 | 0; //@line 52
 $x$i = sp; //@line 53
 if (($prec | 0) == 1) {
  $bits$0$ph = 53; //@line 55
  $emin$0$ph = -1074; //@line 55
 } else if (($prec | 0) == 2) {
  $bits$0$ph = 53; //@line 57
  $emin$0$ph = -1074; //@line 57
 } else if (($prec | 0) == 0) {
  $bits$0$ph = 24; //@line 59
  $emin$0$ph = -149; //@line 59
 } else {
  $$0 = 0.0; //@line 61
  STACKTOP = sp; //@line 62
  return +$$0;
 }
 $1 = $f + 4 | 0; //@line 64
 $2 = $f + 100 | 0; //@line 65
 do {
  $3 = HEAP32[$1 >> 2] | 0; //@line 67
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $3 + 1; //@line 72
   $10 = HEAPU8[$3] | 0; //@line 75
  } else {
   $10 = ___shgetc($f) | 0; //@line 78
  }
 } while ((_isspace($10 | 0) | 0) != 0);
 do {
  if (($10 | 0) == 43 | ($10 | 0) == 45) {
   $16 = 1 - ((($10 | 0) == 45) << 1) | 0; //@line 91
   $17 = HEAP32[$1 >> 2] | 0; //@line 92
   if ($17 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $17 + 1; //@line 97
    $c$0 = HEAPU8[$17] | 0; //@line 100
    $sign$0 = $16; //@line 100
    break;
   } else {
    $c$0 = ___shgetc($f) | 0; //@line 104
    $sign$0 = $16; //@line 104
    break;
   }
  } else {
   $c$0 = $10; //@line 108
   $sign$0 = 1; //@line 108
  }
 } while (0);
 $c$169 = $c$0; //@line 111
 $i$068 = 0; //@line 111
 while (1) {
  if (($c$169 | 32 | 0) != (HEAP8[14608 + $i$068 | 0] | 0)) {
   $c$1$lcssa = $c$169; //@line 119
   $i$0$lcssa = $i$068; //@line 119
   break;
  }
  do {
   if ($i$068 >>> 0 < 7) {
    $30 = HEAP32[$1 >> 2] | 0; //@line 125
    if ($30 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$1 >> 2] = $30 + 1; //@line 130
     $c$2 = HEAPU8[$30] | 0; //@line 133
     break;
    } else {
     $c$2 = ___shgetc($f) | 0; //@line 137
     break;
    }
   } else {
    $c$2 = $c$169; //@line 141
   }
  } while (0);
  $37 = $i$068 + 1 | 0; //@line 144
  if ($37 >>> 0 < 8) {
   $c$169 = $c$2; //@line 147
   $i$068 = $37; //@line 147
  } else {
   $c$1$lcssa = $c$2; //@line 149
   $i$0$lcssa = $37; //@line 149
   break;
  }
 }
 do {
  if (($i$0$lcssa | 0) == 3) {
   label = 23; //@line 155
  } else if (($i$0$lcssa | 0) != 8) {
   $40 = ($pok | 0) == 0; //@line 158
   if (!($i$0$lcssa >>> 0 < 4 | $40)) {
    if (($i$0$lcssa | 0) == 8) {
     break;
    } else {
     label = 23; //@line 165
     break;
    }
   }
   L34 : do {
    if (($i$0$lcssa | 0) == 0) {
     $c$364 = $c$1$lcssa; //@line 172
     $i$263 = 0; //@line 172
     while (1) {
      if (($c$364 | 32 | 0) != (HEAP8[14624 + $i$263 | 0] | 0)) {
       $c$5 = $c$364; //@line 180
       $i$3 = $i$263; //@line 180
       break L34;
      }
      do {
       if ($i$263 >>> 0 < 2) {
        $60 = HEAP32[$1 >> 2] | 0; //@line 186
        if ($60 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
         HEAP32[$1 >> 2] = $60 + 1; //@line 191
         $c$4 = HEAPU8[$60] | 0; //@line 194
         break;
        } else {
         $c$4 = ___shgetc($f) | 0; //@line 198
         break;
        }
       } else {
        $c$4 = $c$364; //@line 202
       }
      } while (0);
      $67 = $i$263 + 1 | 0; //@line 205
      if ($67 >>> 0 < 3) {
       $c$364 = $c$4; //@line 208
       $i$263 = $67; //@line 208
      } else {
       $c$5 = $c$4; //@line 210
       $i$3 = $67; //@line 210
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa; //@line 215
     $i$3 = $i$0$lcssa; //@line 215
    }
   } while (0);
   if (($i$3 | 0) == 3) {
    $69 = HEAP32[$1 >> 2] | 0; //@line 219
    if ($69 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$1 >> 2] = $69 + 1; //@line 224
     $76 = HEAPU8[$69] | 0; //@line 227
    } else {
     $76 = ___shgetc($f) | 0; //@line 230
    }
    if (($76 | 0) == 40) {
     $i$4 = 1; //@line 234
    } else {
     if ((HEAP32[$2 >> 2] | 0) == 0) {
      $$0 = nan; //@line 239
      STACKTOP = sp; //@line 240
      return +$$0;
     }
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 244
     $$0 = nan; //@line 245
     STACKTOP = sp; //@line 246
     return +$$0;
    }
    while (1) {
     $82 = HEAP32[$1 >> 2] | 0; //@line 249
     if ($82 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
      HEAP32[$1 >> 2] = $82 + 1; //@line 254
      $89 = HEAPU8[$82] | 0; //@line 257
     } else {
      $89 = ___shgetc($f) | 0; //@line 260
     }
     if (!(($89 + -48 | 0) >>> 0 < 10 | ($89 + -65 | 0) >>> 0 < 26)) {
      if (!(($89 + -97 | 0) >>> 0 < 26 | ($89 | 0) == 95)) {
       break;
      }
     }
     $i$4 = $i$4 + 1 | 0; //@line 277
    }
    if (($89 | 0) == 41) {
     $$0 = nan; //@line 281
     STACKTOP = sp; //@line 282
     return +$$0;
    }
    $99 = (HEAP32[$2 >> 2] | 0) == 0; //@line 285
    if (!$99) {
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 289
    }
    if ($40) {
     HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 293
     ___shlim($f, 0); //@line 294
     $$0 = 0.0; //@line 295
     STACKTOP = sp; //@line 296
     return +$$0;
    }
    if (($i$4 | 0) == 0 | $99) {
     $$0 = nan; //@line 301
     STACKTOP = sp; //@line 302
     return +$$0;
    } else {
     $$in = $i$4; //@line 304
    }
    while (1) {
     $104 = $$in + -1 | 0; //@line 307
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 310
     if (($104 | 0) == 0) {
      $$0 = nan; //@line 313
      break;
     } else {
      $$in = $104; //@line 316
     }
    }
    STACKTOP = sp; //@line 319
    return +$$0;
   } else if (($i$3 | 0) == 0) {
    do {
     if (($c$5 | 0) == 48) {
      $115 = HEAP32[$1 >> 2] | 0; //@line 324
      if ($115 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
       HEAP32[$1 >> 2] = $115 + 1; //@line 329
       $122 = HEAPU8[$115] | 0; //@line 332
      } else {
       $122 = ___shgetc($f) | 0; //@line 335
      }
      if (($122 | 32 | 0) != 120) {
       if ((HEAP32[$2 >> 2] | 0) == 0) {
        $c$6 = 48; //@line 343
        break;
       }
       HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 348
       $c$6 = 48; //@line 349
       break;
      }
      $125 = HEAP32[$1 >> 2] | 0; //@line 352
      if ($125 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
       HEAP32[$1 >> 2] = $125 + 1; //@line 357
       $c$0$i = HEAPU8[$125] | 0; //@line 360
       $gotdig$0$i = 0; //@line 360
      } else {
       $c$0$i = ___shgetc($f) | 0; //@line 363
       $gotdig$0$i = 0; //@line 363
      }
      while (1) {
       if (($c$0$i | 0) == 46) {
        label = 70; //@line 367
        break;
       } else if (($c$0$i | 0) != 48) {
        $160 = 0; //@line 370
        $161 = 0; //@line 370
        $162 = 0; //@line 370
        $163 = 0; //@line 370
        $c$2$i = $c$0$i; //@line 370
        $gotdig$2$i = $gotdig$0$i; //@line 370
        $gotrad$0$i = 0; //@line 370
        $gottail$0$i = 0; //@line 370
        $scale$0$i = 1.0; //@line 370
        $x$0$i = 0; //@line 370
        $y$0$i = 0.0; //@line 370
        break;
       }
       $132 = HEAP32[$1 >> 2] | 0; //@line 373
       if ($132 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
        HEAP32[$1 >> 2] = $132 + 1; //@line 378
        $c$0$i = HEAPU8[$132] | 0; //@line 381
        $gotdig$0$i = 1; //@line 381
        continue;
       } else {
        $c$0$i = ___shgetc($f) | 0; //@line 385
        $gotdig$0$i = 1; //@line 385
        continue;
       }
      }
      L107 : do {
       if ((label | 0) == 70) {
        $139 = HEAP32[$1 >> 2] | 0; //@line 391
        if ($139 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
         HEAP32[$1 >> 2] = $139 + 1; //@line 396
         $c$1$ph$i = HEAPU8[$139] | 0; //@line 399
        } else {
         $c$1$ph$i = ___shgetc($f) | 0; //@line 402
        }
        if (($c$1$ph$i | 0) == 48) {
         $147 = -1; //@line 406
         $148 = -1; //@line 406
        } else {
         $160 = 0; //@line 408
         $161 = 0; //@line 408
         $162 = 0; //@line 408
         $163 = 0; //@line 408
         $c$2$i = $c$1$ph$i; //@line 408
         $gotdig$2$i = $gotdig$0$i; //@line 408
         $gotrad$0$i = 1; //@line 408
         $gottail$0$i = 0; //@line 408
         $scale$0$i = 1.0; //@line 408
         $x$0$i = 0; //@line 408
         $y$0$i = 0.0; //@line 408
         break;
        }
        while (1) {
         $149 = HEAP32[$1 >> 2] | 0; //@line 412
         if ($149 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
          HEAP32[$1 >> 2] = $149 + 1; //@line 417
          $156 = HEAPU8[$149] | 0; //@line 420
         } else {
          $156 = ___shgetc($f) | 0; //@line 423
         }
         if (($156 | 0) != 48) {
          $160 = $147; //@line 427
          $161 = $148; //@line 427
          $162 = 0; //@line 427
          $163 = 0; //@line 427
          $c$2$i = $156; //@line 427
          $gotdig$2$i = 1; //@line 427
          $gotrad$0$i = 1; //@line 427
          $gottail$0$i = 0; //@line 427
          $scale$0$i = 1.0; //@line 427
          $x$0$i = 0; //@line 427
          $y$0$i = 0.0; //@line 427
          break L107;
         }
         $158 = _i64Add($147 | 0, $148 | 0, -1, -1) | 0; //@line 430
         $147 = $158; //@line 432
         $148 = tempRet0; //@line 432
        }
       }
      } while (0);
      L120 : while (1) {
       $164 = $c$2$i + -48 | 0; //@line 437
       do {
        if ($164 >>> 0 < 10) {
         $d$0$i = $164; //@line 441
         label = 84; //@line 442
        } else {
         $166 = $c$2$i | 32; //@line 444
         $169 = ($c$2$i | 0) == 46; //@line 447
         if (!(($166 + -97 | 0) >>> 0 < 6 | $169)) {
          $c$2$lcssa$i = $c$2$i; //@line 450
          break L120;
         }
         if ($169) {
          if (($gotrad$0$i | 0) == 0) {
           $195 = $162; //@line 456
           $196 = $163; //@line 456
           $197 = $162; //@line 456
           $198 = $163; //@line 456
           $gotdig$3$i = $gotdig$2$i; //@line 456
           $gotrad$1$i = 1; //@line 456
           $gottail$2$i = $gottail$0$i; //@line 456
           $scale$2$i = $scale$0$i; //@line 456
           $x$2$i = $x$0$i; //@line 456
           $y$2$i = $y$0$i; //@line 456
           break;
          } else {
           $c$2$lcssa$i = 46; //@line 459
           break L120;
          }
         } else {
          $d$0$i = ($c$2$i | 0) > 57 ? $166 + -87 | 0 : $164; //@line 466
          label = 84; //@line 467
          break;
         }
        }
       } while (0);
       if ((label | 0) == 84) {
        label = 0; //@line 473
        do {
         if (($163 | 0) < 0 | ($163 | 0) == 0 & $162 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i; //@line 483
          $scale$1$i = $scale$0$i; //@line 483
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0; //@line 483
          $y$1$i = $y$0$i; //@line 483
         } else {
          if (($163 | 0) < 0 | ($163 | 0) == 0 & $162 >>> 0 < 14) {
           $186 = $scale$0$i * .0625; //@line 492
           $gottail$1$i = $gottail$0$i; //@line 495
           $scale$1$i = $186; //@line 495
           $x$1$i = $x$0$i; //@line 495
           $y$1$i = $y$0$i + $186 * +($d$0$i | 0); //@line 495
           break;
          }
          if (!(($d$0$i | 0) != 0 & ($gottail$0$i | 0) == 0)) {
           $gottail$1$i = $gottail$0$i; //@line 502
           $scale$1$i = $scale$0$i; //@line 502
           $x$1$i = $x$0$i; //@line 502
           $y$1$i = $y$0$i; //@line 502
           break;
          }
          $gottail$1$i = 1; //@line 507
          $scale$1$i = $scale$0$i; //@line 507
          $x$1$i = $x$0$i; //@line 507
          $y$1$i = $y$0$i + $scale$0$i * .5; //@line 507
         }
        } while (0);
        $193 = _i64Add($162 | 0, $163 | 0, 1, 0) | 0; //@line 510
        $195 = $160; //@line 512
        $196 = $161; //@line 512
        $197 = $193; //@line 512
        $198 = tempRet0; //@line 512
        $gotdig$3$i = 1; //@line 512
        $gotrad$1$i = $gotrad$0$i; //@line 512
        $gottail$2$i = $gottail$1$i; //@line 512
        $scale$2$i = $scale$1$i; //@line 512
        $x$2$i = $x$1$i; //@line 512
        $y$2$i = $y$1$i; //@line 512
       }
       $199 = HEAP32[$1 >> 2] | 0; //@line 514
       if ($199 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
        HEAP32[$1 >> 2] = $199 + 1; //@line 519
        $160 = $195; //@line 522
        $161 = $196; //@line 522
        $162 = $197; //@line 522
        $163 = $198; //@line 522
        $c$2$i = HEAPU8[$199] | 0; //@line 522
        $gotdig$2$i = $gotdig$3$i; //@line 522
        $gotrad$0$i = $gotrad$1$i; //@line 522
        $gottail$0$i = $gottail$2$i; //@line 522
        $scale$0$i = $scale$2$i; //@line 522
        $x$0$i = $x$2$i; //@line 522
        $y$0$i = $y$2$i; //@line 522
        continue;
       } else {
        $160 = $195; //@line 526
        $161 = $196; //@line 526
        $162 = $197; //@line 526
        $163 = $198; //@line 526
        $c$2$i = ___shgetc($f) | 0; //@line 526
        $gotdig$2$i = $gotdig$3$i; //@line 526
        $gotrad$0$i = $gotrad$1$i; //@line 526
        $gottail$0$i = $gottail$2$i; //@line 526
        $scale$0$i = $scale$2$i; //@line 526
        $x$0$i = $x$2$i; //@line 526
        $y$0$i = $y$2$i; //@line 526
        continue;
       }
      }
      if (($gotdig$2$i | 0) == 0) {
       $208 = (HEAP32[$2 >> 2] | 0) == 0; //@line 533
       if (!$208) {
        HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 537
       }
       do {
        if ($40) {
         ___shlim($f, 0); //@line 541
        } else {
         if ($208) {
          break;
         }
         $211 = HEAP32[$1 >> 2] | 0; //@line 546
         HEAP32[$1 >> 2] = $211 + -1; //@line 548
         if (($gotrad$0$i | 0) == 0) {
          break;
         }
         HEAP32[$1 >> 2] = $211 + -2; //@line 554
        }
       } while (0);
       $$0 = +($sign$0 | 0) * 0.0; //@line 559
       STACKTOP = sp; //@line 560
       return +$$0;
      }
      $217 = ($gotrad$0$i | 0) == 0; //@line 562
      $218 = $217 ? $162 : $160; //@line 563
      $219 = $217 ? $163 : $161; //@line 564
      if (($163 | 0) < 0 | ($163 | 0) == 0 & $162 >>> 0 < 8) {
       $225 = $162; //@line 571
       $226 = $163; //@line 571
       $x$313$i = $x$0$i; //@line 571
       while (1) {
        $227 = $x$313$i << 4; //@line 573
        $228 = _i64Add($225 | 0, $226 | 0, 1, 0) | 0; //@line 574
        $229 = tempRet0; //@line 575
        if (($229 | 0) < 0 | ($229 | 0) == 0 & $228 >>> 0 < 8) {
         $x$313$i = $227; //@line 582
         $226 = $229; //@line 582
         $225 = $228; //@line 582
        } else {
         $x$3$lcssa$i = $227; //@line 584
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i; //@line 589
      }
      do {
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $237 = _scanexp($f, $pok) | 0; //@line 595
        $238 = tempRet0; //@line 596
        if (!(($237 | 0) == 0 & ($238 | 0) == -2147483648)) {
         $250 = $237; //@line 601
         $251 = $238; //@line 601
         break;
        }
        if ($40) {
         ___shlim($f, 0); //@line 605
         $$0 = 0.0; //@line 606
         STACKTOP = sp; //@line 607
         return +$$0;
        } else {
         if ((HEAP32[$2 >> 2] | 0) == 0) {
          $250 = 0; //@line 612
          $251 = 0; //@line 612
          break;
         }
         HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 617
         $250 = 0; //@line 618
         $251 = 0; //@line 618
         break;
        }
       } else {
        if ((HEAP32[$2 >> 2] | 0) == 0) {
         $250 = 0; //@line 625
         $251 = 0; //@line 625
         break;
        }
        HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 630
        $250 = 0; //@line 631
        $251 = 0; //@line 631
       }
      } while (0);
      $252 = _bitshift64Shl($218 | 0, $219 | 0, 2) | 0; //@line 634
      $254 = _i64Add($252 | 0, tempRet0 | 0, -32, -1) | 0; //@line 636
      $256 = _i64Add($254 | 0, tempRet0 | 0, $250 | 0, $251 | 0) | 0; //@line 638
      $257 = tempRet0; //@line 639
      if (($x$3$lcssa$i | 0) == 0) {
       $$0 = +($sign$0 | 0) * 0.0; //@line 644
       STACKTOP = sp; //@line 645
       return +$$0;
      }
      if (($257 | 0) > 0 | ($257 | 0) == 0 & $256 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 655
       $$0 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 659
       STACKTOP = sp; //@line 660
       return +$$0;
      }
      $271 = $emin$0$ph + -106 | 0; //@line 662
      $273 = (($271 | 0) < 0) << 31 >> 31; //@line 664
      if (($257 | 0) < ($273 | 0) | ($257 | 0) == ($273 | 0) & $256 >>> 0 < $271 >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 672
       $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 676
       STACKTOP = sp; //@line 677
       return +$$0;
      }
      if (($x$3$lcssa$i | 0) > -1) {
       $284 = $256; //@line 681
       $285 = $257; //@line 681
       $x$48$i = $x$3$lcssa$i; //@line 681
       $y$39$i = $y$0$i; //@line 681
       while (1) {
        $287 = $x$48$i << 1; //@line 684
        if (!($y$39$i >= .5)) {
         $$pn$i = $y$39$i; //@line 686
         $x$5$i = $287; //@line 686
        } else {
         $$pn$i = $y$39$i + -1.0; //@line 690
         $x$5$i = $287 | 1; //@line 690
        }
        $y$4$i = $y$39$i + $$pn$i; //@line 692
        $290 = _i64Add($284 | 0, $285 | 0, -1, -1) | 0; //@line 693
        $291 = tempRet0; //@line 694
        if (($x$5$i | 0) > -1) {
         $284 = $290; //@line 697
         $285 = $291; //@line 697
         $x$48$i = $x$5$i; //@line 697
         $y$39$i = $y$4$i; //@line 697
        } else {
         $293 = $290; //@line 699
         $294 = $291; //@line 699
         $x$4$lcssa$i = $x$5$i; //@line 699
         $y$3$lcssa$i = $y$4$i; //@line 699
         break;
        }
       }
      } else {
       $293 = $256; //@line 704
       $294 = $257; //@line 704
       $x$4$lcssa$i = $x$3$lcssa$i; //@line 704
       $y$3$lcssa$i = $y$0$i; //@line 704
      }
      $297 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0; //@line 708
      $299 = _i64Add($293 | 0, $294 | 0, $297 | 0, tempRet0 | 0) | 0; //@line 710
      $300 = tempRet0; //@line 711
      if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) {
       $$02$i = ($299 | 0) < 0 ? 0 : $299; //@line 720
      } else {
       $$02$i = $bits$0$ph; //@line 722
      }
      do {
       if (($$02$i | 0) < 53) {
        $310 = +($sign$0 | 0); //@line 729
        $311 = +_copysign(+(+_scalbn(1.0, 84 - $$02$i | 0)), +$310); //@line 730
        if (!(($$02$i | 0) < 32 & $y$3$lcssa$i != 0.0)) {
         $$pre$phi$iZ2D = $310; //@line 735
         $bias$07$i = $311; //@line 735
         $x$6$i = $x$4$lcssa$i; //@line 735
         $y$5$i = $y$3$lcssa$i; //@line 735
         break;
        }
        $314 = $x$4$lcssa$i & 1; //@line 738
        $$pre$phi$iZ2D = $310; //@line 743
        $bias$07$i = $311; //@line 743
        $x$6$i = ($314 ^ 1) + $x$4$lcssa$i | 0; //@line 743
        $y$5$i = ($314 | 0) == 0 ? 0.0 : $y$3$lcssa$i; //@line 743
       } else {
        $$pre$phi$iZ2D = +($sign$0 | 0); //@line 746
        $bias$07$i = 0.0; //@line 746
        $x$6$i = $x$4$lcssa$i; //@line 746
        $y$5$i = $y$3$lcssa$i; //@line 746
       }
      } while (0);
      $322 = $$pre$phi$iZ2D * $y$5$i + ($bias$07$i + $$pre$phi$iZ2D * +($x$6$i >>> 0)) - $bias$07$i; //@line 754
      if (!($322 != 0.0)) {
       HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 758
      }
      $$0 = +_scalbnl($322, $293); //@line 761
      STACKTOP = sp; //@line 762
      return +$$0;
     } else {
      $c$6 = $c$5; //@line 764
     }
    } while (0);
    $sum$i = $emin$0$ph + $bits$0$ph | 0; //@line 768
    $331 = 0 - $sum$i | 0; //@line 769
    $$08$i = $c$6; //@line 770
    $gotdig$0$i9 = 0; //@line 770
    while (1) {
     if (($$08$i | 0) == 46) {
      label = 139; //@line 773
      break;
     } else if (($$08$i | 0) != 48) {
      $$2$i = $$08$i; //@line 776
      $359 = 0; //@line 776
      $360 = 0; //@line 776
      $gotdig$2$i11 = $gotdig$0$i9; //@line 776
      $gotrad$0$i12 = 0; //@line 776
      break;
     }
     $332 = HEAP32[$1 >> 2] | 0; //@line 779
     if ($332 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
      HEAP32[$1 >> 2] = $332 + 1; //@line 784
      $$08$i = HEAPU8[$332] | 0; //@line 787
      $gotdig$0$i9 = 1; //@line 787
      continue;
     } else {
      $$08$i = ___shgetc($f) | 0; //@line 791
      $gotdig$0$i9 = 1; //@line 791
      continue;
     }
    }
    L209 : do {
     if ((label | 0) == 139) {
      $339 = HEAP32[$1 >> 2] | 0; //@line 797
      if ($339 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
       HEAP32[$1 >> 2] = $339 + 1; //@line 802
       $$1$ph$i = HEAPU8[$339] | 0; //@line 805
      } else {
       $$1$ph$i = ___shgetc($f) | 0; //@line 808
      }
      if (($$1$ph$i | 0) == 48) {
       $347 = -1; //@line 812
       $348 = -1; //@line 812
      } else {
       $$2$i = $$1$ph$i; //@line 814
       $359 = 0; //@line 814
       $360 = 0; //@line 814
       $gotdig$2$i11 = $gotdig$0$i9; //@line 814
       $gotrad$0$i12 = 1; //@line 814
       break;
      }
      while (1) {
       $349 = HEAP32[$1 >> 2] | 0; //@line 818
       if ($349 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
        HEAP32[$1 >> 2] = $349 + 1; //@line 823
        $$1$be$i = HEAPU8[$349] | 0; //@line 826
       } else {
        $$1$be$i = ___shgetc($f) | 0; //@line 829
       }
       if (($$1$be$i | 0) != 48) {
        $$2$i = $$1$be$i; //@line 833
        $359 = $347; //@line 833
        $360 = $348; //@line 833
        $gotdig$2$i11 = 1; //@line 833
        $gotrad$0$i12 = 1; //@line 833
        break L209;
       }
       $357 = _i64Add($347 | 0, $348 | 0, -1, -1) | 0; //@line 836
       $347 = $357; //@line 838
       $348 = tempRet0; //@line 838
      }
     }
    } while (0);
    $361 = $x$i; //@line 842
    HEAP32[$361 >> 2] = 0; //@line 843
    $362 = $$2$i + -48 | 0; //@line 844
    $364 = ($$2$i | 0) == 46; //@line 846
    L223 : do {
     if ($362 >>> 0 < 10 | $364) {
      $365 = $x$i + 496 | 0; //@line 850
      $$397$i = $$2$i; //@line 851
      $366 = $364; //@line 851
      $367 = $362; //@line 851
      $368 = 0; //@line 851
      $369 = 0; //@line 851
      $370 = $359; //@line 851
      $371 = $360; //@line 851
      $gotdig$393$i = $gotdig$2$i11; //@line 851
      $gotrad$194$i = $gotrad$0$i12; //@line 851
      $j$096$i = 0; //@line 851
      $k$095$i = 0; //@line 851
      $lnz$092$i = 0; //@line 851
      while (1) {
       do {
        if ($366) {
         if (($gotrad$194$i | 0) == 0) {
          $387 = $368; //@line 857
          $388 = $369; //@line 857
          $389 = $368; //@line 857
          $390 = $369; //@line 857
          $gotdig$4$i = $gotdig$393$i; //@line 857
          $gotrad$2$i = 1; //@line 857
          $j$2$i = $j$096$i; //@line 857
          $k$2$i = $k$095$i; //@line 857
          $lnz$2$i = $lnz$092$i; //@line 857
         } else {
          $$388$i = $$397$i; //@line 859
          $408 = $368; //@line 859
          $409 = $369; //@line 859
          $410 = $370; //@line 859
          $411 = $371; //@line 859
          $gotdig$381$i = $gotdig$393$i; //@line 859
          $j$086$i = $j$096$i; //@line 859
          $k$084$i = $k$095$i; //@line 859
          $lnz$079$i = $lnz$092$i; //@line 859
          break L223;
         }
        } else {
         $373 = _i64Add($368 | 0, $369 | 0, 1, 0) | 0; //@line 864
         $374 = tempRet0; //@line 865
         $375 = ($$397$i | 0) != 48; //@line 866
         if (($k$095$i | 0) >= 125) {
          if (!$375) {
           $387 = $370; //@line 869
           $388 = $371; //@line 869
           $389 = $373; //@line 869
           $390 = $374; //@line 869
           $gotdig$4$i = $gotdig$393$i; //@line 869
           $gotrad$2$i = $gotrad$194$i; //@line 869
           $j$2$i = $j$096$i; //@line 869
           $k$2$i = $k$095$i; //@line 869
           $lnz$2$i = $lnz$092$i; //@line 869
           break;
          }
          HEAP32[$365 >> 2] = HEAP32[$365 >> 2] | 1; //@line 874
          $387 = $370; //@line 875
          $388 = $371; //@line 875
          $389 = $373; //@line 875
          $390 = $374; //@line 875
          $gotdig$4$i = $gotdig$393$i; //@line 875
          $gotrad$2$i = $gotrad$194$i; //@line 875
          $j$2$i = $j$096$i; //@line 875
          $k$2$i = $k$095$i; //@line 875
          $lnz$2$i = $lnz$092$i; //@line 875
          break;
         }
         $377 = $x$i + ($k$095$i << 2) | 0; //@line 880
         if (($j$096$i | 0) == 0) {
          $storemerge$i = $367; //@line 882
         } else {
          $storemerge$i = $$397$i + -48 + ((HEAP32[$377 >> 2] | 0) * 10 | 0) | 0; //@line 888
         }
         HEAP32[$377 >> 2] = $storemerge$i; //@line 890
         $382 = $j$096$i + 1 | 0; //@line 891
         $383 = ($382 | 0) == 9; //@line 892
         $387 = $370; //@line 896
         $388 = $371; //@line 896
         $389 = $373; //@line 896
         $390 = $374; //@line 896
         $gotdig$4$i = 1; //@line 896
         $gotrad$2$i = $gotrad$194$i; //@line 896
         $j$2$i = $383 ? 0 : $382; //@line 896
         $k$2$i = ($383 & 1) + $k$095$i | 0; //@line 896
         $lnz$2$i = $375 ? $373 : $lnz$092$i; //@line 896
        }
       } while (0);
       $391 = HEAP32[$1 >> 2] | 0; //@line 899
       if ($391 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
        HEAP32[$1 >> 2] = $391 + 1; //@line 904
        $$3$be$i = HEAPU8[$391] | 0; //@line 907
       } else {
        $$3$be$i = ___shgetc($f) | 0; //@line 910
       }
       $398 = $$3$be$i + -48 | 0; //@line 912
       $400 = ($$3$be$i | 0) == 46; //@line 914
       if ($398 >>> 0 < 10 | $400) {
        $$397$i = $$3$be$i; //@line 917
        $366 = $400; //@line 917
        $367 = $398; //@line 917
        $368 = $389; //@line 917
        $369 = $390; //@line 917
        $370 = $387; //@line 917
        $371 = $388; //@line 917
        $gotdig$393$i = $gotdig$4$i; //@line 917
        $gotrad$194$i = $gotrad$2$i; //@line 917
        $j$096$i = $j$2$i; //@line 917
        $k$095$i = $k$2$i; //@line 917
        $lnz$092$i = $lnz$2$i; //@line 917
       } else {
        $$3$lcssa$i = $$3$be$i; //@line 919
        $401 = $389; //@line 919
        $402 = $390; //@line 919
        $403 = $387; //@line 919
        $404 = $388; //@line 919
        $gotdig$3$lcssa$i = $gotdig$4$i; //@line 919
        $gotrad$1$lcssa$i = $gotrad$2$i; //@line 919
        $j$0$lcssa$i = $j$2$i; //@line 919
        $k$0$lcssa$i = $k$2$i; //@line 919
        $lnz$0$lcssa$i = $lnz$2$i; //@line 919
        label = 162; //@line 920
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i; //@line 925
      $401 = 0; //@line 925
      $402 = 0; //@line 925
      $403 = $359; //@line 925
      $404 = $360; //@line 925
      $gotdig$3$lcssa$i = $gotdig$2$i11; //@line 925
      $gotrad$1$lcssa$i = $gotrad$0$i12; //@line 925
      $j$0$lcssa$i = 0; //@line 925
      $k$0$lcssa$i = 0; //@line 925
      $lnz$0$lcssa$i = 0; //@line 925
      label = 162; //@line 926
     }
    } while (0);
    if ((label | 0) == 162) {
     $405 = ($gotrad$1$lcssa$i | 0) == 0; //@line 930
     $$388$i = $$3$lcssa$i; //@line 933
     $408 = $401; //@line 933
     $409 = $402; //@line 933
     $410 = $405 ? $401 : $403; //@line 933
     $411 = $405 ? $402 : $404; //@line 933
     $gotdig$381$i = $gotdig$3$lcssa$i; //@line 933
     $j$086$i = $j$0$lcssa$i; //@line 933
     $k$084$i = $k$0$lcssa$i; //@line 933
     $lnz$079$i = $lnz$0$lcssa$i; //@line 933
    }
    $412 = ($gotdig$381$i | 0) != 0; //@line 935
    do {
     if ($412) {
      if (($$388$i | 32 | 0) != 101) {
       label = 171; //@line 941
       break;
      }
      $415 = _scanexp($f, $pok) | 0; //@line 944
      $416 = tempRet0; //@line 945
      do {
       if (($415 | 0) == 0 & ($416 | 0) == -2147483648) {
        if ($40) {
         ___shlim($f, 0); //@line 952
         $$0 = 0.0; //@line 953
         STACKTOP = sp; //@line 954
         return +$$0;
        } else {
         if ((HEAP32[$2 >> 2] | 0) == 0) {
          $424 = 0; //@line 959
          $425 = 0; //@line 959
          break;
         }
         HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 964
         $424 = 0; //@line 965
         $425 = 0; //@line 965
         break;
        }
       } else {
        $424 = $415; //@line 969
        $425 = $416; //@line 969
       }
      } while (0);
      $426 = _i64Add($424 | 0, $425 | 0, $410 | 0, $411 | 0) | 0; //@line 972
      $433 = $426; //@line 974
      $434 = tempRet0; //@line 974
     } else {
      label = 171; //@line 976
     }
    } while (0);
    do {
     if ((label | 0) == 171) {
      if (!(($$388$i | 0) > -1)) {
       $433 = $410; //@line 983
       $434 = $411; //@line 983
       break;
      }
      if ((HEAP32[$2 >> 2] | 0) == 0) {
       $433 = $410; //@line 989
       $434 = $411; //@line 989
       break;
      }
      HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 994
      $433 = $410; //@line 995
      $434 = $411; //@line 995
     }
    } while (0);
    if (!$412) {
     HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1000
     ___shlim($f, 0); //@line 1001
     $$0 = 0.0; //@line 1002
     STACKTOP = sp; //@line 1003
     return +$$0;
    }
    $436 = HEAP32[$361 >> 2] | 0; //@line 1005
    if (($436 | 0) == 0) {
     $$0 = +($sign$0 | 0) * 0.0; //@line 1010
     STACKTOP = sp; //@line 1011
     return +$$0;
    }
    do {
     if (($433 | 0) == ($408 | 0) & ($434 | 0) == ($409 | 0) & (($409 | 0) < 0 | ($409 | 0) == 0 & $408 >>> 0 < 10)) {
      if (!($bits$0$ph >>> 0 > 30)) {
       if (($436 >>> $bits$0$ph | 0) != 0) {
        break;
       }
      }
      $$0 = +($sign$0 | 0) * +($436 >>> 0); //@line 1035
      STACKTOP = sp; //@line 1036
      return +$$0;
     }
    } while (0);
    $454 = ($emin$0$ph | 0) / -2 | 0; //@line 1039
    $456 = (($454 | 0) < 0) << 31 >> 31; //@line 1041
    if (($434 | 0) > ($456 | 0) | ($434 | 0) == ($456 | 0) & $433 >>> 0 > $454 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1049
     $$0 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 1053
     STACKTOP = sp; //@line 1054
     return +$$0;
    }
    $466 = $emin$0$ph + -106 | 0; //@line 1056
    $468 = (($466 | 0) < 0) << 31 >> 31; //@line 1058
    if (($434 | 0) < ($468 | 0) | ($434 | 0) == ($468 | 0) & $433 >>> 0 < $466 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1066
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 1070
     STACKTOP = sp; //@line 1071
     return +$$0;
    }
    if (($j$086$i | 0) == 0) {
     $k$3$i = $k$084$i; //@line 1075
    } else {
     if (($j$086$i | 0) < 9) {
      $480 = $x$i + ($k$084$i << 2) | 0; //@line 1079
      $481 = HEAP32[$480 >> 2] | 0; //@line 1081
      $j$371$i = $j$086$i; //@line 1081
      do {
       $481 = $481 * 10 | 0; //@line 1083
       $j$371$i = $j$371$i + 1 | 0; //@line 1084
      } while (($j$371$i | 0) != 9);
      HEAP32[$480 >> 2] = $481; //@line 1092
     }
     $k$3$i = $k$084$i + 1 | 0; //@line 1095
    }
    do {
     if (($lnz$079$i | 0) < 9) {
      if (!(($lnz$079$i | 0) <= ($433 | 0) & ($433 | 0) < 18)) {
       break;
      }
      if (($433 | 0) == 9) {
       $$0 = +($sign$0 | 0) * +((HEAP32[$361 >> 2] | 0) >>> 0); //@line 1112
       STACKTOP = sp; //@line 1113
       return +$$0;
      }
      if (($433 | 0) < 9) {
       $$0 = +($sign$0 | 0) * +((HEAP32[$361 >> 2] | 0) >>> 0) / +(HEAP32[14640 + (8 - $433 << 2) >> 2] | 0); //@line 1126
       STACKTOP = sp; //@line 1127
       return +$$0;
      }
      $504 = $bits$0$ph + 27 + (Math_imul($433, -3) | 0) | 0; //@line 1131
      $$pre$i17 = HEAP32[$361 >> 2] | 0; //@line 1133
      if (($504 | 0) <= 30) {
       if (($$pre$i17 >>> $504 | 0) != 0) {
        break;
       }
      }
      $$0 = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[14640 + ($433 + -10 << 2) >> 2] | 0); //@line 1149
      STACKTOP = sp; //@line 1150
      return +$$0;
     }
    } while (0);
    $516 = ($433 | 0) % 9 | 0; //@line 1153
    if (($516 | 0) == 0) {
     $a$2$ph40$i = 0; //@line 1156
     $e2$0$ph$i = 0; //@line 1156
     $rp$2$ph38$i = $433; //@line 1156
     $z$1$ph39$i = $k$3$i; //@line 1156
    } else {
     $520 = ($433 | 0) > -1 ? $516 : $516 + 9 | 0; //@line 1160
     $523 = HEAP32[14640 + (8 - $520 << 2) >> 2] | 0; //@line 1163
     do {
      if (($k$3$i | 0) == 0) {
       $a$0$lcssa161$i = 0; //@line 1167
       $rp$0$lcssa162$i = $433; //@line 1167
       $z$0$i = 0; //@line 1167
      } else {
       $525 = 1e9 / ($523 | 0) | 0; //@line 1169
       $a$061$i = 0; //@line 1170
       $carry$063$i = 0; //@line 1170
       $k$462$i = 0; //@line 1170
       $rp$060$i = $433; //@line 1170
       while (1) {
        $526 = $x$i + ($k$462$i << 2) | 0; //@line 1172
        $527 = HEAP32[$526 >> 2] | 0; //@line 1173
        $530 = (($527 >>> 0) / ($523 >>> 0) | 0) + $carry$063$i | 0; //@line 1176
        HEAP32[$526 >> 2] = $530; //@line 1177
        $531 = Math_imul(($527 >>> 0) % ($523 >>> 0) | 0, $525) | 0; //@line 1178
        $534 = $k$462$i + 1 | 0; //@line 1182
        if (($k$462$i | 0) == ($a$061$i | 0) & ($530 | 0) == 0) {
         $a$1$i = $534 & 127; //@line 1186
         $rp$1$i18 = $rp$060$i + -9 | 0; //@line 1186
        } else {
         $a$1$i = $a$061$i; //@line 1188
         $rp$1$i18 = $rp$060$i; //@line 1188
        }
        if (($534 | 0) == ($k$3$i | 0)) {
         break;
        } else {
         $a$061$i = $a$1$i; //@line 1194
         $rp$060$i = $rp$1$i18; //@line 1194
         $k$462$i = $534; //@line 1194
         $carry$063$i = $531; //@line 1194
        }
       }
       if (($531 | 0) == 0) {
        $a$0$lcssa161$i = $a$1$i; //@line 1199
        $rp$0$lcssa162$i = $rp$1$i18; //@line 1199
        $z$0$i = $k$3$i; //@line 1199
        break;
       }
       HEAP32[$x$i + ($k$3$i << 2) >> 2] = $531; //@line 1204
       $a$0$lcssa161$i = $a$1$i; //@line 1205
       $rp$0$lcssa162$i = $rp$1$i18; //@line 1205
       $z$0$i = $k$3$i + 1 | 0; //@line 1205
      }
     } while (0);
     $a$2$ph40$i = $a$0$lcssa161$i; //@line 1210
     $e2$0$ph$i = 0; //@line 1210
     $rp$2$ph38$i = 9 - $520 + $rp$0$lcssa162$i | 0; //@line 1210
     $z$1$ph39$i = $z$0$i; //@line 1210
    }
    L321 : while (1) {
     $544 = $x$i + ($a$2$ph40$i << 2) | 0; //@line 1214
     if (($rp$2$ph38$i | 0) < 18) {
      $e2$0$us$i = $e2$0$ph$i; //@line 1216
      $z$1$us$i = $z$1$ph39$i; //@line 1216
      while (1) {
       $carry1$0$us$i = 0; //@line 1219
       $k$5$in$us$i = $z$1$us$i + 127 | 0; //@line 1219
       $z$2$us$i = $z$1$us$i; //@line 1219
       while (1) {
        $k$5$us$i = $k$5$in$us$i & 127; //@line 1221
        $547 = $x$i + ($k$5$us$i << 2) | 0; //@line 1222
        $549 = _bitshift64Shl(HEAP32[$547 >> 2] | 0, 0, 29) | 0; //@line 1224
        $551 = _i64Add($549 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0; //@line 1226
        $552 = tempRet0; //@line 1227
        if ($552 >>> 0 > 0 | ($552 | 0) == 0 & $551 >>> 0 > 1e9) {
         $558 = ___udivdi3($551 | 0, $552 | 0, 1e9, 0) | 0; //@line 1234
         $559 = ___uremdi3($551 | 0, $552 | 0, 1e9, 0) | 0; //@line 1236
         $$sink$off0$us$i = $559; //@line 1238
         $carry1$1$us$i = $558; //@line 1238
        } else {
         $$sink$off0$us$i = $551; //@line 1240
         $carry1$1$us$i = 0; //@line 1240
        }
        HEAP32[$547 >> 2] = $$sink$off0$us$i; //@line 1242
        $563 = ($k$5$us$i | 0) == ($a$2$ph40$i | 0); //@line 1246
        if (($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $563) {
         $z$3$us$i = $z$2$us$i; //@line 1249
        } else {
         $z$3$us$i = ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i; //@line 1253
        }
        if ($563) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i; //@line 1259
         $k$5$in$us$i = $k$5$us$i + -1 | 0; //@line 1259
         $z$2$us$i = $z$3$us$i; //@line 1259
        }
       }
       $566 = $e2$0$us$i + -29 | 0; //@line 1262
       if (($carry1$1$us$i | 0) == 0) {
        $e2$0$us$i = $566; //@line 1265
        $z$1$us$i = $z$3$us$i; //@line 1265
       } else {
        $$lcssa43$i = $566; //@line 1267
        $carry1$1$lcssa$lcssa$i = $carry1$1$us$i; //@line 1267
        $z$3$lcssa$lcssa$i = $z$3$us$i; //@line 1267
        break;
       }
      }
     } else {
      if (($rp$2$ph38$i | 0) == 18) {
       $e2$0$us44$i = $e2$0$ph$i; //@line 1274
       $z$1$us45$i = $z$1$ph39$i; //@line 1274
      } else {
       $a$3$ph$i = $a$2$ph40$i; //@line 1276
       $e2$1$ph$i = $e2$0$ph$i; //@line 1276
       $rp$3$ph33$i = $rp$2$ph38$i; //@line 1276
       $z$5$ph$i = $z$1$ph39$i; //@line 1276
       break;
      }
      while (1) {
       if (!((HEAP32[$544 >> 2] | 0) >>> 0 < 9007199)) {
        $a$3$ph$i = $a$2$ph40$i; //@line 1283
        $e2$1$ph$i = $e2$0$us44$i; //@line 1283
        $rp$3$ph33$i = 18; //@line 1283
        $z$5$ph$i = $z$1$us45$i; //@line 1283
        break L321;
       }
       $carry1$0$us49$i = 0; //@line 1287
       $k$5$in$us48$i = $z$1$us45$i + 127 | 0; //@line 1287
       $z$2$us47$i = $z$1$us45$i; //@line 1287
       while (1) {
        $k$5$us50$i = $k$5$in$us48$i & 127; //@line 1289
        $571 = $x$i + ($k$5$us50$i << 2) | 0; //@line 1290
        $573 = _bitshift64Shl(HEAP32[$571 >> 2] | 0, 0, 29) | 0; //@line 1292
        $575 = _i64Add($573 | 0, tempRet0 | 0, $carry1$0$us49$i | 0, 0) | 0; //@line 1294
        $576 = tempRet0; //@line 1295
        if ($576 >>> 0 > 0 | ($576 | 0) == 0 & $575 >>> 0 > 1e9) {
         $582 = ___udivdi3($575 | 0, $576 | 0, 1e9, 0) | 0; //@line 1302
         $583 = ___uremdi3($575 | 0, $576 | 0, 1e9, 0) | 0; //@line 1304
         $$sink$off0$us53$i = $583; //@line 1306
         $carry1$1$us54$i = $582; //@line 1306
        } else {
         $$sink$off0$us53$i = $575; //@line 1308
         $carry1$1$us54$i = 0; //@line 1308
        }
        HEAP32[$571 >> 2] = $$sink$off0$us53$i; //@line 1310
        $587 = ($k$5$us50$i | 0) == ($a$2$ph40$i | 0); //@line 1314
        if (($k$5$us50$i | 0) != ($z$2$us47$i + 127 & 127 | 0) | $587) {
         $z$3$us57$i = $z$2$us47$i; //@line 1317
        } else {
         $z$3$us57$i = ($$sink$off0$us53$i | 0) == 0 ? $k$5$us50$i : $z$2$us47$i; //@line 1321
        }
        if ($587) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i; //@line 1327
         $k$5$in$us48$i = $k$5$us50$i + -1 | 0; //@line 1327
         $z$2$us47$i = $z$3$us57$i; //@line 1327
        }
       }
       $590 = $e2$0$us44$i + -29 | 0; //@line 1330
       if (($carry1$1$us54$i | 0) == 0) {
        $e2$0$us44$i = $590; //@line 1333
        $z$1$us45$i = $z$3$us57$i; //@line 1333
       } else {
        $$lcssa43$i = $590; //@line 1335
        $carry1$1$lcssa$lcssa$i = $carry1$1$us54$i; //@line 1335
        $z$3$lcssa$lcssa$i = $z$3$us57$i; //@line 1335
        break;
       }
      }
     }
     $594 = $a$2$ph40$i + 127 & 127; //@line 1342
     if (($594 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
      $597 = $z$3$lcssa$lcssa$i + 127 & 127; //@line 1346
      $602 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0; //@line 1351
      HEAP32[$602 >> 2] = HEAP32[$602 >> 2] | HEAP32[$x$i + ($597 << 2) >> 2]; //@line 1354
      $z$4$i = $597; //@line 1355
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i; //@line 1357
     }
     HEAP32[$x$i + ($594 << 2) >> 2] = $carry1$1$lcssa$lcssa$i; //@line 1360
     $a$2$ph40$i = $594; //@line 1361
     $e2$0$ph$i = $$lcssa43$i; //@line 1361
     $rp$2$ph38$i = $rp$2$ph38$i + 9 | 0; //@line 1361
     $z$1$ph39$i = $z$4$i; //@line 1361
    }
    L352 : while (1) {
     $641 = $z$5$ph$i + 1 & 127; //@line 1365
     $644 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0; //@line 1368
     $a$3$i$ph = $a$3$ph$i; //@line 1369
     $e2$1$i$ph = $e2$1$ph$i; //@line 1369
     $rp$3$i$ph = $rp$3$ph33$i; //@line 1369
     while (1) {
      $645 = ($rp$3$i$ph | 0) == 18; //@line 1371
      $$14$i = ($rp$3$i$ph | 0) > 27 ? 9 : 1; //@line 1373
      $a$3$i = $a$3$i$ph; //@line 1374
      $e2$1$i = $e2$1$i$ph; //@line 1374
      while (1) {
       $i$025$i = 0; //@line 1376
       while (1) {
        $608 = $i$025$i + $a$3$i & 127; //@line 1379
        if (($608 | 0) == ($z$5$ph$i | 0)) {
         $i$1$i = 2; //@line 1382
         break;
        }
        $611 = HEAP32[$x$i + ($608 << 2) >> 2] | 0; //@line 1386
        $613 = HEAP32[14632 + ($i$025$i << 2) >> 2] | 0; //@line 1388
        if ($611 >>> 0 < $613 >>> 0) {
         $i$1$i = 2; //@line 1391
         break;
        }
        $616 = $i$025$i + 1 | 0; //@line 1395
        if ($611 >>> 0 > $613 >>> 0) {
         $i$1$i = $i$025$i; //@line 1397
         break;
        }
        if (($616 | 0) < 2) {
         $i$025$i = $616; //@line 1402
        } else {
         $i$1$i = $616; //@line 1404
         break;
        }
       }
       if (($i$1$i | 0) == 2 & $645) {
        break L352;
       }
       $620 = $$14$i + $e2$1$i | 0; //@line 1413
       if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
        $a$3$i = $z$5$ph$i; //@line 1416
        $e2$1$i = $620; //@line 1416
       } else {
        break;
       }
      }
      $623 = (1 << $$14$i) + -1 | 0; //@line 1422
      $624 = 1e9 >>> $$14$i; //@line 1423
      $a$427$i = $a$3$i; //@line 1424
      $carry3$030$i = 0; //@line 1424
      $k$628$i = $a$3$i; //@line 1424
      $rp$426$i = $rp$3$i$ph; //@line 1424
      do {
       $625 = $x$i + ($k$628$i << 2) | 0; //@line 1426
       $626 = HEAP32[$625 >> 2] | 0; //@line 1427
       $629 = ($626 >>> $$14$i) + $carry3$030$i | 0; //@line 1430
       HEAP32[$625 >> 2] = $629; //@line 1431
       $carry3$030$i = Math_imul($626 & $623, $624) | 0; //@line 1432
       $or$cond15$i = ($k$628$i | 0) == ($a$427$i | 0) & ($629 | 0) == 0; //@line 1435
       $k$628$i = $k$628$i + 1 & 127; //@line 1437
       $rp$426$i = $or$cond15$i ? $rp$426$i + -9 | 0 : $rp$426$i; //@line 1439
       $a$427$i = $or$cond15$i ? $k$628$i : $a$427$i; //@line 1440
      } while (($k$628$i | 0) != ($z$5$ph$i | 0));
      if (($carry3$030$i | 0) == 0) {
       $a$3$i$ph = $a$427$i; //@line 1450
       $e2$1$i$ph = $620; //@line 1450
       $rp$3$i$ph = $rp$426$i; //@line 1450
       continue;
      }
      if (($641 | 0) != ($a$427$i | 0)) {
       break;
      }
      HEAP32[$644 >> 2] = HEAP32[$644 >> 2] | 1; //@line 1459
      $a$3$i$ph = $a$427$i; //@line 1460
      $e2$1$i$ph = $620; //@line 1460
      $rp$3$i$ph = $rp$426$i; //@line 1460
     }
     HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $carry3$030$i; //@line 1463
     $a$3$ph$i = $a$427$i; //@line 1464
     $e2$1$ph$i = $620; //@line 1464
     $rp$3$ph33$i = $rp$426$i; //@line 1464
     $z$5$ph$i = $641; //@line 1464
    }
    $618 = $a$3$i & 127; //@line 1466
    if (($618 | 0) == ($z$5$ph$i | 0)) {
     HEAP32[$x$i + ($641 + -1 << 2) >> 2] = 0; //@line 1471
     $z$7$i = $641; //@line 1472
    } else {
     $z$7$i = $z$5$ph$i; //@line 1474
    }
    $653 = +((HEAP32[$x$i + ($618 << 2) >> 2] | 0) >>> 0); //@line 1478
    $655 = $a$3$i + 1 & 127; //@line 1480
    if (($655 | 0) == ($z$7$i | 0)) {
     $712 = $z$7$i + 1 & 127; //@line 1484
     HEAP32[$x$i + ($712 + -1 << 2) >> 2] = 0; //@line 1487
     $z$7$1$i = $712; //@line 1488
    } else {
     $z$7$1$i = $z$7$i; //@line 1490
    }
    $720 = +($sign$0 | 0); //@line 1497
    $721 = $720 * ($653 * 1.0e9 + +((HEAP32[$x$i + ($655 << 2) >> 2] | 0) >>> 0)); //@line 1498
    $722 = $e2$1$i + 53 | 0; //@line 1499
    $723 = $722 - $emin$0$ph | 0; //@line 1500
    if (($723 | 0) < ($bits$0$ph | 0)) {
     $$09$i = ($723 | 0) < 0 ? 0 : $723; //@line 1505
     $denormal$0$i = 1; //@line 1505
    } else {
     $$09$i = $bits$0$ph; //@line 1507
     $denormal$0$i = 0; //@line 1507
    }
    if (($$09$i | 0) < 53) {
     $661 = +_copysign(+(+_scalbn(1.0, 105 - $$09$i | 0)), +$721); //@line 1513
     $664 = +_fmod(+$721, +(+_scalbn(1.0, 53 - $$09$i | 0))); //@line 1516
     $bias$0$i = $661; //@line 1519
     $frac$0$i = $664; //@line 1519
     $y$1$i23 = $661 + ($721 - $664); //@line 1519
    } else {
     $bias$0$i = 0.0; //@line 1521
     $frac$0$i = 0.0; //@line 1521
     $y$1$i23 = $721; //@line 1521
    }
    $668 = $a$3$i + 2 & 127; //@line 1524
    do {
     if (($668 | 0) == ($z$7$1$i | 0)) {
      $frac$2$i = $frac$0$i; //@line 1528
     } else {
      $671 = HEAP32[$x$i + ($668 << 2) >> 2] | 0; //@line 1531
      do {
       if ($671 >>> 0 < 5e8) {
        if (($671 | 0) == 0) {
         if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
          $frac$1$i = $frac$0$i; //@line 1541
          break;
         }
        }
        $frac$1$i = $720 * .25 + $frac$0$i; //@line 1547
       } else {
        if ($671 >>> 0 > 5e8) {
         $frac$1$i = $720 * .75 + $frac$0$i; //@line 1553
         break;
        }
        if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
         $frac$1$i = $720 * .5 + $frac$0$i; //@line 1562
         break;
        } else {
         $frac$1$i = $720 * .75 + $frac$0$i; //@line 1567
         break;
        }
       }
      } while (0);
      if ((53 - $$09$i | 0) <= 1) {
       $frac$2$i = $frac$1$i; //@line 1575
       break;
      }
      if (+_fmod(+$frac$1$i, 1.0) != 0.0) {
       $frac$2$i = $frac$1$i; //@line 1581
       break;
      }
      $frac$2$i = $frac$1$i + 1.0; //@line 1585
     }
    } while (0);
    $695 = $y$1$i23 + $frac$2$i - $bias$0$i; //@line 1589
    do {
     if (($722 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
      if (!(+Math_abs(+$695) >= 9007199254740992.0)) {
       $denormal$2$i = $denormal$0$i; //@line 1598
       $e2$2$i = $e2$1$i; //@line 1598
       $y$2$i24 = $695; //@line 1598
      } else {
       $denormal$2$i = ($denormal$0$i | 0) != 0 & ($$09$i | 0) == ($723 | 0) ? 0 : $denormal$0$i; //@line 1606
       $e2$2$i = $e2$1$i + 1 | 0; //@line 1606
       $y$2$i24 = $695 * .5; //@line 1606
      }
      if (($e2$2$i + 50 | 0) <= ($331 | 0)) {
       if (!(($denormal$2$i | 0) != 0 & $frac$2$i != 0.0)) {
        $e2$3$i = $e2$2$i; //@line 1615
        $y$3$i = $y$2$i24; //@line 1615
        break;
       }
      }
      HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1620
      $e2$3$i = $e2$2$i; //@line 1621
      $y$3$i = $y$2$i24; //@line 1621
     } else {
      $e2$3$i = $e2$1$i; //@line 1623
      $y$3$i = $695; //@line 1623
     }
    } while (0);
    $$0 = +_scalbnl($y$3$i, $e2$3$i); //@line 1627
    STACKTOP = sp; //@line 1628
    return +$$0;
   } else {
    if ((HEAP32[$2 >> 2] | 0) != 0) {
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1635
    }
    HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1638
    ___shlim($f, 0); //@line 1639
    $$0 = 0.0; //@line 1640
    STACKTOP = sp; //@line 1641
    return +$$0;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 23) {
   $43 = (HEAP32[$2 >> 2] | 0) == 0; //@line 1648
   if (!$43) {
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1652
   }
   if ($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $43) {
    break;
   } else {
    $i$166 = $i$0$lcssa; //@line 1661
   }
   do {
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1666
    $i$166 = $i$166 + -1 | 0; //@line 1667
   } while ($i$166 >>> 0 > 3);
  }
 } while (0);
 $$0 = +($sign$0 | 0) * inf; //@line 1680
 STACKTOP = sp; //@line 1681
 return +$$0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, u$0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 u$0 = u$0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $108 = 0, $11 = 0, $113 = 0, $118 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $151 = 0, $159 = 0, $16 = 0, $161 = 0, $166 = 0, $17 = 0, $18 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $205 = 0, $207 = 0, $21 = 0, $213 = 0, $22 = 0, $221 = 0, $223 = 0, $23 = 0, $235 = 0, $237 = 0, $24 = 0, $25 = 0, $250 = 0, $252 = 0, $26 = 0, $266 = 0, $268 = 0, $27 = 0, $28 = 0, $281 = 0, $283 = 0, $285 = 0, $29 = 0, $290 = 0, $292 = 0, $299 = 0, $3 = 0, $30 = 0, $302 = 0, $309 = 0, $31 = 0, $319 = 0, $32 = 0, $323 = 0, $328 = 0, $33 = 0, $331 = 0, $34 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $370 = 0, $372 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $401 = 0, $403 = 0, $41 = 0, $412 = 0, $427 = 0, $432 = 0, $433 = 0, $440 = 0, $444 = 0, $451 = 0, $452 = 0, $453 = 0, $473 = 0, $49 = 0, $490 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $8 = 0, $85 = 0, $9 = 0, $91 = 0, $93 = 0, $98 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP; //@line 14005
 STACKTOP = STACKTOP + 576 | 0; //@line 14006
 $$byval_copy30 = sp; //@line 14007
 $$byval_copy29 = sp + 8 | 0; //@line 14008
 $$byval_copy28 = sp + 16 | 0; //@line 14009
 $$byval_copy27 = sp + 24 | 0; //@line 14010
 $$byval_copy26 = sp + 32 | 0; //@line 14011
 $$byval_copy25 = sp + 40 | 0; //@line 14012
 $$byval_copy24 = sp + 48 | 0; //@line 14013
 $$byval_copy23 = sp + 56 | 0; //@line 14014
 $$byval_copy22 = sp + 64 | 0; //@line 14015
 $$byval_copy21 = sp + 72 | 0; //@line 14016
 $$byval_copy20 = sp + 80 | 0; //@line 14017
 $$byval_copy19 = sp + 88 | 0; //@line 14018
 $$byval_copy18 = sp + 96 | 0; //@line 14019
 $$byval_copy17 = sp + 104 | 0; //@line 14020
 $$byval_copy16 = sp + 112 | 0; //@line 14021
 $$byval_copy15 = sp + 120 | 0; //@line 14022
 $$byval_copy14 = sp + 128 | 0; //@line 14023
 $$byval_copy13 = sp + 136 | 0; //@line 14024
 $$byval_copy12 = sp + 144 | 0; //@line 14025
 $$byval_copy11 = sp + 152 | 0; //@line 14026
 $$byval_copy10 = sp + 160 | 0; //@line 14027
 $$byval_copy9 = sp + 168 | 0; //@line 14028
 $$byval_copy8 = sp + 176 | 0; //@line 14029
 $$byval_copy7 = sp + 184 | 0; //@line 14030
 $$byval_copy6 = sp + 192 | 0; //@line 14031
 $$byval_copy5 = sp + 200 | 0; //@line 14032
 $$byval_copy4 = sp + 208 | 0; //@line 14033
 $$byval_copy3 = sp + 216 | 0; //@line 14034
 $$byval_copy2 = sp + 224 | 0; //@line 14035
 $$byval_copy1 = sp + 232 | 0; //@line 14036
 $$byval_copy = sp + 240 | 0; //@line 14037
 $1 = sp + 248 | 0; //@line 14038
 $2 = sp + 256 | 0; //@line 14039
 $3 = sp + 264 | 0; //@line 14040
 $4 = sp + 272 | 0; //@line 14041
 $5 = sp + 280 | 0; //@line 14042
 $6 = sp + 288 | 0; //@line 14043
 $7 = sp + 296 | 0; //@line 14044
 $8 = sp + 304 | 0; //@line 14045
 $9 = sp + 312 | 0; //@line 14046
 $10 = sp + 320 | 0; //@line 14047
 $11 = sp + 328 | 0; //@line 14048
 $12 = sp + 336 | 0; //@line 14049
 $13 = sp + 344 | 0; //@line 14050
 $__p$i$i$i$i = sp + 352 | 0; //@line 14051
 $14 = sp + 368 | 0; //@line 14052
 $15 = sp + 376 | 0; //@line 14053
 $16 = sp + 384 | 0; //@line 14054
 $17 = sp + 392 | 0; //@line 14055
 $18 = sp + 400 | 0; //@line 14056
 $19 = sp + 408 | 0; //@line 14057
 $20 = sp + 416 | 0; //@line 14058
 $21 = sp + 424 | 0; //@line 14059
 $22 = sp + 432 | 0; //@line 14060
 $23 = sp + 440 | 0; //@line 14061
 $24 = sp + 448 | 0; //@line 14062
 $25 = sp + 456 | 0; //@line 14063
 $26 = sp + 464 | 0; //@line 14064
 $27 = sp + 472 | 0; //@line 14065
 $28 = sp + 480 | 0; //@line 14066
 $29 = sp + 488 | 0; //@line 14067
 $30 = sp + 496 | 0; //@line 14068
 $31 = sp + 504 | 0; //@line 14069
 $32 = sp + 512 | 0; //@line 14070
 $33 = sp + 520 | 0; //@line 14071
 $34 = sp + 528 | 0; //@line 14072
 $35 = sp + 536 | 0; //@line 14073
 $36 = sp + 544 | 0; //@line 14074
 $37 = sp + 552 | 0; //@line 14075
 $38 = sp + 560 | 0; //@line 14076
 $39 = sp + 568 | 0; //@line 14077
 HEAP32[$__err >> 2] = 0; //@line 14078
 __ZNKSt3__18ios_base6getlocEv($14, $__iob); //@line 14079
 $40 = $14; //@line 14080
 $41 = HEAP32[$40 >> 2] | 0; //@line 14081
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 14087
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 14089
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 14091
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 14092
 }
 $49 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 14095
 $53 = HEAP32[$41 + 8 >> 2] | 0; //@line 14099
 if (!((HEAP32[$41 + 12 >> 2] | 0) - $53 >> 2 >>> 0 > $49 >>> 0)) {
  $62 = ___cxa_allocate_exception(4) | 0; //@line 14106
  $63 = $62; //@line 14107
  __ZNSt8bad_castC2Ev($63); //@line 14108
  ___cxa_throw($62 | 0, 13672, 114); //@line 14109
 }
 $60 = HEAP32[$53 + ($49 << 2) >> 2] | 0; //@line 14113
 if (($60 | 0) == 0) {
  $62 = ___cxa_allocate_exception(4) | 0; //@line 14116
  $63 = $62; //@line 14117
  __ZNSt8bad_castC2Ev($63); //@line 14118
  ___cxa_throw($62 | 0, 13672, 114); //@line 14119
 }
 $64 = $60; //@line 14122
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$40 >> 2] | 0) | 0; //@line 14125
 L10 : do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 37:
   {
    HEAP32[$39 >> 2] = HEAP32[$__e >> 2]; //@line 14133
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$39 + 0 >> 2]; //@line 14137
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $$byval_copy30, $__err, $64); //@line 14138
    break;
   }
  case 89:
   {
    HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 14147
    HEAP32[$$byval_copy29 + 0 >> 2] = HEAP32[$1 + 0 >> 2]; //@line 14151
    $490 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy29, $__err, $64, 4) | 0; //@line 14152
    if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
     break L10;
    }
    HEAP32[$__tm + 20 >> 2] = $490 + -1900; //@line 14162
    break;
   }
  case 65:
  case 97:
   {
    $69 = HEAP32[$__e >> 2] | 0; //@line 14167
    $71 = $this + 8 | 0; //@line 14169
    $75 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$71 >> 2] >> 2] & 127]($71) | 0; //@line 14173
    HEAP32[$13 >> 2] = $69; //@line 14175
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$13 + 0 >> 2]; //@line 14180
    $85 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $75, $75 + 168 | 0, $64, $__err, 0) | 0) - $75 | 0; //@line 14185
    if (($85 | 0) >= 168) {
     break L10;
    }
    HEAP32[$__tm + 24 >> 2] = (($85 | 0) / 12 | 0 | 0) % 7 | 0; //@line 14193
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $91 = HEAP32[$__e >> 2] | 0; //@line 14198
    $93 = $this + 8 | 0; //@line 14200
    $98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 4 >> 2] & 127]($93) | 0; //@line 14205
    HEAP32[$12 >> 2] = $91; //@line 14207
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$12 + 0 >> 2]; //@line 14212
    $108 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy1, $98, $98 + 288 | 0, $64, $__err, 0) | 0) - $98 | 0; //@line 14217
    if (($108 | 0) >= 288) {
     break L10;
    }
    HEAP32[$__tm + 16 >> 2] = (($108 | 0) / 12 | 0 | 0) % 12 | 0; //@line 14225
    break;
   }
  case 99:
   {
    $113 = $this + 8 | 0; //@line 14229
    $118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 12 >> 2] & 127]($113) | 0; //@line 14234
    $119 = $__b; //@line 14235
    HEAP32[$16 >> 2] = HEAP32[$119 >> 2]; //@line 14238
    HEAP32[$17 >> 2] = HEAP32[$__e >> 2]; //@line 14242
    $126 = HEAP8[$118] | 0; //@line 14244
    if (($126 & 1) == 0) {
     $137 = $118 + 4 | 0; //@line 14252
     $138 = $118 + 4 | 0; //@line 14252
     $139 = ($126 & 255) >>> 1; //@line 14252
    } else {
     $130 = HEAP32[$118 + 8 >> 2] | 0; //@line 14255
     $137 = $130; //@line 14258
     $138 = $130; //@line 14258
     $139 = HEAP32[$118 + 4 >> 2] | 0; //@line 14258
    }
    HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$16 + 0 >> 2]; //@line 14264
    HEAP32[$$byval_copy3 + 0 >> 2] = HEAP32[$17 + 0 >> 2]; //@line 14268
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15, $this, $$byval_copy2, $$byval_copy3, $__iob, $__err, $__tm, $138, $137 + ($139 << 2) | 0); //@line 14269
    HEAP32[$119 >> 2] = HEAP32[$15 >> 2]; //@line 14274
    break;
   }
  case 101:
  case 100:
   {
    $151 = $__tm + 12 | 0; //@line 14278
    HEAP32[$11 >> 2] = HEAP32[$__e >> 2]; //@line 14283
    HEAP32[$$byval_copy4 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 14287
    $159 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy4, $__err, $64, 2) | 0; //@line 14288
    $161 = HEAP32[$__err >> 2] | 0; //@line 14290
    do {
     if (($161 & 4 | 0) == 0) {
      if (!(($159 + -1 | 0) >>> 0 < 31)) {
       break;
      }
      HEAP32[$151 >> 2] = $159; //@line 14300
      break L10;
     }
    } while (0);
    HEAP32[$__err >> 2] = $161 | 4; //@line 14305
    break;
   }
  case 68:
   {
    $166 = $__b; //@line 14309
    HEAP32[$19 >> 2] = HEAP32[$166 >> 2]; //@line 14312
    HEAP32[$20 >> 2] = HEAP32[$__e >> 2]; //@line 14316
    HEAP32[$$byval_copy5 + 0 >> 2] = HEAP32[$19 + 0 >> 2]; //@line 14320
    HEAP32[$$byval_copy6 + 0 >> 2] = HEAP32[$20 + 0 >> 2]; //@line 14324
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18, $this, $$byval_copy5, $$byval_copy6, $__iob, $__err, $__tm, 4800, 4832 | 0); //@line 14325
    HEAP32[$166 >> 2] = HEAP32[$18 >> 2]; //@line 14330
    break;
   }
  case 70:
   {
    $182 = $__b; //@line 14334
    HEAP32[$22 >> 2] = HEAP32[$182 >> 2]; //@line 14337
    HEAP32[$23 >> 2] = HEAP32[$__e >> 2]; //@line 14341
    HEAP32[$$byval_copy7 + 0 >> 2] = HEAP32[$22 + 0 >> 2]; //@line 14345
    HEAP32[$$byval_copy8 + 0 >> 2] = HEAP32[$23 + 0 >> 2]; //@line 14349
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21, $this, $$byval_copy7, $$byval_copy8, $__iob, $__err, $__tm, 4832, 4864 | 0); //@line 14350
    HEAP32[$182 >> 2] = HEAP32[$21 >> 2]; //@line 14355
    break;
   }
  case 72:
   {
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2]; //@line 14363
    HEAP32[$$byval_copy9 + 0 >> 2] = HEAP32[$10 + 0 >> 2]; //@line 14367
    $205 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy9, $__err, $64, 2) | 0; //@line 14368
    $207 = HEAP32[$__err >> 2] | 0; //@line 14370
    if (($207 & 4 | 0) == 0 & ($205 | 0) < 24) {
     HEAP32[$__tm + 8 >> 2] = $205; //@line 14377
     break L10;
    } else {
     HEAP32[$__err >> 2] = $207 | 4; //@line 14381
     break L10;
    }
    break;
   }
  case 73:
   {
    $213 = $__tm + 8 | 0; //@line 14387
    HEAP32[$9 >> 2] = HEAP32[$__e >> 2]; //@line 14392
    HEAP32[$$byval_copy10 + 0 >> 2] = HEAP32[$9 + 0 >> 2]; //@line 14396
    $221 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy10, $__err, $64, 2) | 0; //@line 14397
    $223 = HEAP32[$__err >> 2] | 0; //@line 14399
    do {
     if (($223 & 4 | 0) == 0) {
      if (!(($221 + -1 | 0) >>> 0 < 12)) {
       break;
      }
      HEAP32[$213 >> 2] = $221; //@line 14409
      break L10;
     }
    } while (0);
    HEAP32[$__err >> 2] = $223 | 4; //@line 14414
    break;
   }
  case 106:
   {
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2]; //@line 14422
    HEAP32[$$byval_copy11 + 0 >> 2] = HEAP32[$8 + 0 >> 2]; //@line 14426
    $235 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy11, $__err, $64, 3) | 0; //@line 14427
    $237 = HEAP32[$__err >> 2] | 0; //@line 14429
    if (($237 & 4 | 0) == 0 & ($235 | 0) < 366) {
     HEAP32[$__tm + 28 >> 2] = $235; //@line 14436
     break L10;
    } else {
     HEAP32[$__err >> 2] = $237 | 4; //@line 14440
     break L10;
    }
    break;
   }
  case 109:
   {
    HEAP32[$7 >> 2] = HEAP32[$__e >> 2]; //@line 14450
    HEAP32[$$byval_copy12 + 0 >> 2] = HEAP32[$7 + 0 >> 2]; //@line 14454
    $250 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy12, $__err, $64, 2) | 0; //@line 14455
    $252 = HEAP32[$__err >> 2] | 0; //@line 14457
    if (($252 & 4 | 0) == 0 & ($250 | 0) < 13) {
     HEAP32[$__tm + 16 >> 2] = $250 + -1; //@line 14465
     break L10;
    } else {
     HEAP32[$__err >> 2] = $252 | 4; //@line 14469
     break L10;
    }
    break;
   }
  case 77:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 14479
    HEAP32[$$byval_copy13 + 0 >> 2] = HEAP32[$6 + 0 >> 2]; //@line 14483
    $266 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy13, $__err, $64, 2) | 0; //@line 14484
    $268 = HEAP32[$__err >> 2] | 0; //@line 14486
    if (($268 & 4 | 0) == 0 & ($266 | 0) < 60) {
     HEAP32[$__tm + 4 >> 2] = $266; //@line 14493
     break L10;
    } else {
     HEAP32[$__err >> 2] = $268 | 4; //@line 14497
     break L10;
    }
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$24 >> 2] = HEAP32[$__e >> 2]; //@line 14506
    HEAP32[$$byval_copy14 + 0 >> 2] = HEAP32[$24 + 0 >> 2]; //@line 14510
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $$byval_copy14, $__err, $64); //@line 14511
    break;
   }
  case 112:
   {
    $281 = $__tm + 8 | 0; //@line 14516
    $283 = HEAP32[$__e >> 2] | 0; //@line 14518
    $285 = $this + 8 | 0; //@line 14520
    $290 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$285 >> 2] | 0) + 8 >> 2] & 127]($285) | 0; //@line 14525
    $292 = HEAP8[$290] | 0; //@line 14527
    if (($292 & 1) == 0) {
     $299 = ($292 & 255) >>> 1; //@line 14533
    } else {
     $299 = HEAP32[$290 + 4 >> 2] | 0; //@line 14537
    }
    $302 = HEAP8[$290 + 12 | 0] | 0; //@line 14541
    if (($302 & 1) == 0) {
     $309 = ($302 & 255) >>> 1; //@line 14547
    } else {
     $309 = HEAP32[$290 + 16 >> 2] | 0; //@line 14551
    }
    if (($299 | 0) == (0 - $309 | 0)) {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 14558
     break L10;
    }
    HEAP32[$5 >> 2] = $283; //@line 14562
    HEAP32[$$byval_copy15 + 0 >> 2] = HEAP32[$5 + 0 >> 2]; //@line 14567
    $319 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy15, $290, $290 + 24 | 0, $64, $__err, 0) | 0; //@line 14568
    $323 = $319 - $290 | 0; //@line 14572
    do {
     if (($319 | 0) == ($290 | 0)) {
      if ((HEAP32[$281 >> 2] | 0) != 12) {
       break;
      }
      HEAP32[$281 >> 2] = 0; //@line 14581
      break L10;
     }
    } while (0);
    if (($323 | 0) != 12) {
     break L10;
    }
    $328 = HEAP32[$281 >> 2] | 0; //@line 14589
    if (($328 | 0) >= 12) {
     break L10;
    }
    HEAP32[$281 >> 2] = $328 + 12; //@line 14595
    break;
   }
  case 114:
   {
    $331 = $__b; //@line 14599
    HEAP32[$26 >> 2] = HEAP32[$331 >> 2]; //@line 14602
    HEAP32[$27 >> 2] = HEAP32[$__e >> 2]; //@line 14606
    HEAP32[$$byval_copy16 + 0 >> 2] = HEAP32[$26 + 0 >> 2]; //@line 14610
    HEAP32[$$byval_copy17 + 0 >> 2] = HEAP32[$27 + 0 >> 2]; //@line 14614
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25, $this, $$byval_copy16, $$byval_copy17, $__iob, $__err, $__tm, 4864, 4908 | 0); //@line 14615
    HEAP32[$331 >> 2] = HEAP32[$25 >> 2]; //@line 14620
    break;
   }
  case 82:
   {
    $347 = $__b; //@line 14624
    HEAP32[$29 >> 2] = HEAP32[$347 >> 2]; //@line 14627
    HEAP32[$30 >> 2] = HEAP32[$__e >> 2]; //@line 14631
    HEAP32[$$byval_copy18 + 0 >> 2] = HEAP32[$29 + 0 >> 2]; //@line 14635
    HEAP32[$$byval_copy19 + 0 >> 2] = HEAP32[$30 + 0 >> 2]; //@line 14639
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28, $this, $$byval_copy18, $$byval_copy19, $__iob, $__err, $__tm, 4912, 4932 | 0); //@line 14640
    HEAP32[$347 >> 2] = HEAP32[$28 >> 2]; //@line 14645
    break;
   }
  case 83:
   {
    HEAP32[$4 >> 2] = HEAP32[$__e >> 2]; //@line 14653
    HEAP32[$$byval_copy20 + 0 >> 2] = HEAP32[$4 + 0 >> 2]; //@line 14657
    $370 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy20, $__err, $64, 2) | 0; //@line 14658
    $372 = HEAP32[$__err >> 2] | 0; //@line 14660
    if (($372 & 4 | 0) == 0 & ($370 | 0) < 61) {
     HEAP32[$__tm >> 2] = $370; //@line 14667
     break L10;
    } else {
     HEAP32[$__err >> 2] = $372 | 4; //@line 14671
     break L10;
    }
    break;
   }
  case 84:
   {
    $378 = $__b; //@line 14677
    HEAP32[$32 >> 2] = HEAP32[$378 >> 2]; //@line 14680
    HEAP32[$33 >> 2] = HEAP32[$__e >> 2]; //@line 14684
    HEAP32[$$byval_copy21 + 0 >> 2] = HEAP32[$32 + 0 >> 2]; //@line 14688
    HEAP32[$$byval_copy22 + 0 >> 2] = HEAP32[$33 + 0 >> 2]; //@line 14692
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31, $this, $$byval_copy21, $$byval_copy22, $__iob, $__err, $__tm, 4936, 4968 | 0); //@line 14693
    HEAP32[$378 >> 2] = HEAP32[$31 >> 2]; //@line 14698
    break;
   }
  case 119:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 14706
    HEAP32[$$byval_copy23 + 0 >> 2] = HEAP32[$3 + 0 >> 2]; //@line 14710
    $401 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy23, $__err, $64, 1) | 0; //@line 14711
    $403 = HEAP32[$__err >> 2] | 0; //@line 14713
    if (($403 & 4 | 0) == 0 & ($401 | 0) < 7) {
     HEAP32[$__tm + 24 >> 2] = $401; //@line 14720
     break L10;
    } else {
     HEAP32[$__err >> 2] = $403 | 4; //@line 14724
     break L10;
    }
    break;
   }
  case 120:
   {
    $412 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0; //@line 14733
    HEAP32[$34 >> 2] = HEAP32[$__b >> 2]; //@line 14737
    HEAP32[$35 >> 2] = HEAP32[$__e >> 2]; //@line 14741
    HEAP32[$$byval_copy24 + 0 >> 2] = HEAP32[$34 + 0 >> 2]; //@line 14745
    HEAP32[$$byval_copy25 + 0 >> 2] = HEAP32[$35 + 0 >> 2]; //@line 14749
    FUNCTION_TABLE_viiiiiii[$412 & 63]($agg$result, $this, $$byval_copy24, $$byval_copy25, $__iob, $__err, $__tm); //@line 14750
    STACKTOP = sp; //@line 14753
    return;
   }
  case 88:
   {
    $427 = $this + 8 | 0; //@line 14757
    $432 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$427 >> 2] | 0) + 24 >> 2] & 127]($427) | 0; //@line 14762
    $433 = $__b; //@line 14763
    HEAP32[$37 >> 2] = HEAP32[$433 >> 2]; //@line 14766
    HEAP32[$38 >> 2] = HEAP32[$__e >> 2]; //@line 14770
    $440 = HEAP8[$432] | 0; //@line 14772
    if (($440 & 1) == 0) {
     $451 = $432 + 4 | 0; //@line 14780
     $452 = $432 + 4 | 0; //@line 14780
     $453 = ($440 & 255) >>> 1; //@line 14780
    } else {
     $444 = HEAP32[$432 + 8 >> 2] | 0; //@line 14783
     $451 = $444; //@line 14786
     $452 = $444; //@line 14786
     $453 = HEAP32[$432 + 4 >> 2] | 0; //@line 14786
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$37 + 0 >> 2]; //@line 14792
    HEAP32[$$byval_copy27 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 14796
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36, $this, $$byval_copy26, $$byval_copy27, $__iob, $__err, $__tm, $452, $451 + ($453 << 2) | 0); //@line 14797
    HEAP32[$433 >> 2] = HEAP32[$36 >> 2]; //@line 14802
    break;
   }
  case 121:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 14811
    HEAP32[$$byval_copy28 + 0 >> 2] = HEAP32[$2 + 0 >> 2]; //@line 14815
    $473 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy28, $__err, $64, 4) | 0; //@line 14816
    if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
     break L10;
    }
    if (($473 | 0) < 69) {
     $__t$0$i = $473 + 2e3 | 0; //@line 14827
    } else {
     $__t$0$i = ($473 + -69 | 0) >>> 0 < 31 ? $473 + 1900 | 0 : $473; //@line 14833
    }
    HEAP32[$__tm + 20 >> 2] = $__t$0$i + -1900; //@line 14836
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 14842
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2]; //@line 14849
 STACKTOP = sp; //@line 14850
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, u$0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 u$0 = u$0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $108 = 0, $11 = 0, $113 = 0, $118 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $130 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $153 = 0, $16 = 0, $161 = 0, $163 = 0, $168 = 0, $17 = 0, $18 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $207 = 0, $209 = 0, $21 = 0, $215 = 0, $22 = 0, $223 = 0, $225 = 0, $23 = 0, $237 = 0, $239 = 0, $24 = 0, $25 = 0, $252 = 0, $254 = 0, $26 = 0, $268 = 0, $27 = 0, $270 = 0, $28 = 0, $283 = 0, $285 = 0, $287 = 0, $29 = 0, $292 = 0, $294 = 0, $3 = 0, $30 = 0, $301 = 0, $304 = 0, $31 = 0, $311 = 0, $32 = 0, $321 = 0, $325 = 0, $33 = 0, $330 = 0, $333 = 0, $34 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $372 = 0, $374 = 0, $38 = 0, $380 = 0, $39 = 0, $4 = 0, $40 = 0, $403 = 0, $405 = 0, $41 = 0, $414 = 0, $429 = 0, $434 = 0, $435 = 0, $442 = 0, $446 = 0, $455 = 0, $456 = 0, $457 = 0, $477 = 0, $49 = 0, $494 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $8 = 0, $85 = 0, $9 = 0, $91 = 0, $93 = 0, $98 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP; //@line 11284
 STACKTOP = STACKTOP + 576 | 0; //@line 11285
 $$byval_copy30 = sp; //@line 11286
 $$byval_copy29 = sp + 8 | 0; //@line 11287
 $$byval_copy28 = sp + 16 | 0; //@line 11288
 $$byval_copy27 = sp + 24 | 0; //@line 11289
 $$byval_copy26 = sp + 32 | 0; //@line 11290
 $$byval_copy25 = sp + 40 | 0; //@line 11291
 $$byval_copy24 = sp + 48 | 0; //@line 11292
 $$byval_copy23 = sp + 56 | 0; //@line 11293
 $$byval_copy22 = sp + 64 | 0; //@line 11294
 $$byval_copy21 = sp + 72 | 0; //@line 11295
 $$byval_copy20 = sp + 80 | 0; //@line 11296
 $$byval_copy19 = sp + 88 | 0; //@line 11297
 $$byval_copy18 = sp + 96 | 0; //@line 11298
 $$byval_copy17 = sp + 104 | 0; //@line 11299
 $$byval_copy16 = sp + 112 | 0; //@line 11300
 $$byval_copy15 = sp + 120 | 0; //@line 11301
 $$byval_copy14 = sp + 128 | 0; //@line 11302
 $$byval_copy13 = sp + 136 | 0; //@line 11303
 $$byval_copy12 = sp + 144 | 0; //@line 11304
 $$byval_copy11 = sp + 152 | 0; //@line 11305
 $$byval_copy10 = sp + 160 | 0; //@line 11306
 $$byval_copy9 = sp + 168 | 0; //@line 11307
 $$byval_copy8 = sp + 176 | 0; //@line 11308
 $$byval_copy7 = sp + 184 | 0; //@line 11309
 $$byval_copy6 = sp + 192 | 0; //@line 11310
 $$byval_copy5 = sp + 200 | 0; //@line 11311
 $$byval_copy4 = sp + 208 | 0; //@line 11312
 $$byval_copy3 = sp + 216 | 0; //@line 11313
 $$byval_copy2 = sp + 224 | 0; //@line 11314
 $$byval_copy1 = sp + 232 | 0; //@line 11315
 $$byval_copy = sp + 240 | 0; //@line 11316
 $1 = sp + 248 | 0; //@line 11317
 $2 = sp + 256 | 0; //@line 11318
 $3 = sp + 264 | 0; //@line 11319
 $4 = sp + 272 | 0; //@line 11320
 $5 = sp + 280 | 0; //@line 11321
 $6 = sp + 288 | 0; //@line 11322
 $7 = sp + 296 | 0; //@line 11323
 $8 = sp + 304 | 0; //@line 11324
 $9 = sp + 312 | 0; //@line 11325
 $10 = sp + 320 | 0; //@line 11326
 $11 = sp + 328 | 0; //@line 11327
 $12 = sp + 336 | 0; //@line 11328
 $13 = sp + 344 | 0; //@line 11329
 $__p$i$i$i$i = sp + 352 | 0; //@line 11330
 $14 = sp + 368 | 0; //@line 11331
 $15 = sp + 376 | 0; //@line 11332
 $16 = sp + 384 | 0; //@line 11333
 $17 = sp + 392 | 0; //@line 11334
 $18 = sp + 400 | 0; //@line 11335
 $19 = sp + 408 | 0; //@line 11336
 $20 = sp + 416 | 0; //@line 11337
 $21 = sp + 424 | 0; //@line 11338
 $22 = sp + 432 | 0; //@line 11339
 $23 = sp + 440 | 0; //@line 11340
 $24 = sp + 448 | 0; //@line 11341
 $25 = sp + 456 | 0; //@line 11342
 $26 = sp + 464 | 0; //@line 11343
 $27 = sp + 472 | 0; //@line 11344
 $28 = sp + 480 | 0; //@line 11345
 $29 = sp + 488 | 0; //@line 11346
 $30 = sp + 496 | 0; //@line 11347
 $31 = sp + 504 | 0; //@line 11348
 $32 = sp + 512 | 0; //@line 11349
 $33 = sp + 520 | 0; //@line 11350
 $34 = sp + 528 | 0; //@line 11351
 $35 = sp + 536 | 0; //@line 11352
 $36 = sp + 544 | 0; //@line 11353
 $37 = sp + 552 | 0; //@line 11354
 $38 = sp + 560 | 0; //@line 11355
 $39 = sp + 568 | 0; //@line 11356
 HEAP32[$__err >> 2] = 0; //@line 11357
 __ZNKSt3__18ios_base6getlocEv($14, $__iob); //@line 11358
 $40 = $14; //@line 11359
 $41 = HEAP32[$40 >> 2] | 0; //@line 11360
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 11366
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 11368
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 11370
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 11371
 }
 $49 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 11374
 $53 = HEAP32[$41 + 8 >> 2] | 0; //@line 11378
 if (!((HEAP32[$41 + 12 >> 2] | 0) - $53 >> 2 >>> 0 > $49 >>> 0)) {
  $62 = ___cxa_allocate_exception(4) | 0; //@line 11385
  $63 = $62; //@line 11386
  __ZNSt8bad_castC2Ev($63); //@line 11387
  ___cxa_throw($62 | 0, 13672, 114); //@line 11388
 }
 $60 = HEAP32[$53 + ($49 << 2) >> 2] | 0; //@line 11392
 if (($60 | 0) == 0) {
  $62 = ___cxa_allocate_exception(4) | 0; //@line 11395
  $63 = $62; //@line 11396
  __ZNSt8bad_castC2Ev($63); //@line 11397
  ___cxa_throw($62 | 0, 13672, 114); //@line 11398
 }
 $64 = $60; //@line 11401
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$40 >> 2] | 0) | 0; //@line 11404
 L10 : do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 65:
  case 97:
   {
    $69 = HEAP32[$__e >> 2] | 0; //@line 11410
    $71 = $this + 8 | 0; //@line 11412
    $75 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$71 >> 2] >> 2] & 127]($71) | 0; //@line 11416
    HEAP32[$13 >> 2] = $69; //@line 11418
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$13 + 0 >> 2]; //@line 11423
    $85 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $75, $75 + 168 | 0, $64, $__err, 0) | 0) - $75 | 0; //@line 11428
    if (($85 | 0) >= 168) {
     break L10;
    }
    HEAP32[$__tm + 24 >> 2] = (($85 | 0) / 12 | 0 | 0) % 7 | 0; //@line 11436
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $91 = HEAP32[$__e >> 2] | 0; //@line 11441
    $93 = $this + 8 | 0; //@line 11443
    $98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 4 >> 2] & 127]($93) | 0; //@line 11448
    HEAP32[$12 >> 2] = $91; //@line 11450
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$12 + 0 >> 2]; //@line 11455
    $108 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy1, $98, $98 + 288 | 0, $64, $__err, 0) | 0) - $98 | 0; //@line 11460
    if (($108 | 0) >= 288) {
     break L10;
    }
    HEAP32[$__tm + 16 >> 2] = (($108 | 0) / 12 | 0 | 0) % 12 | 0; //@line 11468
    break;
   }
  case 99:
   {
    $113 = $this + 8 | 0; //@line 11472
    $118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 12 >> 2] & 127]($113) | 0; //@line 11477
    $119 = $__b; //@line 11478
    HEAP32[$16 >> 2] = HEAP32[$119 >> 2]; //@line 11481
    HEAP32[$17 >> 2] = HEAP32[$__e >> 2]; //@line 11485
    $126 = HEAP8[$118] | 0; //@line 11487
    if (($126 & 1) == 0) {
     $139 = $118 + 1 | 0; //@line 11497
     $140 = $118 + 1 | 0; //@line 11497
     $141 = ($126 & 255) >>> 1; //@line 11497
    } else {
     $130 = HEAP32[$118 + 8 >> 2] | 0; //@line 11500
     $139 = $130; //@line 11503
     $140 = $130; //@line 11503
     $141 = HEAP32[$118 + 4 >> 2] | 0; //@line 11503
    }
    HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$16 + 0 >> 2]; //@line 11509
    HEAP32[$$byval_copy3 + 0 >> 2] = HEAP32[$17 + 0 >> 2]; //@line 11513
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15, $this, $$byval_copy2, $$byval_copy3, $__iob, $__err, $__tm, $140, $139 + $141 | 0); //@line 11514
    HEAP32[$119 >> 2] = HEAP32[$15 >> 2]; //@line 11519
    break;
   }
  case 101:
  case 100:
   {
    $153 = $__tm + 12 | 0; //@line 11523
    HEAP32[$11 >> 2] = HEAP32[$__e >> 2]; //@line 11528
    HEAP32[$$byval_copy4 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 11532
    $161 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy4, $__err, $64, 2) | 0; //@line 11533
    $163 = HEAP32[$__err >> 2] | 0; //@line 11535
    do {
     if (($163 & 4 | 0) == 0) {
      if (!(($161 + -1 | 0) >>> 0 < 31)) {
       break;
      }
      HEAP32[$153 >> 2] = $161; //@line 11545
      break L10;
     }
    } while (0);
    HEAP32[$__err >> 2] = $163 | 4; //@line 11550
    break;
   }
  case 68:
   {
    $168 = $__b; //@line 11554
    HEAP32[$19 >> 2] = HEAP32[$168 >> 2]; //@line 11557
    HEAP32[$20 >> 2] = HEAP32[$__e >> 2]; //@line 11561
    HEAP32[$$byval_copy5 + 0 >> 2] = HEAP32[$19 + 0 >> 2]; //@line 11565
    HEAP32[$$byval_copy6 + 0 >> 2] = HEAP32[$20 + 0 >> 2]; //@line 11569
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18, $this, $$byval_copy5, $$byval_copy6, $__iob, $__err, $__tm, 4624, 4632 | 0); //@line 11570
    HEAP32[$168 >> 2] = HEAP32[$18 >> 2]; //@line 11575
    break;
   }
  case 70:
   {
    $184 = $__b; //@line 11579
    HEAP32[$22 >> 2] = HEAP32[$184 >> 2]; //@line 11582
    HEAP32[$23 >> 2] = HEAP32[$__e >> 2]; //@line 11586
    HEAP32[$$byval_copy7 + 0 >> 2] = HEAP32[$22 + 0 >> 2]; //@line 11590
    HEAP32[$$byval_copy8 + 0 >> 2] = HEAP32[$23 + 0 >> 2]; //@line 11594
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21, $this, $$byval_copy7, $$byval_copy8, $__iob, $__err, $__tm, 4632, 4640 | 0); //@line 11595
    HEAP32[$184 >> 2] = HEAP32[$21 >> 2]; //@line 11600
    break;
   }
  case 72:
   {
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2]; //@line 11608
    HEAP32[$$byval_copy9 + 0 >> 2] = HEAP32[$10 + 0 >> 2]; //@line 11612
    $207 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy9, $__err, $64, 2) | 0; //@line 11613
    $209 = HEAP32[$__err >> 2] | 0; //@line 11615
    if (($209 & 4 | 0) == 0 & ($207 | 0) < 24) {
     HEAP32[$__tm + 8 >> 2] = $207; //@line 11622
     break L10;
    } else {
     HEAP32[$__err >> 2] = $209 | 4; //@line 11626
     break L10;
    }
    break;
   }
  case 73:
   {
    $215 = $__tm + 8 | 0; //@line 11632
    HEAP32[$9 >> 2] = HEAP32[$__e >> 2]; //@line 11637
    HEAP32[$$byval_copy10 + 0 >> 2] = HEAP32[$9 + 0 >> 2]; //@line 11641
    $223 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy10, $__err, $64, 2) | 0; //@line 11642
    $225 = HEAP32[$__err >> 2] | 0; //@line 11644
    do {
     if (($225 & 4 | 0) == 0) {
      if (!(($223 + -1 | 0) >>> 0 < 12)) {
       break;
      }
      HEAP32[$215 >> 2] = $223; //@line 11654
      break L10;
     }
    } while (0);
    HEAP32[$__err >> 2] = $225 | 4; //@line 11659
    break;
   }
  case 106:
   {
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2]; //@line 11667
    HEAP32[$$byval_copy11 + 0 >> 2] = HEAP32[$8 + 0 >> 2]; //@line 11671
    $237 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy11, $__err, $64, 3) | 0; //@line 11672
    $239 = HEAP32[$__err >> 2] | 0; //@line 11674
    if (($239 & 4 | 0) == 0 & ($237 | 0) < 366) {
     HEAP32[$__tm + 28 >> 2] = $237; //@line 11681
     break L10;
    } else {
     HEAP32[$__err >> 2] = $239 | 4; //@line 11685
     break L10;
    }
    break;
   }
  case 109:
   {
    HEAP32[$7 >> 2] = HEAP32[$__e >> 2]; //@line 11695
    HEAP32[$$byval_copy12 + 0 >> 2] = HEAP32[$7 + 0 >> 2]; //@line 11699
    $252 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy12, $__err, $64, 2) | 0; //@line 11700
    $254 = HEAP32[$__err >> 2] | 0; //@line 11702
    if (($254 & 4 | 0) == 0 & ($252 | 0) < 13) {
     HEAP32[$__tm + 16 >> 2] = $252 + -1; //@line 11710
     break L10;
    } else {
     HEAP32[$__err >> 2] = $254 | 4; //@line 11714
     break L10;
    }
    break;
   }
  case 77:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 11724
    HEAP32[$$byval_copy13 + 0 >> 2] = HEAP32[$6 + 0 >> 2]; //@line 11728
    $268 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy13, $__err, $64, 2) | 0; //@line 11729
    $270 = HEAP32[$__err >> 2] | 0; //@line 11731
    if (($270 & 4 | 0) == 0 & ($268 | 0) < 60) {
     HEAP32[$__tm + 4 >> 2] = $268; //@line 11738
     break L10;
    } else {
     HEAP32[$__err >> 2] = $270 | 4; //@line 11742
     break L10;
    }
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$24 >> 2] = HEAP32[$__e >> 2]; //@line 11751
    HEAP32[$$byval_copy14 + 0 >> 2] = HEAP32[$24 + 0 >> 2]; //@line 11755
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $$byval_copy14, $__err, $64); //@line 11756
    break;
   }
  case 112:
   {
    $283 = $__tm + 8 | 0; //@line 11761
    $285 = HEAP32[$__e >> 2] | 0; //@line 11763
    $287 = $this + 8 | 0; //@line 11765
    $292 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$287 >> 2] | 0) + 8 >> 2] & 127]($287) | 0; //@line 11770
    $294 = HEAP8[$292] | 0; //@line 11772
    if (($294 & 1) == 0) {
     $301 = ($294 & 255) >>> 1; //@line 11778
    } else {
     $301 = HEAP32[$292 + 4 >> 2] | 0; //@line 11782
    }
    $304 = HEAP8[$292 + 12 | 0] | 0; //@line 11786
    if (($304 & 1) == 0) {
     $311 = ($304 & 255) >>> 1; //@line 11792
    } else {
     $311 = HEAP32[$292 + 16 >> 2] | 0; //@line 11796
    }
    if (($301 | 0) == (0 - $311 | 0)) {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 11803
     break L10;
    }
    HEAP32[$5 >> 2] = $285; //@line 11807
    HEAP32[$$byval_copy15 + 0 >> 2] = HEAP32[$5 + 0 >> 2]; //@line 11812
    $321 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy15, $292, $292 + 24 | 0, $64, $__err, 0) | 0; //@line 11813
    $325 = $321 - $292 | 0; //@line 11817
    do {
     if (($321 | 0) == ($292 | 0)) {
      if ((HEAP32[$283 >> 2] | 0) != 12) {
       break;
      }
      HEAP32[$283 >> 2] = 0; //@line 11826
      break L10;
     }
    } while (0);
    if (($325 | 0) != 12) {
     break L10;
    }
    $330 = HEAP32[$283 >> 2] | 0; //@line 11834
    if (($330 | 0) >= 12) {
     break L10;
    }
    HEAP32[$283 >> 2] = $330 + 12; //@line 11840
    break;
   }
  case 114:
   {
    $333 = $__b; //@line 11844
    HEAP32[$26 >> 2] = HEAP32[$333 >> 2]; //@line 11847
    HEAP32[$27 >> 2] = HEAP32[$__e >> 2]; //@line 11851
    HEAP32[$$byval_copy16 + 0 >> 2] = HEAP32[$26 + 0 >> 2]; //@line 11855
    HEAP32[$$byval_copy17 + 0 >> 2] = HEAP32[$27 + 0 >> 2]; //@line 11859
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25, $this, $$byval_copy16, $$byval_copy17, $__iob, $__err, $__tm, 4640, 4651 | 0); //@line 11860
    HEAP32[$333 >> 2] = HEAP32[$25 >> 2]; //@line 11865
    break;
   }
  case 82:
   {
    $349 = $__b; //@line 11869
    HEAP32[$29 >> 2] = HEAP32[$349 >> 2]; //@line 11872
    HEAP32[$30 >> 2] = HEAP32[$__e >> 2]; //@line 11876
    HEAP32[$$byval_copy18 + 0 >> 2] = HEAP32[$29 + 0 >> 2]; //@line 11880
    HEAP32[$$byval_copy19 + 0 >> 2] = HEAP32[$30 + 0 >> 2]; //@line 11884
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28, $this, $$byval_copy18, $$byval_copy19, $__iob, $__err, $__tm, 4656, 4661 | 0); //@line 11885
    HEAP32[$349 >> 2] = HEAP32[$28 >> 2]; //@line 11890
    break;
   }
  case 83:
   {
    HEAP32[$4 >> 2] = HEAP32[$__e >> 2]; //@line 11898
    HEAP32[$$byval_copy20 + 0 >> 2] = HEAP32[$4 + 0 >> 2]; //@line 11902
    $372 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy20, $__err, $64, 2) | 0; //@line 11903
    $374 = HEAP32[$__err >> 2] | 0; //@line 11905
    if (($374 & 4 | 0) == 0 & ($372 | 0) < 61) {
     HEAP32[$__tm >> 2] = $372; //@line 11912
     break L10;
    } else {
     HEAP32[$__err >> 2] = $374 | 4; //@line 11916
     break L10;
    }
    break;
   }
  case 84:
   {
    $380 = $__b; //@line 11922
    HEAP32[$32 >> 2] = HEAP32[$380 >> 2]; //@line 11925
    HEAP32[$33 >> 2] = HEAP32[$__e >> 2]; //@line 11929
    HEAP32[$$byval_copy21 + 0 >> 2] = HEAP32[$32 + 0 >> 2]; //@line 11933
    HEAP32[$$byval_copy22 + 0 >> 2] = HEAP32[$33 + 0 >> 2]; //@line 11937
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31, $this, $$byval_copy21, $$byval_copy22, $__iob, $__err, $__tm, 4664, 4672 | 0); //@line 11938
    HEAP32[$380 >> 2] = HEAP32[$31 >> 2]; //@line 11943
    break;
   }
  case 119:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 11951
    HEAP32[$$byval_copy23 + 0 >> 2] = HEAP32[$3 + 0 >> 2]; //@line 11955
    $403 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy23, $__err, $64, 1) | 0; //@line 11956
    $405 = HEAP32[$__err >> 2] | 0; //@line 11958
    if (($405 & 4 | 0) == 0 & ($403 | 0) < 7) {
     HEAP32[$__tm + 24 >> 2] = $403; //@line 11965
     break L10;
    } else {
     HEAP32[$__err >> 2] = $405 | 4; //@line 11969
     break L10;
    }
    break;
   }
  case 120:
   {
    $414 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0; //@line 11978
    HEAP32[$34 >> 2] = HEAP32[$__b >> 2]; //@line 11982
    HEAP32[$35 >> 2] = HEAP32[$__e >> 2]; //@line 11986
    HEAP32[$$byval_copy24 + 0 >> 2] = HEAP32[$34 + 0 >> 2]; //@line 11990
    HEAP32[$$byval_copy25 + 0 >> 2] = HEAP32[$35 + 0 >> 2]; //@line 11994
    FUNCTION_TABLE_viiiiiii[$414 & 63]($agg$result, $this, $$byval_copy24, $$byval_copy25, $__iob, $__err, $__tm); //@line 11995
    STACKTOP = sp; //@line 11998
    return;
   }
  case 88:
   {
    $429 = $this + 8 | 0; //@line 12002
    $434 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$429 >> 2] | 0) + 24 >> 2] & 127]($429) | 0; //@line 12007
    $435 = $__b; //@line 12008
    HEAP32[$37 >> 2] = HEAP32[$435 >> 2]; //@line 12011
    HEAP32[$38 >> 2] = HEAP32[$__e >> 2]; //@line 12015
    $442 = HEAP8[$434] | 0; //@line 12017
    if (($442 & 1) == 0) {
     $455 = $434 + 1 | 0; //@line 12027
     $456 = $434 + 1 | 0; //@line 12027
     $457 = ($442 & 255) >>> 1; //@line 12027
    } else {
     $446 = HEAP32[$434 + 8 >> 2] | 0; //@line 12030
     $455 = $446; //@line 12033
     $456 = $446; //@line 12033
     $457 = HEAP32[$434 + 4 >> 2] | 0; //@line 12033
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$37 + 0 >> 2]; //@line 12039
    HEAP32[$$byval_copy27 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 12043
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36, $this, $$byval_copy26, $$byval_copy27, $__iob, $__err, $__tm, $456, $455 + $457 | 0); //@line 12044
    HEAP32[$435 >> 2] = HEAP32[$36 >> 2]; //@line 12049
    break;
   }
  case 121:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 12058
    HEAP32[$$byval_copy28 + 0 >> 2] = HEAP32[$2 + 0 >> 2]; //@line 12062
    $477 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy28, $__err, $64, 4) | 0; //@line 12063
    if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
     break L10;
    }
    if (($477 | 0) < 69) {
     $__t$0$i = $477 + 2e3 | 0; //@line 12074
    } else {
     $__t$0$i = ($477 + -69 | 0) >>> 0 < 31 ? $477 + 1900 | 0 : $477; //@line 12080
    }
    HEAP32[$__tm + 20 >> 2] = $__t$0$i + -1900; //@line 12083
    break;
   }
  case 89:
   {
    HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 12091
    HEAP32[$$byval_copy29 + 0 >> 2] = HEAP32[$1 + 0 >> 2]; //@line 12095
    $494 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy29, $__err, $64, 4) | 0; //@line 12096
    if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
     break L10;
    }
    HEAP32[$__tm + 20 >> 2] = $494 + -1900; //@line 12106
    break;
   }
  case 37:
   {
    HEAP32[$39 >> 2] = HEAP32[$__e >> 2]; //@line 12113
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$39 + 0 >> 2]; //@line 12117
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $$byval_copy30, $__err, $64); //@line 12118
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 12125
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2]; //@line 12132
 STACKTOP = sp; //@line 12133
 return;
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $103 = 0, $11 = 0, $114 = 0, $12 = 0, $123 = 0, $13 = 0, $131 = 0, $141 = 0, $144 = 0, $145 = 0, $153 = 0, $161 = 0, $167 = 0, $168 = 0, $17 = 0, $172 = 0, $175 = 0, $178 = 0, $19 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $205 = 0, $209 = 0, $21 = 0, $213 = 0, $216 = 0, $220 = 0, $221 = 0, $224 = 0, $225 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $239 = 0, $240 = 0, $25 = 0, $250 = 0, $261 = 0, $270 = 0, $288 = 0, $29 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $298 = 0, $299 = 0, $3 = 0, $306 = 0, $307 = 0, $312 = 0, $313 = 0, $316 = 0, $318 = 0, $32 = 0, $321 = 0, $326 = 0, $332 = 0, $336 = 0, $337 = 0, $344 = 0, $348 = 0, $35 = 0, $360 = 0, $361 = 0, $369 = 0, $370 = 0, $372 = 0, $381 = 0, $4 = 0, $50 = 0, $54 = 0, $57 = 0, $60 = 0, $64 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $9 = 0, $92 = 0, $93 = 0, $F16$0 = 0, $I18$0 = 0, $K19$057 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP; //@line 17284
 if (($mem | 0) == 0) {
  STACKTOP = sp; //@line 17287
  return;
 }
 $2 = $mem + -8 | 0; //@line 17289
 $3 = $2; //@line 17290
 $4 = HEAP32[14048 >> 2] | 0; //@line 17291
 if ($2 >>> 0 < $4 >>> 0) {
  _abort(); //@line 17294
 }
 $8 = HEAP32[$mem + -4 >> 2] | 0; //@line 17299
 $9 = $8 & 3; //@line 17300
 if (($9 | 0) == 1) {
  _abort(); //@line 17303
 }
 $11 = $8 & -8; //@line 17306
 $12 = $mem + ($11 + -8) | 0; //@line 17308
 $13 = $12; //@line 17309
 L10 : do {
  if (($8 & 1 | 0) == 0) {
   $17 = HEAP32[$2 >> 2] | 0; //@line 17315
   if (($9 | 0) == 0) {
    STACKTOP = sp; //@line 17318
    return;
   }
   $$sum2 = -8 - $17 | 0; //@line 17320
   $19 = $mem + $$sum2 | 0; //@line 17321
   $20 = $19; //@line 17322
   $21 = $17 + $11 | 0; //@line 17323
   if ($19 >>> 0 < $4 >>> 0) {
    _abort(); //@line 17326
   }
   if (($20 | 0) == (HEAP32[14052 >> 2] | 0)) {
    $131 = $mem + ($11 + -4) | 0; //@line 17334
    if ((HEAP32[$131 >> 2] & 3 | 0) != 3) {
     $p$0 = $20; //@line 17339
     $psize$0 = $21; //@line 17339
     break;
    }
    HEAP32[14040 >> 2] = $21; //@line 17342
    HEAP32[$131 >> 2] = HEAP32[$131 >> 2] & -2; //@line 17345
    HEAP32[$mem + ($$sum2 + 4) >> 2] = $21 | 1; //@line 17350
    HEAP32[$12 >> 2] = $21; //@line 17352
    STACKTOP = sp; //@line 17353
    return;
   }
   $25 = $17 >>> 3; //@line 17355
   if ($17 >>> 0 < 256) {
    $29 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 17361
    $32 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 17365
    $35 = 14072 + ($25 << 1 << 2) | 0; //@line 17368
    do {
     if (($29 | 0) != ($35 | 0)) {
      if ($29 >>> 0 < $4 >>> 0) {
       _abort(); //@line 17375
      }
      if ((HEAP32[$29 + 12 >> 2] | 0) == ($20 | 0)) {
       break;
      }
      _abort(); //@line 17384
     }
    } while (0);
    if (($32 | 0) == ($29 | 0)) {
     HEAP32[3508] = HEAP32[3508] & ~(1 << $25); //@line 17394
     $p$0 = $20; //@line 17395
     $psize$0 = $21; //@line 17395
     break;
    }
    do {
     if (($32 | 0) == ($35 | 0)) {
      $$pre$phi70Z2D = $32 + 8 | 0; //@line 17402
     } else {
      if ($32 >>> 0 < $4 >>> 0) {
       _abort(); //@line 17407
      }
      $50 = $32 + 8 | 0; //@line 17410
      if ((HEAP32[$50 >> 2] | 0) == ($20 | 0)) {
       $$pre$phi70Z2D = $50; //@line 17414
       break;
      }
      _abort(); //@line 17417
     }
    } while (0);
    HEAP32[$29 + 12 >> 2] = $32; //@line 17422
    HEAP32[$$pre$phi70Z2D >> 2] = $29; //@line 17423
    $p$0 = $20; //@line 17424
    $psize$0 = $21; //@line 17424
    break;
   }
   $54 = $19; //@line 17427
   $57 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0; //@line 17431
   $60 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 17435
   do {
    if (($60 | 0) == ($54 | 0)) {
     $74 = $mem + ($$sum2 + 20) | 0; //@line 17441
     $75 = HEAP32[$74 >> 2] | 0; //@line 17442
     if (($75 | 0) == 0) {
      $78 = $mem + ($$sum2 + 16) | 0; //@line 17447
      $79 = HEAP32[$78 >> 2] | 0; //@line 17448
      if (($79 | 0) == 0) {
       $R$1 = 0; //@line 17451
       break;
      } else {
       $R$0 = $79; //@line 17454
       $RP$0 = $78; //@line 17454
      }
     } else {
      $R$0 = $75; //@line 17457
      $RP$0 = $74; //@line 17457
     }
     while (1) {
      $81 = $R$0 + 20 | 0; //@line 17460
      $82 = HEAP32[$81 >> 2] | 0; //@line 17461
      if (($82 | 0) != 0) {
       $RP$0 = $81; //@line 17464
       $R$0 = $82; //@line 17464
       continue;
      }
      $84 = $R$0 + 16 | 0; //@line 17467
      $85 = HEAP32[$84 >> 2] | 0; //@line 17468
      if (($85 | 0) == 0) {
       break;
      } else {
       $R$0 = $85; //@line 17473
       $RP$0 = $84; //@line 17473
      }
     }
     if ($RP$0 >>> 0 < $4 >>> 0) {
      _abort(); //@line 17479
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 17482
      $R$1 = $R$0; //@line 17483
      break;
     }
    } else {
     $64 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 17490
     if ($64 >>> 0 < $4 >>> 0) {
      _abort(); //@line 17494
     }
     $67 = $64 + 12 | 0; //@line 17497
     if ((HEAP32[$67 >> 2] | 0) != ($54 | 0)) {
      _abort(); //@line 17501
     }
     $70 = $60 + 8 | 0; //@line 17504
     if ((HEAP32[$70 >> 2] | 0) == ($54 | 0)) {
      HEAP32[$67 >> 2] = $60; //@line 17508
      HEAP32[$70 >> 2] = $64; //@line 17509
      $R$1 = $60; //@line 17510
      break;
     } else {
      _abort(); //@line 17513
     }
    }
   } while (0);
   if (($57 | 0) == 0) {
    $p$0 = $20; //@line 17520
    $psize$0 = $21; //@line 17520
    break;
   }
   $92 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0; //@line 17526
   $93 = 14336 + ($92 << 2) | 0; //@line 17527
   do {
    if (($54 | 0) == (HEAP32[$93 >> 2] | 0)) {
     HEAP32[$93 >> 2] = $R$1; //@line 17532
     if (($R$1 | 0) != 0) {
      break;
     }
     HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $92); //@line 17541
     $p$0 = $20; //@line 17542
     $psize$0 = $21; //@line 17542
     break L10;
    } else {
     if ($57 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 17549
     }
     $103 = $57 + 16 | 0; //@line 17552
     if ((HEAP32[$103 >> 2] | 0) == ($54 | 0)) {
      HEAP32[$103 >> 2] = $R$1; //@line 17556
     } else {
      HEAP32[$57 + 20 >> 2] = $R$1; //@line 17559
     }
     if (($R$1 | 0) == 0) {
      $p$0 = $20; //@line 17563
      $psize$0 = $21; //@line 17563
      break L10;
     }
    }
   } while (0);
   if ($R$1 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 17572
   }
   HEAP32[$R$1 + 24 >> 2] = $57; //@line 17576
   $114 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0; //@line 17580
   do {
    if (($114 | 0) != 0) {
     if ($114 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 17588
     } else {
      HEAP32[$R$1 + 16 >> 2] = $114; //@line 17592
      HEAP32[$114 + 24 >> 2] = $R$1; //@line 17594
      break;
     }
    }
   } while (0);
   $123 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0; //@line 17602
   if (($123 | 0) == 0) {
    $p$0 = $20; //@line 17605
    $psize$0 = $21; //@line 17605
    break;
   }
   if ($123 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 17612
   } else {
    HEAP32[$R$1 + 20 >> 2] = $123; //@line 17616
    HEAP32[$123 + 24 >> 2] = $R$1; //@line 17618
    $p$0 = $20; //@line 17619
    $psize$0 = $21; //@line 17619
    break;
   }
  } else {
   $p$0 = $3; //@line 17623
   $psize$0 = $11; //@line 17623
  }
 } while (0);
 $141 = $p$0; //@line 17626
 if (!($141 >>> 0 < $12 >>> 0)) {
  _abort(); //@line 17629
 }
 $144 = $mem + ($11 + -4) | 0; //@line 17634
 $145 = HEAP32[$144 >> 2] | 0; //@line 17635
 if (($145 & 1 | 0) == 0) {
  _abort(); //@line 17639
 }
 do {
  if (($145 & 2 | 0) == 0) {
   if (($13 | 0) == (HEAP32[14056 >> 2] | 0)) {
    $153 = (HEAP32[14044 >> 2] | 0) + $psize$0 | 0; //@line 17650
    HEAP32[14044 >> 2] = $153; //@line 17651
    HEAP32[14056 >> 2] = $p$0; //@line 17652
    HEAP32[$p$0 + 4 >> 2] = $153 | 1; //@line 17655
    if (($p$0 | 0) != (HEAP32[14052 >> 2] | 0)) {
     STACKTOP = sp; //@line 17659
     return;
    }
    HEAP32[14052 >> 2] = 0; //@line 17661
    HEAP32[14040 >> 2] = 0; //@line 17662
    STACKTOP = sp; //@line 17663
    return;
   }
   if (($13 | 0) == (HEAP32[14052 >> 2] | 0)) {
    $161 = (HEAP32[14040 >> 2] | 0) + $psize$0 | 0; //@line 17669
    HEAP32[14040 >> 2] = $161; //@line 17670
    HEAP32[14052 >> 2] = $p$0; //@line 17671
    HEAP32[$p$0 + 4 >> 2] = $161 | 1; //@line 17674
    HEAP32[$141 + $161 >> 2] = $161; //@line 17677
    STACKTOP = sp; //@line 17678
    return;
   }
   $167 = ($145 & -8) + $psize$0 | 0; //@line 17681
   $168 = $145 >>> 3; //@line 17682
   L112 : do {
    if ($145 >>> 0 < 256) {
     $172 = HEAP32[$mem + $11 >> 2] | 0; //@line 17688
     $175 = HEAP32[$mem + ($11 | 4) >> 2] | 0; //@line 17692
     $178 = 14072 + ($168 << 1 << 2) | 0; //@line 17695
     do {
      if (($172 | 0) != ($178 | 0)) {
       if ($172 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17703
       }
       if ((HEAP32[$172 + 12 >> 2] | 0) == ($13 | 0)) {
        break;
       }
       _abort(); //@line 17712
      }
     } while (0);
     if (($175 | 0) == ($172 | 0)) {
      HEAP32[3508] = HEAP32[3508] & ~(1 << $168); //@line 17722
      break;
     }
     do {
      if (($175 | 0) == ($178 | 0)) {
       $$pre$phi68Z2D = $175 + 8 | 0; //@line 17729
      } else {
       if ($175 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17735
       }
       $195 = $175 + 8 | 0; //@line 17738
       if ((HEAP32[$195 >> 2] | 0) == ($13 | 0)) {
        $$pre$phi68Z2D = $195; //@line 17742
        break;
       }
       _abort(); //@line 17745
      }
     } while (0);
     HEAP32[$172 + 12 >> 2] = $175; //@line 17750
     HEAP32[$$pre$phi68Z2D >> 2] = $172; //@line 17751
    } else {
     $199 = $12; //@line 17753
     $202 = HEAP32[$mem + ($11 + 16) >> 2] | 0; //@line 17757
     $205 = HEAP32[$mem + ($11 | 4) >> 2] | 0; //@line 17761
     do {
      if (($205 | 0) == ($199 | 0)) {
       $220 = $mem + ($11 + 12) | 0; //@line 17767
       $221 = HEAP32[$220 >> 2] | 0; //@line 17768
       if (($221 | 0) == 0) {
        $224 = $mem + ($11 + 8) | 0; //@line 17773
        $225 = HEAP32[$224 >> 2] | 0; //@line 17774
        if (($225 | 0) == 0) {
         $R7$1 = 0; //@line 17777
         break;
        } else {
         $R7$0 = $225; //@line 17780
         $RP9$0 = $224; //@line 17780
        }
       } else {
        $R7$0 = $221; //@line 17783
        $RP9$0 = $220; //@line 17783
       }
       while (1) {
        $227 = $R7$0 + 20 | 0; //@line 17786
        $228 = HEAP32[$227 >> 2] | 0; //@line 17787
        if (($228 | 0) != 0) {
         $RP9$0 = $227; //@line 17790
         $R7$0 = $228; //@line 17790
         continue;
        }
        $230 = $R7$0 + 16 | 0; //@line 17793
        $231 = HEAP32[$230 >> 2] | 0; //@line 17794
        if (($231 | 0) == 0) {
         break;
        } else {
         $R7$0 = $231; //@line 17799
         $RP9$0 = $230; //@line 17799
        }
       }
       if ($RP9$0 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17806
       } else {
        HEAP32[$RP9$0 >> 2] = 0; //@line 17809
        $R7$1 = $R7$0; //@line 17810
        break;
       }
      } else {
       $209 = HEAP32[$mem + $11 >> 2] | 0; //@line 17816
       if ($209 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17821
       }
       $213 = $209 + 12 | 0; //@line 17824
       if ((HEAP32[$213 >> 2] | 0) != ($199 | 0)) {
        _abort(); //@line 17828
       }
       $216 = $205 + 8 | 0; //@line 17831
       if ((HEAP32[$216 >> 2] | 0) == ($199 | 0)) {
        HEAP32[$213 >> 2] = $205; //@line 17835
        HEAP32[$216 >> 2] = $209; //@line 17836
        $R7$1 = $205; //@line 17837
        break;
       } else {
        _abort(); //@line 17840
       }
      }
     } while (0);
     if (($202 | 0) == 0) {
      break;
     }
     $239 = HEAP32[$mem + ($11 + 20) >> 2] | 0; //@line 17852
     $240 = 14336 + ($239 << 2) | 0; //@line 17853
     do {
      if (($199 | 0) == (HEAP32[$240 >> 2] | 0)) {
       HEAP32[$240 >> 2] = $R7$1; //@line 17858
       if (($R7$1 | 0) != 0) {
        break;
       }
       HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $239); //@line 17867
       break L112;
      } else {
       if ($202 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17874
       }
       $250 = $202 + 16 | 0; //@line 17877
       if ((HEAP32[$250 >> 2] | 0) == ($199 | 0)) {
        HEAP32[$250 >> 2] = $R7$1; //@line 17881
       } else {
        HEAP32[$202 + 20 >> 2] = $R7$1; //@line 17884
       }
       if (($R7$1 | 0) == 0) {
        break L112;
       }
      }
     } while (0);
     if ($R7$1 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 17896
     }
     HEAP32[$R7$1 + 24 >> 2] = $202; //@line 17900
     $261 = HEAP32[$mem + ($11 + 8) >> 2] | 0; //@line 17904
     do {
      if (($261 | 0) != 0) {
       if ($261 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 17912
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $261; //@line 17916
        HEAP32[$261 + 24 >> 2] = $R7$1; //@line 17918
        break;
       }
      }
     } while (0);
     $270 = HEAP32[$mem + ($11 + 12) >> 2] | 0; //@line 17926
     if (($270 | 0) == 0) {
      break;
     }
     if ($270 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 17935
     } else {
      HEAP32[$R7$1 + 20 >> 2] = $270; //@line 17939
      HEAP32[$270 + 24 >> 2] = $R7$1; //@line 17941
      break;
     }
    }
   } while (0);
   HEAP32[$p$0 + 4 >> 2] = $167 | 1; //@line 17948
   HEAP32[$141 + $167 >> 2] = $167; //@line 17951
   if (($p$0 | 0) != (HEAP32[14052 >> 2] | 0)) {
    $psize$1 = $167; //@line 17955
    break;
   }
   HEAP32[14040 >> 2] = $167; //@line 17958
   STACKTOP = sp; //@line 17959
   return;
  } else {
   HEAP32[$144 >> 2] = $145 & -2; //@line 17962
   HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1; //@line 17965
   HEAP32[$141 + $psize$0 >> 2] = $psize$0; //@line 17968
   $psize$1 = $psize$0; //@line 17969
  }
 } while (0);
 $288 = $psize$1 >>> 3; //@line 17972
 if ($psize$1 >>> 0 < 256) {
  $290 = $288 << 1; //@line 17975
  $292 = 14072 + ($290 << 2) | 0; //@line 17977
  $293 = HEAP32[3508] | 0; //@line 17978
  $294 = 1 << $288; //@line 17979
  do {
   if (($293 & $294 | 0) == 0) {
    HEAP32[3508] = $293 | $294; //@line 17985
    $$pre$phiZ2D = 14072 + ($290 + 2 << 2) | 0; //@line 17988
    $F16$0 = $292; //@line 17988
   } else {
    $298 = 14072 + ($290 + 2 << 2) | 0; //@line 17991
    $299 = HEAP32[$298 >> 2] | 0; //@line 17992
    if (!($299 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
     $$pre$phiZ2D = $298; //@line 17997
     $F16$0 = $299; //@line 17997
     break;
    }
    _abort(); //@line 18000
   }
  } while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $p$0; //@line 18004
  HEAP32[$F16$0 + 12 >> 2] = $p$0; //@line 18006
  HEAP32[$p$0 + 8 >> 2] = $F16$0; //@line 18008
  HEAP32[$p$0 + 12 >> 2] = $292; //@line 18010
  STACKTOP = sp; //@line 18011
  return;
 }
 $306 = $p$0; //@line 18013
 $307 = $psize$1 >>> 8; //@line 18014
 do {
  if (($307 | 0) == 0) {
   $I18$0 = 0; //@line 18018
  } else {
   if ($psize$1 >>> 0 > 16777215) {
    $I18$0 = 31; //@line 18022
    break;
   }
   $312 = ($307 + 1048320 | 0) >>> 16 & 8; //@line 18027
   $313 = $307 << $312; //@line 18028
   $316 = ($313 + 520192 | 0) >>> 16 & 4; //@line 18031
   $318 = $313 << $316; //@line 18033
   $321 = ($318 + 245760 | 0) >>> 16 & 2; //@line 18036
   $326 = 14 - ($316 | $312 | $321) + ($318 << $321 >>> 15) | 0; //@line 18041
   $I18$0 = $psize$1 >>> ($326 + 7 | 0) & 1 | $326 << 1; //@line 18047
  }
 } while (0);
 $332 = 14336 + ($I18$0 << 2) | 0; //@line 18050
 HEAP32[$p$0 + 28 >> 2] = $I18$0; //@line 18053
 HEAP32[$p$0 + 20 >> 2] = 0; //@line 18055
 HEAP32[$p$0 + 16 >> 2] = 0; //@line 18057
 $336 = HEAP32[14036 >> 2] | 0; //@line 18058
 $337 = 1 << $I18$0; //@line 18059
 L199 : do {
  if (($336 & $337 | 0) == 0) {
   HEAP32[14036 >> 2] = $336 | $337; //@line 18065
   HEAP32[$332 >> 2] = $306; //@line 18066
   HEAP32[$p$0 + 24 >> 2] = $332; //@line 18069
   HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 18071
   HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 18073
  } else {
   $344 = HEAP32[$332 >> 2] | 0; //@line 18075
   if (($I18$0 | 0) == 31) {
    $348 = 0; //@line 18078
   } else {
    $348 = 25 - ($I18$0 >>> 1) | 0; //@line 18082
   }
   L205 : do {
    if ((HEAP32[$344 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $344; //@line 18090
    } else {
     $K19$057 = $psize$1 << $348; //@line 18093
     $T$056 = $344; //@line 18093
     while (1) {
      $360 = $T$056 + ($K19$057 >>> 31 << 2) + 16 | 0; //@line 18096
      $361 = HEAP32[$360 >> 2] | 0; //@line 18097
      if (($361 | 0) == 0) {
       break;
      }
      if ((HEAP32[$361 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
       $T$0$lcssa = $361; //@line 18108
       break L205;
      } else {
       $K19$057 = $K19$057 << 1; //@line 18111
       $T$056 = $361; //@line 18111
      }
     }
     if ($360 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 18118
     } else {
      HEAP32[$360 >> 2] = $306; //@line 18121
      HEAP32[$p$0 + 24 >> 2] = $T$056; //@line 18124
      HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 18126
      HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 18128
      break L199;
     }
    }
   } while (0);
   $369 = $T$0$lcssa + 8 | 0; //@line 18133
   $370 = HEAP32[$369 >> 2] | 0; //@line 18134
   $372 = HEAP32[14048 >> 2] | 0; //@line 18136
   if ($T$0$lcssa >>> 0 < $372 >>> 0) {
    _abort(); //@line 18139
   }
   if ($370 >>> 0 < $372 >>> 0) {
    _abort(); //@line 18145
   } else {
    HEAP32[$370 + 12 >> 2] = $306; //@line 18149
    HEAP32[$369 >> 2] = $306; //@line 18150
    HEAP32[$p$0 + 8 >> 2] = $370; //@line 18153
    HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa; //@line 18156
    HEAP32[$p$0 + 24 >> 2] = 0; //@line 18158
    break;
   }
  }
 } while (0);
 $381 = (HEAP32[14064 >> 2] | 0) + -1 | 0; //@line 18164
 HEAP32[14064 >> 2] = $381; //@line 18165
 if (($381 | 0) == 0) {
  $sp$0$in$i = 14488 | 0; //@line 18168
 } else {
  STACKTOP = sp; //@line 18170
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0; //@line 18173
  if (($sp$0$i | 0) == 0) {
   break;
  } else {
   $sp$0$in$i = $sp$0$i + 8 | 0; //@line 18179
  }
 }
 HEAP32[14064 >> 2] = -1; //@line 18182
 STACKTOP = sp; //@line 18183
 return;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$sum24 = 0, $$sum27 = 0, $1 = 0, $109 = 0, $118 = 0, $126 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $140 = 0, $146 = 0, $15 = 0, $154 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $169 = 0, $172 = 0, $187 = 0, $191 = 0, $194 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $204 = 0, $207 = 0, $211 = 0, $212 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $229 = 0, $230 = 0, $24 = 0, $240 = 0, $251 = 0, $260 = 0, $27 = 0, $280 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $290 = 0, $291 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $304 = 0, $305 = 0, $308 = 0, $310 = 0, $313 = 0, $318 = 0, $324 = 0, $328 = 0, $329 = 0, $336 = 0, $340 = 0, $352 = 0, $353 = 0, $361 = 0, $362 = 0, $364 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $59 = 0, $62 = 0, $65 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $87 = 0, $88 = 0, $9 = 0, $98 = 0, $F16$0 = 0, $I19$0 = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, sp = 0;
 sp = STACKTOP; //@line 18762
 $1 = $p; //@line 18763
 $2 = $1 + $psize | 0; //@line 18764
 $3 = $2; //@line 18765
 $5 = HEAP32[$p + 4 >> 2] | 0; //@line 18767
 L1 : do {
  if (($5 & 1 | 0) == 0) {
   $9 = HEAP32[$p >> 2] | 0; //@line 18773
   if (($5 & 3 | 0) == 0) {
    STACKTOP = sp; //@line 18777
    return;
   }
   $13 = $1 + (0 - $9) | 0; //@line 18780
   $14 = $13; //@line 18781
   $15 = $9 + $psize | 0; //@line 18782
   $16 = HEAP32[14048 >> 2] | 0; //@line 18783
   if ($13 >>> 0 < $16 >>> 0) {
    _abort(); //@line 18786
   }
   if (($14 | 0) == (HEAP32[14052 >> 2] | 0)) {
    $126 = $1 + ($psize + 4) | 0; //@line 18794
    if ((HEAP32[$126 >> 2] & 3 | 0) != 3) {
     $$0 = $14; //@line 18799
     $$02 = $15; //@line 18799
     break;
    }
    HEAP32[14040 >> 2] = $15; //@line 18802
    HEAP32[$126 >> 2] = HEAP32[$126 >> 2] & -2; //@line 18805
    HEAP32[$1 + (4 - $9) >> 2] = $15 | 1; //@line 18810
    HEAP32[$2 >> 2] = $15; //@line 18812
    STACKTOP = sp; //@line 18813
    return;
   }
   $20 = $9 >>> 3; //@line 18815
   if ($9 >>> 0 < 256) {
    $24 = HEAP32[$1 + (8 - $9) >> 2] | 0; //@line 18821
    $27 = HEAP32[$1 + (12 - $9) >> 2] | 0; //@line 18825
    $30 = 14072 + ($20 << 1 << 2) | 0; //@line 18828
    do {
     if (($24 | 0) != ($30 | 0)) {
      if ($24 >>> 0 < $16 >>> 0) {
       _abort(); //@line 18835
      }
      if ((HEAP32[$24 + 12 >> 2] | 0) == ($14 | 0)) {
       break;
      }
      _abort(); //@line 18844
     }
    } while (0);
    if (($27 | 0) == ($24 | 0)) {
     HEAP32[3508] = HEAP32[3508] & ~(1 << $20); //@line 18854
     $$0 = $14; //@line 18855
     $$02 = $15; //@line 18855
     break;
    }
    do {
     if (($27 | 0) == ($30 | 0)) {
      $$pre$phi65Z2D = $27 + 8 | 0; //@line 18862
     } else {
      if ($27 >>> 0 < $16 >>> 0) {
       _abort(); //@line 18867
      }
      $45 = $27 + 8 | 0; //@line 18870
      if ((HEAP32[$45 >> 2] | 0) == ($14 | 0)) {
       $$pre$phi65Z2D = $45; //@line 18874
       break;
      }
      _abort(); //@line 18877
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $27; //@line 18882
    HEAP32[$$pre$phi65Z2D >> 2] = $24; //@line 18883
    $$0 = $14; //@line 18884
    $$02 = $15; //@line 18884
    break;
   }
   $49 = $13; //@line 18887
   $52 = HEAP32[$1 + (24 - $9) >> 2] | 0; //@line 18891
   $55 = HEAP32[$1 + (12 - $9) >> 2] | 0; //@line 18895
   do {
    if (($55 | 0) == ($49 | 0)) {
     $$sum24 = 16 - $9 | 0; //@line 18899
     $69 = $1 + ($$sum24 + 4) | 0; //@line 18902
     $70 = HEAP32[$69 >> 2] | 0; //@line 18903
     if (($70 | 0) == 0) {
      $73 = $1 + $$sum24 | 0; //@line 18907
      $74 = HEAP32[$73 >> 2] | 0; //@line 18908
      if (($74 | 0) == 0) {
       $R$1 = 0; //@line 18911
       break;
      } else {
       $R$0 = $74; //@line 18914
       $RP$0 = $73; //@line 18914
      }
     } else {
      $R$0 = $70; //@line 18917
      $RP$0 = $69; //@line 18917
     }
     while (1) {
      $76 = $R$0 + 20 | 0; //@line 18920
      $77 = HEAP32[$76 >> 2] | 0; //@line 18921
      if (($77 | 0) != 0) {
       $RP$0 = $76; //@line 18924
       $R$0 = $77; //@line 18924
       continue;
      }
      $79 = $R$0 + 16 | 0; //@line 18927
      $80 = HEAP32[$79 >> 2] | 0; //@line 18928
      if (($80 | 0) == 0) {
       break;
      } else {
       $R$0 = $80; //@line 18933
       $RP$0 = $79; //@line 18933
      }
     }
     if ($RP$0 >>> 0 < $16 >>> 0) {
      _abort(); //@line 18939
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 18942
      $R$1 = $R$0; //@line 18943
      break;
     }
    } else {
     $59 = HEAP32[$1 + (8 - $9) >> 2] | 0; //@line 18950
     if ($59 >>> 0 < $16 >>> 0) {
      _abort(); //@line 18954
     }
     $62 = $59 + 12 | 0; //@line 18957
     if ((HEAP32[$62 >> 2] | 0) != ($49 | 0)) {
      _abort(); //@line 18961
     }
     $65 = $55 + 8 | 0; //@line 18964
     if ((HEAP32[$65 >> 2] | 0) == ($49 | 0)) {
      HEAP32[$62 >> 2] = $55; //@line 18968
      HEAP32[$65 >> 2] = $59; //@line 18969
      $R$1 = $55; //@line 18970
      break;
     } else {
      _abort(); //@line 18973
     }
    }
   } while (0);
   if (($52 | 0) == 0) {
    $$0 = $14; //@line 18980
    $$02 = $15; //@line 18980
    break;
   }
   $87 = HEAP32[$1 + (28 - $9) >> 2] | 0; //@line 18986
   $88 = 14336 + ($87 << 2) | 0; //@line 18987
   do {
    if (($49 | 0) == (HEAP32[$88 >> 2] | 0)) {
     HEAP32[$88 >> 2] = $R$1; //@line 18992
     if (($R$1 | 0) != 0) {
      break;
     }
     HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $87); //@line 19001
     $$0 = $14; //@line 19002
     $$02 = $15; //@line 19002
     break L1;
    } else {
     if ($52 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 19009
     }
     $98 = $52 + 16 | 0; //@line 19012
     if ((HEAP32[$98 >> 2] | 0) == ($49 | 0)) {
      HEAP32[$98 >> 2] = $R$1; //@line 19016
     } else {
      HEAP32[$52 + 20 >> 2] = $R$1; //@line 19019
     }
     if (($R$1 | 0) == 0) {
      $$0 = $14; //@line 19023
      $$02 = $15; //@line 19023
      break L1;
     }
    }
   } while (0);
   if ($R$1 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 19032
   }
   HEAP32[$R$1 + 24 >> 2] = $52; //@line 19036
   $$sum27 = 16 - $9 | 0; //@line 19037
   $109 = HEAP32[$1 + $$sum27 >> 2] | 0; //@line 19040
   do {
    if (($109 | 0) != 0) {
     if ($109 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 19048
     } else {
      HEAP32[$R$1 + 16 >> 2] = $109; //@line 19052
      HEAP32[$109 + 24 >> 2] = $R$1; //@line 19054
      break;
     }
    }
   } while (0);
   $118 = HEAP32[$1 + ($$sum27 + 4) >> 2] | 0; //@line 19062
   if (($118 | 0) == 0) {
    $$0 = $14; //@line 19065
    $$02 = $15; //@line 19065
    break;
   }
   if ($118 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 19072
   } else {
    HEAP32[$R$1 + 20 >> 2] = $118; //@line 19076
    HEAP32[$118 + 24 >> 2] = $R$1; //@line 19078
    $$0 = $14; //@line 19079
    $$02 = $15; //@line 19079
    break;
   }
  } else {
   $$0 = $p; //@line 19083
   $$02 = $psize; //@line 19083
  }
 } while (0);
 $136 = HEAP32[14048 >> 2] | 0; //@line 19086
 if ($2 >>> 0 < $136 >>> 0) {
  _abort(); //@line 19089
 }
 $139 = $1 + ($psize + 4) | 0; //@line 19094
 $140 = HEAP32[$139 >> 2] | 0; //@line 19095
 do {
  if (($140 & 2 | 0) == 0) {
   if (($3 | 0) == (HEAP32[14056 >> 2] | 0)) {
    $146 = (HEAP32[14044 >> 2] | 0) + $$02 | 0; //@line 19104
    HEAP32[14044 >> 2] = $146; //@line 19105
    HEAP32[14056 >> 2] = $$0; //@line 19106
    HEAP32[$$0 + 4 >> 2] = $146 | 1; //@line 19109
    if (($$0 | 0) != (HEAP32[14052 >> 2] | 0)) {
     STACKTOP = sp; //@line 19113
     return;
    }
    HEAP32[14052 >> 2] = 0; //@line 19115
    HEAP32[14040 >> 2] = 0; //@line 19116
    STACKTOP = sp; //@line 19117
    return;
   }
   if (($3 | 0) == (HEAP32[14052 >> 2] | 0)) {
    $154 = (HEAP32[14040 >> 2] | 0) + $$02 | 0; //@line 19123
    HEAP32[14040 >> 2] = $154; //@line 19124
    HEAP32[14052 >> 2] = $$0; //@line 19125
    HEAP32[$$0 + 4 >> 2] = $154 | 1; //@line 19128
    HEAP32[$$0 + $154 >> 2] = $154; //@line 19132
    STACKTOP = sp; //@line 19133
    return;
   }
   $161 = ($140 & -8) + $$02 | 0; //@line 19136
   $162 = $140 >>> 3; //@line 19137
   L100 : do {
    if ($140 >>> 0 < 256) {
     $166 = HEAP32[$1 + ($psize + 8) >> 2] | 0; //@line 19144
     $169 = HEAP32[$1 + ($psize + 12) >> 2] | 0; //@line 19148
     $172 = 14072 + ($162 << 1 << 2) | 0; //@line 19151
     do {
      if (($166 | 0) != ($172 | 0)) {
       if ($166 >>> 0 < $136 >>> 0) {
        _abort(); //@line 19158
       }
       if ((HEAP32[$166 + 12 >> 2] | 0) == ($3 | 0)) {
        break;
       }
       _abort(); //@line 19167
      }
     } while (0);
     if (($169 | 0) == ($166 | 0)) {
      HEAP32[3508] = HEAP32[3508] & ~(1 << $162); //@line 19177
      break;
     }
     do {
      if (($169 | 0) == ($172 | 0)) {
       $$pre$phi63Z2D = $169 + 8 | 0; //@line 19184
      } else {
       if ($169 >>> 0 < $136 >>> 0) {
        _abort(); //@line 19189
       }
       $187 = $169 + 8 | 0; //@line 19192
       if ((HEAP32[$187 >> 2] | 0) == ($3 | 0)) {
        $$pre$phi63Z2D = $187; //@line 19196
        break;
       }
       _abort(); //@line 19199
      }
     } while (0);
     HEAP32[$166 + 12 >> 2] = $169; //@line 19204
     HEAP32[$$pre$phi63Z2D >> 2] = $166; //@line 19205
    } else {
     $191 = $2; //@line 19207
     $194 = HEAP32[$1 + ($psize + 24) >> 2] | 0; //@line 19211
     $197 = HEAP32[$1 + ($psize + 12) >> 2] | 0; //@line 19215
     do {
      if (($197 | 0) == ($191 | 0)) {
       $211 = $1 + ($psize + 20) | 0; //@line 19221
       $212 = HEAP32[$211 >> 2] | 0; //@line 19222
       if (($212 | 0) == 0) {
        $215 = $1 + ($psize + 16) | 0; //@line 19227
        $216 = HEAP32[$215 >> 2] | 0; //@line 19228
        if (($216 | 0) == 0) {
         $R7$1 = 0; //@line 19231
         break;
        } else {
         $R7$0 = $216; //@line 19234
         $RP9$0 = $215; //@line 19234
        }
       } else {
        $R7$0 = $212; //@line 19237
        $RP9$0 = $211; //@line 19237
       }
       while (1) {
        $218 = $R7$0 + 20 | 0; //@line 19240
        $219 = HEAP32[$218 >> 2] | 0; //@line 19241
        if (($219 | 0) != 0) {
         $RP9$0 = $218; //@line 19244
         $R7$0 = $219; //@line 19244
         continue;
        }
        $221 = $R7$0 + 16 | 0; //@line 19247
        $222 = HEAP32[$221 >> 2] | 0; //@line 19248
        if (($222 | 0) == 0) {
         break;
        } else {
         $R7$0 = $222; //@line 19253
         $RP9$0 = $221; //@line 19253
        }
       }
       if ($RP9$0 >>> 0 < $136 >>> 0) {
        _abort(); //@line 19259
       } else {
        HEAP32[$RP9$0 >> 2] = 0; //@line 19262
        $R7$1 = $R7$0; //@line 19263
        break;
       }
      } else {
       $201 = HEAP32[$1 + ($psize + 8) >> 2] | 0; //@line 19270
       if ($201 >>> 0 < $136 >>> 0) {
        _abort(); //@line 19274
       }
       $204 = $201 + 12 | 0; //@line 19277
       if ((HEAP32[$204 >> 2] | 0) != ($191 | 0)) {
        _abort(); //@line 19281
       }
       $207 = $197 + 8 | 0; //@line 19284
       if ((HEAP32[$207 >> 2] | 0) == ($191 | 0)) {
        HEAP32[$204 >> 2] = $197; //@line 19288
        HEAP32[$207 >> 2] = $201; //@line 19289
        $R7$1 = $197; //@line 19290
        break;
       } else {
        _abort(); //@line 19293
       }
      }
     } while (0);
     if (($194 | 0) == 0) {
      break;
     }
     $229 = HEAP32[$1 + ($psize + 28) >> 2] | 0; //@line 19305
     $230 = 14336 + ($229 << 2) | 0; //@line 19306
     do {
      if (($191 | 0) == (HEAP32[$230 >> 2] | 0)) {
       HEAP32[$230 >> 2] = $R7$1; //@line 19311
       if (($R7$1 | 0) != 0) {
        break;
       }
       HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $229); //@line 19320
       break L100;
      } else {
       if ($194 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 19327
       }
       $240 = $194 + 16 | 0; //@line 19330
       if ((HEAP32[$240 >> 2] | 0) == ($191 | 0)) {
        HEAP32[$240 >> 2] = $R7$1; //@line 19334
       } else {
        HEAP32[$194 + 20 >> 2] = $R7$1; //@line 19337
       }
       if (($R7$1 | 0) == 0) {
        break L100;
       }
      }
     } while (0);
     if ($R7$1 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 19349
     }
     HEAP32[$R7$1 + 24 >> 2] = $194; //@line 19353
     $251 = HEAP32[$1 + ($psize + 16) >> 2] | 0; //@line 19357
     do {
      if (($251 | 0) != 0) {
       if ($251 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
        _abort(); //@line 19365
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $251; //@line 19369
        HEAP32[$251 + 24 >> 2] = $R7$1; //@line 19371
        break;
       }
      }
     } while (0);
     $260 = HEAP32[$1 + ($psize + 20) >> 2] | 0; //@line 19379
     if (($260 | 0) == 0) {
      break;
     }
     if ($260 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 19388
     } else {
      HEAP32[$R7$1 + 20 >> 2] = $260; //@line 19392
      HEAP32[$260 + 24 >> 2] = $R7$1; //@line 19394
      break;
     }
    }
   } while (0);
   HEAP32[$$0 + 4 >> 2] = $161 | 1; //@line 19401
   HEAP32[$$0 + $161 >> 2] = $161; //@line 19405
   if (($$0 | 0) != (HEAP32[14052 >> 2] | 0)) {
    $$1 = $161; //@line 19409
    break;
   }
   HEAP32[14040 >> 2] = $161; //@line 19412
   STACKTOP = sp; //@line 19413
   return;
  } else {
   HEAP32[$139 >> 2] = $140 & -2; //@line 19416
   HEAP32[$$0 + 4 >> 2] = $$02 | 1; //@line 19419
   HEAP32[$$0 + $$02 >> 2] = $$02; //@line 19423
   $$1 = $$02; //@line 19424
  }
 } while (0);
 $280 = $$1 >>> 3; //@line 19427
 if ($$1 >>> 0 < 256) {
  $282 = $280 << 1; //@line 19430
  $284 = 14072 + ($282 << 2) | 0; //@line 19432
  $285 = HEAP32[3508] | 0; //@line 19433
  $286 = 1 << $280; //@line 19434
  do {
   if (($285 & $286 | 0) == 0) {
    HEAP32[3508] = $285 | $286; //@line 19440
    $$pre$phiZ2D = 14072 + ($282 + 2 << 2) | 0; //@line 19443
    $F16$0 = $284; //@line 19443
   } else {
    $290 = 14072 + ($282 + 2 << 2) | 0; //@line 19446
    $291 = HEAP32[$290 >> 2] | 0; //@line 19447
    if (!($291 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0)) {
     $$pre$phiZ2D = $290; //@line 19452
     $F16$0 = $291; //@line 19452
     break;
    }
    _abort(); //@line 19455
   }
  } while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $$0; //@line 19459
  HEAP32[$F16$0 + 12 >> 2] = $$0; //@line 19461
  HEAP32[$$0 + 8 >> 2] = $F16$0; //@line 19463
  HEAP32[$$0 + 12 >> 2] = $284; //@line 19465
  STACKTOP = sp; //@line 19466
  return;
 }
 $298 = $$0; //@line 19468
 $299 = $$1 >>> 8; //@line 19469
 do {
  if (($299 | 0) == 0) {
   $I19$0 = 0; //@line 19473
  } else {
   if ($$1 >>> 0 > 16777215) {
    $I19$0 = 31; //@line 19477
    break;
   }
   $304 = ($299 + 1048320 | 0) >>> 16 & 8; //@line 19482
   $305 = $299 << $304; //@line 19483
   $308 = ($305 + 520192 | 0) >>> 16 & 4; //@line 19486
   $310 = $305 << $308; //@line 19488
   $313 = ($310 + 245760 | 0) >>> 16 & 2; //@line 19491
   $318 = 14 - ($308 | $304 | $313) + ($310 << $313 >>> 15) | 0; //@line 19496
   $I19$0 = $$1 >>> ($318 + 7 | 0) & 1 | $318 << 1; //@line 19502
  }
 } while (0);
 $324 = 14336 + ($I19$0 << 2) | 0; //@line 19505
 HEAP32[$$0 + 28 >> 2] = $I19$0; //@line 19508
 HEAP32[$$0 + 20 >> 2] = 0; //@line 19510
 HEAP32[$$0 + 16 >> 2] = 0; //@line 19512
 $328 = HEAP32[14036 >> 2] | 0; //@line 19513
 $329 = 1 << $I19$0; //@line 19514
 if (($328 & $329 | 0) == 0) {
  HEAP32[14036 >> 2] = $328 | $329; //@line 19519
  HEAP32[$324 >> 2] = $298; //@line 19520
  HEAP32[$$0 + 24 >> 2] = $324; //@line 19523
  HEAP32[$$0 + 12 >> 2] = $$0; //@line 19525
  HEAP32[$$0 + 8 >> 2] = $$0; //@line 19527
  STACKTOP = sp; //@line 19528
  return;
 }
 $336 = HEAP32[$324 >> 2] | 0; //@line 19530
 if (($I19$0 | 0) == 31) {
  $340 = 0; //@line 19533
 } else {
  $340 = 25 - ($I19$0 >>> 1) | 0; //@line 19537
 }
 L194 : do {
  if ((HEAP32[$336 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
   $T$0$lcssa = $336; //@line 19545
  } else {
   $K20$049 = $$1 << $340; //@line 19548
   $T$048 = $336; //@line 19548
   while (1) {
    $352 = $T$048 + ($K20$049 >>> 31 << 2) + 16 | 0; //@line 19551
    $353 = HEAP32[$352 >> 2] | 0; //@line 19552
    if (($353 | 0) == 0) {
     break;
    }
    if ((HEAP32[$353 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
     $T$0$lcssa = $353; //@line 19563
     break L194;
    } else {
     $K20$049 = $K20$049 << 1; //@line 19566
     $T$048 = $353; //@line 19566
    }
   }
   if ($352 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 19573
   }
   HEAP32[$352 >> 2] = $298; //@line 19576
   HEAP32[$$0 + 24 >> 2] = $T$048; //@line 19579
   HEAP32[$$0 + 12 >> 2] = $$0; //@line 19581
   HEAP32[$$0 + 8 >> 2] = $$0; //@line 19583
   STACKTOP = sp; //@line 19584
   return;
  }
 } while (0);
 $361 = $T$0$lcssa + 8 | 0; //@line 19587
 $362 = HEAP32[$361 >> 2] | 0; //@line 19588
 $364 = HEAP32[14048 >> 2] | 0; //@line 19590
 if ($T$0$lcssa >>> 0 < $364 >>> 0) {
  _abort(); //@line 19593
 }
 if ($362 >>> 0 < $364 >>> 0) {
  _abort(); //@line 19599
 }
 HEAP32[$362 + 12 >> 2] = $298; //@line 19603
 HEAP32[$361 >> 2] = $298; //@line 19604
 HEAP32[$$0 + 8 >> 2] = $362; //@line 19607
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa; //@line 19610
 HEAP32[$$0 + 24 >> 2] = 0; //@line 19612
 STACKTOP = sp; //@line 19613
 return;
}
function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $$0$i$i = 0, $11 = 0, $13 = 0, $18 = 0, $19 = 0, $266 = 0, $267 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0, $__p$i$i$i12 = 0, $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0, $__p$i$i$i84 = 0, $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, sp = 0;
 sp = STACKTOP; //@line 6027
 STACKTOP = STACKTOP + 448 | 0; //@line 6028
 $__p$i$i$i113 = sp; //@line 6029
 $__p$i$i$i109 = sp + 16 | 0; //@line 6030
 $__p$i$i$i102 = sp + 32 | 0; //@line 6031
 $__p$i$i$i96 = sp + 48 | 0; //@line 6032
 $__p$i$i$i92 = sp + 64 | 0; //@line 6033
 $__p$i$i$i88 = sp + 80 | 0; //@line 6034
 $__p$i$i$i84 = sp + 96 | 0; //@line 6035
 $__p$i$i$i80 = sp + 112 | 0; //@line 6036
 $__p$i$i$i76 = sp + 128 | 0; //@line 6037
 $__p$i$i$i72 = sp + 144 | 0; //@line 6038
 $__p$i$i$i68 = sp + 160 | 0; //@line 6039
 $__p$i$i$i64 = sp + 176 | 0; //@line 6040
 $__p$i$i$i60 = sp + 192 | 0; //@line 6041
 $__p$i$i$i56 = sp + 208 | 0; //@line 6042
 $__p$i$i$i52 = sp + 224 | 0; //@line 6043
 $__p$i$i$i48 = sp + 240 | 0; //@line 6044
 $__p$i$i$i44 = sp + 256 | 0; //@line 6045
 $__p$i$i$i40 = sp + 272 | 0; //@line 6046
 $__p$i$i$i36 = sp + 288 | 0; //@line 6047
 $__p$i$i$i32 = sp + 304 | 0; //@line 6048
 $__p$i$i$i28 = sp + 320 | 0; //@line 6049
 $__p$i$i$i24 = sp + 336 | 0; //@line 6050
 $__p$i$i$i20 = sp + 352 | 0; //@line 6051
 $__p$i$i$i16 = sp + 368 | 0; //@line 6052
 $__p$i$i$i12 = sp + 384 | 0; //@line 6053
 $__p$i$i$i8 = sp + 400 | 0; //@line 6054
 $__p$i$i$i4 = sp + 416 | 0; //@line 6055
 $__p$i$i$i = sp + 432 | 0; //@line 6056
 HEAP32[$this + 4 >> 2] = $refs + -1; //@line 6059
 HEAP32[$this >> 2] = 5632; //@line 6061
 $4 = $this + 8 | 0; //@line 6062
 $5 = $this + 12 | 0; //@line 6063
 $7 = $this + 136 | 0; //@line 6065
 HEAP8[$7] = 1; //@line 6067
 $9 = $this + 24 | 0; //@line 6068
 HEAP32[$5 >> 2] = $9; //@line 6069
 HEAP32[$4 >> 2] = $9; //@line 6070
 HEAP32[$this + 16 >> 2] = $7; //@line 6072
 $$0$i$i = 28; //@line 6073
 $11 = $9; //@line 6073
 do {
  if (($11 | 0) == 0) {
   $13 = 0; //@line 6077
  } else {
   HEAP32[$11 >> 2] = 0; //@line 6079
   $13 = HEAP32[$5 >> 2] | 0; //@line 6081
  }
  $11 = $13 + 4 | 0; //@line 6083
  HEAP32[$5 >> 2] = $11; //@line 6084
  $$0$i$i = $$0$i$i + -1 | 0; //@line 6085
 } while (($$0$i$i | 0) != 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 5616, 1); //@line 6094
 $18 = HEAP32[$4 >> 2] | 0; //@line 6095
 $19 = HEAP32[$5 >> 2] | 0; //@line 6096
 if (($19 | 0) != ($18 | 0)) {
  HEAP32[$5 >> 2] = $19 + (~(($19 + -4 + (0 - $18) | 0) >>> 2) << 2); //@line 6108
 }
 HEAP32[10524 >> 2] = 0; //@line 6110
 HEAP32[2630] = 4112; //@line 6111
 if (!((HEAP32[1034] | 0) == -1)) {
  HEAP32[$__p$i$i$i4 >> 2] = 4136; //@line 6117
  HEAP32[$__p$i$i$i4 + 4 >> 2] = 125; //@line 6119
  HEAP32[$__p$i$i$i4 + 8 >> 2] = 0; //@line 6121
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4136, $__p$i$i$i4, 126); //@line 6122
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10520, (HEAP32[4140 >> 2] | 0) + -1 | 0); //@line 6126
 HEAP32[10516 >> 2] = 0; //@line 6127
 HEAP32[2628] = 4152; //@line 6128
 if (!((HEAP32[1044] | 0) == -1)) {
  HEAP32[$__p$i$i$i8 >> 2] = 4176; //@line 6134
  HEAP32[$__p$i$i$i8 + 4 >> 2] = 125; //@line 6136
  HEAP32[$__p$i$i$i8 + 8 >> 2] = 0; //@line 6138
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4176, $__p$i$i$i8, 126); //@line 6139
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10512, (HEAP32[4180 >> 2] | 0) + -1 | 0); //@line 6143
 HEAP32[10500 >> 2] = 0; //@line 6144
 HEAP32[2624] = 5728; //@line 6145
 HEAP32[10504 >> 2] = 0; //@line 6146
 HEAP8[10508 | 0] = 0; //@line 6147
 HEAP32[10504 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2]; //@line 6150
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i12 >> 2] = 5712; //@line 6156
  HEAP32[$__p$i$i$i12 + 4 >> 2] = 125; //@line 6158
  HEAP32[$__p$i$i$i12 + 8 >> 2] = 0; //@line 6160
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i12, 126); //@line 6161
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10496, (HEAP32[5716 >> 2] | 0) + -1 | 0); //@line 6165
 HEAP32[10492 >> 2] = 0; //@line 6166
 HEAP32[2622] = 6688; //@line 6167
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i16 >> 2] = 5704; //@line 6173
  HEAP32[$__p$i$i$i16 + 4 >> 2] = 125; //@line 6175
  HEAP32[$__p$i$i$i16 + 8 >> 2] = 0; //@line 6177
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i16, 126); //@line 6178
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10488, (HEAP32[5708 >> 2] | 0) + -1 | 0); //@line 6182
 HEAP32[10484 >> 2] = 0; //@line 6183
 HEAP32[2620] = 6904; //@line 6184
 if (!((HEAP32[1444] | 0) == -1)) {
  HEAP32[$__p$i$i$i20 >> 2] = 5776; //@line 6190
  HEAP32[$__p$i$i$i20 + 4 >> 2] = 125; //@line 6192
  HEAP32[$__p$i$i$i20 + 8 >> 2] = 0; //@line 6194
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5776, $__p$i$i$i20, 126); //@line 6195
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10480, (HEAP32[5780 >> 2] | 0) + -1 | 0); //@line 6199
 HEAP32[10468 >> 2] = 0; //@line 6200
 HEAP32[2616] = 5800; //@line 6201
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6212
   ___cxa_guard_release(5608); //@line 6213
  }
 } while (0);
 HEAP32[10472 >> 2] = HEAP32[1400]; //@line 6217
 if (!((HEAP32[1446] | 0) == -1)) {
  HEAP32[$__p$i$i$i24 >> 2] = 5784; //@line 6223
  HEAP32[$__p$i$i$i24 + 4 >> 2] = 125; //@line 6225
  HEAP32[$__p$i$i$i24 + 8 >> 2] = 0; //@line 6227
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5784, $__p$i$i$i24, 126); //@line 6228
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10464, (HEAP32[5788 >> 2] | 0) + -1 | 0); //@line 6232
 HEAP32[10460 >> 2] = 0; //@line 6233
 HEAP32[2614] = 7128; //@line 6234
 if (!((HEAP32[1460] | 0) == -1)) {
  HEAP32[$__p$i$i$i28 >> 2] = 5840; //@line 6240
  HEAP32[$__p$i$i$i28 + 4 >> 2] = 125; //@line 6242
  HEAP32[$__p$i$i$i28 + 8 >> 2] = 0; //@line 6244
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5840, $__p$i$i$i28, 126); //@line 6245
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10456, (HEAP32[5844 >> 2] | 0) + -1 | 0); //@line 6249
 HEAP32[10452 >> 2] = 0; //@line 6250
 HEAP32[2612] = 7248; //@line 6251
 if (!((HEAP32[1462] | 0) == -1)) {
  HEAP32[$__p$i$i$i32 >> 2] = 5848; //@line 6257
  HEAP32[$__p$i$i$i32 + 4 >> 2] = 125; //@line 6259
  HEAP32[$__p$i$i$i32 + 8 >> 2] = 0; //@line 6261
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5848, $__p$i$i$i32, 126); //@line 6262
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10448, (HEAP32[5852 >> 2] | 0) + -1 | 0); //@line 6266
 HEAP32[10428 >> 2] = 0; //@line 6267
 HEAP32[2606] = 5880; //@line 6268
 HEAP8[10432 | 0] = 46; //@line 6269
 HEAP8[10433 | 0] = 44; //@line 6270
 HEAP32[10436 >> 2] = 0; //@line 6271
 HEAP32[10440 >> 2] = 0; //@line 6271
 HEAP32[10444 >> 2] = 0; //@line 6271
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i36 >> 2] = 5856; //@line 6277
  HEAP32[$__p$i$i$i36 + 4 >> 2] = 125; //@line 6279
  HEAP32[$__p$i$i$i36 + 8 >> 2] = 0; //@line 6281
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i36, 126); //@line 6282
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10424, (HEAP32[5860 >> 2] | 0) + -1 | 0); //@line 6286
 HEAP32[10396 >> 2] = 0; //@line 6287
 HEAP32[2598] = 5920; //@line 6288
 HEAP32[10400 >> 2] = 46; //@line 6289
 HEAP32[10404 >> 2] = 44; //@line 6290
 HEAP32[10408 >> 2] = 0; //@line 6291
 HEAP32[10412 >> 2] = 0; //@line 6291
 HEAP32[10416 >> 2] = 0; //@line 6291
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i40 >> 2] = 5864; //@line 6297
  HEAP32[$__p$i$i$i40 + 4 >> 2] = 125; //@line 6299
  HEAP32[$__p$i$i$i40 + 8 >> 2] = 0; //@line 6301
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i40, 126); //@line 6302
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10392, (HEAP32[5868 >> 2] | 0) + -1 | 0); //@line 6306
 HEAP32[10388 >> 2] = 0; //@line 6307
 HEAP32[2596] = 4192; //@line 6308
 if (!((HEAP32[1062] | 0) == -1)) {
  HEAP32[$__p$i$i$i44 >> 2] = 4248; //@line 6314
  HEAP32[$__p$i$i$i44 + 4 >> 2] = 125; //@line 6316
  HEAP32[$__p$i$i$i44 + 8 >> 2] = 0; //@line 6318
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4248, $__p$i$i$i44, 126); //@line 6319
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10384, (HEAP32[4252 >> 2] | 0) + -1 | 0); //@line 6323
 HEAP32[10380 >> 2] = 0; //@line 6324
 HEAP32[2594] = 4312; //@line 6325
 if (!((HEAP32[1092] | 0) == -1)) {
  HEAP32[$__p$i$i$i48 >> 2] = 4368; //@line 6331
  HEAP32[$__p$i$i$i48 + 4 >> 2] = 125; //@line 6333
  HEAP32[$__p$i$i$i48 + 8 >> 2] = 0; //@line 6335
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4368, $__p$i$i$i48, 126); //@line 6336
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10376, (HEAP32[4372 >> 2] | 0) + -1 | 0); //@line 6340
 HEAP32[10372 >> 2] = 0; //@line 6341
 HEAP32[2592] = 4384; //@line 6342
 if (!((HEAP32[1108] | 0) == -1)) {
  HEAP32[$__p$i$i$i52 >> 2] = 4432; //@line 6348
  HEAP32[$__p$i$i$i52 + 4 >> 2] = 125; //@line 6350
  HEAP32[$__p$i$i$i52 + 8 >> 2] = 0; //@line 6352
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4432, $__p$i$i$i52, 126); //@line 6353
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10368, (HEAP32[4436 >> 2] | 0) + -1 | 0); //@line 6357
 HEAP32[10364 >> 2] = 0; //@line 6358
 HEAP32[2590] = 4448; //@line 6359
 if (!((HEAP32[1124] | 0) == -1)) {
  HEAP32[$__p$i$i$i56 >> 2] = 4496; //@line 6365
  HEAP32[$__p$i$i$i56 + 4 >> 2] = 125; //@line 6367
  HEAP32[$__p$i$i$i56 + 8 >> 2] = 0; //@line 6369
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4496, $__p$i$i$i56, 126); //@line 6370
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10360, (HEAP32[4500 >> 2] | 0) + -1 | 0); //@line 6374
 HEAP32[10356 >> 2] = 0; //@line 6375
 HEAP32[2588] = 5040; //@line 6376
 if (!((HEAP32[1272] | 0) == -1)) {
  HEAP32[$__p$i$i$i60 >> 2] = 5088; //@line 6382
  HEAP32[$__p$i$i$i60 + 4 >> 2] = 125; //@line 6384
  HEAP32[$__p$i$i$i60 + 8 >> 2] = 0; //@line 6386
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5088, $__p$i$i$i60, 126); //@line 6387
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10352, (HEAP32[5092 >> 2] | 0) + -1 | 0); //@line 6391
 HEAP32[10348 >> 2] = 0; //@line 6392
 HEAP32[2586] = 5104; //@line 6393
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i64 >> 2] = 5152; //@line 6399
  HEAP32[$__p$i$i$i64 + 4 >> 2] = 125; //@line 6401
  HEAP32[$__p$i$i$i64 + 8 >> 2] = 0; //@line 6403
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i64, 126); //@line 6404
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10344, (HEAP32[5156 >> 2] | 0) + -1 | 0); //@line 6408
 HEAP32[10340 >> 2] = 0; //@line 6409
 HEAP32[2584] = 5168; //@line 6410
 if (!((HEAP32[1304] | 0) == -1)) {
  HEAP32[$__p$i$i$i68 >> 2] = 5216; //@line 6416
  HEAP32[$__p$i$i$i68 + 4 >> 2] = 125; //@line 6418
  HEAP32[$__p$i$i$i68 + 8 >> 2] = 0; //@line 6420
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5216, $__p$i$i$i68, 126); //@line 6421
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10336, (HEAP32[5220 >> 2] | 0) + -1 | 0); //@line 6425
 HEAP32[10332 >> 2] = 0; //@line 6426
 HEAP32[2582] = 5232; //@line 6427
 if (!((HEAP32[1320] | 0) == -1)) {
  HEAP32[$__p$i$i$i72 >> 2] = 5280; //@line 6433
  HEAP32[$__p$i$i$i72 + 4 >> 2] = 125; //@line 6435
  HEAP32[$__p$i$i$i72 + 8 >> 2] = 0; //@line 6437
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5280, $__p$i$i$i72, 126); //@line 6438
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10328, (HEAP32[5284 >> 2] | 0) + -1 | 0); //@line 6442
 HEAP32[10324 >> 2] = 0; //@line 6443
 HEAP32[2580] = 5296; //@line 6444
 if (!((HEAP32[1330] | 0) == -1)) {
  HEAP32[$__p$i$i$i76 >> 2] = 5320; //@line 6450
  HEAP32[$__p$i$i$i76 + 4 >> 2] = 125; //@line 6452
  HEAP32[$__p$i$i$i76 + 8 >> 2] = 0; //@line 6454
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5320, $__p$i$i$i76, 126); //@line 6455
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10320, (HEAP32[5324 >> 2] | 0) + -1 | 0); //@line 6459
 HEAP32[10316 >> 2] = 0; //@line 6460
 HEAP32[2578] = 5376; //@line 6461
 if (!((HEAP32[1350] | 0) == -1)) {
  HEAP32[$__p$i$i$i80 >> 2] = 5400; //@line 6467
  HEAP32[$__p$i$i$i80 + 4 >> 2] = 125; //@line 6469
  HEAP32[$__p$i$i$i80 + 8 >> 2] = 0; //@line 6471
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5400, $__p$i$i$i80, 126); //@line 6472
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10312, (HEAP32[5404 >> 2] | 0) + -1 | 0); //@line 6476
 HEAP32[10308 >> 2] = 0; //@line 6477
 HEAP32[2576] = 5432; //@line 6478
 if (!((HEAP32[1364] | 0) == -1)) {
  HEAP32[$__p$i$i$i84 >> 2] = 5456; //@line 6484
  HEAP32[$__p$i$i$i84 + 4 >> 2] = 125; //@line 6486
  HEAP32[$__p$i$i$i84 + 8 >> 2] = 0; //@line 6488
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5456, $__p$i$i$i84, 126); //@line 6489
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10304, (HEAP32[5460 >> 2] | 0) + -1 | 0); //@line 6493
 HEAP32[10300 >> 2] = 0; //@line 6494
 HEAP32[2574] = 5480; //@line 6495
 if (!((HEAP32[1376] | 0) == -1)) {
  HEAP32[$__p$i$i$i88 >> 2] = 5504; //@line 6501
  HEAP32[$__p$i$i$i88 + 4 >> 2] = 125; //@line 6503
  HEAP32[$__p$i$i$i88 + 8 >> 2] = 0; //@line 6505
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5504, $__p$i$i$i88, 126); //@line 6506
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10296, (HEAP32[5508 >> 2] | 0) + -1 | 0); //@line 6510
 HEAP32[10284 >> 2] = 0; //@line 6511
 HEAP32[2570] = 4528; //@line 6512
 HEAP32[10288 >> 2] = 4576; //@line 6513
 if (!((HEAP32[1152] | 0) == -1)) {
  HEAP32[$__p$i$i$i92 >> 2] = 4608; //@line 6519
  HEAP32[$__p$i$i$i92 + 4 >> 2] = 125; //@line 6521
  HEAP32[$__p$i$i$i92 + 8 >> 2] = 0; //@line 6523
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4608, $__p$i$i$i92, 126); //@line 6524
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10280, (HEAP32[4612 >> 2] | 0) + -1 | 0); //@line 6528
 HEAP32[10268 >> 2] = 0; //@line 6529
 HEAP32[2566] = 4680; //@line 6530
 HEAP32[10272 >> 2] = 4728; //@line 6531
 if (!((HEAP32[1190] | 0) == -1)) {
  HEAP32[$__p$i$i$i96 >> 2] = 4760; //@line 6537
  HEAP32[$__p$i$i$i96 + 4 >> 2] = 125; //@line 6539
  HEAP32[$__p$i$i$i96 + 8 >> 2] = 0; //@line 6541
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4760, $__p$i$i$i96, 126); //@line 6542
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10264, (HEAP32[4764 >> 2] | 0) + -1 | 0); //@line 6546
 HEAP32[10252 >> 2] = 0; //@line 6547
 HEAP32[2562] = 6624; //@line 6548
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6559
   ___cxa_guard_release(5608); //@line 6560
  }
 } while (0);
 HEAP32[10256 >> 2] = HEAP32[1400]; //@line 6564
 HEAP32[2562] = 4976; //@line 6565
 if (!((HEAP32[1248] | 0) == -1)) {
  HEAP32[$__p$i$i$i102 >> 2] = 4992; //@line 6571
  HEAP32[$__p$i$i$i102 + 4 >> 2] = 125; //@line 6573
  HEAP32[$__p$i$i$i102 + 8 >> 2] = 0; //@line 6575
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4992, $__p$i$i$i102, 126); //@line 6576
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10248, (HEAP32[4996 >> 2] | 0) + -1 | 0); //@line 6580
 HEAP32[10236 >> 2] = 0; //@line 6581
 HEAP32[2558] = 6624; //@line 6582
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6593
   ___cxa_guard_release(5608); //@line 6594
  }
 } while (0);
 HEAP32[10240 >> 2] = HEAP32[1400]; //@line 6598
 HEAP32[2558] = 5008; //@line 6599
 if (!((HEAP32[1256] | 0) == -1)) {
  HEAP32[$__p$i$i$i109 >> 2] = 5024; //@line 6605
  HEAP32[$__p$i$i$i109 + 4 >> 2] = 125; //@line 6607
  HEAP32[$__p$i$i$i109 + 8 >> 2] = 0; //@line 6609
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5024, $__p$i$i$i109, 126); //@line 6610
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10232, (HEAP32[5028 >> 2] | 0) + -1 | 0); //@line 6614
 HEAP32[10228 >> 2] = 0; //@line 6615
 HEAP32[2556] = 5520; //@line 6616
 if (!((HEAP32[1386] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5544; //@line 6622
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 125; //@line 6624
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0; //@line 6626
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5544, $__p$i$i$i113, 126); //@line 6627
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10224, (HEAP32[5548 >> 2] | 0) + -1 | 0); //@line 6631
 HEAP32[10220 >> 2] = 0; //@line 6632
 HEAP32[2554] = 5560; //@line 6633
 if ((HEAP32[1396] | 0) == -1) {
  $266 = HEAP32[5588 >> 2] | 0; //@line 6638
  $267 = $266 + -1 | 0; //@line 6639
  __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10216, $267); //@line 6640
  STACKTOP = sp; //@line 6641
  return;
 }
 HEAP32[$__p$i$i$i >> 2] = 5584; //@line 6644
 HEAP32[$__p$i$i$i + 4 >> 2] = 125; //@line 6646
 HEAP32[$__p$i$i$i + 8 >> 2] = 0; //@line 6648
 __ZNSt3__111__call_onceERVmPvPFvS2_E(5584, $__p$i$i$i, 126); //@line 6649
 $266 = HEAP32[5588 >> 2] | 0; //@line 6650
 $267 = $266 + -1 | 0; //@line 6651
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 10216, $267); //@line 6652
 STACKTOP = sp; //@line 6653
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$pre = 0, $$pre$i3$i$i19 = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $118 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $135 = 0, $148 = 0, $15 = 0, $155 = 0, $158 = 0, $163 = 0, $174 = 0, $177 = 0, $194 = 0, $196 = 0, $22 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $5 = 0, $58 = 0, $60 = 0, $62 = 0, $7 = 0, $79 = 0, $81 = 0, $85 = 0, $9 = 0, $94 = 0, $98 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14918
 STACKTOP = STACKTOP + 104 | 0; //@line 14919
 $4 = ($__ke - $__kb | 0) / 12 | 0; //@line 14924
 $5 = sp; //@line 14925
 do {
  if ($4 >>> 0 > 100) {
   $7 = _malloc($4) | 0; //@line 14929
   if (($7 | 0) != 0) {
    $9 = $7; //@line 14932
    $__status$0 = $7; //@line 14932
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 14935
  } else {
   $9 = 0; //@line 14938
   $__status$0 = $5; //@line 14938
  }
 } while (0);
 $10 = ($__kb | 0) == ($__ke | 0); //@line 14941
 if ($10) {
  $__n_does_match$0$lcssa = 0; //@line 14943
  $__n_might_match$0$lcssa = $4; //@line 14943
 } else {
  $__ky$068 = $__kb; //@line 14945
  $__n_does_match$066 = 0; //@line 14945
  $__n_might_match$065 = $4; //@line 14945
  $__st$067 = $__status$0; //@line 14945
  while (1) {
   $15 = HEAP8[$__ky$068] | 0; //@line 14948
   if (($15 & 1) == 0) {
    $22 = ($15 & 255) >>> 1; //@line 14954
   } else {
    $22 = HEAP32[$__ky$068 + 4 >> 2] | 0; //@line 14958
   }
   if (($22 | 0) == 0) {
    HEAP8[$__st$067] = 2; //@line 14962
    $__n_does_match$1 = $__n_does_match$066 + 1 | 0; //@line 14965
    $__n_might_match$1 = $__n_might_match$065 + -1 | 0; //@line 14965
   } else {
    HEAP8[$__st$067] = 1; //@line 14967
    $__n_does_match$1 = $__n_does_match$066; //@line 14968
    $__n_might_match$1 = $__n_might_match$065; //@line 14968
   }
   $26 = $__ky$068 + 12 | 0; //@line 14970
   if (($26 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1; //@line 14974
    $__n_might_match$0$lcssa = $__n_might_match$1; //@line 14974
    break;
   } else {
    $__ky$068 = $26; //@line 14977
    $__n_does_match$066 = $__n_does_match$1; //@line 14977
    $__n_might_match$065 = $__n_might_match$1; //@line 14977
    $__st$067 = $__st$067 + 1 | 0; //@line 14977
   }
  }
 }
 $11 = $__b; //@line 14981
 $12 = $__e; //@line 14982
 $13 = $__ct; //@line 14983
 $__indx$0 = 0; //@line 14984
 $__n_does_match$2 = $__n_does_match$0$lcssa; //@line 14984
 $__n_might_match$2 = $__n_might_match$0$lcssa; //@line 14984
 L17 : while (1) {
  $29 = HEAP32[$11 >> 2] | 0; //@line 14986
  do {
   if (($29 | 0) == 0) {
    $43 = 1; //@line 14990
   } else {
    $32 = HEAP32[$29 + 12 >> 2] | 0; //@line 14993
    if (($32 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 127]($29) | 0; //@line 15003
    } else {
     $$0$i$i$i$i = HEAP32[$32 >> 2] | 0; //@line 15006
    }
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$11 >> 2] = 0; //@line 15010
     $43 = 1; //@line 15011
     break;
    } else {
     $43 = (HEAP32[$11 >> 2] | 0) == 0; //@line 15016
     break;
    }
   }
  } while (0);
  $44 = HEAP32[$12 >> 2] | 0; //@line 15021
  do {
   if (($44 | 0) == 0) {
    $$pre$i3$i$i19 = 0; //@line 15025
    $58 = 1; //@line 15025
   } else {
    $47 = HEAP32[$44 + 12 >> 2] | 0; //@line 15028
    if (($47 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; //@line 15038
    } else {
     $$0$i$i1$i$i = HEAP32[$47 >> 2] | 0; //@line 15041
    }
    if (!(($$0$i$i1$i$i | 0) == -1)) {
     $$pre$i3$i$i19 = $44; //@line 15045
     $58 = 0; //@line 15045
     break;
    }
    HEAP32[$12 >> 2] = 0; //@line 15048
    $$pre$i3$i$i19 = 0; //@line 15049
    $58 = 1; //@line 15049
   }
  } while (0);
  $60 = HEAP32[$11 >> 2] | 0; //@line 15055
  if (!(($43 ^ $58) & ($__n_might_match$2 | 0) != 0)) {
   break;
  }
  $62 = HEAP32[$60 + 12 >> 2] | 0; //@line 15060
  if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0; //@line 15070
  } else {
   $$0$i$i = HEAP32[$62 >> 2] | 0; //@line 15073
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i; //@line 15076
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$13 >> 2] | 0) + 28 >> 2] & 31]($__ct, $$0$i$i) | 0; //@line 15082
  }
  $$pre = $__indx$0 + 1 | 0; //@line 15084
  if ($10) {
   $__indx$0 = $$pre; //@line 15086
   $__n_might_match$2 = $__n_might_match$2; //@line 15086
   $__n_does_match$2 = $__n_does_match$2; //@line 15086
   continue;
  }
  L46 : do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0; //@line 15091
    $__ky1$040$us = $__kb; //@line 15091
    $__n_does_match$336$us = $__n_does_match$2; //@line 15091
    $__n_might_match$335$us = $__n_might_match$2; //@line 15091
    $__st$137$us = $__status$0; //@line 15091
    while (1) {
     do {
      if ((HEAP8[$__st$137$us] | 0) == 1) {
       $79 = HEAP8[$__ky1$040$us] | 0; //@line 15098
       $81 = ($79 & 1) == 0; //@line 15100
       if ($81) {
        $85 = $__ky1$040$us + 4 | 0; //@line 15103
       } else {
        $85 = HEAP32[$__ky1$040$us + 8 >> 2] | 0; //@line 15107
       }
       if (($__c$0 | 0) != (HEAP32[$85 + ($__indx$0 << 2) >> 2] | 0)) {
        HEAP8[$__st$137$us] = 0; //@line 15113
        $__consume$1$off0$us = $__consume$0$off039$us; //@line 15115
        $__n_does_match$4$us = $__n_does_match$336$us; //@line 15115
        $__n_might_match$4$us = $__n_might_match$335$us + -1 | 0; //@line 15115
        break;
       }
       if ($81) {
        $94 = ($79 & 255) >>> 1; //@line 15121
       } else {
        $94 = HEAP32[$__ky1$040$us + 4 >> 2] | 0; //@line 15125
       }
       if (($94 | 0) != ($$pre | 0)) {
        $__consume$1$off0$us = 1; //@line 15129
        $__n_does_match$4$us = $__n_does_match$336$us; //@line 15129
        $__n_might_match$4$us = $__n_might_match$335$us; //@line 15129
        break;
       }
       HEAP8[$__st$137$us] = 2; //@line 15132
       $__consume$1$off0$us = 1; //@line 15135
       $__n_does_match$4$us = $__n_does_match$336$us + 1 | 0; //@line 15135
       $__n_might_match$4$us = $__n_might_match$335$us + -1 | 0; //@line 15135
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us; //@line 15137
       $__n_does_match$4$us = $__n_does_match$336$us; //@line 15137
       $__n_might_match$4$us = $__n_might_match$335$us; //@line 15137
      }
     } while (0);
     $98 = $__ky1$040$us + 12 | 0; //@line 15140
     if (($98 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us; //@line 15143
      $__n_does_match$3$lcssa = $__n_does_match$4$us; //@line 15143
      $__n_might_match$3$lcssa = $__n_might_match$4$us; //@line 15143
      break L46;
     }
     $__consume$0$off039$us = $__consume$1$off0$us; //@line 15147
     $__ky1$040$us = $98; //@line 15147
     $__n_does_match$336$us = $__n_does_match$4$us; //@line 15147
     $__n_might_match$335$us = $__n_might_match$4$us; //@line 15147
     $__st$137$us = $__st$137$us + 1 | 0; //@line 15147
    }
   } else {
    $__consume$0$off039 = 0; //@line 15150
    $__ky1$040 = $__kb; //@line 15150
    $__n_does_match$336 = $__n_does_match$2; //@line 15150
    $__n_might_match$335 = $__n_might_match$2; //@line 15150
    $__st$137 = $__status$0; //@line 15150
    while (1) {
     do {
      if ((HEAP8[$__st$137] | 0) == 1) {
       $103 = $__ky1$040; //@line 15156
       if ((HEAP8[$103] & 1) == 0) {
        $110 = $__ky1$040 + 4 | 0; //@line 15162
       } else {
        $110 = HEAP32[$__ky1$040 + 8 >> 2] | 0; //@line 15166
       }
       if (($__c$0 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$13 >> 2] | 0) + 28 >> 2] & 31]($__ct, HEAP32[$110 + ($__indx$0 << 2) >> 2] | 0) | 0)) {
        HEAP8[$__st$137] = 0; //@line 15176
        $__consume$1$off0 = $__consume$0$off039; //@line 15178
        $__n_does_match$4 = $__n_does_match$336; //@line 15178
        $__n_might_match$4 = $__n_might_match$335 + -1 | 0; //@line 15178
        break;
       }
       $118 = HEAP8[$103] | 0; //@line 15181
       if (($118 & 1) == 0) {
        $125 = ($118 & 255) >>> 1; //@line 15187
       } else {
        $125 = HEAP32[$__ky1$040 + 4 >> 2] | 0; //@line 15191
       }
       if (($125 | 0) != ($$pre | 0)) {
        $__consume$1$off0 = 1; //@line 15195
        $__n_does_match$4 = $__n_does_match$336; //@line 15195
        $__n_might_match$4 = $__n_might_match$335; //@line 15195
        break;
       }
       HEAP8[$__st$137] = 2; //@line 15198
       $__consume$1$off0 = 1; //@line 15201
       $__n_does_match$4 = $__n_does_match$336 + 1 | 0; //@line 15201
       $__n_might_match$4 = $__n_might_match$335 + -1 | 0; //@line 15201
      } else {
       $__consume$1$off0 = $__consume$0$off039; //@line 15203
       $__n_does_match$4 = $__n_does_match$336; //@line 15203
       $__n_might_match$4 = $__n_might_match$335; //@line 15203
      }
     } while (0);
     $130 = $__ky1$040 + 12 | 0; //@line 15206
     if (($130 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0; //@line 15209
      $__n_does_match$3$lcssa = $__n_does_match$4; //@line 15209
      $__n_might_match$3$lcssa = $__n_might_match$4; //@line 15209
      break L46;
     }
     $__consume$0$off039 = $__consume$1$off0; //@line 15213
     $__ky1$040 = $130; //@line 15213
     $__n_does_match$336 = $__n_does_match$4; //@line 15213
     $__n_might_match$335 = $__n_might_match$4; //@line 15213
     $__st$137 = $__st$137 + 1 | 0; //@line 15213
    }
   }
  } while (0);
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $$pre; //@line 15218
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 15218
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 15218
   continue;
  }
  $133 = HEAP32[$11 >> 2] | 0; //@line 15221
  $134 = $133 + 12 | 0; //@line 15222
  $135 = HEAP32[$134 >> 2] | 0; //@line 15223
  if (($135 | 0) == (HEAP32[$133 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 40 >> 2] & 127]($133) | 0; //@line 15232
  } else {
   HEAP32[$134 >> 2] = $135 + 4; //@line 15235
  }
  if (($__n_might_match$3$lcssa + $__n_does_match$3$lcssa | 0) >>> 0 < 2) {
   $__indx$0 = $$pre; //@line 15240
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 15240
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 15240
   continue;
  } else {
   $__ky2$051 = $__kb; //@line 15243
   $__n_does_match$549 = $__n_does_match$3$lcssa; //@line 15243
   $__st$250 = $__status$0; //@line 15243
  }
  while (1) {
   do {
    if ((HEAP8[$__st$250] | 0) == 2) {
     $148 = HEAP8[$__ky2$051] | 0; //@line 15251
     if (($148 & 1) == 0) {
      $155 = ($148 & 255) >>> 1; //@line 15257
     } else {
      $155 = HEAP32[$__ky2$051 + 4 >> 2] | 0; //@line 15261
     }
     if (($155 | 0) == ($$pre | 0)) {
      $__n_does_match$6 = $__n_does_match$549; //@line 15265
      break;
     }
     HEAP8[$__st$250] = 0; //@line 15268
     $__n_does_match$6 = $__n_does_match$549 + -1 | 0; //@line 15270
    } else {
     $__n_does_match$6 = $__n_does_match$549; //@line 15272
    }
   } while (0);
   $158 = $__ky2$051 + 12 | 0; //@line 15275
   if (($158 | 0) == ($__ke | 0)) {
    $__indx$0 = $$pre; //@line 15279
    $__n_does_match$2 = $__n_does_match$6; //@line 15279
    $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 15279
    continue L17;
   } else {
    $__ky2$051 = $158; //@line 15282
    $__n_does_match$549 = $__n_does_match$6; //@line 15282
    $__st$250 = $__st$250 + 1 | 0; //@line 15282
   }
  }
 }
 do {
  if (($60 | 0) == 0) {
   $174 = 1; //@line 15289
  } else {
   $163 = HEAP32[$60 + 12 >> 2] | 0; //@line 15292
   if (($163 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
    $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 127]($60) | 0; //@line 15302
   } else {
    $$0$i$i$i$i11 = HEAP32[$163 >> 2] | 0; //@line 15305
   }
   if (($$0$i$i$i$i11 | 0) == -1) {
    HEAP32[$11 >> 2] = 0; //@line 15309
    $174 = 1; //@line 15310
    break;
   } else {
    $174 = (HEAP32[$11 >> 2] | 0) == 0; //@line 15315
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i19 | 0) == 0) {
   label = 85; //@line 15323
  } else {
   $177 = HEAP32[$$pre$i3$i$i19 + 12 >> 2] | 0; //@line 15326
   if (($177 | 0) == (HEAP32[$$pre$i3$i$i19 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i19 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i19) | 0; //@line 15336
   } else {
    $$0$i$i1$i$i17 = HEAP32[$177 >> 2] | 0; //@line 15339
   }
   if (($$0$i$i1$i$i17 | 0) == -1) {
    HEAP32[$12 >> 2] = 0; //@line 15343
    label = 85; //@line 15344
    break;
   } else {
    if ($174) {
     break;
    } else {
     label = 87; //@line 15350
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 85) {
  if ($174) {
   label = 87; //@line 15358
  }
 }
 if ((label | 0) == 87) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 15364
 }
 L124 : do {
  if ($10) {
   label = 92; //@line 15368
  } else {
   if ((HEAP8[$__status$0] | 0) == 2) {
    $$028 = $__kb; //@line 15373
    break;
   } else {
    $$03082 = $__kb; //@line 15376
    $__st$32983 = $__status$0; //@line 15376
   }
   while (1) {
    $194 = $$03082 + 12 | 0; //@line 15379
    $196 = $__st$32983 + 1 | 0; //@line 15381
    if (($194 | 0) == ($__ke | 0)) {
     label = 92; //@line 15383
     break L124;
    }
    if ((HEAP8[$196] | 0) == 2) {
     $$028 = $194; //@line 15389
     break;
    } else {
     $__st$32983 = $196; //@line 15392
     $$03082 = $194; //@line 15392
    }
   }
  }
 } while (0);
 if ((label | 0) == 92) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15400
  $$028 = $__ke; //@line 15401
 }
 if (($9 | 0) == 0) {
  STACKTOP = sp; //@line 15405
  return $$028 | 0; //@line 15405
 }
 _free($9); //@line 15407
 STACKTOP = sp; //@line 15408
 return $$028 | 0; //@line 15408
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $1 = 0, $101 = 0, $102 = 0, $119 = 0, $122 = 0, $133 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $164 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $186 = 0, $193 = 0, $2 = 0, $202 = 0, $205 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $222 = 0, $235 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $73 = 0, $80 = 0, $86 = 0, $87 = 0, $96 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12997
 STACKTOP = STACKTOP + 64 | 0; //@line 12998
 $$byval_copy1 = sp; //@line 12999
 $$byval_copy = sp + 8 | 0; //@line 13000
 $__p$i$i$i$i = sp + 16 | 0; //@line 13001
 $1 = sp + 32 | 0; //@line 13002
 $2 = sp + 40 | 0; //@line 13003
 $3 = sp + 48 | 0; //@line 13004
 $4 = sp + 56 | 0; //@line 13005
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 13006
 $5 = $1; //@line 13007
 $6 = HEAP32[$5 >> 2] | 0; //@line 13008
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 13014
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 13016
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 13018
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 13019
 }
 $14 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 13022
 $18 = HEAP32[$6 + 8 >> 2] | 0; //@line 13026
 if (!((HEAP32[$6 + 12 >> 2] | 0) - $18 >> 2 >>> 0 > $14 >>> 0)) {
  $27 = ___cxa_allocate_exception(4) | 0; //@line 13033
  $28 = $27; //@line 13034
  __ZNSt8bad_castC2Ev($28); //@line 13035
  ___cxa_throw($27 | 0, 13672, 114); //@line 13036
 }
 $25 = HEAP32[$18 + ($14 << 2) >> 2] | 0; //@line 13040
 if (($25 | 0) == 0) {
  $27 = ___cxa_allocate_exception(4) | 0; //@line 13043
  $28 = $27; //@line 13044
  __ZNSt8bad_castC2Ev($28); //@line 13045
  ___cxa_throw($27 | 0, 13672, 114); //@line 13046
 }
 $29 = $25; //@line 13049
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$5 >> 2] | 0) | 0; //@line 13052
 HEAP32[$__err >> 2] = 0; //@line 13053
 $$phi$trans$insert$pre$pre = $__b; //@line 13055
 L10 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   label = 69; //@line 13058
  } else {
   $33 = $__e; //@line 13060
   $34 = $25; //@line 13061
   $35 = $25; //@line 13062
   $36 = $25; //@line 13063
   $37 = $this; //@line 13064
   $38 = $3; //@line 13065
   $39 = $4; //@line 13066
   $40 = $2; //@line 13067
   $$0$ph43 = $__fmtb; //@line 13068
   $$pre44 = 0; //@line 13068
   L12 : while (1) {
    $41 = $$pre44; //@line 13070
    while (1) {
     if (($41 | 0) != 0) {
      label = 69; //@line 13074
      break L10;
     }
     $43 = HEAP32[$$phi$trans$insert$pre$pre >> 2] | 0; //@line 13077
     do {
      if (($43 | 0) == 0) {
       $57 = 0; //@line 13081
       $58 = 1; //@line 13081
      } else {
       $46 = HEAP32[$43 + 12 >> 2] | 0; //@line 13084
       if (($46 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
        $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 127]($43) | 0; //@line 13094
       } else {
        $$0$i$i$i$i = HEAP32[$46 >> 2] | 0; //@line 13097
       }
       if (!(($$0$i$i$i$i | 0) == -1)) {
        $57 = $43; //@line 13101
        $58 = 0; //@line 13101
        break;
       }
       HEAP32[$$phi$trans$insert$pre$pre >> 2] = 0; //@line 13104
       $57 = 0; //@line 13105
       $58 = 1; //@line 13105
      }
     } while (0);
     $59 = HEAP32[$33 >> 2] | 0; //@line 13108
     do {
      if (($59 | 0) == 0) {
       label = 22; //@line 13112
      } else {
       $62 = HEAP32[$59 + 12 >> 2] | 0; //@line 13115
       if (($62 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) {
        $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; //@line 13125
       } else {
        $$0$i$i1$i$i = HEAP32[$62 >> 2] | 0; //@line 13128
       }
       if (($$0$i$i1$i$i | 0) == -1) {
        HEAP32[$33 >> 2] = 0; //@line 13132
        label = 22; //@line 13133
        break;
       } else {
        if ($58) {
         $73 = $59; //@line 13137
         break;
        } else {
         label = 24; //@line 13140
         break L12;
        }
       }
      }
     } while (0);
     if ((label | 0) == 22) {
      label = 0; //@line 13147
      if ($58) {
       label = 24; //@line 13149
       break L12;
      } else {
       $73 = 0; //@line 13152
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 52 >> 2] & 31]($29, HEAP32[$$0$ph43 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
      label = 26; //@line 13162
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$35 >> 2] | 0) + 12 >> 2] & 31]($29, 8192, HEAP32[$$0$ph43 >> 2] | 0) | 0) {
      $$0$pn = $$0$ph43; //@line 13171
      label = 36; //@line 13172
      break;
     }
     $172 = $57 + 12 | 0; //@line 13175
     $173 = HEAP32[$172 >> 2] | 0; //@line 13176
     $174 = $57 + 16 | 0; //@line 13177
     if (($173 | 0) == (HEAP32[$174 >> 2] | 0)) {
      $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 127]($57) | 0; //@line 13186
     } else {
      $$0$i$i16 = HEAP32[$173 >> 2] | 0; //@line 13189
     }
     $186 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] & 31]($29, $$0$i$i16) | 0; //@line 13194
     if (($186 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] & 31]($29, HEAP32[$$0$ph43 >> 2] | 0) | 0)) {
      label = 64; //@line 13202
      break;
     }
     HEAP32[$__err >> 2] = 4; //@line 13205
     $41 = 4; //@line 13206
    }
    L44 : do {
     if ((label | 0) == 26) {
      label = 0; //@line 13210
      $80 = $$0$ph43 + 4 | 0; //@line 13211
      if (($80 | 0) == ($__fmte | 0)) {
       label = 27; //@line 13214
       break L12;
      }
      $86 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 52 >> 2] & 31]($29, HEAP32[$80 >> 2] | 0, 0) | 0; //@line 13221
      if ($86 << 24 >> 24 == 48 | $86 << 24 >> 24 == 69) {
       $87 = $$0$ph43 + 8 | 0; //@line 13223
       if (($87 | 0) == ($__fmte | 0)) {
        label = 30; //@line 13226
        break L12;
       }
       $$1 = $87; //@line 13234
       $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 52 >> 2] & 31]($29, HEAP32[$87 >> 2] | 0, 0) | 0; //@line 13234
       $__opt$0 = $86; //@line 13234
      } else {
       $$1 = $80; //@line 13236
       $__cmd$0 = $86; //@line 13236
       $__opt$0 = 0; //@line 13236
      }
      $96 = HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] | 0; //@line 13240
      HEAP32[$38 >> 2] = $57; //@line 13241
      HEAP32[$39 >> 2] = $73; //@line 13242
      $98 = $$byval_copy; //@line 13244
      $99 = $3; //@line 13245
      HEAP32[$98 + 0 >> 2] = HEAP32[$99 + 0 >> 2]; //@line 13246
      $101 = $$byval_copy1; //@line 13248
      $102 = $4; //@line 13249
      HEAP32[$101 + 0 >> 2] = HEAP32[$102 + 0 >> 2]; //@line 13250
      FUNCTION_TABLE_viiiiiiiii[$96 & 7]($2, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0); //@line 13251
      HEAP32[$$phi$trans$insert$pre$pre >> 2] = HEAP32[$40 >> 2]; //@line 13255
      $$0$ph$be = $$1 + 4 | 0; //@line 13257
     } else if ((label | 0) == 36) {
      while (1) {
       label = 0; //@line 13261
       $$2 = $$0$pn + 4 | 0; //@line 13262
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte; //@line 13265
        break;
       }
       if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$35 >> 2] | 0) + 12 >> 2] & 31]($29, 8192, HEAP32[$$2 >> 2] | 0) | 0) {
        $$0$pn = $$2; //@line 13274
        label = 36; //@line 13275
       } else {
        $$2$lcssa = $$2; //@line 13277
        break;
       }
      }
      $$pre$i$i$i6 = $57; //@line 13281
      $$pre$i3$i$i12 = $73; //@line 13281
      $119 = $73; //@line 13281
      while (1) {
       do {
        if (($$pre$i$i$i6 | 0) == 0) {
         $133 = 0; //@line 13286
         $134 = 1; //@line 13286
        } else {
         $122 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0; //@line 13289
         if (($122 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) {
          $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i6) | 0; //@line 13299
         } else {
          $$0$i$i$i$i4 = HEAP32[$122 >> 2] | 0; //@line 13302
         }
         if (!(($$0$i$i$i$i4 | 0) == -1)) {
          $133 = $$pre$i$i$i6; //@line 13306
          $134 = 0; //@line 13306
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre >> 2] = 0; //@line 13309
         $133 = 0; //@line 13310
         $134 = 1; //@line 13310
        }
       } while (0);
       do {
        if (($119 | 0) == 0) {
         $$pre$i3$i$i1246 = $$pre$i3$i$i12; //@line 13316
         label = 51; //@line 13317
        } else {
         $137 = HEAP32[$119 + 12 >> 2] | 0; //@line 13320
         if (($137 | 0) == (HEAP32[$119 + 16 >> 2] | 0)) {
          $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$119 >> 2] | 0) + 36 >> 2] & 127]($119) | 0; //@line 13330
         } else {
          $$0$i$i1$i$i10 = HEAP32[$137 >> 2] | 0; //@line 13333
         }
         if (($$0$i$i1$i$i10 | 0) == -1) {
          HEAP32[$33 >> 2] = 0; //@line 13337
          $$pre$i3$i$i1246 = 0; //@line 13338
          label = 51; //@line 13339
          break;
         } else {
          if ($134 ^ ($$pre$i3$i$i12 | 0) == 0) {
           $$pre$i3$i$i1245 = $$pre$i3$i$i12; //@line 13345
           $148 = $$pre$i3$i$i12; //@line 13345
           break;
          } else {
           $$0$ph$be = $$2$lcssa; //@line 13348
           break L44;
          }
         }
        }
       } while (0);
       if ((label | 0) == 51) {
        label = 0; //@line 13355
        if ($134) {
         $$0$ph$be = $$2$lcssa; //@line 13357
         break L44;
        } else {
         $$pre$i3$i$i1245 = $$pre$i3$i$i1246; //@line 13360
         $148 = 0; //@line 13360
        }
       }
       $149 = $133 + 12 | 0; //@line 13363
       $150 = HEAP32[$149 >> 2] | 0; //@line 13364
       $151 = $133 + 16 | 0; //@line 13365
       if (($150 | 0) == (HEAP32[$151 >> 2] | 0)) {
        $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 127]($133) | 0; //@line 13374
       } else {
        $$0$i$i = HEAP32[$150 >> 2] | 0; //@line 13377
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$35 >> 2] | 0) + 12 >> 2] & 31]($29, 8192, $$0$i$i) | 0)) {
        $$0$ph$be = $$2$lcssa; //@line 13384
        break L44;
       }
       $164 = HEAP32[$149 >> 2] | 0; //@line 13387
       if (($164 | 0) == (HEAP32[$151 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 40 >> 2] & 127]($133) | 0; //@line 13395
        $$pre$i$i$i6 = $133; //@line 13396
        $$pre$i3$i$i12 = $$pre$i3$i$i1245; //@line 13396
        $119 = $148; //@line 13396
        continue;
       } else {
        HEAP32[$149 >> 2] = $164 + 4; //@line 13400
        $$pre$i$i$i6 = $133; //@line 13401
        $$pre$i3$i$i12 = $$pre$i3$i$i1245; //@line 13401
        $119 = $148; //@line 13401
        continue;
       }
      }
     } else if ((label | 0) == 64) {
      label = 0; //@line 13407
      $193 = HEAP32[$172 >> 2] | 0; //@line 13408
      if (($193 | 0) == (HEAP32[$174 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 40 >> 2] & 127]($57) | 0; //@line 13416
      } else {
       HEAP32[$172 >> 2] = $193 + 4; //@line 13419
      }
      $$0$ph$be = $$0$ph43 + 4 | 0; //@line 13422
     }
    } while (0);
    if (($$0$ph$be | 0) == ($__fmte | 0)) {
     label = 69; //@line 13427
     break L10;
    }
    $$0$ph43 = $$0$ph$be; //@line 13431
    $$pre44 = HEAP32[$__err >> 2] | 0; //@line 13431
   }
   if ((label | 0) == 24) {
    HEAP32[$__err >> 2] = 4; //@line 13434
    $$pre$i$i$i21 = $57; //@line 13435
    break;
   } else if ((label | 0) == 27) {
    HEAP32[$__err >> 2] = 4; //@line 13439
    $$pre$i$i$i21 = $57; //@line 13440
    break;
   } else if ((label | 0) == 30) {
    HEAP32[$__err >> 2] = 4; //@line 13444
    $$pre$i$i$i21 = $57; //@line 13445
    break;
   }
  }
 } while (0);
 if ((label | 0) == 69) {
  $$pre$i$i$i21 = HEAP32[$$phi$trans$insert$pre$pre >> 2] | 0; //@line 13452
 }
 $202 = $__b; //@line 13454
 do {
  if (($$pre$i$i$i21 | 0) == 0) {
   $216 = 0; //@line 13458
   $217 = 1; //@line 13458
  } else {
   $205 = HEAP32[$$pre$i$i$i21 + 12 >> 2] | 0; //@line 13461
   if (($205 | 0) == (HEAP32[$$pre$i$i$i21 + 16 >> 2] | 0)) {
    $$0$i$i$i$i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i21 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i21) | 0; //@line 13471
   } else {
    $$0$i$i$i$i19 = HEAP32[$205 >> 2] | 0; //@line 13474
   }
   if (!(($$0$i$i$i$i19 | 0) == -1)) {
    $216 = $$pre$i$i$i21; //@line 13478
    $217 = 0; //@line 13478
    break;
   }
   HEAP32[$202 >> 2] = 0; //@line 13481
   $216 = 0; //@line 13482
   $217 = 1; //@line 13482
  }
 } while (0);
 $218 = $__e; //@line 13485
 $219 = HEAP32[$218 >> 2] | 0; //@line 13486
 do {
  if (($219 | 0) == 0) {
   label = 82; //@line 13490
  } else {
   $222 = HEAP32[$219 + 12 >> 2] | 0; //@line 13493
   if (($222 | 0) == (HEAP32[$219 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$219 >> 2] | 0) + 36 >> 2] & 127]($219) | 0; //@line 13503
   } else {
    $$0$i$i1$i$i25 = HEAP32[$222 >> 2] | 0; //@line 13506
   }
   if (($$0$i$i1$i$i25 | 0) == -1) {
    HEAP32[$218 >> 2] = 0; //@line 13510
    label = 82; //@line 13511
    break;
   }
   if (!$217) {
    break;
   }
   $235 = $agg$result; //@line 13517
   HEAP32[$235 >> 2] = $216; //@line 13518
   STACKTOP = sp; //@line 13519
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 82) {
   if ($217) {
    break;
   }
   $235 = $agg$result; //@line 13527
   HEAP32[$235 >> 2] = $216; //@line 13528
   STACKTOP = sp; //@line 13529
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13534
 $235 = $agg$result; //@line 13535
 HEAP32[$235 >> 2] = $216; //@line 13536
 STACKTOP = sp; //@line 13537
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$pre = 0, $$pre$i2$i$i16 = 0, $10 = 0, $100 = 0, $105 = 0, $11 = 0, $113 = 0, $12 = 0, $121 = 0, $128 = 0, $13 = 0, $133 = 0, $136 = 0, $137 = 0, $138 = 0, $15 = 0, $151 = 0, $158 = 0, $161 = 0, $176 = 0, $177 = 0, $195 = 0, $197 = 0, $22 = 0, $26 = 0, $29 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $57 = 0, $59 = 0, $61 = 0, $7 = 0, $72 = 0, $80 = 0, $82 = 0, $87 = 0, $9 = 0, $96 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9766
 STACKTOP = STACKTOP + 104 | 0; //@line 9767
 $4 = ($__ke - $__kb | 0) / 12 | 0; //@line 9772
 $5 = sp; //@line 9773
 do {
  if ($4 >>> 0 > 100) {
   $7 = _malloc($4) | 0; //@line 9777
   if (($7 | 0) != 0) {
    $9 = $7; //@line 9780
    $__status$0 = $7; //@line 9780
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 9783
  } else {
   $9 = 0; //@line 9786
   $__status$0 = $5; //@line 9786
  }
 } while (0);
 $10 = ($__kb | 0) == ($__ke | 0); //@line 9789
 if ($10) {
  $__n_does_match$0$lcssa = 0; //@line 9791
  $__n_might_match$0$lcssa = $4; //@line 9791
 } else {
  $__ky$064 = $__kb; //@line 9793
  $__n_does_match$062 = 0; //@line 9793
  $__n_might_match$061 = $4; //@line 9793
  $__st$063 = $__status$0; //@line 9793
  while (1) {
   $15 = HEAP8[$__ky$064] | 0; //@line 9796
   if (($15 & 1) == 0) {
    $22 = ($15 & 255) >>> 1; //@line 9802
   } else {
    $22 = HEAP32[$__ky$064 + 4 >> 2] | 0; //@line 9806
   }
   if (($22 | 0) == 0) {
    HEAP8[$__st$063] = 2; //@line 9810
    $__n_does_match$1 = $__n_does_match$062 + 1 | 0; //@line 9813
    $__n_might_match$1 = $__n_might_match$061 + -1 | 0; //@line 9813
   } else {
    HEAP8[$__st$063] = 1; //@line 9815
    $__n_does_match$1 = $__n_does_match$062; //@line 9816
    $__n_might_match$1 = $__n_might_match$061; //@line 9816
   }
   $26 = $__ky$064 + 12 | 0; //@line 9818
   if (($26 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1; //@line 9822
    $__n_might_match$0$lcssa = $__n_might_match$1; //@line 9822
    break;
   } else {
    $__ky$064 = $26; //@line 9825
    $__n_does_match$062 = $__n_does_match$1; //@line 9825
    $__n_might_match$061 = $__n_might_match$1; //@line 9825
    $__st$063 = $__st$063 + 1 | 0; //@line 9825
   }
  }
 }
 $11 = $__b; //@line 9829
 $12 = $__e; //@line 9830
 $13 = $__ct; //@line 9831
 $__indx$0 = 0; //@line 9832
 $__n_does_match$2 = $__n_does_match$0$lcssa; //@line 9832
 $__n_might_match$2 = $__n_might_match$0$lcssa; //@line 9832
 L17 : while (1) {
  $29 = HEAP32[$11 >> 2] | 0; //@line 9834
  do {
   if (($29 | 0) == 0) {
    $42 = 0; //@line 9838
   } else {
    if ((HEAP32[$29 + 12 >> 2] | 0) != (HEAP32[$29 + 16 >> 2] | 0)) {
     $42 = $29; //@line 9846
     break;
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 127]($29) | 0) == -1) {
     HEAP32[$11 >> 2] = 0; //@line 9856
     $42 = 0; //@line 9857
     break;
    } else {
     $42 = HEAP32[$11 >> 2] | 0; //@line 9861
     break;
    }
   }
  } while (0);
  $43 = ($42 | 0) == 0; //@line 9866
  $44 = HEAP32[$12 >> 2] | 0; //@line 9867
  do {
   if (($44 | 0) == 0) {
    $$pre$i2$i$i16 = 0; //@line 9871
   } else {
    if ((HEAP32[$44 + 12 >> 2] | 0) != (HEAP32[$44 + 16 >> 2] | 0)) {
     $$pre$i2$i$i16 = $44; //@line 9879
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0) == -1)) {
     $$pre$i2$i$i16 = $44; //@line 9889
     break;
    }
    HEAP32[$12 >> 2] = 0; //@line 9892
    $$pre$i2$i$i16 = 0; //@line 9893
   }
  } while (0);
  $57 = ($$pre$i2$i$i16 | 0) == 0; //@line 9896
  $59 = HEAP32[$11 >> 2] | 0; //@line 9900
  if (!(($43 ^ $57) & ($__n_might_match$2 | 0) != 0)) {
   break;
  }
  $61 = HEAP32[$59 + 12 >> 2] | 0; //@line 9905
  if (($61 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; //@line 9915
  } else {
   $$0$i$i = HEAPU8[$61] | 0; //@line 9919
  }
  $72 = $$0$i$i & 255; //@line 9921
  if ($__case_sensitive) {
   $__c$0 = $72; //@line 9923
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 31]($__ct, $72) | 0; //@line 9929
  }
  $$pre = $__indx$0 + 1 | 0; //@line 9931
  if ($10) {
   $__indx$0 = $$pre; //@line 9933
   $__n_might_match$2 = $__n_might_match$2; //@line 9933
   $__n_does_match$2 = $__n_does_match$2; //@line 9933
   continue;
  }
  L40 : do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0; //@line 9938
    $__ky1$036$us = $__kb; //@line 9938
    $__n_does_match$332$us = $__n_does_match$2; //@line 9938
    $__n_might_match$331$us = $__n_might_match$2; //@line 9938
    $__st$133$us = $__status$0; //@line 9938
    while (1) {
     do {
      if ((HEAP8[$__st$133$us] | 0) == 1) {
       $80 = HEAP8[$__ky1$036$us] | 0; //@line 9945
       $82 = ($80 & 1) == 0; //@line 9947
       if ($82) {
        $87 = $__ky1$036$us + 1 | 0; //@line 9951
       } else {
        $87 = HEAP32[$__ky1$036$us + 8 >> 2] | 0; //@line 9955
       }
       if (!($__c$0 << 24 >> 24 == (HEAP8[$87 + $__indx$0 | 0] | 0))) {
        HEAP8[$__st$133$us] = 0; //@line 9961
        $__consume$1$off0$us = $__consume$0$off035$us; //@line 9963
        $__n_does_match$4$us = $__n_does_match$332$us; //@line 9963
        $__n_might_match$4$us = $__n_might_match$331$us + -1 | 0; //@line 9963
        break;
       }
       if ($82) {
        $96 = ($80 & 255) >>> 1; //@line 9969
       } else {
        $96 = HEAP32[$__ky1$036$us + 4 >> 2] | 0; //@line 9973
       }
       if (($96 | 0) != ($$pre | 0)) {
        $__consume$1$off0$us = 1; //@line 9977
        $__n_does_match$4$us = $__n_does_match$332$us; //@line 9977
        $__n_might_match$4$us = $__n_might_match$331$us; //@line 9977
        break;
       }
       HEAP8[$__st$133$us] = 2; //@line 9980
       $__consume$1$off0$us = 1; //@line 9983
       $__n_does_match$4$us = $__n_does_match$332$us + 1 | 0; //@line 9983
       $__n_might_match$4$us = $__n_might_match$331$us + -1 | 0; //@line 9983
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us; //@line 9985
       $__n_does_match$4$us = $__n_does_match$332$us; //@line 9985
       $__n_might_match$4$us = $__n_might_match$331$us; //@line 9985
      }
     } while (0);
     $100 = $__ky1$036$us + 12 | 0; //@line 9988
     if (($100 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us; //@line 9991
      $__n_does_match$3$lcssa = $__n_does_match$4$us; //@line 9991
      $__n_might_match$3$lcssa = $__n_might_match$4$us; //@line 9991
      break L40;
     }
     $__consume$0$off035$us = $__consume$1$off0$us; //@line 9995
     $__ky1$036$us = $100; //@line 9995
     $__n_does_match$332$us = $__n_does_match$4$us; //@line 9995
     $__n_might_match$331$us = $__n_might_match$4$us; //@line 9995
     $__st$133$us = $__st$133$us + 1 | 0; //@line 9995
    }
   } else {
    $__consume$0$off035 = 0; //@line 9998
    $__ky1$036 = $__kb; //@line 9998
    $__n_does_match$332 = $__n_does_match$2; //@line 9998
    $__n_might_match$331 = $__n_might_match$2; //@line 9998
    $__st$133 = $__status$0; //@line 9998
    while (1) {
     do {
      if ((HEAP8[$__st$133] | 0) == 1) {
       $105 = $__ky1$036; //@line 10004
       if ((HEAP8[$105] & 1) == 0) {
        $113 = $__ky1$036 + 1 | 0; //@line 10011
       } else {
        $113 = HEAP32[$__ky1$036 + 8 >> 2] | 0; //@line 10015
       }
       if (!($__c$0 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 31]($__ct, HEAP8[$113 + $__indx$0 | 0] | 0) | 0) << 24 >> 24)) {
        HEAP8[$__st$133] = 0; //@line 10025
        $__consume$1$off0 = $__consume$0$off035; //@line 10027
        $__n_does_match$4 = $__n_does_match$332; //@line 10027
        $__n_might_match$4 = $__n_might_match$331 + -1 | 0; //@line 10027
        break;
       }
       $121 = HEAP8[$105] | 0; //@line 10030
       if (($121 & 1) == 0) {
        $128 = ($121 & 255) >>> 1; //@line 10036
       } else {
        $128 = HEAP32[$__ky1$036 + 4 >> 2] | 0; //@line 10040
       }
       if (($128 | 0) != ($$pre | 0)) {
        $__consume$1$off0 = 1; //@line 10044
        $__n_does_match$4 = $__n_does_match$332; //@line 10044
        $__n_might_match$4 = $__n_might_match$331; //@line 10044
        break;
       }
       HEAP8[$__st$133] = 2; //@line 10047
       $__consume$1$off0 = 1; //@line 10050
       $__n_does_match$4 = $__n_does_match$332 + 1 | 0; //@line 10050
       $__n_might_match$4 = $__n_might_match$331 + -1 | 0; //@line 10050
      } else {
       $__consume$1$off0 = $__consume$0$off035; //@line 10052
       $__n_does_match$4 = $__n_does_match$332; //@line 10052
       $__n_might_match$4 = $__n_might_match$331; //@line 10052
      }
     } while (0);
     $133 = $__ky1$036 + 12 | 0; //@line 10055
     if (($133 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0; //@line 10058
      $__n_does_match$3$lcssa = $__n_does_match$4; //@line 10058
      $__n_might_match$3$lcssa = $__n_might_match$4; //@line 10058
      break L40;
     }
     $__consume$0$off035 = $__consume$1$off0; //@line 10062
     $__ky1$036 = $133; //@line 10062
     $__n_does_match$332 = $__n_does_match$4; //@line 10062
     $__n_might_match$331 = $__n_might_match$4; //@line 10062
     $__st$133 = $__st$133 + 1 | 0; //@line 10062
    }
   }
  } while (0);
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $$pre; //@line 10067
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 10067
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10067
   continue;
  }
  $136 = HEAP32[$11 >> 2] | 0; //@line 10070
  $137 = $136 + 12 | 0; //@line 10071
  $138 = HEAP32[$137 >> 2] | 0; //@line 10072
  if (($138 | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$136 >> 2] | 0) + 40 >> 2] & 127]($136) | 0; //@line 10081
  } else {
   HEAP32[$137 >> 2] = $138 + 1; //@line 10084
  }
  if (($__n_might_match$3$lcssa + $__n_does_match$3$lcssa | 0) >>> 0 < 2) {
   $__indx$0 = $$pre; //@line 10089
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 10089
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10089
   continue;
  } else {
   $__ky2$047 = $__kb; //@line 10092
   $__n_does_match$545 = $__n_does_match$3$lcssa; //@line 10092
   $__st$246 = $__status$0; //@line 10092
  }
  while (1) {
   do {
    if ((HEAP8[$__st$246] | 0) == 2) {
     $151 = HEAP8[$__ky2$047] | 0; //@line 10100
     if (($151 & 1) == 0) {
      $158 = ($151 & 255) >>> 1; //@line 10106
     } else {
      $158 = HEAP32[$__ky2$047 + 4 >> 2] | 0; //@line 10110
     }
     if (($158 | 0) == ($$pre | 0)) {
      $__n_does_match$6 = $__n_does_match$545; //@line 10114
      break;
     }
     HEAP8[$__st$246] = 0; //@line 10117
     $__n_does_match$6 = $__n_does_match$545 + -1 | 0; //@line 10119
    } else {
     $__n_does_match$6 = $__n_does_match$545; //@line 10121
    }
   } while (0);
   $161 = $__ky2$047 + 12 | 0; //@line 10124
   if (($161 | 0) == ($__ke | 0)) {
    $__indx$0 = $$pre; //@line 10128
    $__n_does_match$2 = $__n_does_match$6; //@line 10128
    $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10128
    continue L17;
   } else {
    $__ky2$047 = $161; //@line 10131
    $__n_does_match$545 = $__n_does_match$6; //@line 10131
    $__st$246 = $__st$246 + 1 | 0; //@line 10131
   }
  }
 }
 do {
  if (($59 | 0) == 0) {
   $176 = 0; //@line 10138
  } else {
   if ((HEAP32[$59 + 12 >> 2] | 0) != (HEAP32[$59 + 16 >> 2] | 0)) {
    $176 = $59; //@line 10146
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0) == -1) {
    HEAP32[$11 >> 2] = 0; //@line 10156
    $176 = 0; //@line 10157
    break;
   } else {
    $176 = HEAP32[$11 >> 2] | 0; //@line 10161
    break;
   }
  }
 } while (0);
 $177 = ($176 | 0) == 0; //@line 10166
 do {
  if ($57) {
   label = 78; //@line 10169
  } else {
   if ((HEAP32[$$pre$i2$i$i16 + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i16 + 16 >> 2] | 0)) {
    if ($177) {
     break;
    } else {
     label = 80; //@line 10180
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i16 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i16) | 0) == -1) {
    HEAP32[$12 >> 2] = 0; //@line 10191
    label = 78; //@line 10192
    break;
   } else {
    if ($177) {
     break;
    } else {
     label = 80; //@line 10198
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 78) {
  if ($177) {
   label = 80; //@line 10206
  }
 }
 if ((label | 0) == 80) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10212
 }
 L114 : do {
  if ($10) {
   label = 85; //@line 10216
  } else {
   if ((HEAP8[$__status$0] | 0) == 2) {
    $$024 = $__kb; //@line 10221
    break;
   } else {
    $$02680 = $__kb; //@line 10224
    $__st$32581 = $__status$0; //@line 10224
   }
   while (1) {
    $195 = $$02680 + 12 | 0; //@line 10227
    $197 = $__st$32581 + 1 | 0; //@line 10229
    if (($195 | 0) == ($__ke | 0)) {
     label = 85; //@line 10231
     break L114;
    }
    if ((HEAP8[$197] | 0) == 2) {
     $$024 = $195; //@line 10237
     break;
    } else {
     $__st$32581 = $197; //@line 10240
     $$02680 = $195; //@line 10240
    }
   }
  }
 } while (0);
 if ((label | 0) == 85) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 10248
  $$024 = $__ke; //@line 10249
 }
 if (($9 | 0) == 0) {
  STACKTOP = sp; //@line 10253
  return $$024 | 0; //@line 10253
 }
 _free($9); //@line 10255
 STACKTOP = sp; //@line 10256
 return $$024 | 0; //@line 10256
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $1 = 0, $100 = 0, $101 = 0, $107 = 0, $109 = 0, $115 = 0, $121 = 0, $134 = 0, $135 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $169 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $193 = 0, $2 = 0, $200 = 0, $209 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $240 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $72 = 0, $79 = 0, $85 = 0, $86 = 0, $95 = 0, $97 = 0, $98 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10254
 STACKTOP = STACKTOP + 64 | 0; //@line 10255
 $$byval_copy1 = sp; //@line 10256
 $$byval_copy = sp + 8 | 0; //@line 10257
 $__p$i$i$i$i = sp + 16 | 0; //@line 10258
 $1 = sp + 32 | 0; //@line 10259
 $2 = sp + 40 | 0; //@line 10260
 $3 = sp + 48 | 0; //@line 10261
 $4 = sp + 56 | 0; //@line 10262
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 10263
 $5 = $1; //@line 10264
 $6 = HEAP32[$5 >> 2] | 0; //@line 10265
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 10271
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 10273
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 10275
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 10276
 }
 $14 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 10279
 $18 = HEAP32[$6 + 8 >> 2] | 0; //@line 10283
 if (!((HEAP32[$6 + 12 >> 2] | 0) - $18 >> 2 >>> 0 > $14 >>> 0)) {
  $27 = ___cxa_allocate_exception(4) | 0; //@line 10290
  $28 = $27; //@line 10291
  __ZNSt8bad_castC2Ev($28); //@line 10292
  ___cxa_throw($27 | 0, 13672, 114); //@line 10293
 }
 $25 = HEAP32[$18 + ($14 << 2) >> 2] | 0; //@line 10297
 if (($25 | 0) == 0) {
  $27 = ___cxa_allocate_exception(4) | 0; //@line 10300
  $28 = $27; //@line 10301
  __ZNSt8bad_castC2Ev($28); //@line 10302
  ___cxa_throw($27 | 0, 13672, 114); //@line 10303
 }
 $29 = $25; //@line 10306
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$5 >> 2] | 0) | 0; //@line 10309
 HEAP32[$__err >> 2] = 0; //@line 10310
 $$phi$trans$insert$pre$pre = $__b; //@line 10312
 L10 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   label = 65; //@line 10315
  } else {
   $33 = $__e; //@line 10317
   $34 = $25; //@line 10318
   $36 = $25 + 8 | 0; //@line 10320
   $37 = $25; //@line 10321
   $38 = $this; //@line 10322
   $39 = $3; //@line 10323
   $40 = $4; //@line 10324
   $41 = $2; //@line 10325
   $$0$ph38 = $__fmtb; //@line 10326
   $$pre39 = 0; //@line 10326
   L12 : while (1) {
    $42 = $$pre39; //@line 10328
    while (1) {
     if (($42 | 0) != 0) {
      label = 65; //@line 10332
      break L10;
     }
     $44 = HEAP32[$$phi$trans$insert$pre$pre >> 2] | 0; //@line 10335
     do {
      if (($44 | 0) == 0) {
       $57 = 0; //@line 10339
      } else {
       if ((HEAP32[$44 + 12 >> 2] | 0) != (HEAP32[$44 + 16 >> 2] | 0)) {
        $57 = $44; //@line 10347
        break;
       }
       if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0) == -1)) {
        $57 = $44; //@line 10357
        break;
       }
       HEAP32[$$phi$trans$insert$pre$pre >> 2] = 0; //@line 10360
       $57 = 0; //@line 10361
      }
     } while (0);
     $58 = ($57 | 0) == 0; //@line 10364
     $59 = HEAP32[$33 >> 2] | 0; //@line 10365
     L22 : do {
      if (($59 | 0) == 0) {
       label = 19; //@line 10369
      } else {
       do {
        if ((HEAP32[$59 + 12 >> 2] | 0) == (HEAP32[$59 + 16 >> 2] | 0)) {
         if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0) == -1)) {
          break;
         }
         HEAP32[$33 >> 2] = 0; //@line 10387
         label = 19; //@line 10388
         break L22;
        }
       } while (0);
       if ($58) {
        $72 = $59; //@line 10393
       } else {
        label = 20; //@line 10395
        break L12;
       }
      }
     } while (0);
     if ((label | 0) == 19) {
      label = 0; //@line 10401
      if ($58) {
       label = 20; //@line 10403
       break L12;
      } else {
       $72 = 0; //@line 10406
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 31]($29, HEAP8[$$0$ph38] | 0, 0) | 0) << 24 >> 24 == 37) {
      label = 22; //@line 10416
      break;
     }
     $107 = HEAP8[$$0$ph38] | 0; //@line 10419
     if ($107 << 24 >> 24 > -1) {
      $109 = HEAP32[$36 >> 2] | 0; //@line 10423
      if (!((HEAP16[$109 + ($107 << 24 >> 24 << 1) >> 1] & 8192) == 0)) {
       $$0$pn = $$0$ph38; //@line 10429
       label = 33; //@line 10430
       break;
      }
     }
     $177 = $57 + 12 | 0; //@line 10434
     $178 = HEAP32[$177 >> 2] | 0; //@line 10435
     $179 = $57 + 16 | 0; //@line 10436
     if (($178 | 0) == (HEAP32[$179 >> 2] | 0)) {
      $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 127]($57) | 0; //@line 10445
     } else {
      $$0$i$i16 = HEAPU8[$178] | 0; //@line 10449
     }
     $193 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] & 31]($29, $$0$i$i16 & 255) | 0; //@line 10455
     if ($193 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] & 31]($29, HEAP8[$$0$ph38] | 0) | 0) << 24 >> 24) {
      label = 60; //@line 10463
      break;
     }
     HEAP32[$__err >> 2] = 4; //@line 10466
     $42 = 4; //@line 10467
    }
    L40 : do {
     if ((label | 0) == 22) {
      label = 0; //@line 10471
      $79 = $$0$ph38 + 1 | 0; //@line 10472
      if (($79 | 0) == ($__fmte | 0)) {
       label = 23; //@line 10475
       break L12;
      }
      $85 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 31]($29, HEAP8[$79] | 0, 0) | 0; //@line 10482
      if ($85 << 24 >> 24 == 48 | $85 << 24 >> 24 == 69) {
       $86 = $$0$ph38 + 2 | 0; //@line 10484
       if (($86 | 0) == ($__fmte | 0)) {
        label = 26; //@line 10487
        break L12;
       }
       $$1 = $86; //@line 10495
       $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 31]($29, HEAP8[$86] | 0, 0) | 0; //@line 10495
       $__opt$0 = $85; //@line 10495
      } else {
       $$1 = $79; //@line 10497
       $__cmd$0 = $85; //@line 10497
       $__opt$0 = 0; //@line 10497
      }
      $95 = HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] | 0; //@line 10501
      HEAP32[$39 >> 2] = $57; //@line 10502
      HEAP32[$40 >> 2] = $72; //@line 10503
      $97 = $$byval_copy; //@line 10505
      $98 = $3; //@line 10506
      HEAP32[$97 + 0 >> 2] = HEAP32[$98 + 0 >> 2]; //@line 10507
      $100 = $$byval_copy1; //@line 10509
      $101 = $4; //@line 10510
      HEAP32[$100 + 0 >> 2] = HEAP32[$101 + 0 >> 2]; //@line 10511
      FUNCTION_TABLE_viiiiiiiii[$95 & 7]($2, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0); //@line 10512
      HEAP32[$$phi$trans$insert$pre$pre >> 2] = HEAP32[$41 >> 2]; //@line 10516
      $$0$ph$be = $$1 + 1 | 0; //@line 10518
     } else if ((label | 0) == 33) {
      while (1) {
       label = 0; //@line 10522
       $$2 = $$0$pn + 1 | 0; //@line 10523
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte; //@line 10526
        break;
       }
       $115 = HEAP8[$$2] | 0; //@line 10529
       if (!($115 << 24 >> 24 > -1)) {
        $$2$lcssa = $$2; //@line 10532
        break;
       }
       if ((HEAP16[$109 + ($115 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        $$2$lcssa = $$2; //@line 10541
        break;
       } else {
        $$0$pn = $$2; //@line 10544
        label = 33; //@line 10545
       }
      }
      $$pre$i$i$i7 = $57; //@line 10548
      $$pre$i2$i$i11 = $72; //@line 10548
      $121 = $72; //@line 10548
      while (1) {
       do {
        if (($$pre$i$i$i7 | 0) == 0) {
         $134 = 0; //@line 10553
        } else {
         if ((HEAP32[$$pre$i$i$i7 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i7 + 16 >> 2] | 0)) {
          $134 = $$pre$i$i$i7; //@line 10561
          break;
         }
         if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i7 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i7) | 0) == -1)) {
          $134 = $$pre$i$i$i7; //@line 10571
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre >> 2] = 0; //@line 10574
         $134 = 0; //@line 10575
        }
       } while (0);
       $135 = ($134 | 0) == 0; //@line 10578
       do {
        if (($121 | 0) == 0) {
         $$pre$i2$i$i1141 = $$pre$i2$i$i11; //@line 10582
         label = 46; //@line 10583
        } else {
         if ((HEAP32[$121 + 12 >> 2] | 0) != (HEAP32[$121 + 16 >> 2] | 0)) {
          if ($135) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11; //@line 10592
           $149 = $121; //@line 10592
           break;
          } else {
           $$0$ph$be = $$2$lcssa; //@line 10595
           break L40;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 36 >> 2] & 127]($121) | 0) == -1) {
          HEAP32[$33 >> 2] = 0; //@line 10606
          $$pre$i2$i$i1141 = 0; //@line 10607
          label = 46; //@line 10608
          break;
         } else {
          if ($135 ^ ($$pre$i2$i$i11 | 0) == 0) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11; //@line 10614
           $149 = $$pre$i2$i$i11; //@line 10614
           break;
          } else {
           $$0$ph$be = $$2$lcssa; //@line 10617
           break L40;
          }
         }
        }
       } while (0);
       if ((label | 0) == 46) {
        label = 0; //@line 10624
        if ($135) {
         $$0$ph$be = $$2$lcssa; //@line 10626
         break L40;
        } else {
         $$pre$i2$i$i1140 = $$pre$i2$i$i1141; //@line 10629
         $149 = 0; //@line 10629
        }
       }
       $150 = $134 + 12 | 0; //@line 10632
       $151 = HEAP32[$150 >> 2] | 0; //@line 10633
       $152 = $134 + 16 | 0; //@line 10634
       if (($151 | 0) == (HEAP32[$152 >> 2] | 0)) {
        $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$134 >> 2] | 0) + 36 >> 2] & 127]($134) | 0; //@line 10643
       } else {
        $$0$i$i = HEAPU8[$151] | 0; //@line 10647
       }
       if (!(($$0$i$i & 255) << 24 >> 24 > -1)) {
        $$0$ph$be = $$2$lcssa; //@line 10652
        break L40;
       }
       if ((HEAP16[(HEAP32[$36 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        $$0$ph$be = $$2$lcssa; //@line 10663
        break L40;
       }
       $169 = HEAP32[$150 >> 2] | 0; //@line 10666
       if (($169 | 0) == (HEAP32[$152 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$134 >> 2] | 0) + 40 >> 2] & 127]($134) | 0; //@line 10674
        $$pre$i$i$i7 = $134; //@line 10675
        $$pre$i2$i$i11 = $$pre$i2$i$i1140; //@line 10675
        $121 = $149; //@line 10675
        continue;
       } else {
        HEAP32[$150 >> 2] = $169 + 1; //@line 10679
        $$pre$i$i$i7 = $134; //@line 10680
        $$pre$i2$i$i11 = $$pre$i2$i$i1140; //@line 10680
        $121 = $149; //@line 10680
        continue;
       }
      }
     } else if ((label | 0) == 60) {
      label = 0; //@line 10686
      $200 = HEAP32[$177 >> 2] | 0; //@line 10687
      if (($200 | 0) == (HEAP32[$179 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 40 >> 2] & 127]($57) | 0; //@line 10695
      } else {
       HEAP32[$177 >> 2] = $200 + 1; //@line 10698
      }
      $$0$ph$be = $$0$ph38 + 1 | 0; //@line 10701
     }
    } while (0);
    if (($$0$ph$be | 0) == ($__fmte | 0)) {
     label = 65; //@line 10706
     break L10;
    }
    $$0$ph38 = $$0$ph$be; //@line 10710
    $$pre39 = HEAP32[$__err >> 2] | 0; //@line 10710
   }
   if ((label | 0) == 20) {
    HEAP32[$__err >> 2] = 4; //@line 10713
    $$pre$i$i$i20 = $57; //@line 10714
    break;
   } else if ((label | 0) == 23) {
    HEAP32[$__err >> 2] = 4; //@line 10718
    $$pre$i$i$i20 = $57; //@line 10719
    break;
   } else if ((label | 0) == 26) {
    HEAP32[$__err >> 2] = 4; //@line 10723
    $$pre$i$i$i20 = $57; //@line 10724
    break;
   }
  }
 } while (0);
 if ((label | 0) == 65) {
  $$pre$i$i$i20 = HEAP32[$$phi$trans$insert$pre$pre >> 2] | 0; //@line 10731
 }
 $209 = $__b; //@line 10733
 do {
  if (($$pre$i$i$i20 | 0) == 0) {
   $222 = 0; //@line 10737
  } else {
   if ((HEAP32[$$pre$i$i$i20 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i20 + 16 >> 2] | 0)) {
    $222 = $$pre$i$i$i20; //@line 10745
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i20 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i20) | 0) == -1)) {
    $222 = $$pre$i$i$i20; //@line 10755
    break;
   }
   HEAP32[$209 >> 2] = 0; //@line 10758
   $222 = 0; //@line 10759
  }
 } while (0);
 $223 = ($222 | 0) == 0; //@line 10762
 $224 = $__e; //@line 10763
 $225 = HEAP32[$224 >> 2] | 0; //@line 10764
 L98 : do {
  if (($225 | 0) == 0) {
   label = 75; //@line 10768
  } else {
   do {
    if ((HEAP32[$225 + 12 >> 2] | 0) == (HEAP32[$225 + 16 >> 2] | 0)) {
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$225 >> 2] | 0) + 36 >> 2] & 127]($225) | 0) == -1)) {
      break;
     }
     HEAP32[$224 >> 2] = 0; //@line 10786
     label = 75; //@line 10787
     break L98;
    }
   } while (0);
   if (!$223) {
    break;
   }
   $240 = $agg$result; //@line 10794
   HEAP32[$240 >> 2] = $222; //@line 10795
   STACKTOP = sp; //@line 10796
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 75) {
   if ($223) {
    break;
   }
   $240 = $agg$result; //@line 10804
   HEAP32[$240 >> 2] = $222; //@line 10805
   STACKTOP = sp; //@line 10806
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10811
 $240 = $agg$result; //@line 10812
 HEAP32[$240 >> 2] = $222; //@line 10813
 STACKTOP = sp; //@line 10814
 return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $11 = 0, $111 = 0, $114 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $127 = 0, $13 = 0, $130 = 0, $135 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $174 = 0, $175 = 0, $177 = 0, $181 = 0, $2 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $62 = 0, $66 = 0, $7 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4806
 HEAP32[$__me >> 2] = $__mb; //@line 4807
 $1 = $__ct; //@line 4808
 $2 = $__sn; //@line 4809
 $3 = $__sn + 4 | 0; //@line 4810
 $4 = $__sn + 8 | 0; //@line 4811
 $5 = $__sym; //@line 4812
 $7 = ($__flags & 512 | 0) == 0; //@line 4814
 $8 = $__sym + 4 | 0; //@line 4815
 $9 = $__sym + 8 | 0; //@line 4816
 $10 = ($__fd | 0) > 0; //@line 4817
 $11 = $__grp; //@line 4818
 $13 = $__grp + 1 | 0; //@line 4820
 $14 = $__grp + 8 | 0; //@line 4821
 $15 = $__grp + 4 | 0; //@line 4822
 $16 = $__ct; //@line 4823
 $$059 = $__db; //@line 4824
 $__p$058 = 0; //@line 4824
 while (1) {
  L3 : do {
   switch (HEAP8[$__pat + $__p$058 | 0] | 0) {
   case 2:
    {
     $41 = HEAP8[$5] | 0; //@line 4832
     $43 = ($41 & 1) == 0; //@line 4834
     if ($43) {
      $47 = ($41 & 255) >>> 1; //@line 4838
     } else {
      $47 = HEAP32[$8 >> 2] | 0; //@line 4841
     }
     if (($47 | 0) == 0 | $7) {
      $$2 = $$059; //@line 4846
      break L3;
     }
     if ($43) {
      $53 = $8; //@line 4852
      $54 = ($41 & 255) >>> 1; //@line 4852
     } else {
      $53 = HEAP32[$9 >> 2] | 0; //@line 4856
      $54 = HEAP32[$8 >> 2] | 0; //@line 4856
     }
     $55 = $53 + ($54 << 2) | 0; //@line 4858
     $56 = HEAP32[$__me >> 2] | 0; //@line 4859
     if (($53 | 0) == ($55 | 0)) {
      $$0$lcssa$i$i22 = $56; //@line 4862
     } else {
      $59 = ($53 + ($54 + -1 << 2) + (0 - $53) | 0) >>> 2; //@line 4871
      $$01$i$i19 = $56; //@line 4872
      $60 = $53; //@line 4872
      while (1) {
       HEAP32[$$01$i$i19 >> 2] = HEAP32[$60 >> 2]; //@line 4875
       $62 = $60 + 4 | 0; //@line 4876
       if (($62 | 0) == ($55 | 0)) {
        break;
       }
       $$01$i$i19 = $$01$i$i19 + 4 | 0; //@line 4882
       $60 = $62; //@line 4882
      }
      $$0$lcssa$i$i22 = $56 + ($59 + 1 << 2) | 0; //@line 4886
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i22; //@line 4888
     $$2 = $$059; //@line 4889
     break;
    }
   case 3:
    {
     $28 = HEAP8[$2] | 0; //@line 4893
     $30 = ($28 & 1) == 0; //@line 4895
     if ($30) {
      $34 = ($28 & 255) >>> 1; //@line 4899
     } else {
      $34 = HEAP32[$3 >> 2] | 0; //@line 4902
     }
     if (($34 | 0) == 0) {
      $$2 = $$059; //@line 4906
      break L3;
     }
     if ($30) {
      $37 = $3; //@line 4910
     } else {
      $37 = HEAP32[$4 >> 2] | 0; //@line 4913
     }
     $38 = HEAP32[$37 >> 2] | 0; //@line 4915
     $39 = HEAP32[$__me >> 2] | 0; //@line 4916
     HEAP32[$__me >> 2] = $39 + 4; //@line 4918
     HEAP32[$39 >> 2] = $38; //@line 4919
     $$2 = $$059; //@line 4920
     break;
    }
   case 1:
    {
     HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 4925
     $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] & 31]($__ct, 32) | 0; //@line 4929
     $26 = HEAP32[$__me >> 2] | 0; //@line 4930
     HEAP32[$__me >> 2] = $26 + 4; //@line 4932
     HEAP32[$26 >> 2] = $25; //@line 4933
     $$2 = $$059; //@line 4934
     break;
    }
   case 0:
    {
     HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 4939
     $$2 = $$059; //@line 4940
     break;
    }
   case 4:
    {
     $66 = HEAP32[$__me >> 2] | 0; //@line 4944
     $$$0 = $__neg ? $$059 + 4 | 0 : $$059; //@line 4946
     L33 : do {
      if ($$$0 >>> 0 < $__de >>> 0) {
       $__d$034 = $$$0; //@line 4950
       while (1) {
        $75 = $__d$034 + 4 | 0; //@line 4957
        if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$16 >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$034 >> 2] | 0) | 0)) {
         $__d$0$lcssa = $__d$034; //@line 4959
         break L33;
        }
        if ($75 >>> 0 < $__de >>> 0) {
         $__d$034 = $75; //@line 4964
        } else {
         $__d$0$lcssa = $75; //@line 4966
         break;
        }
       }
      } else {
       $__d$0$lcssa = $$$0; //@line 4971
      }
     } while (0);
     if ($10) {
      do {
       if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
        $77 = HEAP32[$__me >> 2] | 0; //@line 4979
        $__d$137 = $__d$0$lcssa; //@line 4979
        $__f$038 = $__fd; //@line 4979
        while (1) {
         $78 = $__d$137 + -4 | 0; //@line 4981
         $80 = $77 + 4 | 0; //@line 4983
         HEAP32[$77 >> 2] = HEAP32[$78 >> 2]; //@line 4984
         $81 = $__f$038 + -1 | 0; //@line 4985
         $83 = ($81 | 0) > 0; //@line 4987
         if ($78 >>> 0 > $$$0 >>> 0 & $83) {
          $__f$038 = $81; //@line 4990
          $__d$137 = $78; //@line 4990
          $77 = $80; //@line 4990
         } else {
          break;
         }
        }
        HEAP32[$__me >> 2] = $80; //@line 4995
        if ($83) {
         $__d$1$lcssa79 = $78; //@line 4997
         $__f$0$lcssa77 = $81; //@line 4997
         label = 34; //@line 4998
         break;
        }
        $84 = HEAP32[$__me >> 2] | 0; //@line 5001
        HEAP32[$__me >> 2] = $84 + 4; //@line 5003
        $$lcssa44 = $84; //@line 5004
        $__d$1$lcssa7880 = $78; //@line 5004
       } else {
        $__d$1$lcssa79 = $__d$0$lcssa; //@line 5006
        $__f$0$lcssa77 = $__fd; //@line 5006
        label = 34; //@line 5007
       }
      } while (0);
      do {
       if ((label | 0) == 34) {
        label = 0; //@line 5012
        $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0; //@line 5016
        $91 = HEAP32[$__me >> 2] | 0; //@line 5018
        $92 = $91 + 4 | 0; //@line 5019
        HEAP32[$__me >> 2] = $92; //@line 5020
        if (($__f$0$lcssa77 | 0) > 0) {
         $93 = $92; //@line 5022
         $94 = $91; //@line 5022
         $__f$145 = $__f$0$lcssa77; //@line 5022
        } else {
         $$lcssa44 = $91; //@line 5024
         $__d$1$lcssa7880 = $__d$1$lcssa79; //@line 5024
         break;
        }
        while (1) {
         HEAP32[$94 >> 2] = $89; //@line 5028
         $95 = $__f$145 + -1 | 0; //@line 5029
         if (($95 | 0) > 0) {
          $__f$145 = $95; //@line 5033
          $94 = $93; //@line 5033
          $93 = $93 + 4 | 0; //@line 5033
         } else {
          break;
         }
        }
        HEAP32[$__me >> 2] = $91 + ($__f$0$lcssa77 + 1 << 2); //@line 5041
        $$lcssa44 = $91 + ($__f$0$lcssa77 << 2) | 0; //@line 5042
        $__d$1$lcssa7880 = $__d$1$lcssa79; //@line 5042
       }
      } while (0);
      HEAP32[$$lcssa44 >> 2] = $__dp; //@line 5045
      $__d$2 = $__d$1$lcssa7880; //@line 5046
     } else {
      $__d$2 = $__d$0$lcssa; //@line 5048
     }
     if (($__d$2 | 0) == ($$$0 | 0)) {
      $102 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0; //@line 5055
      $103 = HEAP32[$__me >> 2] | 0; //@line 5056
      $104 = $103 + 4 | 0; //@line 5057
      HEAP32[$__me >> 2] = $104; //@line 5058
      HEAP32[$103 >> 2] = $102; //@line 5059
      $145 = $104; //@line 5060
     } else {
      $105 = HEAP8[$11] | 0; //@line 5062
      $107 = ($105 & 1) == 0; //@line 5064
      if ($107) {
       $111 = ($105 & 255) >>> 1; //@line 5068
      } else {
       $111 = HEAP32[$15 >> 2] | 0; //@line 5071
      }
      if (($111 | 0) == 0) {
       $__d$353 = $__d$2; //@line 5075
       $__gl$056 = -1; //@line 5075
       $__ig$055 = 0; //@line 5075
       $__ng$054 = 0; //@line 5075
      } else {
       if ($107) {
        $114 = $13; //@line 5078
       } else {
        $114 = HEAP32[$14 >> 2] | 0; //@line 5081
       }
       $__d$353 = $__d$2; //@line 5085
       $__gl$056 = HEAP8[$114] | 0; //@line 5085
       $__ig$055 = 0; //@line 5085
       $__ng$054 = 0; //@line 5085
      }
      while (1) {
       $118 = HEAP32[$__me >> 2] | 0; //@line 5089
       do {
        if (($__ng$054 | 0) == ($__gl$056 | 0)) {
         $119 = $118 + 4 | 0; //@line 5092
         HEAP32[$__me >> 2] = $119; //@line 5093
         HEAP32[$118 >> 2] = $__ts; //@line 5094
         $120 = $__ig$055 + 1 | 0; //@line 5095
         $121 = HEAP8[$11] | 0; //@line 5096
         $123 = ($121 & 1) == 0; //@line 5098
         if ($123) {
          $127 = ($121 & 255) >>> 1; //@line 5102
         } else {
          $127 = HEAP32[$15 >> 2] | 0; //@line 5105
         }
         if (!($120 >>> 0 < $127 >>> 0)) {
          $139 = $119; //@line 5109
          $__gl$1 = $__gl$056; //@line 5109
          $__ig$1 = $120; //@line 5109
          $__ng$1 = 0; //@line 5109
          break;
         }
         if ($123) {
          $130 = $13; //@line 5113
         } else {
          $130 = HEAP32[$14 >> 2] | 0; //@line 5116
         }
         if ((HEAP8[$130 + $120 | 0] | 0) == 127) {
          $139 = $119; //@line 5122
          $__gl$1 = -1; //@line 5122
          $__ig$1 = $120; //@line 5122
          $__ng$1 = 0; //@line 5122
          break;
         }
         if ($123) {
          $135 = $13; //@line 5126
         } else {
          $135 = HEAP32[$14 >> 2] | 0; //@line 5129
         }
         $139 = $119; //@line 5134
         $__gl$1 = HEAP8[$135 + $120 | 0] | 0; //@line 5134
         $__ig$1 = $120; //@line 5134
         $__ng$1 = 0; //@line 5134
        } else {
         $139 = $118; //@line 5136
         $__gl$1 = $__gl$056; //@line 5136
         $__ig$1 = $__ig$055; //@line 5136
         $__ng$1 = $__ng$054; //@line 5136
        }
       } while (0);
       $140 = $__d$353 + -4 | 0; //@line 5139
       $141 = HEAP32[$140 >> 2] | 0; //@line 5140
       $142 = $139 + 4 | 0; //@line 5141
       HEAP32[$__me >> 2] = $142; //@line 5142
       HEAP32[$139 >> 2] = $141; //@line 5143
       if (($140 | 0) == ($$$0 | 0)) {
        $145 = $142; //@line 5147
        break;
       } else {
        $__d$353 = $140; //@line 5150
        $__gl$056 = $__gl$1; //@line 5150
        $__ig$055 = $__ig$1; //@line 5150
        $__ng$054 = $__ng$1 + 1 | 0; //@line 5150
       }
      }
     }
     if (($66 | 0) == ($145 | 0)) {
      $$2 = $$$0; //@line 5156
      break L3;
     }
     $147 = $145 + -4 | 0; //@line 5159
     if ($147 >>> 0 > $66 >>> 0) {
      $$012$i$i = $66; //@line 5162
      $149 = $147; //@line 5162
     } else {
      $$2 = $$$0; //@line 5164
      break L3;
     }
     while (1) {
      $150 = HEAP32[$$012$i$i >> 2] | 0; //@line 5168
      HEAP32[$$012$i$i >> 2] = HEAP32[$149 >> 2]; //@line 5170
      HEAP32[$149 >> 2] = $150; //@line 5171
      $152 = $$012$i$i + 4 | 0; //@line 5172
      $153 = $149 + -4 | 0; //@line 5173
      if ($152 >>> 0 < $153 >>> 0) {
       $149 = $153; //@line 5176
       $$012$i$i = $152; //@line 5176
      } else {
       $$2 = $$$0; //@line 5178
       break;
      }
     }
     break;
    }
   default:
    {
     $$2 = $$059; //@line 5185
    }
   }
  } while (0);
  $155 = $__p$058 + 1 | 0; //@line 5189
  if (($155 | 0) == 4) {
   break;
  } else {
   $$059 = $$2; //@line 5194
   $__p$058 = $155; //@line 5194
  }
 }
 $156 = HEAP8[$2] | 0; //@line 5197
 $158 = ($156 & 1) == 0; //@line 5199
 if ($158) {
  $162 = ($156 & 255) >>> 1; //@line 5203
 } else {
  $162 = HEAP32[$3 >> 2] | 0; //@line 5206
 }
 if ($162 >>> 0 > 1) {
  if ($158) {
   $$pn = $3; //@line 5213
   $168 = ($156 & 255) >>> 1; //@line 5213
  } else {
   $$pn = HEAP32[$4 >> 2] | 0; //@line 5217
   $168 = HEAP32[$3 >> 2] | 0; //@line 5217
  }
  $169 = $$pn + 4 | 0; //@line 5219
  $170 = $$pn + ($168 << 2) | 0; //@line 5220
  $171 = HEAP32[$__me >> 2] | 0; //@line 5221
  if (($169 | 0) == ($170 | 0)) {
   $$0$lcssa$i$i = $171; //@line 5224
  } else {
   $174 = ($$pn + ($168 + -1 << 2) + (0 - $169) | 0) >>> 2; //@line 5233
   $$01$i$i = $171; //@line 5234
   $175 = $169; //@line 5234
   while (1) {
    HEAP32[$$01$i$i >> 2] = HEAP32[$175 >> 2]; //@line 5237
    $177 = $175 + 4 | 0; //@line 5238
    if (($177 | 0) == ($170 | 0)) {
     break;
    } else {
     $175 = $177; //@line 5244
     $$01$i$i = $$01$i$i + 4 | 0; //@line 5244
    }
   }
   $$0$lcssa$i$i = $171 + ($174 + 1 << 2) | 0; //@line 5249
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i; //@line 5251
 }
 $181 = $__flags & 176; //@line 5253
 if (($181 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 5256
  STACKTOP = sp; //@line 5257
  return;
 } else if (($181 | 0) == 16) {
  STACKTOP = sp; //@line 5259
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb; //@line 5261
  STACKTOP = sp; //@line 5262
  return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $1 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $116 = 0, $119 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $14 = 0, $140 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $152 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $17 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $72 = 0, $79 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $scevgep59 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3357
 HEAP32[$__me >> 2] = $__mb; //@line 3358
 $1 = $__ct; //@line 3359
 $2 = $__sn; //@line 3360
 $4 = $__sn + 1 | 0; //@line 3362
 $5 = $__sn + 8 | 0; //@line 3363
 $6 = $__sn + 4 | 0; //@line 3364
 $7 = $__sym; //@line 3365
 $9 = ($__flags & 512 | 0) == 0; //@line 3367
 $11 = $__sym + 1 | 0; //@line 3369
 $12 = $__sym + 8 | 0; //@line 3370
 $13 = $__sym + 4 | 0; //@line 3371
 $14 = ($__fd | 0) > 0; //@line 3372
 $15 = $__grp; //@line 3373
 $17 = $__grp + 1 | 0; //@line 3375
 $18 = $__grp + 8 | 0; //@line 3376
 $19 = $__grp + 4 | 0; //@line 3377
 $20 = $__ct + 8 | 0; //@line 3378
 $21 = 0 - $__fd | 0; //@line 3379
 $$050 = $__db; //@line 3380
 $__p$049 = 0; //@line 3380
 while (1) {
  L3 : do {
   switch (HEAP8[$__pat + $__p$049 | 0] | 0) {
   case 3:
    {
     $33 = HEAP8[$2] | 0; //@line 3388
     $35 = ($33 & 1) == 0; //@line 3390
     if ($35) {
      $39 = ($33 & 255) >>> 1; //@line 3394
     } else {
      $39 = HEAP32[$6 >> 2] | 0; //@line 3397
     }
     if (($39 | 0) == 0) {
      $$2 = $$050; //@line 3401
      break L3;
     }
     if ($35) {
      $42 = $4; //@line 3405
     } else {
      $42 = HEAP32[$5 >> 2] | 0; //@line 3408
     }
     $43 = HEAP8[$42] | 0; //@line 3410
     $44 = HEAP32[$__me >> 2] | 0; //@line 3411
     HEAP32[$__me >> 2] = $44 + 1; //@line 3413
     HEAP8[$44] = $43; //@line 3414
     $$2 = $$050; //@line 3415
     break;
    }
   case 1:
    {
     HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3420
     $30 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($__ct, 32) | 0; //@line 3424
     $31 = HEAP32[$__me >> 2] | 0; //@line 3425
     HEAP32[$__me >> 2] = $31 + 1; //@line 3427
     HEAP8[$31] = $30; //@line 3428
     $$2 = $$050; //@line 3429
     break;
    }
   case 4:
    {
     $68 = HEAP32[$__me >> 2] | 0; //@line 3433
     $$$0 = $__neg ? $$050 + 1 | 0 : $$050; //@line 3435
     L15 : do {
      if ($$$0 >>> 0 < $__de >>> 0) {
       $__d$029 = $$$0; //@line 3439
       while (1) {
        $72 = HEAP8[$__d$029] | 0; //@line 3441
        if (!($72 << 24 >> 24 > -1)) {
         $__d$0$lcssa = $__d$029; //@line 3444
         break L15;
        }
        $79 = $__d$029 + 1 | 0; //@line 3453
        if ((HEAP16[(HEAP32[$20 >> 2] | 0) + ($72 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
         $__d$0$lcssa = $__d$029; //@line 3455
         break L15;
        }
        if ($79 >>> 0 < $__de >>> 0) {
         $__d$029 = $79; //@line 3460
        } else {
         $__d$0$lcssa = $79; //@line 3462
         break;
        }
       }
      } else {
       $__d$0$lcssa = $$$0; //@line 3467
      }
     } while (0);
     $__d$0$lcssa58 = $__d$0$lcssa; //@line 3470
     if ($14) {
      if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
       $scevgep59 = $$$0 + (0 - $__d$0$lcssa58) | 0; //@line 3476
       $umax = $scevgep59 >>> 0 < $21 >>> 0 ? $21 : $scevgep59; //@line 3478
       $scevgep6162 = $umax + $__fd | 0; //@line 3481
       $83 = $68; //@line 3482
       $__d$132 = $__d$0$lcssa; //@line 3482
       $__f$033 = $__fd; //@line 3482
       while (1) {
        $84 = $__d$132 + -1 | 0; //@line 3484
        $85 = HEAP8[$84] | 0; //@line 3485
        HEAP32[$__me >> 2] = $83 + 1; //@line 3487
        HEAP8[$83] = $85; //@line 3488
        $87 = $__f$033 + -1 | 0; //@line 3489
        $89 = ($87 | 0) > 0; //@line 3491
        if (!($84 >>> 0 > $$$0 >>> 0 & $89)) {
         break;
        }
        $83 = HEAP32[$__me >> 2] | 0; //@line 3497
        $__f$033 = $87; //@line 3497
        $__d$132 = $84; //@line 3497
       }
       $scevgep63 = $__d$0$lcssa + $umax | 0; //@line 3499
       if ($89) {
        $__d$1$lcssa74 = $scevgep63; //@line 3501
        $__f$0$lcssa72 = $scevgep6162; //@line 3501
        label = 32; //@line 3502
       } else {
        $94 = 0; //@line 3504
        $__d$1$lcssa73 = $scevgep63; //@line 3504
        $__f$0$lcssa71 = $scevgep6162; //@line 3504
       }
      } else {
       $__d$1$lcssa74 = $__d$0$lcssa; //@line 3507
       $__f$0$lcssa72 = $__fd; //@line 3507
       label = 32; //@line 3508
      }
      if ((label | 0) == 32) {
       label = 0; //@line 3511
       $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0; //@line 3516
       $__d$1$lcssa73 = $__d$1$lcssa74; //@line 3516
       $__f$0$lcssa71 = $__f$0$lcssa72; //@line 3516
      }
      $96 = HEAP32[$__me >> 2] | 0; //@line 3519
      HEAP32[$__me >> 2] = $96 + 1; //@line 3521
      if (($__f$0$lcssa71 | 0) > 0) {
       $98 = $96; //@line 3523
       $__f$139 = $__f$0$lcssa71; //@line 3523
       while (1) {
        HEAP8[$98] = $94; //@line 3525
        $99 = $__f$139 + -1 | 0; //@line 3526
        $101 = HEAP32[$__me >> 2] | 0; //@line 3528
        HEAP32[$__me >> 2] = $101 + 1; //@line 3530
        if (($99 | 0) > 0) {
         $__f$139 = $99; //@line 3532
         $98 = $101; //@line 3532
        } else {
         $$lcssa38 = $101; //@line 3534
         break;
        }
       }
      } else {
       $$lcssa38 = $96; //@line 3539
      }
      HEAP8[$$lcssa38] = $__dp; //@line 3541
      $__d$2 = $__d$1$lcssa73; //@line 3542
     } else {
      $__d$2 = $__d$0$lcssa; //@line 3544
     }
     if (($__d$2 | 0) == ($$$0 | 0)) {
      $107 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0; //@line 3551
      $108 = HEAP32[$__me >> 2] | 0; //@line 3552
      HEAP32[$__me >> 2] = $108 + 1; //@line 3554
      HEAP8[$108] = $107; //@line 3555
     } else {
      $110 = HEAP8[$15] | 0; //@line 3557
      $112 = ($110 & 1) == 0; //@line 3559
      if ($112) {
       $116 = ($110 & 255) >>> 1; //@line 3563
      } else {
       $116 = HEAP32[$19 >> 2] | 0; //@line 3566
      }
      if (($116 | 0) == 0) {
       $__d$343 = $__d$2; //@line 3570
       $__gl$046 = -1; //@line 3570
       $__ig$045 = 0; //@line 3570
       $__ng$044 = 0; //@line 3570
      } else {
       if ($112) {
        $119 = $17; //@line 3573
       } else {
        $119 = HEAP32[$18 >> 2] | 0; //@line 3576
       }
       $__d$343 = $__d$2; //@line 3580
       $__gl$046 = HEAP8[$119] | 0; //@line 3580
       $__ig$045 = 0; //@line 3580
       $__ng$044 = 0; //@line 3580
      }
      while (1) {
       do {
        if (($__ng$044 | 0) == ($__gl$046 | 0)) {
         $123 = HEAP32[$__me >> 2] | 0; //@line 3586
         HEAP32[$__me >> 2] = $123 + 1; //@line 3588
         HEAP8[$123] = $__ts; //@line 3589
         $125 = $__ig$045 + 1 | 0; //@line 3590
         $126 = HEAP8[$15] | 0; //@line 3591
         $128 = ($126 & 1) == 0; //@line 3593
         if ($128) {
          $132 = ($126 & 255) >>> 1; //@line 3597
         } else {
          $132 = HEAP32[$19 >> 2] | 0; //@line 3600
         }
         if (!($125 >>> 0 < $132 >>> 0)) {
          $__gl$1 = $__gl$046; //@line 3604
          $__ig$1 = $125; //@line 3604
          $__ng$1 = 0; //@line 3604
          break;
         }
         if ($128) {
          $135 = $17; //@line 3608
         } else {
          $135 = HEAP32[$18 >> 2] | 0; //@line 3611
         }
         if ((HEAP8[$135 + $125 | 0] | 0) == 127) {
          $__gl$1 = -1; //@line 3617
          $__ig$1 = $125; //@line 3617
          $__ng$1 = 0; //@line 3617
          break;
         }
         if ($128) {
          $140 = $17; //@line 3621
         } else {
          $140 = HEAP32[$18 >> 2] | 0; //@line 3624
         }
         $__gl$1 = HEAP8[$140 + $125 | 0] | 0; //@line 3629
         $__ig$1 = $125; //@line 3629
         $__ng$1 = 0; //@line 3629
        } else {
         $__gl$1 = $__gl$046; //@line 3631
         $__ig$1 = $__ig$045; //@line 3631
         $__ng$1 = $__ng$044; //@line 3631
        }
       } while (0);
       $144 = $__d$343 + -1 | 0; //@line 3634
       $145 = HEAP8[$144] | 0; //@line 3635
       $146 = HEAP32[$__me >> 2] | 0; //@line 3636
       HEAP32[$__me >> 2] = $146 + 1; //@line 3638
       HEAP8[$146] = $145; //@line 3639
       if (($144 | 0) == ($$$0 | 0)) {
        break;
       } else {
        $__d$343 = $144; //@line 3645
        $__gl$046 = $__gl$1; //@line 3645
        $__ig$045 = $__ig$1; //@line 3645
        $__ng$044 = $__ng$1 + 1 | 0; //@line 3645
       }
      }
     }
     $150 = HEAP32[$__me >> 2] | 0; //@line 3649
     if (($68 | 0) == ($150 | 0)) {
      $$2 = $$$0; //@line 3652
      break L3;
     }
     $152 = $150 + -1 | 0; //@line 3655
     if ($152 >>> 0 > $68 >>> 0) {
      $$012$i$i = $68; //@line 3658
      $154 = $152; //@line 3658
     } else {
      $$2 = $$$0; //@line 3660
      break L3;
     }
     while (1) {
      $155 = HEAP8[$$012$i$i] | 0; //@line 3664
      HEAP8[$$012$i$i] = HEAP8[$154] | 0; //@line 3666
      HEAP8[$154] = $155; //@line 3667
      $157 = $$012$i$i + 1 | 0; //@line 3668
      $158 = $154 + -1 | 0; //@line 3669
      if ($157 >>> 0 < $158 >>> 0) {
       $154 = $158; //@line 3672
       $$012$i$i = $157; //@line 3672
      } else {
       $$2 = $$$0; //@line 3674
       break;
      }
     }
     break;
    }
   case 2:
    {
     $46 = HEAP8[$7] | 0; //@line 3681
     $48 = ($46 & 1) == 0; //@line 3683
     if ($48) {
      $52 = ($46 & 255) >>> 1; //@line 3687
     } else {
      $52 = HEAP32[$13 >> 2] | 0; //@line 3690
     }
     if (($52 | 0) == 0 | $9) {
      $$2 = $$050; //@line 3695
      break L3;
     }
     if ($48) {
      $58 = $11; //@line 3701
      $59 = ($46 & 255) >>> 1; //@line 3701
     } else {
      $58 = HEAP32[$12 >> 2] | 0; //@line 3705
      $59 = HEAP32[$13 >> 2] | 0; //@line 3705
     }
     $60 = $58 + $59 | 0; //@line 3707
     $61 = HEAP32[$__me >> 2] | 0; //@line 3708
     if (($58 | 0) == ($60 | 0)) {
      $$0$lcssa$i$i17 = $61; //@line 3711
     } else {
      $$01$i$i15 = $61; //@line 3713
      $63 = $58; //@line 3713
      while (1) {
       HEAP8[$$01$i$i15] = HEAP8[$63] | 0; //@line 3716
       $65 = $63 + 1 | 0; //@line 3717
       $66 = $$01$i$i15 + 1 | 0; //@line 3718
       if (($65 | 0) == ($60 | 0)) {
        $$0$lcssa$i$i17 = $66; //@line 3721
        break;
       } else {
        $63 = $65; //@line 3724
        $$01$i$i15 = $66; //@line 3724
       }
      }
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i17; //@line 3728
     $$2 = $$050; //@line 3729
     break;
    }
   case 0:
    {
     HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3734
     $$2 = $$050; //@line 3735
     break;
    }
   default:
    {
     $$2 = $$050; //@line 3739
    }
   }
  } while (0);
  $160 = $__p$049 + 1 | 0; //@line 3743
  if (($160 | 0) == 4) {
   break;
  } else {
   $$050 = $$2; //@line 3748
   $__p$049 = $160; //@line 3748
  }
 }
 $161 = HEAP8[$2] | 0; //@line 3751
 $163 = ($161 & 1) == 0; //@line 3753
 if ($163) {
  $167 = ($161 & 255) >>> 1; //@line 3757
 } else {
  $167 = HEAP32[$6 >> 2] | 0; //@line 3760
 }
 if ($167 >>> 0 > 1) {
  if ($163) {
   $$pn = $4; //@line 3767
   $173 = ($161 & 255) >>> 1; //@line 3767
  } else {
   $$pn = HEAP32[$5 >> 2] | 0; //@line 3771
   $173 = HEAP32[$6 >> 2] | 0; //@line 3771
  }
  $174 = $$pn + 1 | 0; //@line 3773
  $175 = $$pn + $173 | 0; //@line 3774
  $176 = HEAP32[$__me >> 2] | 0; //@line 3775
  if (($174 | 0) == ($175 | 0)) {
   $$0$lcssa$i$i = $176; //@line 3778
  } else {
   $$01$i$i = $176; //@line 3780
   $178 = $174; //@line 3780
   while (1) {
    HEAP8[$$01$i$i] = HEAP8[$178] | 0; //@line 3783
    $180 = $178 + 1 | 0; //@line 3784
    $181 = $$01$i$i + 1 | 0; //@line 3785
    if (($180 | 0) == ($175 | 0)) {
     $$0$lcssa$i$i = $181; //@line 3788
     break;
    } else {
     $178 = $180; //@line 3791
     $$01$i$i = $181; //@line 3791
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i; //@line 3795
 }
 $183 = $__flags & 176; //@line 3797
 if (($183 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3800
  STACKTOP = sp; //@line 3801
  return;
 } else if (($183 | 0) == 16) {
  STACKTOP = sp; //@line 3803
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb; //@line 3805
  STACKTOP = sp; //@line 3806
  return;
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $10 = 0, $102 = 0, $11 = 0, $111 = 0, $12 = 0, $124 = 0, $128 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $150 = 0, $159 = 0, $162 = 0, $163 = 0, $168 = 0, $177 = 0, $178 = 0, $187 = 0, $191 = 0, $2 = 0, $200 = 0, $204 = 0, $213 = 0, $22 = 0, $26 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $5 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $66 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $85 = 0, $89 = 0, $9 = 0, $98 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, sp = 0;
 sp = STACKTOP; //@line 2943
 STACKTOP = STACKTOP + 40 | 0; //@line 2944
 $__p$i$i$i$i10 = sp; //@line 2945
 $__p$i$i$i$i = sp + 16 | 0; //@line 2946
 $1 = sp + 32 | 0; //@line 2947
 $tmpcast3 = $1; //@line 2948
 $2 = STACKTOP; //@line 2949
 STACKTOP = STACKTOP + 16 | 0; //@line 2949
 $3 = STACKTOP; //@line 2950
 STACKTOP = STACKTOP + 8 | 0; //@line 2950
 $tmpcast2 = $3; //@line 2951
 $4 = STACKTOP; //@line 2952
 STACKTOP = STACKTOP + 16 | 0; //@line 2952
 $5 = STACKTOP; //@line 2953
 STACKTOP = STACKTOP + 16 | 0; //@line 2953
 $6 = STACKTOP; //@line 2954
 STACKTOP = STACKTOP + 16 | 0; //@line 2954
 $7 = STACKTOP; //@line 2955
 STACKTOP = STACKTOP + 8 | 0; //@line 2955
 $tmpcast1 = $7; //@line 2956
 $8 = STACKTOP; //@line 2957
 STACKTOP = STACKTOP + 16 | 0; //@line 2957
 $9 = STACKTOP; //@line 2958
 STACKTOP = STACKTOP + 8 | 0; //@line 2958
 $tmpcast = $9; //@line 2959
 $10 = STACKTOP; //@line 2960
 STACKTOP = STACKTOP + 16 | 0; //@line 2960
 $11 = STACKTOP; //@line 2961
 STACKTOP = STACKTOP + 16 | 0; //@line 2961
 $12 = STACKTOP; //@line 2962
 STACKTOP = STACKTOP + 16 | 0; //@line 2962
 $14 = HEAP32[$__loc >> 2] | 0; //@line 2964
 if ($__intl) {
  if (!((HEAP32[1288] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i >> 2] = 5152; //@line 2971
   HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 2973
   HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 2975
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i, 126); //@line 2976
  }
  $22 = (HEAP32[5156 >> 2] | 0) + -1 | 0; //@line 2979
  $26 = HEAP32[$14 + 8 >> 2] | 0; //@line 2983
  if (!((HEAP32[$14 + 12 >> 2] | 0) - $26 >> 2 >>> 0 > $22 >>> 0)) {
   $35 = ___cxa_allocate_exception(4) | 0; //@line 2990
   $36 = $35; //@line 2991
   __ZNSt8bad_castC2Ev($36); //@line 2992
   ___cxa_throw($35 | 0, 13672, 114); //@line 2993
  }
  $33 = HEAP32[$26 + ($22 << 2) >> 2] | 0; //@line 2997
  if (($33 | 0) == 0) {
   $35 = ___cxa_allocate_exception(4) | 0; //@line 3000
   $36 = $35; //@line 3001
   __ZNSt8bad_castC2Ev($36); //@line 3002
   ___cxa_throw($35 | 0, 13672, 114); //@line 3003
  }
  $37 = $33; //@line 3006
  $39 = HEAP32[$33 >> 2] | 0; //@line 3008
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$39 + 44 >> 2] & 63]($tmpcast3, $37); //@line 3012
   $42 = $__pat; //@line 3013
   $43 = HEAP32[$1 >> 2] | 0; //@line 3014
   HEAP8[$42] = $43; //@line 3015
   HEAP8[$42 + 1 | 0] = $43 >> 8; //@line 3015
   HEAP8[$42 + 2 | 0] = $43 >> 16; //@line 3015
   HEAP8[$42 + 3 | 0] = $43 >> 24; //@line 3015
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 32 >> 2] & 63]($2, $37); //@line 3020
   $48 = $__sn; //@line 3021
   if ((HEAP8[$48] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0; //@line 3028
    HEAP8[$48] = 0; //@line 3029
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] | 0] = 0; //@line 3033
    HEAP32[$__sn + 4 >> 2] = 0; //@line 3035
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 3037
   $57 = $2; //@line 3038
   HEAP32[$48 + 0 >> 2] = HEAP32[$57 + 0 >> 2]; //@line 3039
   HEAP32[$48 + 4 >> 2] = HEAP32[$57 + 4 >> 2]; //@line 3039
   HEAP32[$48 + 8 >> 2] = HEAP32[$57 + 8 >> 2]; //@line 3039
   HEAP32[$57 + 0 >> 2] = 0; //@line 3040
   HEAP32[$57 + 4 >> 2] = 0; //@line 3040
   HEAP32[$57 + 8 >> 2] = 0; //@line 3040
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2); //@line 3041
  } else {
   FUNCTION_TABLE_vii[HEAP32[$39 + 40 >> 2] & 63]($tmpcast2, $37); //@line 3045
   $60 = $__pat; //@line 3046
   $61 = HEAP32[$3 >> 2] | 0; //@line 3047
   HEAP8[$60] = $61; //@line 3048
   HEAP8[$60 + 1 | 0] = $61 >> 8; //@line 3048
   HEAP8[$60 + 2 | 0] = $61 >> 16; //@line 3048
   HEAP8[$60 + 3 | 0] = $61 >> 24; //@line 3048
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 28 >> 2] & 63]($4, $37); //@line 3053
   $66 = $__sn; //@line 3054
   if ((HEAP8[$66] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0; //@line 3061
    HEAP8[$66] = 0; //@line 3062
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] | 0] = 0; //@line 3066
    HEAP32[$__sn + 4 >> 2] = 0; //@line 3068
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 3070
   $75 = $4; //@line 3071
   HEAP32[$66 + 0 >> 2] = HEAP32[$75 + 0 >> 2]; //@line 3072
   HEAP32[$66 + 4 >> 2] = HEAP32[$75 + 4 >> 2]; //@line 3072
   HEAP32[$66 + 8 >> 2] = HEAP32[$75 + 8 >> 2]; //@line 3072
   HEAP32[$75 + 0 >> 2] = 0; //@line 3073
   HEAP32[$75 + 4 >> 2] = 0; //@line 3073
   HEAP32[$75 + 8 >> 2] = 0; //@line 3073
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4); //@line 3074
  }
  $76 = $33; //@line 3076
  HEAP8[$__dp] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 12 >> 2] & 127]($37) | 0; //@line 3081
  HEAP8[$__ts] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 16 >> 2] & 127]($37) | 0; //@line 3086
  $85 = $33; //@line 3087
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] & 63]($5, $37); //@line 3091
  $89 = $__grp; //@line 3092
  if ((HEAP8[$89] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 3099
   HEAP8[$89] = 0; //@line 3100
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 3104
   HEAP32[$__grp + 4 >> 2] = 0; //@line 3106
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 3108
  $98 = $5; //@line 3109
  HEAP32[$89 + 0 >> 2] = HEAP32[$98 + 0 >> 2]; //@line 3110
  HEAP32[$89 + 4 >> 2] = HEAP32[$98 + 4 >> 2]; //@line 3110
  HEAP32[$89 + 8 >> 2] = HEAP32[$98 + 8 >> 2]; //@line 3110
  HEAP32[$98 + 0 >> 2] = 0; //@line 3111
  HEAP32[$98 + 4 >> 2] = 0; //@line 3111
  HEAP32[$98 + 8 >> 2] = 0; //@line 3111
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5); //@line 3112
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 24 >> 2] & 63]($6, $37); //@line 3116
  $102 = $__sym; //@line 3117
  if ((HEAP8[$102] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0; //@line 3124
   HEAP8[$102] = 0; //@line 3125
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] | 0] = 0; //@line 3129
   HEAP32[$__sym + 4 >> 2] = 0; //@line 3131
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 3133
  $111 = $6; //@line 3134
  HEAP32[$102 + 0 >> 2] = HEAP32[$111 + 0 >> 2]; //@line 3135
  HEAP32[$102 + 4 >> 2] = HEAP32[$111 + 4 >> 2]; //@line 3135
  HEAP32[$102 + 8 >> 2] = HEAP32[$111 + 8 >> 2]; //@line 3135
  HEAP32[$111 + 0 >> 2] = 0; //@line 3136
  HEAP32[$111 + 4 >> 2] = 0; //@line 3136
  HEAP32[$111 + 8 >> 2] = 0; //@line 3136
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6); //@line 3137
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; //@line 3143
  HEAP32[$__fd >> 2] = $storemerge; //@line 3144
  STACKTOP = sp; //@line 3145
  return;
 } else {
  if (!((HEAP32[1272] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i10 >> 2] = 5088; //@line 3152
   HEAP32[$__p$i$i$i$i10 + 4 >> 2] = 125; //@line 3154
   HEAP32[$__p$i$i$i$i10 + 8 >> 2] = 0; //@line 3156
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5088, $__p$i$i$i$i10, 126); //@line 3157
  }
  $124 = (HEAP32[5092 >> 2] | 0) + -1 | 0; //@line 3160
  $128 = HEAP32[$14 + 8 >> 2] | 0; //@line 3164
  if (!((HEAP32[$14 + 12 >> 2] | 0) - $128 >> 2 >>> 0 > $124 >>> 0)) {
   $137 = ___cxa_allocate_exception(4) | 0; //@line 3171
   $138 = $137; //@line 3172
   __ZNSt8bad_castC2Ev($138); //@line 3173
   ___cxa_throw($137 | 0, 13672, 114); //@line 3174
  }
  $135 = HEAP32[$128 + ($124 << 2) >> 2] | 0; //@line 3178
  if (($135 | 0) == 0) {
   $137 = ___cxa_allocate_exception(4) | 0; //@line 3181
   $138 = $137; //@line 3182
   __ZNSt8bad_castC2Ev($138); //@line 3183
   ___cxa_throw($137 | 0, 13672, 114); //@line 3184
  }
  $139 = $135; //@line 3187
  $141 = HEAP32[$135 >> 2] | 0; //@line 3189
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$141 + 44 >> 2] & 63]($tmpcast1, $139); //@line 3193
   $144 = $__pat; //@line 3194
   $145 = HEAP32[$7 >> 2] | 0; //@line 3195
   HEAP8[$144] = $145; //@line 3196
   HEAP8[$144 + 1 | 0] = $145 >> 8; //@line 3196
   HEAP8[$144 + 2 | 0] = $145 >> 16; //@line 3196
   HEAP8[$144 + 3 | 0] = $145 >> 24; //@line 3196
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$135 >> 2] | 0) + 32 >> 2] & 63]($8, $139); //@line 3201
   $150 = $__sn; //@line 3202
   if ((HEAP8[$150] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0; //@line 3209
    HEAP8[$150] = 0; //@line 3210
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] | 0] = 0; //@line 3214
    HEAP32[$__sn + 4 >> 2] = 0; //@line 3216
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 3218
   $159 = $8; //@line 3219
   HEAP32[$150 + 0 >> 2] = HEAP32[$159 + 0 >> 2]; //@line 3220
   HEAP32[$150 + 4 >> 2] = HEAP32[$159 + 4 >> 2]; //@line 3220
   HEAP32[$150 + 8 >> 2] = HEAP32[$159 + 8 >> 2]; //@line 3220
   HEAP32[$159 + 0 >> 2] = 0; //@line 3221
   HEAP32[$159 + 4 >> 2] = 0; //@line 3221
   HEAP32[$159 + 8 >> 2] = 0; //@line 3221
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8); //@line 3222
  } else {
   FUNCTION_TABLE_vii[HEAP32[$141 + 40 >> 2] & 63]($tmpcast, $139); //@line 3226
   $162 = $__pat; //@line 3227
   $163 = HEAP32[$9 >> 2] | 0; //@line 3228
   HEAP8[$162] = $163; //@line 3229
   HEAP8[$162 + 1 | 0] = $163 >> 8; //@line 3229
   HEAP8[$162 + 2 | 0] = $163 >> 16; //@line 3229
   HEAP8[$162 + 3 | 0] = $163 >> 24; //@line 3229
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$135 >> 2] | 0) + 28 >> 2] & 63]($10, $139); //@line 3234
   $168 = $__sn; //@line 3235
   if ((HEAP8[$168] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0; //@line 3242
    HEAP8[$168] = 0; //@line 3243
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] | 0] = 0; //@line 3247
    HEAP32[$__sn + 4 >> 2] = 0; //@line 3249
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 3251
   $177 = $10; //@line 3252
   HEAP32[$168 + 0 >> 2] = HEAP32[$177 + 0 >> 2]; //@line 3253
   HEAP32[$168 + 4 >> 2] = HEAP32[$177 + 4 >> 2]; //@line 3253
   HEAP32[$168 + 8 >> 2] = HEAP32[$177 + 8 >> 2]; //@line 3253
   HEAP32[$177 + 0 >> 2] = 0; //@line 3254
   HEAP32[$177 + 4 >> 2] = 0; //@line 3254
   HEAP32[$177 + 8 >> 2] = 0; //@line 3254
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10); //@line 3255
  }
  $178 = $135; //@line 3257
  HEAP8[$__dp] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$178 >> 2] | 0) + 12 >> 2] & 127]($139) | 0; //@line 3262
  HEAP8[$__ts] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$178 >> 2] | 0) + 16 >> 2] & 127]($139) | 0; //@line 3267
  $187 = $135; //@line 3268
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$187 >> 2] | 0) + 20 >> 2] & 63]($11, $139); //@line 3272
  $191 = $__grp; //@line 3273
  if ((HEAP8[$191] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 3280
   HEAP8[$191] = 0; //@line 3281
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 3285
   HEAP32[$__grp + 4 >> 2] = 0; //@line 3287
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 3289
  $200 = $11; //@line 3290
  HEAP32[$191 + 0 >> 2] = HEAP32[$200 + 0 >> 2]; //@line 3291
  HEAP32[$191 + 4 >> 2] = HEAP32[$200 + 4 >> 2]; //@line 3291
  HEAP32[$191 + 8 >> 2] = HEAP32[$200 + 8 >> 2]; //@line 3291
  HEAP32[$200 + 0 >> 2] = 0; //@line 3292
  HEAP32[$200 + 4 >> 2] = 0; //@line 3292
  HEAP32[$200 + 8 >> 2] = 0; //@line 3292
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11); //@line 3293
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$187 >> 2] | 0) + 24 >> 2] & 63]($12, $139); //@line 3297
  $204 = $__sym; //@line 3298
  if ((HEAP8[$204] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0; //@line 3305
   HEAP8[$204] = 0; //@line 3306
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] | 0] = 0; //@line 3310
   HEAP32[$__sym + 4 >> 2] = 0; //@line 3312
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 3314
  $213 = $12; //@line 3315
  HEAP32[$204 + 0 >> 2] = HEAP32[$213 + 0 >> 2]; //@line 3316
  HEAP32[$204 + 4 >> 2] = HEAP32[$213 + 4 >> 2]; //@line 3316
  HEAP32[$204 + 8 >> 2] = HEAP32[$213 + 8 >> 2]; //@line 3316
  HEAP32[$213 + 0 >> 2] = 0; //@line 3317
  HEAP32[$213 + 4 >> 2] = 0; //@line 3317
  HEAP32[$213 + 8 >> 2] = 0; //@line 3317
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12); //@line 3318
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$135 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; //@line 3324
  HEAP32[$__fd >> 2] = $storemerge; //@line 3325
  STACKTOP = sp; //@line 3326
  return;
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $10 = 0, $101 = 0, $109 = 0, $11 = 0, $12 = 0, $121 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $141 = 0, $142 = 0, $147 = 0, $155 = 0, $158 = 0, $159 = 0, $164 = 0, $172 = 0, $173 = 0, $186 = 0, $195 = 0, $2 = 0, $200 = 0, $208 = 0, $22 = 0, $26 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $87 = 0, $9 = 0, $96 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, sp = 0;
 sp = STACKTOP; //@line 4397
 STACKTOP = STACKTOP + 40 | 0; //@line 4398
 $__p$i$i$i$i8 = sp; //@line 4399
 $__p$i$i$i$i = sp + 16 | 0; //@line 4400
 $1 = sp + 32 | 0; //@line 4401
 $tmpcast3 = $1; //@line 4402
 $2 = STACKTOP; //@line 4403
 STACKTOP = STACKTOP + 16 | 0; //@line 4403
 $3 = STACKTOP; //@line 4404
 STACKTOP = STACKTOP + 8 | 0; //@line 4404
 $tmpcast2 = $3; //@line 4405
 $4 = STACKTOP; //@line 4406
 STACKTOP = STACKTOP + 16 | 0; //@line 4406
 $5 = STACKTOP; //@line 4407
 STACKTOP = STACKTOP + 16 | 0; //@line 4407
 $6 = STACKTOP; //@line 4408
 STACKTOP = STACKTOP + 16 | 0; //@line 4408
 $7 = STACKTOP; //@line 4409
 STACKTOP = STACKTOP + 8 | 0; //@line 4409
 $tmpcast1 = $7; //@line 4410
 $8 = STACKTOP; //@line 4411
 STACKTOP = STACKTOP + 16 | 0; //@line 4411
 $9 = STACKTOP; //@line 4412
 STACKTOP = STACKTOP + 8 | 0; //@line 4412
 $tmpcast = $9; //@line 4413
 $10 = STACKTOP; //@line 4414
 STACKTOP = STACKTOP + 16 | 0; //@line 4414
 $11 = STACKTOP; //@line 4415
 STACKTOP = STACKTOP + 16 | 0; //@line 4415
 $12 = STACKTOP; //@line 4416
 STACKTOP = STACKTOP + 16 | 0; //@line 4416
 $14 = HEAP32[$__loc >> 2] | 0; //@line 4418
 if ($__intl) {
  if (!((HEAP32[1320] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i >> 2] = 5280; //@line 4425
   HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4427
   HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4429
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5280, $__p$i$i$i$i, 126); //@line 4430
  }
  $22 = (HEAP32[5284 >> 2] | 0) + -1 | 0; //@line 4433
  $26 = HEAP32[$14 + 8 >> 2] | 0; //@line 4437
  if (!((HEAP32[$14 + 12 >> 2] | 0) - $26 >> 2 >>> 0 > $22 >>> 0)) {
   $35 = ___cxa_allocate_exception(4) | 0; //@line 4444
   $36 = $35; //@line 4445
   __ZNSt8bad_castC2Ev($36); //@line 4446
   ___cxa_throw($35 | 0, 13672, 114); //@line 4447
  }
  $33 = HEAP32[$26 + ($22 << 2) >> 2] | 0; //@line 4451
  if (($33 | 0) == 0) {
   $35 = ___cxa_allocate_exception(4) | 0; //@line 4454
   $36 = $35; //@line 4455
   __ZNSt8bad_castC2Ev($36); //@line 4456
   ___cxa_throw($35 | 0, 13672, 114); //@line 4457
  }
  $37 = $33; //@line 4460
  $39 = HEAP32[$33 >> 2] | 0; //@line 4462
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$39 + 44 >> 2] & 63]($tmpcast3, $37); //@line 4466
   $42 = $__pat; //@line 4467
   $43 = HEAP32[$1 >> 2] | 0; //@line 4468
   HEAP8[$42] = $43; //@line 4469
   HEAP8[$42 + 1 | 0] = $43 >> 8; //@line 4469
   HEAP8[$42 + 2 | 0] = $43 >> 16; //@line 4469
   HEAP8[$42 + 3 | 0] = $43 >> 24; //@line 4469
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 32 >> 2] & 63]($2, $37); //@line 4474
   $48 = $__sn; //@line 4475
   if ((HEAP8[$48] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4481
    HEAP8[$48] = 0; //@line 4482
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 4486
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4488
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 4490
   $56 = $2; //@line 4491
   HEAP32[$48 + 0 >> 2] = HEAP32[$56 + 0 >> 2]; //@line 4492
   HEAP32[$48 + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 4492
   HEAP32[$48 + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 4492
   HEAP32[$56 + 0 >> 2] = 0; //@line 4493
   HEAP32[$56 + 4 >> 2] = 0; //@line 4493
   HEAP32[$56 + 8 >> 2] = 0; //@line 4493
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2); //@line 4494
  } else {
   FUNCTION_TABLE_vii[HEAP32[$39 + 40 >> 2] & 63]($tmpcast2, $37); //@line 4498
   $59 = $__pat; //@line 4499
   $60 = HEAP32[$3 >> 2] | 0; //@line 4500
   HEAP8[$59] = $60; //@line 4501
   HEAP8[$59 + 1 | 0] = $60 >> 8; //@line 4501
   HEAP8[$59 + 2 | 0] = $60 >> 16; //@line 4501
   HEAP8[$59 + 3 | 0] = $60 >> 24; //@line 4501
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 28 >> 2] & 63]($4, $37); //@line 4506
   $65 = $__sn; //@line 4507
   if ((HEAP8[$65] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4513
    HEAP8[$65] = 0; //@line 4514
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 4518
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4520
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 4522
   $73 = $4; //@line 4523
   HEAP32[$65 + 0 >> 2] = HEAP32[$73 + 0 >> 2]; //@line 4524
   HEAP32[$65 + 4 >> 2] = HEAP32[$73 + 4 >> 2]; //@line 4524
   HEAP32[$65 + 8 >> 2] = HEAP32[$73 + 8 >> 2]; //@line 4524
   HEAP32[$73 + 0 >> 2] = 0; //@line 4525
   HEAP32[$73 + 4 >> 2] = 0; //@line 4525
   HEAP32[$73 + 8 >> 2] = 0; //@line 4525
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4); //@line 4526
  }
  $74 = $33; //@line 4528
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 12 >> 2] & 127]($37) | 0; //@line 4533
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 16 >> 2] & 127]($37) | 0; //@line 4538
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 20 >> 2] & 63]($5, $37); //@line 4543
  $87 = $__grp; //@line 4544
  if ((HEAP8[$87] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 4551
   HEAP8[$87] = 0; //@line 4552
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 4556
   HEAP32[$__grp + 4 >> 2] = 0; //@line 4558
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 4560
  $96 = $5; //@line 4561
  HEAP32[$87 + 0 >> 2] = HEAP32[$96 + 0 >> 2]; //@line 4562
  HEAP32[$87 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 4562
  HEAP32[$87 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 4562
  HEAP32[$96 + 0 >> 2] = 0; //@line 4563
  HEAP32[$96 + 4 >> 2] = 0; //@line 4563
  HEAP32[$96 + 8 >> 2] = 0; //@line 4563
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5); //@line 4564
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$33 >> 2] | 0) + 24 >> 2] & 63]($6, $37); //@line 4569
  $101 = $__sym; //@line 4570
  if ((HEAP8[$101] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0; //@line 4576
   HEAP8[$101] = 0; //@line 4577
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 4581
   HEAP32[$__sym + 4 >> 2] = 0; //@line 4583
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 4585
  $109 = $6; //@line 4586
  HEAP32[$101 + 0 >> 2] = HEAP32[$109 + 0 >> 2]; //@line 4587
  HEAP32[$101 + 4 >> 2] = HEAP32[$109 + 4 >> 2]; //@line 4587
  HEAP32[$101 + 8 >> 2] = HEAP32[$109 + 8 >> 2]; //@line 4587
  HEAP32[$109 + 0 >> 2] = 0; //@line 4588
  HEAP32[$109 + 4 >> 2] = 0; //@line 4588
  HEAP32[$109 + 8 >> 2] = 0; //@line 4588
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6); //@line 4589
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; //@line 4594
  HEAP32[$__fd >> 2] = $storemerge; //@line 4595
  STACKTOP = sp; //@line 4596
  return;
 } else {
  if (!((HEAP32[1304] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 5216; //@line 4603
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 125; //@line 4605
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0; //@line 4607
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5216, $__p$i$i$i$i8, 126); //@line 4608
  }
  $121 = (HEAP32[5220 >> 2] | 0) + -1 | 0; //@line 4611
  $125 = HEAP32[$14 + 8 >> 2] | 0; //@line 4615
  if (!((HEAP32[$14 + 12 >> 2] | 0) - $125 >> 2 >>> 0 > $121 >>> 0)) {
   $134 = ___cxa_allocate_exception(4) | 0; //@line 4622
   $135 = $134; //@line 4623
   __ZNSt8bad_castC2Ev($135); //@line 4624
   ___cxa_throw($134 | 0, 13672, 114); //@line 4625
  }
  $132 = HEAP32[$125 + ($121 << 2) >> 2] | 0; //@line 4629
  if (($132 | 0) == 0) {
   $134 = ___cxa_allocate_exception(4) | 0; //@line 4632
   $135 = $134; //@line 4633
   __ZNSt8bad_castC2Ev($135); //@line 4634
   ___cxa_throw($134 | 0, 13672, 114); //@line 4635
  }
  $136 = $132; //@line 4638
  $138 = HEAP32[$132 >> 2] | 0; //@line 4640
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$138 + 44 >> 2] & 63]($tmpcast1, $136); //@line 4644
   $141 = $__pat; //@line 4645
   $142 = HEAP32[$7 >> 2] | 0; //@line 4646
   HEAP8[$141] = $142; //@line 4647
   HEAP8[$141 + 1 | 0] = $142 >> 8; //@line 4647
   HEAP8[$141 + 2 | 0] = $142 >> 16; //@line 4647
   HEAP8[$141 + 3 | 0] = $142 >> 24; //@line 4647
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$132 >> 2] | 0) + 32 >> 2] & 63]($8, $136); //@line 4652
   $147 = $__sn; //@line 4653
   if ((HEAP8[$147] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4659
    HEAP8[$147] = 0; //@line 4660
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 4664
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4666
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 4668
   $155 = $8; //@line 4669
   HEAP32[$147 + 0 >> 2] = HEAP32[$155 + 0 >> 2]; //@line 4670
   HEAP32[$147 + 4 >> 2] = HEAP32[$155 + 4 >> 2]; //@line 4670
   HEAP32[$147 + 8 >> 2] = HEAP32[$155 + 8 >> 2]; //@line 4670
   HEAP32[$155 + 0 >> 2] = 0; //@line 4671
   HEAP32[$155 + 4 >> 2] = 0; //@line 4671
   HEAP32[$155 + 8 >> 2] = 0; //@line 4671
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8); //@line 4672
  } else {
   FUNCTION_TABLE_vii[HEAP32[$138 + 40 >> 2] & 63]($tmpcast, $136); //@line 4676
   $158 = $__pat; //@line 4677
   $159 = HEAP32[$9 >> 2] | 0; //@line 4678
   HEAP8[$158] = $159; //@line 4679
   HEAP8[$158 + 1 | 0] = $159 >> 8; //@line 4679
   HEAP8[$158 + 2 | 0] = $159 >> 16; //@line 4679
   HEAP8[$158 + 3 | 0] = $159 >> 24; //@line 4679
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$132 >> 2] | 0) + 28 >> 2] & 63]($10, $136); //@line 4684
   $164 = $__sn; //@line 4685
   if ((HEAP8[$164] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4691
    HEAP8[$164] = 0; //@line 4692
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 4696
    HEAP32[$__sn + 4 >> 2] = 0; //@line 4698
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 4700
   $172 = $10; //@line 4701
   HEAP32[$164 + 0 >> 2] = HEAP32[$172 + 0 >> 2]; //@line 4702
   HEAP32[$164 + 4 >> 2] = HEAP32[$172 + 4 >> 2]; //@line 4702
   HEAP32[$164 + 8 >> 2] = HEAP32[$172 + 8 >> 2]; //@line 4702
   HEAP32[$172 + 0 >> 2] = 0; //@line 4703
   HEAP32[$172 + 4 >> 2] = 0; //@line 4703
   HEAP32[$172 + 8 >> 2] = 0; //@line 4703
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10); //@line 4704
  }
  $173 = $132; //@line 4706
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$173 >> 2] | 0) + 12 >> 2] & 127]($136) | 0; //@line 4711
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$173 >> 2] | 0) + 16 >> 2] & 127]($136) | 0; //@line 4716
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$132 >> 2] | 0) + 20 >> 2] & 63]($11, $136); //@line 4721
  $186 = $__grp; //@line 4722
  if ((HEAP8[$186] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 4729
   HEAP8[$186] = 0; //@line 4730
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 4734
   HEAP32[$__grp + 4 >> 2] = 0; //@line 4736
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 4738
  $195 = $11; //@line 4739
  HEAP32[$186 + 0 >> 2] = HEAP32[$195 + 0 >> 2]; //@line 4740
  HEAP32[$186 + 4 >> 2] = HEAP32[$195 + 4 >> 2]; //@line 4740
  HEAP32[$186 + 8 >> 2] = HEAP32[$195 + 8 >> 2]; //@line 4740
  HEAP32[$195 + 0 >> 2] = 0; //@line 4741
  HEAP32[$195 + 4 >> 2] = 0; //@line 4741
  HEAP32[$195 + 8 >> 2] = 0; //@line 4741
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11); //@line 4742
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$132 >> 2] | 0) + 24 >> 2] & 63]($12, $136); //@line 4747
  $200 = $__sym; //@line 4748
  if ((HEAP8[$200] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0; //@line 4754
   HEAP8[$200] = 0; //@line 4755
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 4759
   HEAP32[$__sym + 4 >> 2] = 0; //@line 4761
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 4763
  $208 = $12; //@line 4764
  HEAP32[$200 + 0 >> 2] = HEAP32[$208 + 0 >> 2]; //@line 4765
  HEAP32[$200 + 4 >> 2] = HEAP32[$208 + 4 >> 2]; //@line 4765
  HEAP32[$200 + 8 >> 2] = HEAP32[$208 + 8 >> 2]; //@line 4765
  HEAP32[$208 + 0 >> 2] = 0; //@line 4766
  HEAP32[$208 + 4 >> 2] = 0; //@line 4766
  HEAP32[$208 + 8 >> 2] = 0; //@line 4766
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12); //@line 4767
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$173 >> 2] | 0) + 36 >> 2] & 127]($136) | 0; //@line 4772
  HEAP32[$__fd >> 2] = $storemerge; //@line 4773
  STACKTOP = sp; //@line 4774
  return;
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $130 = 0, $132 = 0, $137 = 0, $143 = 0, $153 = 0, $155 = 0, $156 = 0, $16 = 0, $173 = 0, $174 = 0, $175 = 0, $190 = 0, $193 = 0, $196 = 0, $207 = 0, $208 = 0, $209 = 0, $212 = 0, $225 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $90 = 0, $92 = 0, $96 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3648
 STACKTOP = STACKTOP + 8 | 0; //@line 3649
 $vararg_buffer = sp; //@line 3650
 $__p$i$i$i$i = STACKTOP; //@line 3652
 STACKTOP = STACKTOP + 16 | 0; //@line 3652
 $__atoms = STACKTOP; //@line 3653
 STACKTOP = STACKTOP + 104 | 0; //@line 3653
 $__grouping = STACKTOP; //@line 3654
 STACKTOP = STACKTOP + 16 | 0; //@line 3654
 $1 = STACKTOP; //@line 3655
 STACKTOP = STACKTOP + 8 | 0; //@line 3655
 $__buf = STACKTOP; //@line 3656
 STACKTOP = STACKTOP + 16 | 0; //@line 3656
 $__g = STACKTOP; //@line 3657
 STACKTOP = STACKTOP + 160 | 0; //@line 3657
 $this2$i$i$i = $__grouping; //@line 3659
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 3660
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 3660
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 3660
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 3661
 $3 = $1; //@line 3662
 $4 = HEAP32[$3 >> 2] | 0; //@line 3663
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 3669
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 3671
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 3673
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 3674
 }
 $12 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 3677
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 3681
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 3688
  $26 = $25; //@line 3689
  __ZNSt8bad_castC2Ev($26); //@line 3690
  ___cxa_throw($25 | 0, 13672, 114); //@line 3691
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 3695
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 3698
  $26 = $25; //@line 3699
  __ZNSt8bad_castC2Ev($26); //@line 3700
  ___cxa_throw($25 | 0, 13672, 114); //@line 3701
 }
 $28 = $__atoms; //@line 3705
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 48 >> 2] & 15]($23, 4256, 4282 | 0, $28) | 0; //@line 3710
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 3713
 $this2$i$i$i6 = $__buf; //@line 3714
 HEAP32[$this2$i$i$i6 + 0 >> 2] = 0; //@line 3715
 HEAP32[$this2$i$i$i6 + 4 >> 2] = 0; //@line 3715
 HEAP32[$this2$i$i$i6 + 8 >> 2] = 0; //@line 3715
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 3716
 if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
  $41 = $__buf + 1 | 0; //@line 3722
  $$pre$phi41Z2D = $41; //@line 3724
  $$pre$phi43Z2D = $__buf + 8 | 0; //@line 3724
  $42 = $41; //@line 3724
 } else {
  $38 = $__buf + 8 | 0; //@line 3726
  $$pre$phi41Z2D = $__buf + 1 | 0; //@line 3730
  $$pre$phi43Z2D = $38; //@line 3730
  $42 = HEAP32[$38 >> 2] | 0; //@line 3730
 }
 $45 = $__b; //@line 3734
 $46 = $__e; //@line 3735
 $47 = $__buf; //@line 3736
 $48 = $__buf + 4 | 0; //@line 3737
 $49 = $__atoms + 96 | 0; //@line 3738
 $50 = $__atoms + 100 | 0; //@line 3739
 $51 = $__g; //@line 3740
 $52 = $__atoms + 104 | 0; //@line 3741
 $53 = $__atoms; //@line 3742
 $54 = $__grouping + 4 | 0; //@line 3743
 $$pre$i$i$i10 = HEAP32[$45 >> 2] | 0; //@line 3745
 $55 = $42; //@line 3745
 $56 = $__g; //@line 3745
 $57 = 0; //@line 3745
 $__a$0 = $42; //@line 3745
 L14 : while (1) {
  do {
   if (($$pre$i$i$i10 | 0) == 0) {
    $71 = 0; //@line 3750
    $72 = 1; //@line 3750
   } else {
    $60 = HEAP32[$$pre$i$i$i10 + 12 >> 2] | 0; //@line 3753
    if (($60 | 0) == (HEAP32[$$pre$i$i$i10 + 16 >> 2] | 0)) {
     $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i10 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i10) | 0; //@line 3763
    } else {
     $$0$i$i$i$i8 = HEAP32[$60 >> 2] | 0; //@line 3766
    }
    if (!(($$0$i$i$i$i8 | 0) == -1)) {
     $71 = $$pre$i$i$i10; //@line 3770
     $72 = 0; //@line 3770
     break;
    }
    HEAP32[$45 >> 2] = 0; //@line 3773
    $71 = 0; //@line 3774
    $72 = 1; //@line 3774
   }
  } while (0);
  $73 = HEAP32[$46 >> 2] | 0; //@line 3777
  do {
   if (($73 | 0) == 0) {
    label = 22; //@line 3781
   } else {
    $76 = HEAP32[$73 + 12 >> 2] | 0; //@line 3784
    if (($76 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 127]($73) | 0; //@line 3794
    } else {
     $$0$i$i1$i$i14 = HEAP32[$76 >> 2] | 0; //@line 3797
    }
    if (($$0$i$i1$i$i14 | 0) == -1) {
     HEAP32[$46 >> 2] = 0; //@line 3801
     label = 22; //@line 3802
     break;
    } else {
     if ($72) {
      break;
     } else {
      $__a$2 = $__a$0; //@line 3808
      break L14;
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0; //@line 3815
   if ($72) {
    $__a$2 = $__a$0; //@line 3817
    break;
   }
  }
  $90 = HEAP8[$this2$i$i$i6] | 0; //@line 3824
  $92 = ($90 & 1) == 0; //@line 3826
  if ($92) {
   $96 = ($90 & 255) >>> 1; //@line 3830
  } else {
   $96 = HEAP32[$48 >> 2] | 0; //@line 3833
  }
  if (($55 - $__a$0 | 0) == ($96 | 0)) {
   if ($92) {
    $103 = ($90 & 255) >>> 1; //@line 3842
    $104 = ($90 & 255) >>> 1; //@line 3842
   } else {
    $98 = HEAP32[$48 >> 2] | 0; //@line 3844
    $103 = $98; //@line 3845
    $104 = $98; //@line 3845
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $104 << 1, 0); //@line 3848
   if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
    $111 = 10; //@line 3853
   } else {
    $111 = (HEAP32[$47 >> 2] & -2) + -1 | 0; //@line 3858
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $111, 0); //@line 3860
   if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
    $116 = $$pre$phi41Z2D; //@line 3865
   } else {
    $116 = HEAP32[$$pre$phi43Z2D >> 2] | 0; //@line 3868
   }
   $118 = $116 + $103 | 0; //@line 3871
   $__a$1 = $116; //@line 3871
  } else {
   $118 = $55; //@line 3873
   $__a$1 = $__a$0; //@line 3873
  }
  $120 = HEAP32[$71 + 12 >> 2] | 0; //@line 3876
  if (($120 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 127]($71) | 0; //@line 3886
  } else {
   $$0$i$i = HEAP32[$120 >> 2] | 0; //@line 3889
  }
  $130 = ($118 | 0) == ($__a$1 | 0); //@line 3891
  do {
   if ($130) {
    $132 = (HEAP32[$49 >> 2] | 0) == ($$0$i$i | 0); //@line 3895
    if (!$132) {
     if ((HEAP32[$50 >> 2] | 0) != ($$0$i$i | 0)) {
      label = 43; //@line 3900
      break;
     }
    }
    HEAP8[$118] = $132 ? 43 : 45; //@line 3906
    $$ph = $118 + 1 | 0; //@line 3907
    $$ph34 = $56; //@line 3907
    $$ph35 = 0; //@line 3907
   } else {
    label = 43; //@line 3909
   }
  } while (0);
  do {
   if ((label | 0) == 43) {
    label = 0; //@line 3914
    $137 = HEAP8[$this2$i$i$i] | 0; //@line 3915
    if (($137 & 1) == 0) {
     $143 = ($137 & 255) >>> 1; //@line 3921
    } else {
     $143 = HEAP32[$54 >> 2] | 0; //@line 3924
    }
    if (($143 | 0) != 0 & ($$0$i$i | 0) == 0) {
     if (($56 - $51 | 0) >= 160) {
      $$ph = $118; //@line 3934
      $$ph34 = $56; //@line 3934
      $$ph35 = $57; //@line 3934
      break;
     }
     HEAP32[$56 >> 2] = $57; //@line 3938
     $$ph = $118; //@line 3939
     $$ph34 = $56 + 4 | 0; //@line 3939
     $$ph35 = 0; //@line 3939
     break;
    } else {
     $$01$i$i = $28; //@line 3942
    }
    while (1) {
     $153 = $$01$i$i + 4 | 0; //@line 3947
     if ((HEAP32[$$01$i$i >> 2] | 0) == ($$0$i$i | 0)) {
      $$0$lcssa$i$i = $$01$i$i; //@line 3949
      break;
     }
     if (($153 | 0) == ($52 | 0)) {
      $$0$lcssa$i$i = $52; //@line 3954
      break;
     } else {
      $$01$i$i = $153; //@line 3957
     }
    }
    $155 = $$0$lcssa$i$i - $53 | 0; //@line 3961
    $156 = $155 >> 2; //@line 3962
    if (($155 | 0) > 92) {
     $__a$2 = $__a$1; //@line 3965
     break L14;
    }
    if (($155 | 0) < 88) {
     HEAP8[$118] = HEAP8[4256 + $156 | 0] | 0; //@line 3973
     $$ph = $118 + 1 | 0; //@line 3975
     $$ph34 = $56; //@line 3975
     $$ph35 = $57 + 1 | 0; //@line 3975
     break;
    }
    if ($130) {
     $__a$2 = $118; //@line 3979
     break L14;
    }
    if (($118 - $__a$1 | 0) >= 3) {
     $__a$2 = $__a$1; //@line 3987
     break L14;
    }
    if ((HEAP8[$118 + -1 | 0] | 0) != 48) {
     $__a$2 = $__a$1; //@line 3994
     break L14;
    }
    HEAP8[$118] = HEAP8[4256 + $156 | 0] | 0; //@line 4000
    $$ph = $118 + 1 | 0; //@line 4001
    $$ph34 = $56; //@line 4001
    $$ph35 = 0; //@line 4001
   }
  } while (0);
  $173 = HEAP32[$45 >> 2] | 0; //@line 4004
  $174 = $173 + 12 | 0; //@line 4005
  $175 = HEAP32[$174 >> 2] | 0; //@line 4006
  if (($175 | 0) == (HEAP32[$173 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$173 >> 2] | 0) + 40 >> 2] & 127]($173) | 0; //@line 4015
   $$pre$i$i$i10 = $173; //@line 4016
   $55 = $$ph; //@line 4016
   $56 = $$ph34; //@line 4016
   $57 = $$ph35; //@line 4016
   $__a$0 = $__a$1; //@line 4016
   continue;
  } else {
   HEAP32[$174 >> 2] = $175 + 4; //@line 4020
   $$pre$i$i$i10 = $173; //@line 4021
   $55 = $$ph; //@line 4021
   $56 = $$ph34; //@line 4021
   $57 = $$ph35; //@line 4021
   $__a$0 = $__a$1; //@line 4021
   continue;
  }
 }
 HEAP8[$__a$2 + 3 | 0] = 0; //@line 4026
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 4037
   ___cxa_guard_release(5608); //@line 4038
  }
 } while (0);
 $190 = HEAP32[1400] | 0; //@line 4041
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 4043
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2, $190, 4296, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4; //@line 4047
 }
 $193 = HEAP32[$45 >> 2] | 0; //@line 4049
 do {
  if (($193 | 0) == 0) {
   $207 = 0; //@line 4053
   $208 = 1; //@line 4053
  } else {
   $196 = HEAP32[$193 + 12 >> 2] | 0; //@line 4056
   if (($196 | 0) == (HEAP32[$193 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$193 >> 2] | 0) + 36 >> 2] & 127]($193) | 0; //@line 4066
   } else {
    $$0$i$i$i$i = HEAP32[$196 >> 2] | 0; //@line 4069
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $207 = $193; //@line 4073
    $208 = 0; //@line 4073
    break;
   }
   HEAP32[$45 >> 2] = 0; //@line 4076
   $207 = 0; //@line 4077
   $208 = 1; //@line 4077
  }
 } while (0);
 $209 = HEAP32[$46 >> 2] | 0; //@line 4080
 do {
  if (($209 | 0) == 0) {
   label = 78; //@line 4084
  } else {
   $212 = HEAP32[$209 + 12 >> 2] | 0; //@line 4087
   if (($212 | 0) == (HEAP32[$209 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$209 >> 2] | 0) + 36 >> 2] & 127]($209) | 0; //@line 4097
   } else {
    $$0$i$i1$i$i = HEAP32[$212 >> 2] | 0; //@line 4100
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$46 >> 2] = 0; //@line 4104
    label = 78; //@line 4105
    break;
   }
   if (!$208) {
    break;
   }
   $225 = $agg$result; //@line 4111
   HEAP32[$225 >> 2] = $207; //@line 4112
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 4113
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 4114
   STACKTOP = sp; //@line 4115
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 78) {
   if ($208) {
    break;
   }
   $225 = $agg$result; //@line 4123
   HEAP32[$225 >> 2] = $207; //@line 4124
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 4125
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 4126
   STACKTOP = sp; //@line 4127
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 4132
 $225 = $agg$result; //@line 4133
 HEAP32[$225 >> 2] = $207; //@line 4134
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 4135
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 4136
 STACKTOP = sp; //@line 4137
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $1 = 0, $100 = 0, $101 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $117 = 0, $128 = 0, $129 = 0, $131 = 0, $136 = 0, $142 = 0, $15 = 0, $152 = 0, $154 = 0, $171 = 0, $172 = 0, $173 = 0, $188 = 0, $191 = 0, $2 = 0, $204 = 0, $205 = 0, $206 = 0, $22 = 0, $222 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $69 = 0, $70 = 0, $71 = 0, $87 = 0, $89 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14007
 STACKTOP = STACKTOP + 8 | 0; //@line 14008
 $vararg_buffer = sp; //@line 14009
 $__p$i$i$i$i = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 16 | 0; //@line 14011
 $__atoms = STACKTOP; //@line 14012
 STACKTOP = STACKTOP + 32 | 0; //@line 14012
 $__grouping = STACKTOP; //@line 14013
 STACKTOP = STACKTOP + 16 | 0; //@line 14013
 $1 = STACKTOP; //@line 14014
 STACKTOP = STACKTOP + 8 | 0; //@line 14014
 $__buf = STACKTOP; //@line 14015
 STACKTOP = STACKTOP + 16 | 0; //@line 14015
 $__g = STACKTOP; //@line 14016
 STACKTOP = STACKTOP + 160 | 0; //@line 14016
 $this2$i$i$i = $__grouping; //@line 14017
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 14018
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 14018
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 14018
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 14019
 $2 = $1; //@line 14020
 $3 = HEAP32[$2 >> 2] | 0; //@line 14021
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 14027
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 14029
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 14031
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 14032
 }
 $11 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 14035
 $15 = HEAP32[$3 + 8 >> 2] | 0; //@line 14039
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $15 >> 2 >>> 0 > $11 >>> 0)) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 14046
  $25 = $24; //@line 14047
  __ZNSt8bad_castC2Ev($25); //@line 14048
  ___cxa_throw($24 | 0, 13672, 114); //@line 14049
 }
 $22 = HEAP32[$15 + ($11 << 2) >> 2] | 0; //@line 14053
 if (($22 | 0) == 0) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 14056
  $25 = $24; //@line 14057
  __ZNSt8bad_castC2Ev($25); //@line 14058
  ___cxa_throw($24 | 0, 13672, 114); //@line 14059
 }
 $27 = $__atoms; //@line 14063
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$22 >> 2] | 0) + 32 >> 2] & 15]($22, 4256, 4282 | 0, $27) | 0; //@line 14068
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0; //@line 14071
 $this2$i$i$i6 = $__buf; //@line 14072
 HEAP32[$this2$i$i$i6 + 0 >> 2] = 0; //@line 14073
 HEAP32[$this2$i$i$i6 + 4 >> 2] = 0; //@line 14073
 HEAP32[$this2$i$i$i6 + 8 >> 2] = 0; //@line 14073
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 14074
 if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
  $40 = $__buf + 1 | 0; //@line 14080
  $$pre$phi39Z2D = $40; //@line 14082
  $$pre$phi41Z2D = $__buf + 8 | 0; //@line 14082
  $41 = $40; //@line 14082
 } else {
  $37 = $__buf + 8 | 0; //@line 14084
  $$pre$phi39Z2D = $__buf + 1 | 0; //@line 14088
  $$pre$phi41Z2D = $37; //@line 14088
  $41 = HEAP32[$37 >> 2] | 0; //@line 14088
 }
 $44 = $__b; //@line 14092
 $45 = $__e; //@line 14093
 $46 = $__buf; //@line 14094
 $47 = $__buf + 4 | 0; //@line 14095
 $48 = $__atoms + 24 | 0; //@line 14096
 $49 = $__atoms + 25 | 0; //@line 14097
 $50 = $__g; //@line 14098
 $51 = $__atoms + 26 | 0; //@line 14099
 $52 = $__atoms; //@line 14100
 $53 = $__grouping + 4 | 0; //@line 14101
 $$pre$i$i$i9 = HEAP32[$44 >> 2] | 0; //@line 14103
 $54 = $41; //@line 14103
 $55 = $__g; //@line 14103
 $56 = 0; //@line 14103
 $__a$0 = $41; //@line 14103
 L14 : while (1) {
  do {
   if (($$pre$i$i$i9 | 0) == 0) {
    $69 = 0; //@line 14108
   } else {
    if ((HEAP32[$$pre$i$i$i9 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i9 + 16 >> 2] | 0)) {
     $69 = $$pre$i$i$i9; //@line 14116
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i9 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i9) | 0) == -1)) {
     $69 = $$pre$i$i$i9; //@line 14126
     break;
    }
    HEAP32[$44 >> 2] = 0; //@line 14129
    $69 = 0; //@line 14130
   }
  } while (0);
  $70 = ($69 | 0) == 0; //@line 14133
  $71 = HEAP32[$45 >> 2] | 0; //@line 14134
  do {
   if (($71 | 0) == 0) {
    label = 19; //@line 14138
   } else {
    if ((HEAP32[$71 + 12 >> 2] | 0) != (HEAP32[$71 + 16 >> 2] | 0)) {
     if ($70) {
      break;
     } else {
      $__a$2 = $__a$0; //@line 14149
      break L14;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 127]($71) | 0) == -1) {
     HEAP32[$45 >> 2] = 0; //@line 14160
     label = 19; //@line 14161
     break;
    } else {
     if ($70) {
      break;
     } else {
      $__a$2 = $__a$0; //@line 14167
      break L14;
     }
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0; //@line 14174
   if ($70) {
    $__a$2 = $__a$0; //@line 14176
    break;
   }
  }
  $87 = HEAP8[$this2$i$i$i6] | 0; //@line 14183
  $89 = ($87 & 1) == 0; //@line 14185
  if ($89) {
   $93 = ($87 & 255) >>> 1; //@line 14189
  } else {
   $93 = HEAP32[$47 >> 2] | 0; //@line 14192
  }
  if (($54 - $__a$0 | 0) == ($93 | 0)) {
   if ($89) {
    $100 = ($87 & 255) >>> 1; //@line 14201
    $101 = ($87 & 255) >>> 1; //@line 14201
   } else {
    $95 = HEAP32[$47 >> 2] | 0; //@line 14203
    $100 = $95; //@line 14204
    $101 = $95; //@line 14204
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $101 << 1, 0); //@line 14207
   if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
    $108 = 10; //@line 14212
   } else {
    $108 = (HEAP32[$46 >> 2] & -2) + -1 | 0; //@line 14217
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $108, 0); //@line 14219
   if ((HEAP8[$this2$i$i$i6] & 1) == 0) {
    $113 = $$pre$phi39Z2D; //@line 14224
   } else {
    $113 = HEAP32[$$pre$phi41Z2D >> 2] | 0; //@line 14227
   }
   $115 = $113 + $100 | 0; //@line 14230
   $__a$1 = $113; //@line 14230
  } else {
   $115 = $54; //@line 14232
   $__a$1 = $__a$0; //@line 14232
  }
  $117 = HEAP32[$69 + 12 >> 2] | 0; //@line 14235
  if (($117 | 0) == (HEAP32[$69 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 36 >> 2] & 127]($69) | 0; //@line 14245
  } else {
   $$0$i$i = HEAPU8[$117] | 0; //@line 14249
  }
  $128 = $$0$i$i & 255; //@line 14251
  $129 = ($115 | 0) == ($__a$1 | 0); //@line 14252
  do {
   if ($129) {
    $131 = (HEAP8[$48] | 0) == $128 << 24 >> 24; //@line 14256
    if (!$131) {
     if (!((HEAP8[$49] | 0) == $128 << 24 >> 24)) {
      label = 40; //@line 14261
      break;
     }
    }
    HEAP8[$115] = $131 ? 43 : 45; //@line 14267
    $$ph = $115 + 1 | 0; //@line 14268
    $$ph31 = $55; //@line 14268
    $$ph32 = 0; //@line 14268
   } else {
    label = 40; //@line 14270
   }
  } while (0);
  do {
   if ((label | 0) == 40) {
    label = 0; //@line 14275
    $136 = HEAP8[$this2$i$i$i] | 0; //@line 14276
    if (($136 & 1) == 0) {
     $142 = ($136 & 255) >>> 1; //@line 14282
    } else {
     $142 = HEAP32[$53 >> 2] | 0; //@line 14285
    }
    if (($142 | 0) != 0 & $128 << 24 >> 24 == 0) {
     if (($55 - $50 | 0) >= 160) {
      $$ph = $115; //@line 14295
      $$ph31 = $55; //@line 14295
      $$ph32 = $56; //@line 14295
      break;
     }
     HEAP32[$55 >> 2] = $56; //@line 14299
     $$ph = $115; //@line 14300
     $$ph31 = $55 + 4 | 0; //@line 14300
     $$ph32 = 0; //@line 14300
     break;
    } else {
     $$01$i$i = $27; //@line 14303
    }
    while (1) {
     $152 = $$01$i$i + 1 | 0; //@line 14308
     if ((HEAP8[$$01$i$i] | 0) == $128 << 24 >> 24) {
      $$0$lcssa$i$i = $$01$i$i; //@line 14310
      break;
     }
     if (($152 | 0) == ($51 | 0)) {
      $$0$lcssa$i$i = $51; //@line 14315
      break;
     } else {
      $$01$i$i = $152; //@line 14318
     }
    }
    $154 = $$0$lcssa$i$i - $52 | 0; //@line 14322
    if (($154 | 0) > 23) {
     $__a$2 = $__a$1; //@line 14325
     break L14;
    }
    if (($154 | 0) < 22) {
     HEAP8[$115] = HEAP8[4256 + $154 | 0] | 0; //@line 14333
     $$ph = $115 + 1 | 0; //@line 14335
     $$ph31 = $55; //@line 14335
     $$ph32 = $56 + 1 | 0; //@line 14335
     break;
    }
    if ($129) {
     $__a$2 = $115; //@line 14339
     break L14;
    }
    if (($115 - $__a$1 | 0) >= 3) {
     $__a$2 = $__a$1; //@line 14347
     break L14;
    }
    if ((HEAP8[$115 + -1 | 0] | 0) != 48) {
     $__a$2 = $__a$1; //@line 14354
     break L14;
    }
    HEAP8[$115] = HEAP8[4256 + $154 | 0] | 0; //@line 14360
    $$ph = $115 + 1 | 0; //@line 14361
    $$ph31 = $55; //@line 14361
    $$ph32 = 0; //@line 14361
   }
  } while (0);
  $171 = HEAP32[$44 >> 2] | 0; //@line 14364
  $172 = $171 + 12 | 0; //@line 14365
  $173 = HEAP32[$172 >> 2] | 0; //@line 14366
  if (($173 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 40 >> 2] & 127]($171) | 0; //@line 14375
   $$pre$i$i$i9 = $171; //@line 14376
   $54 = $$ph; //@line 14376
   $55 = $$ph31; //@line 14376
   $56 = $$ph32; //@line 14376
   $__a$0 = $__a$1; //@line 14376
   continue;
  } else {
   HEAP32[$172 >> 2] = $173 + 1; //@line 14380
   $$pre$i$i$i9 = $171; //@line 14381
   $54 = $$ph; //@line 14381
   $55 = $$ph31; //@line 14381
   $56 = $$ph32; //@line 14381
   $__a$0 = $__a$1; //@line 14381
   continue;
  }
 }
 HEAP8[$__a$2 + 3 | 0] = 0; //@line 14386
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 14397
   ___cxa_guard_release(5608); //@line 14398
  }
 } while (0);
 $188 = HEAP32[1400] | 0; //@line 14401
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 14403
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2, $188, 4296, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4; //@line 14407
 }
 $191 = HEAP32[$44 >> 2] | 0; //@line 14409
 do {
  if (($191 | 0) == 0) {
   $204 = 0; //@line 14413
  } else {
   if ((HEAP32[$191 + 12 >> 2] | 0) != (HEAP32[$191 + 16 >> 2] | 0)) {
    $204 = $191; //@line 14421
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$191 >> 2] | 0) + 36 >> 2] & 127]($191) | 0) == -1)) {
    $204 = $191; //@line 14431
    break;
   }
   HEAP32[$44 >> 2] = 0; //@line 14434
   $204 = 0; //@line 14435
  }
 } while (0);
 $205 = ($204 | 0) == 0; //@line 14438
 $206 = HEAP32[$45 >> 2] | 0; //@line 14439
 do {
  if (($206 | 0) == 0) {
   label = 72; //@line 14443
  } else {
   if ((HEAP32[$206 + 12 >> 2] | 0) != (HEAP32[$206 + 16 >> 2] | 0)) {
    if (!$205) {
     break;
    }
    $222 = $agg$result; //@line 14454
    HEAP32[$222 >> 2] = $204; //@line 14455
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 14456
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 14457
    STACKTOP = sp; //@line 14458
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$206 >> 2] | 0) + 36 >> 2] & 127]($206) | 0) == -1) {
    HEAP32[$45 >> 2] = 0; //@line 14467
    label = 72; //@line 14468
    break;
   }
   if (!($205 ^ ($206 | 0) == 0)) {
    break;
   }
   $222 = $agg$result; //@line 14476
   HEAP32[$222 >> 2] = $204; //@line 14477
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 14478
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 14479
   STACKTOP = sp; //@line 14480
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 72) {
   if ($205) {
    break;
   }
   $222 = $agg$result; //@line 14488
   HEAP32[$222 >> 2] = $204; //@line 14489
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 14490
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 14491
   STACKTOP = sp; //@line 14492
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 14497
 $222 = $agg$result; //@line 14498
 HEAP32[$222 >> 2] = $204; //@line 14499
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 14500
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 14501
 STACKTOP = sp; //@line 14502
 return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i13 = 0, $1 = 0, $10 = 0, $101 = 0, $111 = 0, $112 = 0, $113 = 0, $120 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $145 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $164 = 0, $166 = 0, $172 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $190 = 0, $192 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $2 = 0, $200 = 0, $202 = 0, $203 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $221 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $34 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $63 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $79 = 0, $84 = 0, $85 = 0, $89 = 0, $99 = 0, $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9280
 STACKTOP = STACKTOP + 48 | 0; //@line 9281
 $__p$i$i$i$i1 = sp; //@line 9282
 $__p$i$i$i$i = sp + 16 | 0; //@line 9283
 $__grouping = sp + 32 | 0; //@line 9284
 $1 = $__loc; //@line 9285
 $2 = HEAP32[$1 >> 2] | 0; //@line 9286
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 9292
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 9294
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 9296
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 9297
 }
 $10 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 9300
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 9304
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 9311
  $24 = $23; //@line 9312
  __ZNSt8bad_castC2Ev($24); //@line 9313
  ___cxa_throw($23 | 0, 13672, 114); //@line 9314
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 9318
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 9321
  $24 = $23; //@line 9322
  __ZNSt8bad_castC2Ev($24); //@line 9323
  ___cxa_throw($23 | 0, 13672, 114); //@line 9324
 }
 $25 = $21; //@line 9327
 $26 = HEAP32[$1 >> 2] | 0; //@line 9328
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5864; //@line 9334
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 125; //@line 9336
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0; //@line 9338
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i1, 126); //@line 9339
 }
 $34 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 9342
 $38 = HEAP32[$26 + 8 >> 2] | 0; //@line 9346
 if (!((HEAP32[$26 + 12 >> 2] | 0) - $38 >> 2 >>> 0 > $34 >>> 0)) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 9353
  $48 = $47; //@line 9354
  __ZNSt8bad_castC2Ev($48); //@line 9355
  ___cxa_throw($47 | 0, 13672, 114); //@line 9356
 }
 $45 = HEAP32[$38 + ($34 << 2) >> 2] | 0; //@line 9360
 if (($45 | 0) == 0) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 9363
  $48 = $47; //@line 9364
  __ZNSt8bad_castC2Ev($48); //@line 9365
  ___cxa_throw($47 | 0, 13672, 114); //@line 9366
 }
 $49 = $45; //@line 9369
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $49); //@line 9374
 HEAP32[$__oe >> 2] = $__ob; //@line 9375
 $54 = HEAP8[$__nb] | 0; //@line 9376
 if ($54 << 24 >> 24 == 43 | $54 << 24 >> 24 == 45) {
  $59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 44 >> 2] & 31]($25, $54) | 0; //@line 9382
  $61 = HEAP32[$__oe >> 2] | 0; //@line 9384
  HEAP32[$__oe >> 2] = $61 + 4; //@line 9386
  HEAP32[$61 >> 2] = $59; //@line 9387
  $__nf$0 = $__nb + 1 | 0; //@line 9388
 } else {
  $__nf$0 = $__nb; //@line 9390
 }
 $63 = $__ne; //@line 9392
 L22 : do {
  if (($63 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0] | 0) != 48) {
    label = 14; //@line 9401
    break;
   }
   $70 = $__nf$0 + 1 | 0; //@line 9404
   $71 = HEAP8[$70] | 0; //@line 9405
   if (!($71 << 24 >> 24 == 88 | $71 << 24 >> 24 == 120)) {
    label = 14; //@line 9407
    break;
   }
   $72 = $21; //@line 9410
   $76 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 31]($25, 48) | 0; //@line 9414
   $77 = HEAP32[$__oe >> 2] | 0; //@line 9415
   HEAP32[$__oe >> 2] = $77 + 4; //@line 9417
   HEAP32[$77 >> 2] = $76; //@line 9418
   $79 = $__nf$0 + 2 | 0; //@line 9419
   $84 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 31]($25, HEAP8[$70] | 0) | 0; //@line 9424
   $85 = HEAP32[$__oe >> 2] | 0; //@line 9425
   HEAP32[$__oe >> 2] = $85 + 4; //@line 9427
   HEAP32[$85 >> 2] = $84; //@line 9428
   if ($79 >>> 0 < $__ne >>> 0) {
    $__ns$042 = $79; //@line 9431
   } else {
    $__nf$1 = $79; //@line 9433
    $__ns$2 = $79; //@line 9433
    break;
   }
   while (1) {
    $89 = HEAP8[$__ns$042] | 0; //@line 9437
    do {
     if ((HEAP8[5608] | 0) == 0) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9448
      ___cxa_guard_release(5608); //@line 9449
     }
    } while (0);
    $99 = $__ns$042 + 1 | 0; //@line 9456
    if ((_isxdigit_l($89 << 24 >> 24 | 0, HEAP32[1400] | 0) | 0) == 0) {
     $__nf$1 = $79; //@line 9458
     $__ns$2 = $__ns$042; //@line 9458
     break L22;
    }
    if ($99 >>> 0 < $__ne >>> 0) {
     $__ns$042 = $99; //@line 9463
    } else {
     $__nf$1 = $79; //@line 9465
     $__ns$2 = $99; //@line 9465
     break;
    }
   }
  } else {
   label = 14; //@line 9470
  }
 } while (0);
 L33 : do {
  if ((label | 0) == 14) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$133 = $__nf$0; //@line 9477
   } else {
    $__nf$1 = $__nf$0; //@line 9479
    $__ns$2 = $__nf$0; //@line 9479
    break;
   }
   while (1) {
    $101 = HEAP8[$__ns$133] | 0; //@line 9483
    do {
     if ((HEAP8[5608] | 0) == 0) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9494
      ___cxa_guard_release(5608); //@line 9495
     }
    } while (0);
    $111 = $__ns$133 + 1 | 0; //@line 9502
    if ((_isdigit_l($101 << 24 >> 24 | 0, HEAP32[1400] | 0) | 0) == 0) {
     $__nf$1 = $__nf$0; //@line 9504
     $__ns$2 = $__ns$133; //@line 9504
     break L33;
    }
    if ($111 >>> 0 < $__ne >>> 0) {
     $__ns$133 = $111; //@line 9509
    } else {
     $__nf$1 = $__nf$0; //@line 9511
     $__ns$2 = $111; //@line 9511
     break;
    }
   }
  }
 } while (0);
 $112 = $__grouping; //@line 9517
 $113 = HEAP8[$112] | 0; //@line 9518
 if (($113 & 1) == 0) {
  $120 = ($113 & 255) >>> 1; //@line 9524
 } else {
  $120 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 9528
 }
 do {
  if (($120 | 0) == 0) {
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 48 >> 2] & 15]($25, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0; //@line 9538
   $131 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0; //@line 9543
   HEAP32[$__oe >> 2] = $131; //@line 9544
   $200 = $131; //@line 9545
  } else {
   do {
    if (($__nf$1 | 0) != ($__ns$2 | 0)) {
     $133 = $__ns$2 + -1 | 0; //@line 9550
     if ($133 >>> 0 > $__nf$1 >>> 0) {
      $$012$i$i = $__nf$1; //@line 9553
      $135 = $133; //@line 9553
     } else {
      break;
     }
     do {
      $136 = HEAP8[$$012$i$i] | 0; //@line 9558
      HEAP8[$$012$i$i] = HEAP8[$135] | 0; //@line 9560
      HEAP8[$135] = $136; //@line 9561
      $$012$i$i = $$012$i$i + 1 | 0; //@line 9562
      $135 = $135 + -1 | 0; //@line 9563
     } while ($$012$i$i >>> 0 < $135 >>> 0);
    }
   } while (0);
   $145 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 127]($49) | 0; //@line 9577
   if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
    $148 = $__grouping + 1 | 0; //@line 9581
    $149 = $__grouping + 4 | 0; //@line 9582
    $150 = $__grouping + 8 | 0; //@line 9583
    $151 = $21; //@line 9584
    $__dc$024 = 0; //@line 9585
    $__dg$025 = 0; //@line 9585
    $__p$026 = $__nf$1; //@line 9585
    while (1) {
     $154 = (HEAP8[$112] & 1) == 0; //@line 9589
     do {
      if ((HEAP8[($154 ? $148 : HEAP32[$150 >> 2] | 0) + $__dg$025 | 0] | 0) > 0) {
       if (($__dc$024 | 0) != (HEAP8[($154 ? $148 : HEAP32[$150 >> 2] | 0) + $__dg$025 | 0] | 0)) {
        $__dc$1 = $__dc$024; //@line 9604
        $__dg$1 = $__dg$025; //@line 9604
        break;
       }
       $164 = HEAP32[$__oe >> 2] | 0; //@line 9607
       HEAP32[$__oe >> 2] = $164 + 4; //@line 9609
       HEAP32[$164 >> 2] = $145; //@line 9610
       $166 = HEAP8[$112] | 0; //@line 9611
       if (($166 & 1) == 0) {
        $172 = ($166 & 255) >>> 1; //@line 9617
       } else {
        $172 = HEAP32[$149 >> 2] | 0; //@line 9620
       }
       $__dc$1 = 0; //@line 9626
       $__dg$1 = ($__dg$025 >>> 0 < ($172 + -1 | 0) >>> 0) + $__dg$025 | 0; //@line 9626
      } else {
       $__dc$1 = $__dc$024; //@line 9628
       $__dg$1 = $__dg$025; //@line 9628
      }
     } while (0);
     $180 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$151 >> 2] | 0) + 44 >> 2] & 31]($25, HEAP8[$__p$026] | 0) | 0; //@line 9635
     $181 = HEAP32[$__oe >> 2] | 0; //@line 9636
     $182 = $181 + 4 | 0; //@line 9637
     HEAP32[$__oe >> 2] = $182; //@line 9638
     HEAP32[$181 >> 2] = $180; //@line 9639
     $184 = $__p$026 + 1 | 0; //@line 9641
     if ($184 >>> 0 < $__ns$2 >>> 0) {
      $__dc$024 = $__dc$1 + 1 | 0; //@line 9644
      $__dg$025 = $__dg$1; //@line 9644
      $__p$026 = $184; //@line 9644
     } else {
      $186 = $182; //@line 9646
      break;
     }
    }
   } else {
    $186 = HEAP32[$__oe >> 2] | 0; //@line 9652
   }
   $190 = $__ob + ($__nf$1 - $__nb << 2) | 0; //@line 9657
   if (($190 | 0) == ($186 | 0)) {
    $200 = $186; //@line 9660
    break;
   }
   $192 = $186 + -4 | 0; //@line 9663
   if ($192 >>> 0 > $190 >>> 0) {
    $$012$i$i13 = $190; //@line 9666
    $194 = $192; //@line 9666
   } else {
    $200 = $186; //@line 9668
    break;
   }
   while (1) {
    $195 = HEAP32[$$012$i$i13 >> 2] | 0; //@line 9672
    HEAP32[$$012$i$i13 >> 2] = HEAP32[$194 >> 2]; //@line 9674
    HEAP32[$194 >> 2] = $195; //@line 9675
    $197 = $$012$i$i13 + 4 | 0; //@line 9676
    $198 = $194 + -4 | 0; //@line 9677
    if ($197 >>> 0 < $198 >>> 0) {
     $194 = $198; //@line 9680
     $$012$i$i13 = $197; //@line 9680
    } else {
     $200 = $186; //@line 9682
     break;
    }
   }
  }
 } while (0);
 L73 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $202 = $21; //@line 9691
   $__nf$220 = $__ns$2; //@line 9692
   while (1) {
    $203 = HEAP8[$__nf$220] | 0; //@line 9694
    if ($203 << 24 >> 24 == 46) {
     break;
    }
    $216 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$202 >> 2] | 0) + 44 >> 2] & 31]($25, $203) | 0; //@line 9702
    $217 = HEAP32[$__oe >> 2] | 0; //@line 9703
    $218 = $217 + 4 | 0; //@line 9704
    HEAP32[$__oe >> 2] = $218; //@line 9705
    HEAP32[$217 >> 2] = $216; //@line 9706
    $219 = $__nf$220 + 1 | 0; //@line 9707
    if ($219 >>> 0 < $__ne >>> 0) {
     $__nf$220 = $219; //@line 9710
    } else {
     $221 = $218; //@line 9712
     $__nf$3 = $219; //@line 9712
     break L73;
    }
   }
   $209 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] & 127]($49) | 0; //@line 9720
   $210 = HEAP32[$__oe >> 2] | 0; //@line 9721
   $211 = $210 + 4 | 0; //@line 9722
   HEAP32[$__oe >> 2] = $211; //@line 9723
   HEAP32[$210 >> 2] = $209; //@line 9724
   $221 = $211; //@line 9726
   $__nf$3 = $__nf$220 + 1 | 0; //@line 9726
  } else {
   $221 = $200; //@line 9728
   $__nf$3 = $__ns$2; //@line 9728
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 48 >> 2] & 15]($25, $__nf$3, $__ne, $221) | 0; //@line 9735
 $229 = (HEAP32[$__oe >> 2] | 0) + ($63 - $__nf$3 << 2) | 0; //@line 9739
 HEAP32[$__oe >> 2] = $229; //@line 9740
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $229; //@line 9743
  HEAP32[$__op >> 2] = $storemerge; //@line 9744
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 9745
  STACKTOP = sp; //@line 9746
  return;
 }
 $storemerge = $__ob + ($__np - $__nb << 2) | 0; //@line 9752
 HEAP32[$__op >> 2] = $storemerge; //@line 9753
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 9754
 STACKTOP = sp; //@line 9755
 return;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $10 = 0, $103 = 0, $110 = 0, $118 = 0, $12 = 0, $122 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $138 = 0, $139 = 0, $140 = 0, $144 = 0, $153 = 0, $157 = 0, $166 = 0, $167 = 0, $179 = 0, $188 = 0, $192 = 0, $2 = 0, $20 = 0, $201 = 0, $24 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $55 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $81 = 0, $9 = 0, $90 = 0, $94 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 19001
 STACKTOP = STACKTOP + 176 | 0; //@line 19002
 $__p$i$i$i$i8 = sp; //@line 19003
 $__p$i$i$i$i = sp + 16 | 0; //@line 19004
 $1 = sp + 32 | 0; //@line 19005
 $2 = sp + 40 | 0; //@line 19006
 $3 = sp + 56 | 0; //@line 19007
 $4 = sp + 72 | 0; //@line 19008
 $5 = sp + 88 | 0; //@line 19009
 $6 = sp + 104 | 0; //@line 19010
 $7 = sp + 112 | 0; //@line 19011
 $8 = sp + 128 | 0; //@line 19012
 $9 = sp + 144 | 0; //@line 19013
 $10 = sp + 160 | 0; //@line 19014
 if ($__intl) {
  $12 = HEAP32[$__loc >> 2] | 0; //@line 19018
  if (!((HEAP32[1288] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i >> 2] = 5152; //@line 19024
   HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 19026
   HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 19028
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i, 126); //@line 19029
  }
  $20 = (HEAP32[5156 >> 2] | 0) + -1 | 0; //@line 19032
  $24 = HEAP32[$12 + 8 >> 2] | 0; //@line 19036
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $24 >> 2 >>> 0 > $20 >>> 0)) {
   $33 = ___cxa_allocate_exception(4) | 0; //@line 19043
   $34 = $33; //@line 19044
   __ZNSt8bad_castC2Ev($34); //@line 19045
   ___cxa_throw($33 | 0, 13672, 114); //@line 19046
  }
  $31 = HEAP32[$24 + ($20 << 2) >> 2] | 0; //@line 19050
  if (($31 | 0) == 0) {
   $33 = ___cxa_allocate_exception(4) | 0; //@line 19053
   $34 = $33; //@line 19054
   __ZNSt8bad_castC2Ev($34); //@line 19055
   ___cxa_throw($33 | 0, 13672, 114); //@line 19056
  }
  $35 = $31; //@line 19059
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$31 >> 2] | 0) + 44 >> 2] & 63]($1, $35); //@line 19064
  $40 = $__pat; //@line 19065
  $41 = HEAP32[$1 >> 2] | 0; //@line 19066
  HEAP8[$40] = $41; //@line 19067
  HEAP8[$40 + 1 | 0] = $41 >> 8; //@line 19067
  HEAP8[$40 + 2 | 0] = $41 >> 16; //@line 19067
  HEAP8[$40 + 3 | 0] = $41 >> 24; //@line 19067
  $42 = $31; //@line 19068
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 32 >> 2] & 63]($2, $35); //@line 19072
  $46 = $__nsn; //@line 19073
  if ((HEAP8[$46] & 1) == 0) {
   HEAP8[$__nsn + 1 | 0] = 0; //@line 19080
   HEAP8[$46] = 0; //@line 19081
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] | 0] = 0; //@line 19085
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 19087
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0); //@line 19089
  $55 = $2; //@line 19090
  HEAP32[$46 + 0 >> 2] = HEAP32[$55 + 0 >> 2]; //@line 19091
  HEAP32[$46 + 4 >> 2] = HEAP32[$55 + 4 >> 2]; //@line 19091
  HEAP32[$46 + 8 >> 2] = HEAP32[$55 + 8 >> 2]; //@line 19091
  HEAP32[$55 + 0 >> 2] = 0; //@line 19092
  HEAP32[$55 + 4 >> 2] = 0; //@line 19092
  HEAP32[$55 + 8 >> 2] = 0; //@line 19092
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2); //@line 19093
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 28 >> 2] & 63]($3, $35); //@line 19097
  $59 = $__psn; //@line 19098
  if ((HEAP8[$59] & 1) == 0) {
   HEAP8[$__psn + 1 | 0] = 0; //@line 19105
   HEAP8[$59] = 0; //@line 19106
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] | 0] = 0; //@line 19110
   HEAP32[$__psn + 4 >> 2] = 0; //@line 19112
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0); //@line 19114
  $68 = $3; //@line 19115
  HEAP32[$59 + 0 >> 2] = HEAP32[$68 + 0 >> 2]; //@line 19116
  HEAP32[$59 + 4 >> 2] = HEAP32[$68 + 4 >> 2]; //@line 19116
  HEAP32[$59 + 8 >> 2] = HEAP32[$68 + 8 >> 2]; //@line 19116
  HEAP32[$68 + 0 >> 2] = 0; //@line 19117
  HEAP32[$68 + 4 >> 2] = 0; //@line 19117
  HEAP32[$68 + 8 >> 2] = 0; //@line 19117
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3); //@line 19118
  $69 = $31; //@line 19119
  HEAP8[$__dp] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 12 >> 2] & 127]($35) | 0; //@line 19124
  HEAP8[$__ts] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 16 >> 2] & 127]($35) | 0; //@line 19129
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 20 >> 2] & 63]($4, $35); //@line 19133
  $81 = $__grp; //@line 19134
  if ((HEAP8[$81] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 19141
   HEAP8[$81] = 0; //@line 19142
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 19146
   HEAP32[$__grp + 4 >> 2] = 0; //@line 19148
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 19150
  $90 = $4; //@line 19151
  HEAP32[$81 + 0 >> 2] = HEAP32[$90 + 0 >> 2]; //@line 19152
  HEAP32[$81 + 4 >> 2] = HEAP32[$90 + 4 >> 2]; //@line 19152
  HEAP32[$81 + 8 >> 2] = HEAP32[$90 + 8 >> 2]; //@line 19152
  HEAP32[$90 + 0 >> 2] = 0; //@line 19153
  HEAP32[$90 + 4 >> 2] = 0; //@line 19153
  HEAP32[$90 + 8 >> 2] = 0; //@line 19153
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4); //@line 19154
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 24 >> 2] & 63]($5, $35); //@line 19158
  $94 = $__sym; //@line 19159
  if ((HEAP8[$94] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0; //@line 19166
   HEAP8[$94] = 0; //@line 19167
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] | 0] = 0; //@line 19171
   HEAP32[$__sym + 4 >> 2] = 0; //@line 19173
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 19175
  $103 = $5; //@line 19176
  HEAP32[$94 + 0 >> 2] = HEAP32[$103 + 0 >> 2]; //@line 19177
  HEAP32[$94 + 4 >> 2] = HEAP32[$103 + 4 >> 2]; //@line 19177
  HEAP32[$94 + 8 >> 2] = HEAP32[$103 + 8 >> 2]; //@line 19177
  HEAP32[$103 + 0 >> 2] = 0; //@line 19178
  HEAP32[$103 + 4 >> 2] = 0; //@line 19178
  HEAP32[$103 + 8 >> 2] = 0; //@line 19178
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5); //@line 19179
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; //@line 19185
  HEAP32[$__fd >> 2] = $storemerge; //@line 19186
  STACKTOP = sp; //@line 19187
  return;
 } else {
  $110 = HEAP32[$__loc >> 2] | 0; //@line 19191
  if (!((HEAP32[1272] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 5088; //@line 19197
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 125; //@line 19199
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0; //@line 19201
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5088, $__p$i$i$i$i8, 126); //@line 19202
  }
  $118 = (HEAP32[5092 >> 2] | 0) + -1 | 0; //@line 19205
  $122 = HEAP32[$110 + 8 >> 2] | 0; //@line 19209
  if (!((HEAP32[$110 + 12 >> 2] | 0) - $122 >> 2 >>> 0 > $118 >>> 0)) {
   $131 = ___cxa_allocate_exception(4) | 0; //@line 19216
   $132 = $131; //@line 19217
   __ZNSt8bad_castC2Ev($132); //@line 19218
   ___cxa_throw($131 | 0, 13672, 114); //@line 19219
  }
  $129 = HEAP32[$122 + ($118 << 2) >> 2] | 0; //@line 19223
  if (($129 | 0) == 0) {
   $131 = ___cxa_allocate_exception(4) | 0; //@line 19226
   $132 = $131; //@line 19227
   __ZNSt8bad_castC2Ev($132); //@line 19228
   ___cxa_throw($131 | 0, 13672, 114); //@line 19229
  }
  $133 = $129; //@line 19232
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$129 >> 2] | 0) + 44 >> 2] & 63]($6, $133); //@line 19237
  $138 = $__pat; //@line 19238
  $139 = HEAP32[$6 >> 2] | 0; //@line 19239
  HEAP8[$138] = $139; //@line 19240
  HEAP8[$138 + 1 | 0] = $139 >> 8; //@line 19240
  HEAP8[$138 + 2 | 0] = $139 >> 16; //@line 19240
  HEAP8[$138 + 3 | 0] = $139 >> 24; //@line 19240
  $140 = $129; //@line 19241
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$140 >> 2] | 0) + 32 >> 2] & 63]($7, $133); //@line 19245
  $144 = $__nsn; //@line 19246
  if ((HEAP8[$144] & 1) == 0) {
   HEAP8[$__nsn + 1 | 0] = 0; //@line 19253
   HEAP8[$144] = 0; //@line 19254
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] | 0] = 0; //@line 19258
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 19260
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0); //@line 19262
  $153 = $7; //@line 19263
  HEAP32[$144 + 0 >> 2] = HEAP32[$153 + 0 >> 2]; //@line 19264
  HEAP32[$144 + 4 >> 2] = HEAP32[$153 + 4 >> 2]; //@line 19264
  HEAP32[$144 + 8 >> 2] = HEAP32[$153 + 8 >> 2]; //@line 19264
  HEAP32[$153 + 0 >> 2] = 0; //@line 19265
  HEAP32[$153 + 4 >> 2] = 0; //@line 19265
  HEAP32[$153 + 8 >> 2] = 0; //@line 19265
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7); //@line 19266
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$140 >> 2] | 0) + 28 >> 2] & 63]($8, $133); //@line 19270
  $157 = $__psn; //@line 19271
  if ((HEAP8[$157] & 1) == 0) {
   HEAP8[$__psn + 1 | 0] = 0; //@line 19278
   HEAP8[$157] = 0; //@line 19279
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] | 0] = 0; //@line 19283
   HEAP32[$__psn + 4 >> 2] = 0; //@line 19285
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0); //@line 19287
  $166 = $8; //@line 19288
  HEAP32[$157 + 0 >> 2] = HEAP32[$166 + 0 >> 2]; //@line 19289
  HEAP32[$157 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 19289
  HEAP32[$157 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 19289
  HEAP32[$166 + 0 >> 2] = 0; //@line 19290
  HEAP32[$166 + 4 >> 2] = 0; //@line 19290
  HEAP32[$166 + 8 >> 2] = 0; //@line 19290
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8); //@line 19291
  $167 = $129; //@line 19292
  HEAP8[$__dp] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$167 >> 2] | 0) + 12 >> 2] & 127]($133) | 0; //@line 19297
  HEAP8[$__ts] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$167 >> 2] | 0) + 16 >> 2] & 127]($133) | 0; //@line 19302
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$140 >> 2] | 0) + 20 >> 2] & 63]($9, $133); //@line 19306
  $179 = $__grp; //@line 19307
  if ((HEAP8[$179] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 19314
   HEAP8[$179] = 0; //@line 19315
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 19319
   HEAP32[$__grp + 4 >> 2] = 0; //@line 19321
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 19323
  $188 = $9; //@line 19324
  HEAP32[$179 + 0 >> 2] = HEAP32[$188 + 0 >> 2]; //@line 19325
  HEAP32[$179 + 4 >> 2] = HEAP32[$188 + 4 >> 2]; //@line 19325
  HEAP32[$179 + 8 >> 2] = HEAP32[$188 + 8 >> 2]; //@line 19325
  HEAP32[$188 + 0 >> 2] = 0; //@line 19326
  HEAP32[$188 + 4 >> 2] = 0; //@line 19326
  HEAP32[$188 + 8 >> 2] = 0; //@line 19326
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9); //@line 19327
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$140 >> 2] | 0) + 24 >> 2] & 63]($10, $133); //@line 19331
  $192 = $__sym; //@line 19332
  if ((HEAP8[$192] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0; //@line 19339
   HEAP8[$192] = 0; //@line 19340
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] | 0] = 0; //@line 19344
   HEAP32[$__sym + 4 >> 2] = 0; //@line 19346
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 19348
  $201 = $10; //@line 19349
  HEAP32[$192 + 0 >> 2] = HEAP32[$201 + 0 >> 2]; //@line 19350
  HEAP32[$192 + 4 >> 2] = HEAP32[$201 + 4 >> 2]; //@line 19350
  HEAP32[$192 + 8 >> 2] = HEAP32[$201 + 8 >> 2]; //@line 19350
  HEAP32[$201 + 0 >> 2] = 0; //@line 19351
  HEAP32[$201 + 4 >> 2] = 0; //@line 19351
  HEAP32[$201 + 8 >> 2] = 0; //@line 19351
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10); //@line 19352
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 36 >> 2] & 127]($133) | 0; //@line 19358
  HEAP32[$__fd >> 2] = $storemerge; //@line 19359
  STACKTOP = sp; //@line 19360
  return;
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $10 = 0, $101 = 0, $107 = 0, $115 = 0, $119 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $135 = 0, $136 = 0, $137 = 0, $141 = 0, $149 = 0, $153 = 0, $161 = 0, $162 = 0, $175 = 0, $184 = 0, $188 = 0, $196 = 0, $2 = 0, $20 = 0, $24 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $54 = 0, $58 = 0, $6 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $80 = 0, $89 = 0, $9 = 0, $93 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 2279
 STACKTOP = STACKTOP + 176 | 0; //@line 2280
 $__p$i$i$i$i6 = sp; //@line 2281
 $__p$i$i$i$i = sp + 16 | 0; //@line 2282
 $1 = sp + 32 | 0; //@line 2283
 $2 = sp + 40 | 0; //@line 2284
 $3 = sp + 56 | 0; //@line 2285
 $4 = sp + 72 | 0; //@line 2286
 $5 = sp + 88 | 0; //@line 2287
 $6 = sp + 104 | 0; //@line 2288
 $7 = sp + 112 | 0; //@line 2289
 $8 = sp + 128 | 0; //@line 2290
 $9 = sp + 144 | 0; //@line 2291
 $10 = sp + 160 | 0; //@line 2292
 if ($__intl) {
  $12 = HEAP32[$__loc >> 2] | 0; //@line 2296
  if (!((HEAP32[1320] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i >> 2] = 5280; //@line 2302
   HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 2304
   HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 2306
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5280, $__p$i$i$i$i, 126); //@line 2307
  }
  $20 = (HEAP32[5284 >> 2] | 0) + -1 | 0; //@line 2310
  $24 = HEAP32[$12 + 8 >> 2] | 0; //@line 2314
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $24 >> 2 >>> 0 > $20 >>> 0)) {
   $33 = ___cxa_allocate_exception(4) | 0; //@line 2321
   $34 = $33; //@line 2322
   __ZNSt8bad_castC2Ev($34); //@line 2323
   ___cxa_throw($33 | 0, 13672, 114); //@line 2324
  }
  $31 = HEAP32[$24 + ($20 << 2) >> 2] | 0; //@line 2328
  if (($31 | 0) == 0) {
   $33 = ___cxa_allocate_exception(4) | 0; //@line 2331
   $34 = $33; //@line 2332
   __ZNSt8bad_castC2Ev($34); //@line 2333
   ___cxa_throw($33 | 0, 13672, 114); //@line 2334
  }
  $35 = $31; //@line 2337
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$31 >> 2] | 0) + 44 >> 2] & 63]($1, $35); //@line 2342
  $40 = $__pat; //@line 2343
  $41 = HEAP32[$1 >> 2] | 0; //@line 2344
  HEAP8[$40] = $41; //@line 2345
  HEAP8[$40 + 1 | 0] = $41 >> 8; //@line 2345
  HEAP8[$40 + 2 | 0] = $41 >> 16; //@line 2345
  HEAP8[$40 + 3 | 0] = $41 >> 24; //@line 2345
  $42 = $31; //@line 2346
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 32 >> 2] & 63]($2, $35); //@line 2350
  $46 = $__nsn; //@line 2351
  if ((HEAP8[$46] & 1) == 0) {
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 2357
   HEAP8[$46] = 0; //@line 2358
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0; //@line 2362
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 2364
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0); //@line 2366
  $54 = $2; //@line 2367
  HEAP32[$46 + 0 >> 2] = HEAP32[$54 + 0 >> 2]; //@line 2368
  HEAP32[$46 + 4 >> 2] = HEAP32[$54 + 4 >> 2]; //@line 2368
  HEAP32[$46 + 8 >> 2] = HEAP32[$54 + 8 >> 2]; //@line 2368
  HEAP32[$54 + 0 >> 2] = 0; //@line 2369
  HEAP32[$54 + 4 >> 2] = 0; //@line 2369
  HEAP32[$54 + 8 >> 2] = 0; //@line 2369
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2); //@line 2370
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 28 >> 2] & 63]($3, $35); //@line 2374
  $58 = $__psn; //@line 2375
  if ((HEAP8[$58] & 1) == 0) {
   HEAP32[$__psn + 4 >> 2] = 0; //@line 2381
   HEAP8[$58] = 0; //@line 2382
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0; //@line 2386
   HEAP32[$__psn + 4 >> 2] = 0; //@line 2388
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0); //@line 2390
  $66 = $3; //@line 2391
  HEAP32[$58 + 0 >> 2] = HEAP32[$66 + 0 >> 2]; //@line 2392
  HEAP32[$58 + 4 >> 2] = HEAP32[$66 + 4 >> 2]; //@line 2392
  HEAP32[$58 + 8 >> 2] = HEAP32[$66 + 8 >> 2]; //@line 2392
  HEAP32[$66 + 0 >> 2] = 0; //@line 2393
  HEAP32[$66 + 4 >> 2] = 0; //@line 2393
  HEAP32[$66 + 8 >> 2] = 0; //@line 2393
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3); //@line 2394
  $67 = $31; //@line 2395
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 12 >> 2] & 127]($35) | 0; //@line 2400
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 16 >> 2] & 127]($35) | 0; //@line 2405
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$31 >> 2] | 0) + 20 >> 2] & 63]($4, $35); //@line 2410
  $80 = $__grp; //@line 2411
  if ((HEAP8[$80] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 2418
   HEAP8[$80] = 0; //@line 2419
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 2423
   HEAP32[$__grp + 4 >> 2] = 0; //@line 2425
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 2427
  $89 = $4; //@line 2428
  HEAP32[$80 + 0 >> 2] = HEAP32[$89 + 0 >> 2]; //@line 2429
  HEAP32[$80 + 4 >> 2] = HEAP32[$89 + 4 >> 2]; //@line 2429
  HEAP32[$80 + 8 >> 2] = HEAP32[$89 + 8 >> 2]; //@line 2429
  HEAP32[$89 + 0 >> 2] = 0; //@line 2430
  HEAP32[$89 + 4 >> 2] = 0; //@line 2430
  HEAP32[$89 + 8 >> 2] = 0; //@line 2430
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4); //@line 2431
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$42 >> 2] | 0) + 24 >> 2] & 63]($5, $35); //@line 2435
  $93 = $__sym; //@line 2436
  if ((HEAP8[$93] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2442
   HEAP8[$93] = 0; //@line 2443
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 2447
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2449
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 2451
  $101 = $5; //@line 2452
  HEAP32[$93 + 0 >> 2] = HEAP32[$101 + 0 >> 2]; //@line 2453
  HEAP32[$93 + 4 >> 2] = HEAP32[$101 + 4 >> 2]; //@line 2453
  HEAP32[$93 + 8 >> 2] = HEAP32[$101 + 8 >> 2]; //@line 2453
  HEAP32[$101 + 0 >> 2] = 0; //@line 2454
  HEAP32[$101 + 4 >> 2] = 0; //@line 2454
  HEAP32[$101 + 8 >> 2] = 0; //@line 2454
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5); //@line 2455
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; //@line 2460
  HEAP32[$__fd >> 2] = $storemerge; //@line 2461
  STACKTOP = sp; //@line 2462
  return;
 } else {
  $107 = HEAP32[$__loc >> 2] | 0; //@line 2466
  if (!((HEAP32[1304] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i6 >> 2] = 5216; //@line 2472
   HEAP32[$__p$i$i$i$i6 + 4 >> 2] = 125; //@line 2474
   HEAP32[$__p$i$i$i$i6 + 8 >> 2] = 0; //@line 2476
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5216, $__p$i$i$i$i6, 126); //@line 2477
  }
  $115 = (HEAP32[5220 >> 2] | 0) + -1 | 0; //@line 2480
  $119 = HEAP32[$107 + 8 >> 2] | 0; //@line 2484
  if (!((HEAP32[$107 + 12 >> 2] | 0) - $119 >> 2 >>> 0 > $115 >>> 0)) {
   $128 = ___cxa_allocate_exception(4) | 0; //@line 2491
   $129 = $128; //@line 2492
   __ZNSt8bad_castC2Ev($129); //@line 2493
   ___cxa_throw($128 | 0, 13672, 114); //@line 2494
  }
  $126 = HEAP32[$119 + ($115 << 2) >> 2] | 0; //@line 2498
  if (($126 | 0) == 0) {
   $128 = ___cxa_allocate_exception(4) | 0; //@line 2501
   $129 = $128; //@line 2502
   __ZNSt8bad_castC2Ev($129); //@line 2503
   ___cxa_throw($128 | 0, 13672, 114); //@line 2504
  }
  $130 = $126; //@line 2507
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] & 63]($6, $130); //@line 2512
  $135 = $__pat; //@line 2513
  $136 = HEAP32[$6 >> 2] | 0; //@line 2514
  HEAP8[$135] = $136; //@line 2515
  HEAP8[$135 + 1 | 0] = $136 >> 8; //@line 2515
  HEAP8[$135 + 2 | 0] = $136 >> 16; //@line 2515
  HEAP8[$135 + 3 | 0] = $136 >> 24; //@line 2515
  $137 = $126; //@line 2516
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$137 >> 2] | 0) + 32 >> 2] & 63]($7, $130); //@line 2520
  $141 = $__nsn; //@line 2521
  if ((HEAP8[$141] & 1) == 0) {
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 2527
   HEAP8[$141] = 0; //@line 2528
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0; //@line 2532
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 2534
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0); //@line 2536
  $149 = $7; //@line 2537
  HEAP32[$141 + 0 >> 2] = HEAP32[$149 + 0 >> 2]; //@line 2538
  HEAP32[$141 + 4 >> 2] = HEAP32[$149 + 4 >> 2]; //@line 2538
  HEAP32[$141 + 8 >> 2] = HEAP32[$149 + 8 >> 2]; //@line 2538
  HEAP32[$149 + 0 >> 2] = 0; //@line 2539
  HEAP32[$149 + 4 >> 2] = 0; //@line 2539
  HEAP32[$149 + 8 >> 2] = 0; //@line 2539
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7); //@line 2540
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$137 >> 2] | 0) + 28 >> 2] & 63]($8, $130); //@line 2544
  $153 = $__psn; //@line 2545
  if ((HEAP8[$153] & 1) == 0) {
   HEAP32[$__psn + 4 >> 2] = 0; //@line 2551
   HEAP8[$153] = 0; //@line 2552
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0; //@line 2556
   HEAP32[$__psn + 4 >> 2] = 0; //@line 2558
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0); //@line 2560
  $161 = $8; //@line 2561
  HEAP32[$153 + 0 >> 2] = HEAP32[$161 + 0 >> 2]; //@line 2562
  HEAP32[$153 + 4 >> 2] = HEAP32[$161 + 4 >> 2]; //@line 2562
  HEAP32[$153 + 8 >> 2] = HEAP32[$161 + 8 >> 2]; //@line 2562
  HEAP32[$161 + 0 >> 2] = 0; //@line 2563
  HEAP32[$161 + 4 >> 2] = 0; //@line 2563
  HEAP32[$161 + 8 >> 2] = 0; //@line 2563
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8); //@line 2564
  $162 = $126; //@line 2565
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 12 >> 2] & 127]($130) | 0; //@line 2570
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 16 >> 2] & 127]($130) | 0; //@line 2575
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] & 63]($9, $130); //@line 2580
  $175 = $__grp; //@line 2581
  if ((HEAP8[$175] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0; //@line 2588
   HEAP8[$175] = 0; //@line 2589
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] | 0] = 0; //@line 2593
   HEAP32[$__grp + 4 >> 2] = 0; //@line 2595
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 2597
  $184 = $9; //@line 2598
  HEAP32[$175 + 0 >> 2] = HEAP32[$184 + 0 >> 2]; //@line 2599
  HEAP32[$175 + 4 >> 2] = HEAP32[$184 + 4 >> 2]; //@line 2599
  HEAP32[$175 + 8 >> 2] = HEAP32[$184 + 8 >> 2]; //@line 2599
  HEAP32[$184 + 0 >> 2] = 0; //@line 2600
  HEAP32[$184 + 4 >> 2] = 0; //@line 2600
  HEAP32[$184 + 8 >> 2] = 0; //@line 2600
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9); //@line 2601
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$137 >> 2] | 0) + 24 >> 2] & 63]($10, $130); //@line 2605
  $188 = $__sym; //@line 2606
  if ((HEAP8[$188] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2612
   HEAP8[$188] = 0; //@line 2613
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 2617
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2619
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 2621
  $196 = $10; //@line 2622
  HEAP32[$188 + 0 >> 2] = HEAP32[$196 + 0 >> 2]; //@line 2623
  HEAP32[$188 + 4 >> 2] = HEAP32[$196 + 4 >> 2]; //@line 2623
  HEAP32[$188 + 8 >> 2] = HEAP32[$196 + 8 >> 2]; //@line 2623
  HEAP32[$196 + 0 >> 2] = 0; //@line 2624
  HEAP32[$196 + 4 >> 2] = 0; //@line 2624
  HEAP32[$196 + 8 >> 2] = 0; //@line 2624
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10); //@line 2625
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 127]($130) | 0; //@line 2630
  HEAP32[$__fd >> 2] = $storemerge; //@line 2631
  STACKTOP = sp; //@line 2632
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $107 = 0, $110 = 0, $113 = 0, $116 = 0, $117 = 0, $121 = 0, $122 = 0, $130 = 0, $139 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $155 = 0, $156 = 0, $164 = 0, $173 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $198 = 0, $25 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $49 = 0, $72 = 0, $74 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $98 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13586
 $1 = $this; //@line 13587
 if (($1 | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp; //@line 13597
   return;
  }
  $9 = $info + 28 | 0; //@line 13599
  if ((HEAP32[$9 >> 2] | 0) == 1) {
   STACKTOP = sp; //@line 13603
   return;
  }
  HEAP32[$9 >> 2] = $path_below; //@line 13605
  STACKTOP = sp; //@line 13606
  return;
 }
 if (($1 | 0) == (HEAP32[$info >> 2] | 0)) {
  do {
   if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
    $19 = $info + 20 | 0; //@line 13618
    if ((HEAP32[$19 >> 2] | 0) == ($current_ptr | 0)) {
     break;
    }
    HEAP32[$info + 32 >> 2] = $path_below; //@line 13625
    $25 = $info + 44 | 0; //@line 13626
    if ((HEAP32[$25 >> 2] | 0) == 4) {
     STACKTOP = sp; //@line 13630
     return;
    }
    $29 = HEAP32[$this + 12 >> 2] | 0; //@line 13633
    $30 = $this + ($29 << 3) + 16 | 0; //@line 13634
    L19 : do {
     if (($29 | 0) > 0) {
      $33 = $info + 52 | 0; //@line 13639
      $34 = $info + 53 | 0; //@line 13640
      $35 = $info + 54 | 0; //@line 13641
      $36 = $this + 8 | 0; //@line 13642
      $37 = $info + 24 | 0; //@line 13643
      $38 = $current_ptr; //@line 13644
      $does_dst_type_point_to_our_static_type$0$off019 = 0; //@line 13645
      $is_dst_type_derived_from_static_type$0$off021 = 0; //@line 13645
      $p$020 = $this + 16 | 0; //@line 13645
      L21 : while (1) {
       HEAP8[$33] = 0; //@line 13647
       HEAP8[$34] = 0; //@line 13648
       $40 = HEAP32[$p$020 + 4 >> 2] | 0; //@line 13650
       $41 = $40 >> 8; //@line 13651
       if (($40 & 1 | 0) == 0) {
        $offset_to_base$0$i13 = $41; //@line 13655
       } else {
        $offset_to_base$0$i13 = HEAP32[(HEAP32[$38 >> 2] | 0) + $41 >> 2] | 0; //@line 13661
       }
       $49 = HEAP32[$p$020 >> 2] | 0; //@line 13664
       FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 31]($49, $info, $current_ptr, $current_ptr + $offset_to_base$0$i13 | 0, 2 - ($40 >>> 1 & 1) | 0, $use_strcmp); //@line 13673
       if ((HEAP8[$35] | 0) != 0) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019; //@line 13677
        $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021; //@line 13677
        break;
       }
       do {
        if ((HEAP8[$34] | 0) == 0) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019; //@line 13684
         $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021; //@line 13684
        } else {
         if ((HEAP8[$33] | 0) == 0) {
          if ((HEAP32[$36 >> 2] & 1 | 0) == 0) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019; //@line 13693
           $is_dst_type_derived_from_static_type$2$off0 = 1; //@line 13693
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019; //@line 13696
           $is_dst_type_derived_from_static_type$1$off0 = 1; //@line 13696
           break;
          }
         }
         if ((HEAP32[$37 >> 2] | 0) == 1) {
          label = 27; //@line 13703
          break L19;
         }
         if ((HEAP32[$36 >> 2] & 2 | 0) == 0) {
          label = 27; //@line 13710
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1; //@line 13713
          $is_dst_type_derived_from_static_type$1$off0 = 1; //@line 13713
         }
        }
       } while (0);
       $72 = $p$020 + 8 | 0; //@line 13717
       if ($72 >>> 0 < $30 >>> 0) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0; //@line 13720
        $is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0; //@line 13720
        $p$020 = $72; //@line 13720
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0; //@line 13722
        $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0; //@line 13722
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0; //@line 13727
       label = 26; //@line 13728
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0; //@line 13730
       label = 23; //@line 13731
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0; //@line 13734
      label = 23; //@line 13735
     }
    } while (0);
    do {
     if ((label | 0) == 23) {
      HEAP32[$19 >> 2] = $current_ptr; //@line 13740
      $74 = $info + 40 | 0; //@line 13741
      HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + 1; //@line 13744
      if ((HEAP32[$info + 36 >> 2] | 0) != 1) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030; //@line 13749
       label = 26; //@line 13750
       break;
      }
      if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030; //@line 13757
       label = 26; //@line 13758
       break;
      }
      HEAP8[$info + 54 | 0] = 1; //@line 13762
      if ($is_dst_type_derived_from_static_type$2$off030) {
       label = 27; //@line 13764
      } else {
       label = 28; //@line 13766
      }
     }
    } while (0);
    if ((label | 0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27; //@line 13772
     } else {
      label = 28; //@line 13774
     }
    }
    if ((label | 0) == 27) {
     HEAP32[$25 >> 2] = 3; //@line 13778
     STACKTOP = sp; //@line 13779
     return;
    } else if ((label | 0) == 28) {
     HEAP32[$25 >> 2] = 4; //@line 13782
     STACKTOP = sp; //@line 13783
     return;
    }
   }
  } while (0);
  if (($path_below | 0) != 1) {
   STACKTOP = sp; //@line 13789
   return;
  }
  HEAP32[$info + 32 >> 2] = 1; //@line 13792
  STACKTOP = sp; //@line 13793
  return;
 }
 $85 = HEAP32[$this + 12 >> 2] | 0; //@line 13796
 $86 = $this + ($85 << 3) + 16 | 0; //@line 13797
 $88 = HEAP32[$this + 20 >> 2] | 0; //@line 13799
 $89 = $88 >> 8; //@line 13800
 if (($88 & 1 | 0) == 0) {
  $offset_to_base$0$i14 = $89; //@line 13804
 } else {
  $offset_to_base$0$i14 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $89 >> 2] | 0; //@line 13811
 }
 $98 = HEAP32[$this + 16 >> 2] | 0; //@line 13814
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$98 >> 2] | 0) + 24 >> 2] & 7]($98, $info, $current_ptr + $offset_to_base$0$i14 | 0, ($88 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 13823
 $107 = $this + 24 | 0; //@line 13824
 if (($85 | 0) <= 1) {
  STACKTOP = sp; //@line 13827
  return;
 }
 $110 = HEAP32[$this + 8 >> 2] | 0; //@line 13830
 do {
  if (($110 & 2 | 0) == 0) {
   $113 = $info + 36 | 0; //@line 13835
   if ((HEAP32[$113 >> 2] | 0) == 1) {
    break;
   }
   if (($110 & 1 | 0) == 0) {
    $146 = $info + 54 | 0; //@line 13844
    $147 = $current_ptr; //@line 13845
    $p2$2 = $107; //@line 13846
    while (1) {
     if ((HEAP8[$146] | 0) != 0) {
      label = 53; //@line 13851
      break;
     }
     if ((HEAP32[$113 >> 2] | 0) == 1) {
      label = 53; //@line 13857
      break;
     }
     $180 = HEAP32[$p2$2 + 4 >> 2] | 0; //@line 13861
     $181 = $180 >> 8; //@line 13862
     if (($180 & 1 | 0) == 0) {
      $offset_to_base$0$i = $181; //@line 13866
     } else {
      $offset_to_base$0$i = HEAP32[(HEAP32[$147 >> 2] | 0) + $181 >> 2] | 0; //@line 13872
     }
     $189 = HEAP32[$p2$2 >> 2] | 0; //@line 13875
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$189 >> 2] | 0) + 24 >> 2] & 7]($189, $info, $current_ptr + $offset_to_base$0$i | 0, ($180 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 13884
     $198 = $p2$2 + 8 | 0; //@line 13885
     if ($198 >>> 0 < $86 >>> 0) {
      $p2$2 = $198; //@line 13888
     } else {
      label = 53; //@line 13890
      break;
     }
    }
    if ((label | 0) == 53) {
     STACKTOP = sp; //@line 13895
     return;
    }
   }
   $143 = $info + 24 | 0; //@line 13898
   $144 = $info + 54 | 0; //@line 13899
   $145 = $current_ptr; //@line 13900
   $p2$1 = $107; //@line 13901
   while (1) {
    if ((HEAP8[$144] | 0) != 0) {
     label = 53; //@line 13906
     break;
    }
    if ((HEAP32[$113 >> 2] | 0) == 1) {
     if ((HEAP32[$143 >> 2] | 0) == 1) {
      label = 53; //@line 13915
      break;
     }
    }
    $155 = HEAP32[$p2$1 + 4 >> 2] | 0; //@line 13920
    $156 = $155 >> 8; //@line 13921
    if (($155 & 1 | 0) == 0) {
     $offset_to_base$0$i9 = $156; //@line 13925
    } else {
     $offset_to_base$0$i9 = HEAP32[(HEAP32[$145 >> 2] | 0) + $156 >> 2] | 0; //@line 13931
    }
    $164 = HEAP32[$p2$1 >> 2] | 0; //@line 13934
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$164 >> 2] | 0) + 24 >> 2] & 7]($164, $info, $current_ptr + $offset_to_base$0$i9 | 0, ($155 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 13943
    $173 = $p2$1 + 8 | 0; //@line 13944
    if ($173 >>> 0 < $86 >>> 0) {
     $p2$1 = $173; //@line 13947
    } else {
     label = 53; //@line 13949
     break;
    }
   }
   if ((label | 0) == 53) {
    STACKTOP = sp; //@line 13954
    return;
   }
  }
 } while (0);
 $116 = $info + 54 | 0; //@line 13958
 $117 = $current_ptr; //@line 13959
 $p2$0 = $107; //@line 13960
 while (1) {
  if ((HEAP8[$116] | 0) != 0) {
   label = 53; //@line 13965
   break;
  }
  $121 = HEAP32[$p2$0 + 4 >> 2] | 0; //@line 13969
  $122 = $121 >> 8; //@line 13970
  if (($121 & 1 | 0) == 0) {
   $offset_to_base$0$i11 = $122; //@line 13974
  } else {
   $offset_to_base$0$i11 = HEAP32[(HEAP32[$117 >> 2] | 0) + $122 >> 2] | 0; //@line 13980
  }
  $130 = HEAP32[$p2$0 >> 2] | 0; //@line 13983
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] & 7]($130, $info, $current_ptr + $offset_to_base$0$i11 | 0, ($121 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 13992
  $139 = $p2$0 + 8 | 0; //@line 13993
  if ($139 >>> 0 < $86 >>> 0) {
   $p2$0 = $139; //@line 13996
  } else {
   label = 53; //@line 13998
   break;
  }
 }
 if ((label | 0) == 53) {
  STACKTOP = sp; //@line 14003
  return;
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i13 = 0, $1 = 0, $10 = 0, $101 = 0, $111 = 0, $112 = 0, $113 = 0, $120 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $145 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $164 = 0, $166 = 0, $172 = 0, $180 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $192 = 0, $194 = 0, $195 = 0, $2 = 0, $201 = 0, $202 = 0, $208 = 0, $209 = 0, $21 = 0, $215 = 0, $216 = 0, $218 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $34 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $63 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $79 = 0, $84 = 0, $85 = 0, $89 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0, $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6765
 STACKTOP = STACKTOP + 48 | 0; //@line 6766
 $__p$i$i$i$i1 = sp; //@line 6767
 $__p$i$i$i$i = sp + 16 | 0; //@line 6768
 $__grouping = sp + 32 | 0; //@line 6769
 $1 = $__loc; //@line 6770
 $2 = HEAP32[$1 >> 2] | 0; //@line 6771
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 6777
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 6779
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 6781
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 6782
 }
 $10 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 6785
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 6789
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 6796
  $24 = $23; //@line 6797
  __ZNSt8bad_castC2Ev($24); //@line 6798
  ___cxa_throw($23 | 0, 13672, 114); //@line 6799
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 6803
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 6806
  $24 = $23; //@line 6807
  __ZNSt8bad_castC2Ev($24); //@line 6808
  ___cxa_throw($23 | 0, 13672, 114); //@line 6809
 }
 $25 = $21; //@line 6812
 $26 = HEAP32[$1 >> 2] | 0; //@line 6813
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5856; //@line 6819
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 125; //@line 6821
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0; //@line 6823
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i1, 126); //@line 6824
 }
 $34 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 6827
 $38 = HEAP32[$26 + 8 >> 2] | 0; //@line 6831
 if (!((HEAP32[$26 + 12 >> 2] | 0) - $38 >> 2 >>> 0 > $34 >>> 0)) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 6838
  $48 = $47; //@line 6839
  __ZNSt8bad_castC2Ev($48); //@line 6840
  ___cxa_throw($47 | 0, 13672, 114); //@line 6841
 }
 $45 = HEAP32[$38 + ($34 << 2) >> 2] | 0; //@line 6845
 if (($45 | 0) == 0) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 6848
  $48 = $47; //@line 6849
  __ZNSt8bad_castC2Ev($48); //@line 6850
  ___cxa_throw($47 | 0, 13672, 114); //@line 6851
 }
 $49 = $45; //@line 6854
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $49); //@line 6859
 HEAP32[$__oe >> 2] = $__ob; //@line 6860
 $54 = HEAP8[$__nb] | 0; //@line 6861
 if ($54 << 24 >> 24 == 43 | $54 << 24 >> 24 == 45) {
  $59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 31]($25, $54) | 0; //@line 6867
  $61 = HEAP32[$__oe >> 2] | 0; //@line 6869
  HEAP32[$__oe >> 2] = $61 + 1; //@line 6871
  HEAP8[$61] = $59; //@line 6872
  $__nf$0 = $__nb + 1 | 0; //@line 6873
 } else {
  $__nf$0 = $__nb; //@line 6875
 }
 $63 = $__ne; //@line 6877
 L22 : do {
  if (($63 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0] | 0) != 48) {
    label = 14; //@line 6886
    break;
   }
   $70 = $__nf$0 + 1 | 0; //@line 6889
   $71 = HEAP8[$70] | 0; //@line 6890
   if (!($71 << 24 >> 24 == 88 | $71 << 24 >> 24 == 120)) {
    label = 14; //@line 6892
    break;
   }
   $72 = $21; //@line 6895
   $76 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 31]($25, 48) | 0; //@line 6899
   $77 = HEAP32[$__oe >> 2] | 0; //@line 6900
   HEAP32[$__oe >> 2] = $77 + 1; //@line 6902
   HEAP8[$77] = $76; //@line 6903
   $79 = $__nf$0 + 2 | 0; //@line 6904
   $84 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 31]($25, HEAP8[$70] | 0) | 0; //@line 6909
   $85 = HEAP32[$__oe >> 2] | 0; //@line 6910
   HEAP32[$__oe >> 2] = $85 + 1; //@line 6912
   HEAP8[$85] = $84; //@line 6913
   if ($79 >>> 0 < $__ne >>> 0) {
    $__ns$043 = $79; //@line 6916
   } else {
    $__nf$1 = $79; //@line 6918
    $__ns$2 = $79; //@line 6918
    break;
   }
   while (1) {
    $89 = HEAP8[$__ns$043] | 0; //@line 6922
    do {
     if ((HEAP8[5608] | 0) == 0) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6933
      ___cxa_guard_release(5608); //@line 6934
     }
    } while (0);
    $99 = $__ns$043 + 1 | 0; //@line 6941
    if ((_isxdigit_l($89 << 24 >> 24 | 0, HEAP32[1400] | 0) | 0) == 0) {
     $__nf$1 = $79; //@line 6943
     $__ns$2 = $__ns$043; //@line 6943
     break L22;
    }
    if ($99 >>> 0 < $__ne >>> 0) {
     $__ns$043 = $99; //@line 6948
    } else {
     $__nf$1 = $79; //@line 6950
     $__ns$2 = $99; //@line 6950
     break;
    }
   }
  } else {
   label = 14; //@line 6955
  }
 } while (0);
 L33 : do {
  if ((label | 0) == 14) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$134 = $__nf$0; //@line 6962
   } else {
    $__nf$1 = $__nf$0; //@line 6964
    $__ns$2 = $__nf$0; //@line 6964
    break;
   }
   while (1) {
    $101 = HEAP8[$__ns$134] | 0; //@line 6968
    do {
     if ((HEAP8[5608] | 0) == 0) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6979
      ___cxa_guard_release(5608); //@line 6980
     }
    } while (0);
    $111 = $__ns$134 + 1 | 0; //@line 6987
    if ((_isdigit_l($101 << 24 >> 24 | 0, HEAP32[1400] | 0) | 0) == 0) {
     $__nf$1 = $__nf$0; //@line 6989
     $__ns$2 = $__ns$134; //@line 6989
     break L33;
    }
    if ($111 >>> 0 < $__ne >>> 0) {
     $__ns$134 = $111; //@line 6994
    } else {
     $__nf$1 = $__nf$0; //@line 6996
     $__ns$2 = $111; //@line 6996
     break;
    }
   }
  }
 } while (0);
 $112 = $__grouping; //@line 7002
 $113 = HEAP8[$112] | 0; //@line 7003
 if (($113 & 1) == 0) {
  $120 = ($113 & 255) >>> 1; //@line 7009
 } else {
  $120 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 7013
 }
 do {
  if (($120 | 0) == 0) {
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 15]($25, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0; //@line 7023
   HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1); //@line 7029
  } else {
   do {
    if (($__nf$1 | 0) != ($__ns$2 | 0)) {
     $133 = $__ns$2 + -1 | 0; //@line 7034
     if ($133 >>> 0 > $__nf$1 >>> 0) {
      $$012$i$i = $__nf$1; //@line 7037
      $135 = $133; //@line 7037
     } else {
      break;
     }
     do {
      $136 = HEAP8[$$012$i$i] | 0; //@line 7042
      HEAP8[$$012$i$i] = HEAP8[$135] | 0; //@line 7044
      HEAP8[$135] = $136; //@line 7045
      $$012$i$i = $$012$i$i + 1 | 0; //@line 7046
      $135 = $135 + -1 | 0; //@line 7047
     } while ($$012$i$i >>> 0 < $135 >>> 0);
    }
   } while (0);
   $145 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 127]($49) | 0; //@line 7061
   if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
    $148 = $__grouping + 1 | 0; //@line 7065
    $149 = $__grouping + 4 | 0; //@line 7066
    $150 = $__grouping + 8 | 0; //@line 7067
    $151 = $21; //@line 7068
    $__dc$025 = 0; //@line 7069
    $__dg$026 = 0; //@line 7069
    $__p$027 = $__nf$1; //@line 7069
    while (1) {
     $154 = (HEAP8[$112] & 1) == 0; //@line 7073
     do {
      if ((HEAP8[($154 ? $148 : HEAP32[$150 >> 2] | 0) + $__dg$026 | 0] | 0) > 0) {
       if (($__dc$025 | 0) != (HEAP8[($154 ? $148 : HEAP32[$150 >> 2] | 0) + $__dg$026 | 0] | 0)) {
        $__dc$1 = $__dc$025; //@line 7088
        $__dg$1 = $__dg$026; //@line 7088
        break;
       }
       $164 = HEAP32[$__oe >> 2] | 0; //@line 7091
       HEAP32[$__oe >> 2] = $164 + 1; //@line 7093
       HEAP8[$164] = $145; //@line 7094
       $166 = HEAP8[$112] | 0; //@line 7095
       if (($166 & 1) == 0) {
        $172 = ($166 & 255) >>> 1; //@line 7101
       } else {
        $172 = HEAP32[$149 >> 2] | 0; //@line 7104
       }
       $__dc$1 = 0; //@line 7110
       $__dg$1 = ($__dg$026 >>> 0 < ($172 + -1 | 0) >>> 0) + $__dg$026 | 0; //@line 7110
      } else {
       $__dc$1 = $__dc$025; //@line 7112
       $__dg$1 = $__dg$026; //@line 7112
      }
     } while (0);
     $180 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$151 >> 2] | 0) + 28 >> 2] & 31]($25, HEAP8[$__p$027] | 0) | 0; //@line 7119
     $181 = HEAP32[$__oe >> 2] | 0; //@line 7120
     HEAP32[$__oe >> 2] = $181 + 1; //@line 7122
     HEAP8[$181] = $180; //@line 7123
     $184 = $__p$027 + 1 | 0; //@line 7125
     if ($184 >>> 0 < $__ns$2 >>> 0) {
      $__dc$025 = $__dc$1 + 1 | 0; //@line 7128
      $__dg$026 = $__dg$1; //@line 7128
      $__p$027 = $184; //@line 7128
     } else {
      break;
     }
    }
   }
   $189 = $__ob + ($__nf$1 - $__nb) | 0; //@line 7137
   $190 = HEAP32[$__oe >> 2] | 0; //@line 7138
   if (($189 | 0) == ($190 | 0)) {
    break;
   }
   $192 = $190 + -1 | 0; //@line 7143
   if ($192 >>> 0 > $189 >>> 0) {
    $$012$i$i13 = $189; //@line 7146
    $194 = $192; //@line 7146
   } else {
    break;
   }
   do {
    $195 = HEAP8[$$012$i$i13] | 0; //@line 7151
    HEAP8[$$012$i$i13] = HEAP8[$194] | 0; //@line 7153
    HEAP8[$194] = $195; //@line 7154
    $$012$i$i13 = $$012$i$i13 + 1 | 0; //@line 7155
    $194 = $194 + -1 | 0; //@line 7156
   } while ($$012$i$i13 >>> 0 < $194 >>> 0);
  }
 } while (0);
 L72 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $201 = $21; //@line 7169
   $__nf$221 = $__ns$2; //@line 7170
   while (1) {
    $202 = HEAP8[$__nf$221] | 0; //@line 7172
    if ($202 << 24 >> 24 == 46) {
     break;
    }
    $215 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$201 >> 2] | 0) + 28 >> 2] & 31]($25, $202) | 0; //@line 7180
    $216 = HEAP32[$__oe >> 2] | 0; //@line 7181
    HEAP32[$__oe >> 2] = $216 + 1; //@line 7183
    HEAP8[$216] = $215; //@line 7184
    $218 = $__nf$221 + 1 | 0; //@line 7185
    if ($218 >>> 0 < $__ne >>> 0) {
     $__nf$221 = $218; //@line 7188
    } else {
     $__nf$3 = $218; //@line 7190
     break L72;
    }
   }
   $208 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] & 127]($49) | 0; //@line 7198
   $209 = HEAP32[$__oe >> 2] | 0; //@line 7199
   HEAP32[$__oe >> 2] = $209 + 1; //@line 7201
   HEAP8[$209] = $208; //@line 7202
   $__nf$3 = $__nf$221 + 1 | 0; //@line 7204
  } else {
   $__nf$3 = $__ns$2; //@line 7206
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 15]($25, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0; //@line 7214
 $228 = (HEAP32[$__oe >> 2] | 0) + ($63 - $__nf$3) | 0; //@line 7218
 HEAP32[$__oe >> 2] = $228; //@line 7219
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $228; //@line 7222
  HEAP32[$__op >> 2] = $storemerge; //@line 7223
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 7224
  STACKTOP = sp; //@line 7225
  return;
 }
 $storemerge = $__ob + ($__np - $__nb) | 0; //@line 7231
 HEAP32[$__op >> 2] = $storemerge; //@line 7232
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 7233
 STACKTOP = sp; //@line 7234
 return;
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$840 = 0, $$in = 0, $1 = 0, $101 = 0, $102 = 0, $107 = 0, $109 = 0, $115 = 0, $116 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $135 = 0, $139 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $44 = 0, $51 = 0, $59 = 0, $69 = 0, $78 = 0, $9 = 0, $94 = 0, $97 = 0, $98 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12050
 $1 = HEAP32[$src >> 2] | 0; //@line 12051
 do {
  if (($st | 0) == 0) {
   label = 5; //@line 12055
  } else {
   $3 = $st; //@line 12057
   $4 = HEAP32[$3 >> 2] | 0; //@line 12058
   if (($4 | 0) == 0) {
    label = 5; //@line 12061
    break;
   }
   if (($ws | 0) == 0) {
    $$35 = $wn; //@line 12066
    $c$2 = $4; //@line 12066
    $s$3 = $1; //@line 12066
    label = 16; //@line 12067
    break;
   }
   HEAP32[$3 >> 2] = 0; //@line 12070
   $$3 = $ws; //@line 12071
   $$7 = $wn; //@line 12071
   $c$4 = $4; //@line 12071
   $s$8 = $1; //@line 12071
   label = 36; //@line 12072
  }
 } while (0);
 if ((label | 0) == 5) {
  if (($ws | 0) == 0) {
   $$02 = $wn; //@line 12078
   $s$0 = $1; //@line 12078
   label = 7; //@line 12079
  } else {
   $$01$ph = $ws; //@line 12081
   $$46$ph = $wn; //@line 12081
   $s$5$ph = $1; //@line 12081
   label = 6; //@line 12082
  }
 }
 L7 : while (1) {
  if ((label | 0) == 6) {
   label = 0; //@line 12087
   if (($$46$ph | 0) == 0) {
    $$0 = $wn; //@line 12090
    label = 53; //@line 12091
    break;
   } else {
    $$0123 = $$01$ph; //@line 12094
    $$4622 = $$46$ph; //@line 12094
    $s$524 = $s$5$ph; //@line 12094
   }
   while (1) {
    $69 = HEAP8[$s$524] | 0; //@line 12097
    do {
     if ((($69 & 255) + -1 | 0) >>> 0 < 127) {
      if (($s$524 & 3 | 0) == 0 & $$4622 >>> 0 > 3) {
       $$113 = $$0123; //@line 12109
       $$512 = $$4622; //@line 12109
       $s$614 = $s$524; //@line 12109
      } else {
       $$2 = $$0123; //@line 12111
       $$6 = $$4622; //@line 12111
       $101 = $69; //@line 12111
       $s$7 = $s$524; //@line 12111
       break;
      }
      while (1) {
       $78 = HEAP32[$s$614 >> 2] | 0; //@line 12116
       if ((($78 + -16843009 | $78) & -2139062144 | 0) != 0) {
        label = 30; //@line 12122
        break;
       }
       HEAP32[$$113 >> 2] = $78 & 255; //@line 12128
       HEAP32[$$113 + 4 >> 2] = HEAPU8[$s$614 + 1 | 0] | 0; //@line 12133
       HEAP32[$$113 + 8 >> 2] = HEAPU8[$s$614 + 2 | 0] | 0; //@line 12138
       $94 = $s$614 + 4 | 0; //@line 12139
       $97 = $$113 + 16 | 0; //@line 12142
       HEAP32[$$113 + 12 >> 2] = HEAPU8[$s$614 + 3 | 0] | 0; //@line 12143
       $98 = $$512 + -4 | 0; //@line 12144
       if ($98 >>> 0 > 3) {
        $$113 = $97; //@line 12147
        $$512 = $98; //@line 12147
        $s$614 = $94; //@line 12147
       } else {
        label = 31; //@line 12149
        break;
       }
      }
      if ((label | 0) == 30) {
       label = 0; //@line 12154
       $$2 = $$113; //@line 12156
       $$6 = $$512; //@line 12156
       $101 = $78 & 255; //@line 12156
       $s$7 = $s$614; //@line 12156
       break;
      } else if ((label | 0) == 31) {
       label = 0; //@line 12160
       $$2 = $97; //@line 12162
       $$6 = $98; //@line 12162
       $101 = HEAP8[$94] | 0; //@line 12162
       $s$7 = $94; //@line 12162
       break;
      }
     } else {
      $$2 = $$0123; //@line 12166
      $$6 = $$4622; //@line 12166
      $101 = $69; //@line 12166
      $s$7 = $s$524; //@line 12166
     }
    } while (0);
    $102 = $101 & 255; //@line 12169
    if (!(($102 + -1 | 0) >>> 0 < 127)) {
     break;
    }
    HEAP32[$$2 >> 2] = $102; //@line 12177
    $107 = $$6 + -1 | 0; //@line 12178
    if (($107 | 0) == 0) {
     $$0 = $wn; //@line 12181
     label = 53; //@line 12182
     break L7;
    } else {
     $$0123 = $$2 + 4 | 0; //@line 12185
     $$4622 = $107; //@line 12185
     $s$524 = $s$7 + 1 | 0; //@line 12185
    }
   }
   $109 = $102 + -194 | 0; //@line 12188
   if ($109 >>> 0 > 50) {
    $$442 = $$2; //@line 12191
    $$840 = $$6; //@line 12191
    $s$1044 = $s$7; //@line 12191
    label = 47; //@line 12192
    break;
   }
   $$3 = $$2; //@line 12198
   $$7 = $$6; //@line 12198
   $c$4 = HEAP32[13368 + ($109 << 2) >> 2] | 0; //@line 12198
   $s$8 = $s$7 + 1 | 0; //@line 12198
   label = 36; //@line 12199
   continue;
  } else if ((label | 0) == 7) {
   label = 0; //@line 12203
   $9 = HEAP8[$s$0] | 0; //@line 12204
   do {
    if ((($9 & 255) + -1 | 0) >>> 0 < 127) {
     if (($s$0 & 3 | 0) != 0) {
      $$24 = $$02; //@line 12214
      $31 = $9; //@line 12214
      $s$2 = $s$0; //@line 12214
      break;
     }
     $17 = HEAP32[$s$0 >> 2] | 0; //@line 12218
     if ((($17 + -16843009 | $17) & -2139062144 | 0) == 0) {
      $$137 = $$02; //@line 12224
      $s$18 = $s$0; //@line 12224
      while (1) {
       $22 = $s$18 + 4 | 0; //@line 12226
       $23 = $$137 + -4 | 0; //@line 12227
       $25 = HEAP32[$22 >> 2] | 0; //@line 12229
       if ((($25 + -16843009 | $25) & -2139062144 | 0) == 0) {
        $s$18 = $22; //@line 12235
        $$137 = $23; //@line 12235
       } else {
        $$13$lcssa = $23; //@line 12237
        $$in = $25; //@line 12237
        $s$1$lcssa = $22; //@line 12237
        break;
       }
      }
     } else {
      $$13$lcssa = $$02; //@line 12242
      $$in = $17; //@line 12242
      $s$1$lcssa = $s$0; //@line 12242
     }
     $$24 = $$13$lcssa; //@line 12245
     $31 = $$in & 255; //@line 12245
     $s$2 = $s$1$lcssa; //@line 12245
    } else {
     $$24 = $$02; //@line 12247
     $31 = $9; //@line 12247
     $s$2 = $s$0; //@line 12247
    }
   } while (0);
   $32 = $31 & 255; //@line 12250
   if (($32 + -1 | 0) >>> 0 < 127) {
    $$02 = $$24 + -1 | 0; //@line 12256
    $s$0 = $s$2 + 1 | 0; //@line 12256
    label = 7; //@line 12257
    continue;
   }
   $37 = $32 + -194 | 0; //@line 12260
   if ($37 >>> 0 > 50) {
    $$442 = $ws; //@line 12263
    $$840 = $$24; //@line 12263
    $s$1044 = $s$2; //@line 12263
    label = 47; //@line 12264
    break;
   }
   $$35 = $$24; //@line 12270
   $c$2 = HEAP32[13368 + ($37 << 2) >> 2] | 0; //@line 12270
   $s$3 = $s$2 + 1 | 0; //@line 12270
   label = 16; //@line 12271
   continue;
  } else if ((label | 0) == 16) {
   label = 0; //@line 12275
   $44 = (HEAPU8[$s$3] | 0) >>> 3; //@line 12278
   if (($44 + -16 | $44 + ($c$2 >> 26)) >>> 0 > 7) {
    label = 17; //@line 12285
    break;
   }
   $51 = $s$3 + 1 | 0; //@line 12288
   do {
    if (($c$2 & 33554432 | 0) == 0) {
     $s$4 = $51; //@line 12293
    } else {
     if (((HEAPU8[$51] | 0) + -128 | 0) >>> 0 > 63) {
      label = 20; //@line 12300
      break L7;
     }
     $59 = $s$3 + 2 | 0; //@line 12303
     if (($c$2 & 524288 | 0) == 0) {
      $s$4 = $59; //@line 12307
      break;
     }
     if (((HEAPU8[$59] | 0) + -128 | 0) >>> 0 > 63) {
      label = 23; //@line 12315
      break L7;
     }
     $s$4 = $s$3 + 3 | 0; //@line 12319
    }
   } while (0);
   $$02 = $$35 + -1 | 0; //@line 12323
   $s$0 = $s$4; //@line 12323
   label = 7; //@line 12324
   continue;
  } else if ((label | 0) == 36) {
   label = 0; //@line 12328
   $115 = HEAPU8[$s$8] | 0; //@line 12330
   $116 = $115 >>> 3; //@line 12331
   if (($116 + -16 | $116 + ($c$4 >> 26)) >>> 0 > 7) {
    label = 37; //@line 12338
    break;
   }
   $124 = $s$8 + 1 | 0; //@line 12342
   $126 = $115 + -128 | $c$4 << 6; //@line 12344
   do {
    if (($126 | 0) < 0) {
     $130 = (HEAPU8[$124] | 0) + -128 | 0; //@line 12350
     if ($130 >>> 0 > 63) {
      label = 40; //@line 12353
      break L7;
     }
     $134 = $s$8 + 2 | 0; //@line 12357
     $135 = $130 | $126 << 6; //@line 12358
     if (($135 | 0) >= 0) {
      $c$5 = $135; //@line 12361
      $s$9 = $134; //@line 12361
      break;
     }
     $139 = (HEAPU8[$134] | 0) + -128 | 0; //@line 12366
     if ($139 >>> 0 > 63) {
      label = 43; //@line 12369
      break L7;
     }
     $c$5 = $139 | $135 << 6; //@line 12375
     $s$9 = $s$8 + 3 | 0; //@line 12375
    } else {
     $c$5 = $126; //@line 12377
     $s$9 = $124; //@line 12377
    }
   } while (0);
   HEAP32[$$3 >> 2] = $c$5; //@line 12381
   $$01$ph = $$3 + 4 | 0; //@line 12383
   $$46$ph = $$7 + -1 | 0; //@line 12383
   $s$5$ph = $s$9; //@line 12383
   label = 6; //@line 12384
   continue;
  }
 }
 if ((label | 0) == 17) {
  $$4 = $ws; //@line 12390
  $$8 = $$35; //@line 12390
  $c$6 = $c$2; //@line 12390
  $s$10 = $s$3 + -1 | 0; //@line 12390
  label = 46; //@line 12391
 } else if ((label | 0) == 20) {
  $$4 = $ws; //@line 12395
  $$8 = $$35; //@line 12395
  $c$6 = $c$2; //@line 12395
  $s$10 = $s$3 + -1 | 0; //@line 12395
  label = 46; //@line 12396
 } else if ((label | 0) == 23) {
  $$4 = $ws; //@line 12400
  $$8 = $$35; //@line 12400
  $c$6 = $c$2; //@line 12400
  $s$10 = $s$3 + -1 | 0; //@line 12400
  label = 46; //@line 12401
 } else if ((label | 0) == 37) {
  $$4 = $$3; //@line 12405
  $$8 = $$7; //@line 12405
  $c$6 = $c$4; //@line 12405
  $s$10 = $s$8 + -1 | 0; //@line 12405
  label = 46; //@line 12406
 } else if ((label | 0) == 40) {
  $$4 = $$3; //@line 12410
  $$8 = $$7; //@line 12410
  $c$6 = $126; //@line 12410
  $s$10 = $s$8 + -1 | 0; //@line 12410
  label = 46; //@line 12411
 } else if ((label | 0) == 43) {
  $$4 = $$3; //@line 12415
  $$8 = $$7; //@line 12415
  $c$6 = $135; //@line 12415
  $s$10 = $s$8 + -1 | 0; //@line 12415
  label = 46; //@line 12416
 } else if ((label | 0) == 53) {
  STACKTOP = sp; //@line 12419
  return $$0 | 0; //@line 12419
 }
 if ((label | 0) == 46) {
  if (($c$6 | 0) == 0) {
   $$442 = $$4; //@line 12424
   $$840 = $$8; //@line 12424
   $s$1044 = $s$10; //@line 12424
   label = 47; //@line 12425
  } else {
   $$441 = $$4; //@line 12427
   $s$1043 = $s$10; //@line 12427
  }
 }
 do {
  if ((label | 0) == 47) {
   if ((HEAP8[$s$1044] | 0) != 0) {
    $$441 = $$442; //@line 12435
    $s$1043 = $s$1044; //@line 12435
    break;
   }
   if (($$442 | 0) != 0) {
    HEAP32[$$442 >> 2] = 0; //@line 12440
    HEAP32[$src >> 2] = 0; //@line 12441
   }
   $$0 = $wn - $$840 | 0; //@line 12444
   STACKTOP = sp; //@line 12445
   return $$0 | 0; //@line 12445
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12449
 if (($$441 | 0) == 0) {
  $$0 = -1; //@line 12452
  STACKTOP = sp; //@line 12453
  return $$0 | 0; //@line 12453
 }
 HEAP32[$src >> 2] = $s$1043; //@line 12455
 $$0 = -1; //@line 12456
 STACKTOP = sp; //@line 12457
 return $$0 | 0; //@line 12457
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 2490
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 2491
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 2492
 $d_sroa_0_0_extract_trunc = $b$0; //@line 2493
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 2494
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 2495
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0; //@line 2497
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 2500
    HEAP32[$rem + 4 >> 2] = 0; //@line 2501
   }
   $_0$1 = 0; //@line 2503
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 2504
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2505
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 2508
    $_0$0 = 0; //@line 2509
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2510
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 2512
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 2513
   $_0$1 = 0; //@line 2514
   $_0$0 = 0; //@line 2515
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2516
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 2519
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 2524
     HEAP32[$rem + 4 >> 2] = 0; //@line 2525
    }
    $_0$1 = 0; //@line 2527
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 2528
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2529
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0; //@line 2533
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 2534
    }
    $_0$1 = 0; //@line 2536
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 2537
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2538
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 2540
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 2543
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 2544
    }
    $_0$1 = 0; //@line 2546
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 2547
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2548
   }
   $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2551
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 2553
    $58 = 31 - $51 | 0; //@line 2554
    $sr_1_ph = $57; //@line 2555
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 2556
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 2557
    $q_sroa_0_1_ph = 0; //@line 2558
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 2559
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0; //@line 2563
    $_0$0 = 0; //@line 2564
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2565
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 2567
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2568
   $_0$1 = 0; //@line 2569
   $_0$0 = 0; //@line 2570
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2571
  } else {
   if (!$17) {
    $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2575
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 2577
     $126 = 31 - $119 | 0; //@line 2578
     $130 = $119 - 31 >> 31; //@line 2579
     $sr_1_ph = $125; //@line 2580
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 2581
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 2582
     $q_sroa_0_1_ph = 0; //@line 2583
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 2584
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0; //@line 2588
     $_0$0 = 0; //@line 2589
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2590
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 2592
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2593
    $_0$1 = 0; //@line 2594
    $_0$0 = 0; //@line 2595
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2596
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 2598
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2601
    $89 = 64 - $88 | 0; //@line 2602
    $91 = 32 - $88 | 0; //@line 2603
    $92 = $91 >> 31; //@line 2604
    $95 = $88 - 32 | 0; //@line 2605
    $105 = $95 >> 31; //@line 2606
    $sr_1_ph = $88; //@line 2607
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 2608
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 2609
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 2610
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 2611
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 2615
    HEAP32[$rem + 4 >> 2] = 0; //@line 2616
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2619
    $_0$0 = $a$0 | 0 | 0; //@line 2620
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2621
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 2623
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 2624
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 2625
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2626
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 2631
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 2632
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 2633
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 2634
  $carry_0_lcssa$1 = 0; //@line 2635
  $carry_0_lcssa$0 = 0; //@line 2636
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 2638
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 2639
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0; //@line 2640
  $137$1 = tempRet0; //@line 2641
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 2642
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 2643
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 2644
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 2645
  $sr_1202 = $sr_1_ph; //@line 2646
  $carry_0203 = 0; //@line 2647
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 2649
   $149 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 2650
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31 | 0; //@line 2651
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 2652
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0; //@line 2653
   $150$1 = tempRet0; //@line 2654
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 2655
   $152 = $151$0 & 1; //@line 2656
   $r_sroa_0_0_extract_trunc = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0; //@line 2658
   $r_sroa_1_4_extract_trunc = tempRet0; //@line 2659
   $155 = $sr_1202 - 1 | 0; //@line 2660
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147; //@line 2664
    $q_sroa_0_1199 = $149; //@line 2665
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc; //@line 2666
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc; //@line 2667
    $sr_1202 = $155; //@line 2668
    $carry_0203 = $152; //@line 2669
   }
  }
  $q_sroa_1_1_lcssa = $147; //@line 2672
  $q_sroa_0_1_lcssa = $149; //@line 2673
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc; //@line 2674
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc; //@line 2675
  $carry_0_lcssa$1 = 0; //@line 2676
  $carry_0_lcssa$0 = $152; //@line 2677
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 2679
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 2680
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 2683
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 2684
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 2686
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 2687
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2688
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $122 = 0, $124 = 0, $13 = 0, $131 = 0, $142 = 0, $143 = 0, $146 = 0, $15 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2054
 STACKTOP = STACKTOP + 328 | 0; //@line 2055
 $__atoms = sp; //@line 2056
 $__thousands_sep = sp + 104 | 0; //@line 2057
 $__grouping = sp + 112 | 0; //@line 2058
 $__buf = sp + 128 | 0; //@line 2059
 $__a_end = sp + 144 | 0; //@line 2060
 $__g = sp + 152 | 0; //@line 2061
 $__g_end = sp + 312 | 0; //@line 2062
 $__dc = sp + 320 | 0; //@line 2063
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 2066
 if (($3 | 0) == 0) {
  $$0$i = 0; //@line 2068
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 2070
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 2072
 } else {
  $$0$i = 10; //@line 2074
 }
 $5 = $__atoms; //@line 2077
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 2078
 $this2$i$i$i = $__buf; //@line 2079
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 2080
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 2080
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 2080
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 2081
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 2087
  $$pre$phi34Z2D = $12; //@line 2089
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 2089
  $13 = $12; //@line 2089
 } else {
  $9 = $__buf + 8 | 0; //@line 2091
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 2095
  $$pre$phi36Z2D = $9; //@line 2095
  $13 = HEAP32[$9 >> 2] | 0; //@line 2095
 }
 HEAP32[$__a_end >> 2] = $13; //@line 2097
 $15 = $__g; //@line 2099
 HEAP32[$__g_end >> 2] = $15; //@line 2100
 HEAP32[$__dc >> 2] = 0; //@line 2101
 $16 = $__b; //@line 2102
 $17 = $__e; //@line 2103
 $18 = $__buf; //@line 2104
 $19 = $__buf + 4 | 0; //@line 2105
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 2106
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 2108
 $__a$0 = $13; //@line 2108
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 2113
    $35 = 1; //@line 2113
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 2116
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 2126
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 2129
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 2133
     $35 = 0; //@line 2133
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 2136
    $34 = 0; //@line 2137
    $35 = 1; //@line 2137
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 2140
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 2144
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 2147
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 2157
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 2160
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 2164
     label = 21; //@line 2165
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 2169
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 2172
      $__a$2 = $__a$0; //@line 2172
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 2179
   if ($35) {
    $$pre$i3$i$i = 0; //@line 2181
    $__a$2 = $__a$0; //@line 2181
    break;
   } else {
    $50 = 0; //@line 2184
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 2191
  $57 = ($55 & 1) == 0; //@line 2193
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 2197
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 2200
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 2209
    $69 = ($55 & 255) >>> 1; //@line 2209
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 2211
    $68 = $63; //@line 2212
    $69 = $63; //@line 2212
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 2215
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 2220
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 2225
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 2227
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 2232
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 2235
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 2238
   $__a$1 = $81; //@line 2239
  } else {
   $__a$1 = $__a$0; //@line 2241
  }
  $83 = $34 + 12 | 0; //@line 2243
  $84 = HEAP32[$83 >> 2] | 0; //@line 2244
  $85 = $34 + 16 | 0; //@line 2245
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 2254
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 2257
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 2262
   $__a$2 = $__a$1; //@line 2262
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 2265
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 2273
   $$pre$i$i$i5 = $34; //@line 2274
   $__a$0 = $__a$1; //@line 2274
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 2278
   $$pre$i$i$i5 = $34; //@line 2279
   $__a$0 = $__a$1; //@line 2279
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 2284
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 2290
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 2294
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 2299
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 2307
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 2309
   HEAP32[$114 >> 2] = $119; //@line 2310
  }
 } while (0);
 $122 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 2314
 $124 = $__v; //@line 2316
 HEAP32[$124 >> 2] = $122; //@line 2318
 HEAP32[$124 + 4 >> 2] = tempRet0; //@line 2321
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 2323
 do {
  if (($34 | 0) == 0) {
   $142 = 0; //@line 2327
   $143 = 1; //@line 2327
  } else {
   $131 = HEAP32[$34 + 12 >> 2] | 0; //@line 2330
   if (($131 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 2340
   } else {
    $$0$i$i$i$i = HEAP32[$131 >> 2] | 0; //@line 2343
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $142 = $34; //@line 2347
    $143 = 0; //@line 2347
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 2350
   $142 = 0; //@line 2351
   $143 = 1; //@line 2351
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 2357
  } else {
   $146 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 2360
   if (($146 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 2370
   } else {
    $$0$i$i1$i$i = HEAP32[$146 >> 2] | 0; //@line 2373
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 2377
    label = 60; //@line 2378
    break;
   }
   if (!$143) {
    break;
   }
   $159 = $agg$result; //@line 2384
   HEAP32[$159 >> 2] = $142; //@line 2385
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2386
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2387
   STACKTOP = sp; //@line 2388
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($143) {
    break;
   }
   $159 = $agg$result; //@line 2396
   HEAP32[$159 >> 2] = $142; //@line 2397
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2398
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2399
   STACKTOP = sp; //@line 2400
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 2405
 $159 = $agg$result; //@line 2406
 HEAP32[$159 >> 2] = $142; //@line 2407
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2408
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2409
 STACKTOP = sp; //@line 2410
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12384
 STACKTOP = STACKTOP + 256 | 0; //@line 12385
 $__atoms = sp; //@line 12386
 $__thousands_sep = sp + 32 | 0; //@line 12387
 $__grouping = sp + 40 | 0; //@line 12388
 $__buf = sp + 56 | 0; //@line 12389
 $__a_end = sp + 72 | 0; //@line 12390
 $__g = sp + 80 | 0; //@line 12391
 $__g_end = sp + 240 | 0; //@line 12392
 $__dc = sp + 248 | 0; //@line 12393
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 12396
 if (($3 | 0) == 8) {
  $$0$i = 16; //@line 12398
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 12400
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 12402
 } else {
  $$0$i = 10; //@line 12404
 }
 $4 = $__atoms; //@line 12406
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 12407
 $this2$i$i$i = $__buf; //@line 12408
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 12409
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 12409
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 12409
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 12410
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 12416
  $$pre$phi32Z2D = $11; //@line 12418
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 12418
  $12 = $11; //@line 12418
 } else {
  $8 = $__buf + 8 | 0; //@line 12420
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 12424
  $$pre$phi34Z2D = $8; //@line 12424
  $12 = HEAP32[$8 >> 2] | 0; //@line 12424
 }
 HEAP32[$__a_end >> 2] = $12; //@line 12426
 $14 = $__g; //@line 12428
 HEAP32[$__g_end >> 2] = $14; //@line 12429
 HEAP32[$__dc >> 2] = 0; //@line 12430
 $15 = $__b; //@line 12431
 $16 = $__e; //@line 12432
 $17 = $__buf; //@line 12433
 $18 = $__buf + 4 | 0; //@line 12434
 $19 = HEAP8[$__thousands_sep] | 0; //@line 12435
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 12437
 $__a$0 = $12; //@line 12437
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 12442
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 12450
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 12460
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 12463
    $32 = 0; //@line 12464
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 12467
  $34 = HEAP32[$16 >> 2] | 0; //@line 12468
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 12472
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 12481
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 12484
      $__a$2 = $__a$0; //@line 12484
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 12495
     label = 18; //@line 12496
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 12500
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 12503
      $__a$2 = $__a$0; //@line 12503
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 12510
   if ($33) {
    $$pre$i2$i$i = 0; //@line 12512
    $__a$2 = $__a$0; //@line 12512
    break;
   } else {
    $47 = 0; //@line 12515
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 12522
  $54 = ($52 & 1) == 0; //@line 12524
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 12528
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 12531
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 12540
    $66 = ($52 & 255) >>> 1; //@line 12540
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 12542
    $65 = $60; //@line 12543
    $66 = $60; //@line 12543
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 12546
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 12551
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 12556
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 12558
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 12563
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 12566
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 12569
   $__a$1 = $78; //@line 12570
  } else {
   $__a$1 = $__a$0; //@line 12572
  }
  $80 = $32 + 12 | 0; //@line 12574
  $81 = HEAP32[$80 >> 2] | 0; //@line 12575
  $82 = $32 + 16 | 0; //@line 12576
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 12585
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 12589
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 12595
   $__a$2 = $__a$1; //@line 12595
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 12598
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 12606
   $$pre$i$i$i4 = $32; //@line 12607
   $__a$0 = $__a$1; //@line 12607
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 12611
   $$pre$i$i$i4 = $32; //@line 12612
   $__a$0 = $__a$1; //@line 12612
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 12617
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 12623
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 12627
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 12632
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 12640
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 12642
   HEAP32[$113 >> 2] = $118; //@line 12643
  }
 } while (0);
 $121 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 12647
 $123 = $__v; //@line 12649
 HEAP32[$123 >> 2] = $121; //@line 12651
 HEAP32[$123 + 4 >> 2] = tempRet0; //@line 12654
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 12656
 do {
  if (($32 | 0) == 0) {
   $140 = 0; //@line 12660
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $140 = $32; //@line 12668
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $140 = $32; //@line 12678
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 12681
   $140 = 0; //@line 12682
  }
 } while (0);
 $141 = ($140 | 0) == 0; //@line 12685
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 12689
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$141) {
     break;
    }
    $157 = $agg$result; //@line 12700
    HEAP32[$157 >> 2] = $140; //@line 12701
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12702
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12703
    STACKTOP = sp; //@line 12704
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 12713
    label = 54; //@line 12714
    break;
   }
   if (!($141 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $157 = $agg$result; //@line 12722
   HEAP32[$157 >> 2] = $140; //@line 12723
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12724
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12725
   STACKTOP = sp; //@line 12726
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($141) {
    break;
   }
   $157 = $agg$result; //@line 12734
   HEAP32[$157 >> 2] = $140; //@line 12735
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12736
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12737
   STACKTOP = sp; //@line 12738
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12743
 $157 = $agg$result; //@line 12744
 HEAP32[$157 >> 2] = $140; //@line 12745
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12746
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12747
 STACKTOP = sp; //@line 12748
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10725
 STACKTOP = STACKTOP + 256 | 0; //@line 10726
 $__atoms = sp; //@line 10727
 $__thousands_sep = sp + 32 | 0; //@line 10728
 $__grouping = sp + 40 | 0; //@line 10729
 $__buf = sp + 56 | 0; //@line 10730
 $__a_end = sp + 72 | 0; //@line 10731
 $__g = sp + 80 | 0; //@line 10732
 $__g_end = sp + 240 | 0; //@line 10733
 $__dc = sp + 248 | 0; //@line 10734
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 10737
 if (($3 | 0) == 64) {
  $$0$i = 8; //@line 10739
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 10741
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 10743
 } else {
  $$0$i = 10; //@line 10745
 }
 $4 = $__atoms; //@line 10747
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 10748
 $this2$i$i$i = $__buf; //@line 10749
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 10750
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 10750
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 10750
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 10751
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 10757
  $$pre$phi32Z2D = $11; //@line 10759
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 10759
  $12 = $11; //@line 10759
 } else {
  $8 = $__buf + 8 | 0; //@line 10761
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 10765
  $$pre$phi34Z2D = $8; //@line 10765
  $12 = HEAP32[$8 >> 2] | 0; //@line 10765
 }
 HEAP32[$__a_end >> 2] = $12; //@line 10767
 $14 = $__g; //@line 10769
 HEAP32[$__g_end >> 2] = $14; //@line 10770
 HEAP32[$__dc >> 2] = 0; //@line 10771
 $15 = $__b; //@line 10772
 $16 = $__e; //@line 10773
 $17 = $__buf; //@line 10774
 $18 = $__buf + 4 | 0; //@line 10775
 $19 = HEAP8[$__thousands_sep] | 0; //@line 10776
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 10778
 $__a$0 = $12; //@line 10778
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 10783
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 10791
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 10801
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 10804
    $32 = 0; //@line 10805
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 10808
  $34 = HEAP32[$16 >> 2] | 0; //@line 10809
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 10813
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 10822
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 10825
      $__a$2 = $__a$0; //@line 10825
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 10836
     label = 18; //@line 10837
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 10841
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 10844
      $__a$2 = $__a$0; //@line 10844
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 10851
   if ($33) {
    $$pre$i2$i$i = 0; //@line 10853
    $__a$2 = $__a$0; //@line 10853
    break;
   } else {
    $47 = 0; //@line 10856
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 10863
  $54 = ($52 & 1) == 0; //@line 10865
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 10869
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 10872
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 10881
    $66 = ($52 & 255) >>> 1; //@line 10881
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 10883
    $65 = $60; //@line 10884
    $66 = $60; //@line 10884
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 10887
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 10892
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 10897
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 10899
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 10904
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 10907
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 10910
   $__a$1 = $78; //@line 10911
  } else {
   $__a$1 = $__a$0; //@line 10913
  }
  $80 = $32 + 12 | 0; //@line 10915
  $81 = HEAP32[$80 >> 2] | 0; //@line 10916
  $82 = $32 + 16 | 0; //@line 10917
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 10926
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 10930
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 10936
   $__a$2 = $__a$1; //@line 10936
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 10939
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 10947
   $$pre$i$i$i4 = $32; //@line 10948
   $__a$0 = $__a$1; //@line 10948
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 10952
   $$pre$i$i$i4 = $32; //@line 10953
   $__a$0 = $__a$1; //@line 10953
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 10958
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 10964
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 10968
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 10973
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 10981
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 10983
   HEAP32[$113 >> 2] = $118; //@line 10984
  }
 } while (0);
 $121 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 10988
 $123 = $__v; //@line 10990
 HEAP32[$123 >> 2] = $121; //@line 10992
 HEAP32[$123 + 4 >> 2] = tempRet0; //@line 10995
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 10997
 do {
  if (($32 | 0) == 0) {
   $140 = 0; //@line 11001
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $140 = $32; //@line 11009
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $140 = $32; //@line 11019
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 11022
   $140 = 0; //@line 11023
  }
 } while (0);
 $141 = ($140 | 0) == 0; //@line 11026
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 11030
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$141) {
     break;
    }
    $157 = $agg$result; //@line 11041
    HEAP32[$157 >> 2] = $140; //@line 11042
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11043
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11044
    STACKTOP = sp; //@line 11045
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 11054
    label = 54; //@line 11055
    break;
   }
   if (!($141 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $157 = $agg$result; //@line 11063
   HEAP32[$157 >> 2] = $140; //@line 11064
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11065
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11066
   STACKTOP = sp; //@line 11067
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($141) {
    break;
   }
   $157 = $agg$result; //@line 11075
   HEAP32[$157 >> 2] = $140; //@line 11076
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11077
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11078
   STACKTOP = sp; //@line 11079
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11084
 $157 = $agg$result; //@line 11085
 HEAP32[$157 >> 2] = $140; //@line 11086
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11087
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11088
 STACKTOP = sp; //@line 11089
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $10 = 0, $103 = 0, $110 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $48 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $74 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $94 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2466
 STACKTOP = STACKTOP + 376 | 0; //@line 2467
 $__decimal_point = sp + 128 | 0; //@line 2469
 $__thousands_sep = sp + 136 | 0; //@line 2470
 $__grouping = sp + 144 | 0; //@line 2471
 $__buf = sp + 160 | 0; //@line 2472
 $__a_end = sp + 176 | 0; //@line 2473
 $__g = sp + 184 | 0; //@line 2474
 $__g_end = sp + 344 | 0; //@line 2475
 $__dc = sp + 352 | 0; //@line 2476
 $__in_units = sp + 360 | 0; //@line 2477
 $__exp = sp + 368 | 0; //@line 2478
 $2 = sp; //@line 2480
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $2, $__decimal_point, $__thousands_sep); //@line 2481
 $this2$i$i$i = $__buf; //@line 2482
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 2483
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 2483
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 2483
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 2484
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $9 = $__buf + 1 | 0; //@line 2490
  $$pre$phi35Z2D = $9; //@line 2492
  $$pre$phi37Z2D = $__buf + 8 | 0; //@line 2492
  $10 = $9; //@line 2492
 } else {
  $6 = $__buf + 8 | 0; //@line 2494
  $$pre$phi35Z2D = $__buf + 1 | 0; //@line 2498
  $$pre$phi37Z2D = $6; //@line 2498
  $10 = HEAP32[$6 >> 2] | 0; //@line 2498
 }
 HEAP32[$__a_end >> 2] = $10; //@line 2500
 $12 = $__g; //@line 2502
 HEAP32[$__g_end >> 2] = $12; //@line 2503
 HEAP32[$__dc >> 2] = 0; //@line 2504
 HEAP8[$__in_units] = 1; //@line 2505
 HEAP8[$__exp] = 69; //@line 2506
 $13 = $__b; //@line 2507
 $14 = $__e; //@line 2508
 $15 = $__buf; //@line 2509
 $16 = $__buf + 4 | 0; //@line 2510
 $17 = HEAP32[$__decimal_point >> 2] | 0; //@line 2511
 $18 = HEAP32[$__thousands_sep >> 2] | 0; //@line 2512
 $$pre$i$i$i5 = HEAP32[$13 >> 2] | 0; //@line 2514
 $__a$0 = $10; //@line 2514
 L5 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $32 = 0; //@line 2519
    $33 = 1; //@line 2519
   } else {
    $21 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 2522
    if (($21 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 2532
    } else {
     $$0$i$i$i$i3 = HEAP32[$21 >> 2] | 0; //@line 2535
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $32 = $$pre$i$i$i5; //@line 2539
     $33 = 0; //@line 2539
     break;
    }
    HEAP32[$13 >> 2] = 0; //@line 2542
    $32 = 0; //@line 2543
    $33 = 1; //@line 2543
   }
  } while (0);
  $34 = HEAP32[$14 >> 2] | 0; //@line 2546
  do {
   if (($34 | 0) == 0) {
    label = 17; //@line 2550
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0; //@line 2553
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 2563
    } else {
     $$0$i$i1$i$i9 = HEAP32[$37 >> 2] | 0; //@line 2566
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$14 >> 2] = 0; //@line 2570
     label = 17; //@line 2571
     break;
    } else {
     if ($33) {
      $48 = $34; //@line 2575
      break;
     } else {
      $$pre$i3$i$i = $34; //@line 2578
      $__a$2 = $__a$0; //@line 2578
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0; //@line 2585
   if ($33) {
    $$pre$i3$i$i = 0; //@line 2587
    $__a$2 = $__a$0; //@line 2587
    break;
   } else {
    $48 = 0; //@line 2590
   }
  }
  $53 = HEAP8[$this2$i$i$i] | 0; //@line 2597
  $55 = ($53 & 1) == 0; //@line 2599
  if ($55) {
   $59 = ($53 & 255) >>> 1; //@line 2603
  } else {
   $59 = HEAP32[$16 >> 2] | 0; //@line 2606
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($59 | 0)) {
   if ($55) {
    $66 = ($53 & 255) >>> 1; //@line 2615
    $67 = ($53 & 255) >>> 1; //@line 2615
   } else {
    $61 = HEAP32[$16 >> 2] | 0; //@line 2617
    $66 = $61; //@line 2618
    $67 = $61; //@line 2618
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $67 << 1, 0); //@line 2621
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $74 = 10; //@line 2626
   } else {
    $74 = (HEAP32[$15 >> 2] & -2) + -1 | 0; //@line 2631
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74, 0); //@line 2633
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $79 = $$pre$phi35Z2D; //@line 2638
   } else {
    $79 = HEAP32[$$pre$phi37Z2D >> 2] | 0; //@line 2641
   }
   HEAP32[$__a_end >> 2] = $79 + $66; //@line 2644
   $__a$1 = $79; //@line 2645
  } else {
   $__a$1 = $__a$0; //@line 2647
  }
  $81 = $32 + 12 | 0; //@line 2649
  $82 = HEAP32[$81 >> 2] | 0; //@line 2650
  $83 = $32 + 16 | 0; //@line 2651
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 2660
  } else {
   $$0$i$i = HEAP32[$82 >> 2] | 0; //@line 2663
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $2) | 0) != 0) {
   $$pre$i3$i$i = $48; //@line 2668
   $__a$2 = $__a$1; //@line 2668
   break;
  }
  $94 = HEAP32[$81 >> 2] | 0; //@line 2671
  if (($94 | 0) == (HEAP32[$83 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 2679
   $$pre$i$i$i5 = $32; //@line 2680
   $__a$0 = $__a$1; //@line 2680
   continue;
  } else {
   HEAP32[$81 >> 2] = $94 + 4; //@line 2684
   $$pre$i$i$i5 = $32; //@line 2685
   $__a$0 = $__a$1; //@line 2685
   continue;
  }
 }
 $103 = HEAP8[$__grouping] | 0; //@line 2690
 if (($103 & 1) == 0) {
  $110 = ($103 & 255) >>> 1; //@line 2696
 } else {
  $110 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 2700
 }
 do {
  if (($110 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 2710
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 2718
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 2720
   HEAP32[$114 >> 2] = $119; //@line 2721
  }
 } while (0);
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 2726
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2] | 0, $__err); //@line 2728
 do {
  if (($32 | 0) == 0) {
   $137 = 0; //@line 2732
   $138 = 1; //@line 2732
  } else {
   $126 = HEAP32[$32 + 12 >> 2] | 0; //@line 2735
   if (($126 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 2745
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 2748
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $32; //@line 2752
    $138 = 0; //@line 2752
    break;
   }
   HEAP32[$13 >> 2] = 0; //@line 2755
   $137 = 0; //@line 2756
   $138 = 1; //@line 2756
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57; //@line 2762
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 2765
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 2775
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 2778
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$14 >> 2] = 0; //@line 2782
    label = 57; //@line 2783
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 2789
   HEAP32[$154 >> 2] = $137; //@line 2790
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2791
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2792
   STACKTOP = sp; //@line 2793
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 57) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 2801
   HEAP32[$154 >> 2] = $137; //@line 2802
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2803
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2804
   STACKTOP = sp; //@line 2805
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 2810
 $154 = $agg$result; //@line 2811
 HEAP32[$154 >> 2] = $137; //@line 2812
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 2813
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 2814
 STACKTOP = sp; //@line 2815
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $10 = 0, $103 = 0, $110 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $48 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $74 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $94 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3276
 STACKTOP = STACKTOP + 376 | 0; //@line 3277
 $__decimal_point = sp + 128 | 0; //@line 3279
 $__thousands_sep = sp + 136 | 0; //@line 3280
 $__grouping = sp + 144 | 0; //@line 3281
 $__buf = sp + 160 | 0; //@line 3282
 $__a_end = sp + 176 | 0; //@line 3283
 $__g = sp + 184 | 0; //@line 3284
 $__g_end = sp + 344 | 0; //@line 3285
 $__dc = sp + 352 | 0; //@line 3286
 $__in_units = sp + 360 | 0; //@line 3287
 $__exp = sp + 368 | 0; //@line 3288
 $2 = sp; //@line 3290
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $2, $__decimal_point, $__thousands_sep); //@line 3291
 $this2$i$i$i = $__buf; //@line 3292
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 3293
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 3293
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 3293
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 3294
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $9 = $__buf + 1 | 0; //@line 3300
  $$pre$phi35Z2D = $9; //@line 3302
  $$pre$phi37Z2D = $__buf + 8 | 0; //@line 3302
  $10 = $9; //@line 3302
 } else {
  $6 = $__buf + 8 | 0; //@line 3304
  $$pre$phi35Z2D = $__buf + 1 | 0; //@line 3308
  $$pre$phi37Z2D = $6; //@line 3308
  $10 = HEAP32[$6 >> 2] | 0; //@line 3308
 }
 HEAP32[$__a_end >> 2] = $10; //@line 3310
 $12 = $__g; //@line 3312
 HEAP32[$__g_end >> 2] = $12; //@line 3313
 HEAP32[$__dc >> 2] = 0; //@line 3314
 HEAP8[$__in_units] = 1; //@line 3315
 HEAP8[$__exp] = 69; //@line 3316
 $13 = $__b; //@line 3317
 $14 = $__e; //@line 3318
 $15 = $__buf; //@line 3319
 $16 = $__buf + 4 | 0; //@line 3320
 $17 = HEAP32[$__decimal_point >> 2] | 0; //@line 3321
 $18 = HEAP32[$__thousands_sep >> 2] | 0; //@line 3322
 $$pre$i$i$i5 = HEAP32[$13 >> 2] | 0; //@line 3324
 $__a$0 = $10; //@line 3324
 L5 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $32 = 0; //@line 3329
    $33 = 1; //@line 3329
   } else {
    $21 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 3332
    if (($21 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 3342
    } else {
     $$0$i$i$i$i3 = HEAP32[$21 >> 2] | 0; //@line 3345
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $32 = $$pre$i$i$i5; //@line 3349
     $33 = 0; //@line 3349
     break;
    }
    HEAP32[$13 >> 2] = 0; //@line 3352
    $32 = 0; //@line 3353
    $33 = 1; //@line 3353
   }
  } while (0);
  $34 = HEAP32[$14 >> 2] | 0; //@line 3356
  do {
   if (($34 | 0) == 0) {
    label = 17; //@line 3360
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0; //@line 3363
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 3373
    } else {
     $$0$i$i1$i$i9 = HEAP32[$37 >> 2] | 0; //@line 3376
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$14 >> 2] = 0; //@line 3380
     label = 17; //@line 3381
     break;
    } else {
     if ($33) {
      $48 = $34; //@line 3385
      break;
     } else {
      $$pre$i3$i$i = $34; //@line 3388
      $__a$2 = $__a$0; //@line 3388
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0; //@line 3395
   if ($33) {
    $$pre$i3$i$i = 0; //@line 3397
    $__a$2 = $__a$0; //@line 3397
    break;
   } else {
    $48 = 0; //@line 3400
   }
  }
  $53 = HEAP8[$this2$i$i$i] | 0; //@line 3407
  $55 = ($53 & 1) == 0; //@line 3409
  if ($55) {
   $59 = ($53 & 255) >>> 1; //@line 3413
  } else {
   $59 = HEAP32[$16 >> 2] | 0; //@line 3416
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($59 | 0)) {
   if ($55) {
    $66 = ($53 & 255) >>> 1; //@line 3425
    $67 = ($53 & 255) >>> 1; //@line 3425
   } else {
    $61 = HEAP32[$16 >> 2] | 0; //@line 3427
    $66 = $61; //@line 3428
    $67 = $61; //@line 3428
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $67 << 1, 0); //@line 3431
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $74 = 10; //@line 3436
   } else {
    $74 = (HEAP32[$15 >> 2] & -2) + -1 | 0; //@line 3441
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74, 0); //@line 3443
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $79 = $$pre$phi35Z2D; //@line 3448
   } else {
    $79 = HEAP32[$$pre$phi37Z2D >> 2] | 0; //@line 3451
   }
   HEAP32[$__a_end >> 2] = $79 + $66; //@line 3454
   $__a$1 = $79; //@line 3455
  } else {
   $__a$1 = $__a$0; //@line 3457
  }
  $81 = $32 + 12 | 0; //@line 3459
  $82 = HEAP32[$81 >> 2] | 0; //@line 3460
  $83 = $32 + 16 | 0; //@line 3461
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 3470
  } else {
   $$0$i$i = HEAP32[$82 >> 2] | 0; //@line 3473
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $2) | 0) != 0) {
   $$pre$i3$i$i = $48; //@line 3478
   $__a$2 = $__a$1; //@line 3478
   break;
  }
  $94 = HEAP32[$81 >> 2] | 0; //@line 3481
  if (($94 | 0) == (HEAP32[$83 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 3489
   $$pre$i$i$i5 = $32; //@line 3490
   $__a$0 = $__a$1; //@line 3490
   continue;
  } else {
   HEAP32[$81 >> 2] = $94 + 4; //@line 3494
   $$pre$i$i$i5 = $32; //@line 3495
   $__a$0 = $__a$1; //@line 3495
   continue;
  }
 }
 $103 = HEAP8[$__grouping] | 0; //@line 3500
 if (($103 & 1) == 0) {
  $110 = ($103 & 255) >>> 1; //@line 3506
 } else {
  $110 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 3510
 }
 do {
  if (($110 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 3520
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 3528
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 3530
   HEAP32[$114 >> 2] = $119; //@line 3531
  }
 } while (0);
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 3536
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2] | 0, $__err); //@line 3538
 do {
  if (($32 | 0) == 0) {
   $137 = 0; //@line 3542
   $138 = 1; //@line 3542
  } else {
   $126 = HEAP32[$32 + 12 >> 2] | 0; //@line 3545
   if (($126 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 3555
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 3558
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $32; //@line 3562
    $138 = 0; //@line 3562
    break;
   }
   HEAP32[$13 >> 2] = 0; //@line 3565
   $137 = 0; //@line 3566
   $138 = 1; //@line 3566
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57; //@line 3572
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 3575
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 3585
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 3588
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$14 >> 2] = 0; //@line 3592
    label = 57; //@line 3593
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 3599
   HEAP32[$154 >> 2] = $137; //@line 3600
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3601
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3602
   STACKTOP = sp; //@line 3603
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 57) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 3611
   HEAP32[$154 >> 2] = $137; //@line 3612
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3613
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3614
   STACKTOP = sp; //@line 3615
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 3620
 $154 = $agg$result; //@line 3621
 HEAP32[$154 >> 2] = $137; //@line 3622
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3623
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3624
 STACKTOP = sp; //@line 3625
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $10 = 0, $103 = 0, $110 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $48 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $74 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $94 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2871
 STACKTOP = STACKTOP + 376 | 0; //@line 2872
 $__decimal_point = sp + 128 | 0; //@line 2874
 $__thousands_sep = sp + 136 | 0; //@line 2875
 $__grouping = sp + 144 | 0; //@line 2876
 $__buf = sp + 160 | 0; //@line 2877
 $__a_end = sp + 176 | 0; //@line 2878
 $__g = sp + 184 | 0; //@line 2879
 $__g_end = sp + 344 | 0; //@line 2880
 $__dc = sp + 352 | 0; //@line 2881
 $__in_units = sp + 360 | 0; //@line 2882
 $__exp = sp + 368 | 0; //@line 2883
 $2 = sp; //@line 2885
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $2, $__decimal_point, $__thousands_sep); //@line 2886
 $this2$i$i$i = $__buf; //@line 2887
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 2888
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 2888
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 2888
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 2889
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $9 = $__buf + 1 | 0; //@line 2895
  $$pre$phi35Z2D = $9; //@line 2897
  $$pre$phi37Z2D = $__buf + 8 | 0; //@line 2897
  $10 = $9; //@line 2897
 } else {
  $6 = $__buf + 8 | 0; //@line 2899
  $$pre$phi35Z2D = $__buf + 1 | 0; //@line 2903
  $$pre$phi37Z2D = $6; //@line 2903
  $10 = HEAP32[$6 >> 2] | 0; //@line 2903
 }
 HEAP32[$__a_end >> 2] = $10; //@line 2905
 $12 = $__g; //@line 2907
 HEAP32[$__g_end >> 2] = $12; //@line 2908
 HEAP32[$__dc >> 2] = 0; //@line 2909
 HEAP8[$__in_units] = 1; //@line 2910
 HEAP8[$__exp] = 69; //@line 2911
 $13 = $__b; //@line 2912
 $14 = $__e; //@line 2913
 $15 = $__buf; //@line 2914
 $16 = $__buf + 4 | 0; //@line 2915
 $17 = HEAP32[$__decimal_point >> 2] | 0; //@line 2916
 $18 = HEAP32[$__thousands_sep >> 2] | 0; //@line 2917
 $$pre$i$i$i5 = HEAP32[$13 >> 2] | 0; //@line 2919
 $__a$0 = $10; //@line 2919
 L5 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $32 = 0; //@line 2924
    $33 = 1; //@line 2924
   } else {
    $21 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 2927
    if (($21 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 2937
    } else {
     $$0$i$i$i$i3 = HEAP32[$21 >> 2] | 0; //@line 2940
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $32 = $$pre$i$i$i5; //@line 2944
     $33 = 0; //@line 2944
     break;
    }
    HEAP32[$13 >> 2] = 0; //@line 2947
    $32 = 0; //@line 2948
    $33 = 1; //@line 2948
   }
  } while (0);
  $34 = HEAP32[$14 >> 2] | 0; //@line 2951
  do {
   if (($34 | 0) == 0) {
    label = 17; //@line 2955
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0; //@line 2958
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 2968
    } else {
     $$0$i$i1$i$i9 = HEAP32[$37 >> 2] | 0; //@line 2971
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$14 >> 2] = 0; //@line 2975
     label = 17; //@line 2976
     break;
    } else {
     if ($33) {
      $48 = $34; //@line 2980
      break;
     } else {
      $$pre$i3$i$i = $34; //@line 2983
      $__a$2 = $__a$0; //@line 2983
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0; //@line 2990
   if ($33) {
    $$pre$i3$i$i = 0; //@line 2992
    $__a$2 = $__a$0; //@line 2992
    break;
   } else {
    $48 = 0; //@line 2995
   }
  }
  $53 = HEAP8[$this2$i$i$i] | 0; //@line 3002
  $55 = ($53 & 1) == 0; //@line 3004
  if ($55) {
   $59 = ($53 & 255) >>> 1; //@line 3008
  } else {
   $59 = HEAP32[$16 >> 2] | 0; //@line 3011
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($59 | 0)) {
   if ($55) {
    $66 = ($53 & 255) >>> 1; //@line 3020
    $67 = ($53 & 255) >>> 1; //@line 3020
   } else {
    $61 = HEAP32[$16 >> 2] | 0; //@line 3022
    $66 = $61; //@line 3023
    $67 = $61; //@line 3023
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $67 << 1, 0); //@line 3026
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $74 = 10; //@line 3031
   } else {
    $74 = (HEAP32[$15 >> 2] & -2) + -1 | 0; //@line 3036
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74, 0); //@line 3038
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $79 = $$pre$phi35Z2D; //@line 3043
   } else {
    $79 = HEAP32[$$pre$phi37Z2D >> 2] | 0; //@line 3046
   }
   HEAP32[$__a_end >> 2] = $79 + $66; //@line 3049
   $__a$1 = $79; //@line 3050
  } else {
   $__a$1 = $__a$0; //@line 3052
  }
  $81 = $32 + 12 | 0; //@line 3054
  $82 = HEAP32[$81 >> 2] | 0; //@line 3055
  $83 = $32 + 16 | 0; //@line 3056
  if (($82 | 0) == (HEAP32[$83 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 3065
  } else {
   $$0$i$i = HEAP32[$82 >> 2] | 0; //@line 3068
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $2) | 0) != 0) {
   $$pre$i3$i$i = $48; //@line 3073
   $__a$2 = $__a$1; //@line 3073
   break;
  }
  $94 = HEAP32[$81 >> 2] | 0; //@line 3076
  if (($94 | 0) == (HEAP32[$83 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 3084
   $$pre$i$i$i5 = $32; //@line 3085
   $__a$0 = $__a$1; //@line 3085
   continue;
  } else {
   HEAP32[$81 >> 2] = $94 + 4; //@line 3089
   $$pre$i$i$i5 = $32; //@line 3090
   $__a$0 = $__a$1; //@line 3090
   continue;
  }
 }
 $103 = HEAP8[$__grouping] | 0; //@line 3095
 if (($103 & 1) == 0) {
  $110 = ($103 & 255) >>> 1; //@line 3101
 } else {
  $110 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 3105
 }
 do {
  if (($110 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 3115
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 3123
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 3125
   HEAP32[$114 >> 2] = $119; //@line 3126
  }
 } while (0);
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 3131
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2] | 0, $__err); //@line 3133
 do {
  if (($32 | 0) == 0) {
   $137 = 0; //@line 3137
   $138 = 1; //@line 3137
  } else {
   $126 = HEAP32[$32 + 12 >> 2] | 0; //@line 3140
   if (($126 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 3150
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 3153
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $32; //@line 3157
    $138 = 0; //@line 3157
    break;
   }
   HEAP32[$13 >> 2] = 0; //@line 3160
   $137 = 0; //@line 3161
   $138 = 1; //@line 3161
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57; //@line 3167
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 3170
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 3180
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 3183
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$14 >> 2] = 0; //@line 3187
    label = 57; //@line 3188
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 3194
   HEAP32[$154 >> 2] = $137; //@line 3195
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3196
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3197
   STACKTOP = sp; //@line 3198
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 57) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 3206
   HEAP32[$154 >> 2] = $137; //@line 3207
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3208
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3209
   STACKTOP = sp; //@line 3210
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 3215
 $154 = $agg$result; //@line 3216
 HEAP32[$154 >> 2] = $137; //@line 3217
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 3218
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 3219
 STACKTOP = sp; //@line 3220
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $1 = 0, $102 = 0, $109 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $13 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $30 = 0, $31 = 0, $32 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $63 = 0, $64 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $93 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12803
 STACKTOP = STACKTOP + 280 | 0; //@line 12804
 $__decimal_point = sp + 32 | 0; //@line 12806
 $__thousands_sep = sp + 40 | 0; //@line 12807
 $__grouping = sp + 48 | 0; //@line 12808
 $__buf = sp + 64 | 0; //@line 12809
 $__a_end = sp + 80 | 0; //@line 12810
 $__g = sp + 88 | 0; //@line 12811
 $__g_end = sp + 248 | 0; //@line 12812
 $__dc = sp + 256 | 0; //@line 12813
 $__in_units = sp + 264 | 0; //@line 12814
 $__exp = sp + 272 | 0; //@line 12815
 $1 = sp; //@line 12816
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep); //@line 12817
 $this2$i$i$i = $__buf; //@line 12818
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 12819
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 12819
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 12819
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 12820
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $8 = $__buf + 1 | 0; //@line 12826
  $$pre$phi33Z2D = $8; //@line 12828
  $$pre$phi35Z2D = $__buf + 8 | 0; //@line 12828
  $9 = $8; //@line 12828
 } else {
  $5 = $__buf + 8 | 0; //@line 12830
  $$pre$phi33Z2D = $__buf + 1 | 0; //@line 12834
  $$pre$phi35Z2D = $5; //@line 12834
  $9 = HEAP32[$5 >> 2] | 0; //@line 12834
 }
 HEAP32[$__a_end >> 2] = $9; //@line 12836
 $11 = $__g; //@line 12838
 HEAP32[$__g_end >> 2] = $11; //@line 12839
 HEAP32[$__dc >> 2] = 0; //@line 12840
 HEAP8[$__in_units] = 1; //@line 12841
 HEAP8[$__exp] = 69; //@line 12842
 $12 = $__b; //@line 12843
 $13 = $__e; //@line 12844
 $14 = $__buf; //@line 12845
 $15 = $__buf + 4 | 0; //@line 12846
 $16 = HEAP8[$__decimal_point] | 0; //@line 12847
 $17 = HEAP8[$__thousands_sep] | 0; //@line 12848
 $$pre$i$i$i4 = HEAP32[$12 >> 2] | 0; //@line 12850
 $__a$0 = $9; //@line 12850
 L5 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $30 = 0; //@line 12855
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $30 = $$pre$i$i$i4; //@line 12863
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $30 = $$pre$i$i$i4; //@line 12873
     break;
    }
    HEAP32[$12 >> 2] = 0; //@line 12876
    $30 = 0; //@line 12877
   }
  } while (0);
  $31 = ($30 | 0) == 0; //@line 12880
  $32 = HEAP32[$13 >> 2] | 0; //@line 12881
  do {
   if (($32 | 0) == 0) {
    label = 14; //@line 12885
   } else {
    if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
     if ($31) {
      $45 = $32; //@line 12894
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 12897
      $__a$2 = $__a$0; //@line 12897
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1) {
     HEAP32[$13 >> 2] = 0; //@line 12908
     label = 14; //@line 12909
     break;
    } else {
     if ($31) {
      $45 = $32; //@line 12913
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 12916
      $__a$2 = $__a$0; //@line 12916
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0; //@line 12923
   if ($31) {
    $$pre$i2$i$i = 0; //@line 12925
    $__a$2 = $__a$0; //@line 12925
    break;
   } else {
    $45 = 0; //@line 12928
   }
  }
  $50 = HEAP8[$this2$i$i$i] | 0; //@line 12935
  $52 = ($50 & 1) == 0; //@line 12937
  if ($52) {
   $56 = ($50 & 255) >>> 1; //@line 12941
  } else {
   $56 = HEAP32[$15 >> 2] | 0; //@line 12944
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($56 | 0)) {
   if ($52) {
    $63 = ($50 & 255) >>> 1; //@line 12953
    $64 = ($50 & 255) >>> 1; //@line 12953
   } else {
    $58 = HEAP32[$15 >> 2] | 0; //@line 12955
    $63 = $58; //@line 12956
    $64 = $58; //@line 12956
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64 << 1, 0); //@line 12959
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $71 = 10; //@line 12964
   } else {
    $71 = (HEAP32[$14 >> 2] & -2) + -1 | 0; //@line 12969
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $71, 0); //@line 12971
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = $$pre$phi33Z2D; //@line 12976
   } else {
    $76 = HEAP32[$$pre$phi35Z2D >> 2] | 0; //@line 12979
   }
   HEAP32[$__a_end >> 2] = $76 + $63; //@line 12982
   $__a$1 = $76; //@line 12983
  } else {
   $__a$1 = $__a$0; //@line 12985
  }
  $78 = $30 + 12 | 0; //@line 12987
  $79 = HEAP32[$78 >> 2] | 0; //@line 12988
  $80 = $30 + 16 | 0; //@line 12989
  if (($79 | 0) == (HEAP32[$80 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; //@line 12998
  } else {
   $$0$i$i = HEAPU8[$79] | 0; //@line 13002
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $11, $__g_end, $__dc, $1) | 0) != 0) {
   $$pre$i2$i$i = $45; //@line 13008
   $__a$2 = $__a$1; //@line 13008
   break;
  }
  $93 = HEAP32[$78 >> 2] | 0; //@line 13011
  if (($93 | 0) == (HEAP32[$80 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 40 >> 2] & 127]($30) | 0; //@line 13019
   $$pre$i$i$i4 = $30; //@line 13020
   $__a$0 = $__a$1; //@line 13020
   continue;
  } else {
   HEAP32[$78 >> 2] = $93 + 1; //@line 13024
   $$pre$i$i$i4 = $30; //@line 13025
   $__a$0 = $__a$1; //@line 13025
   continue;
  }
 }
 $102 = HEAP8[$__grouping] | 0; //@line 13030
 if (($102 & 1) == 0) {
  $109 = ($102 & 255) >>> 1; //@line 13036
 } else {
  $109 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 13040
 }
 do {
  if (($109 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 13050
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 13058
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 13060
   HEAP32[$113 >> 2] = $118; //@line 13061
  }
 } while (0);
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13066
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $11, HEAP32[$__g_end >> 2] | 0, $__err); //@line 13068
 do {
  if (($30 | 0) == 0) {
   $135 = 0; //@line 13072
  } else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
    $135 = $30; //@line 13080
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1)) {
    $135 = $30; //@line 13090
    break;
   }
   HEAP32[$12 >> 2] = 0; //@line 13093
   $135 = 0; //@line 13094
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 13097
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51; //@line 13101
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 13112
    HEAP32[$152 >> 2] = $135; //@line 13113
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13114
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13115
    STACKTOP = sp; //@line 13116
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$13 >> 2] = 0; //@line 13125
    label = 51; //@line 13126
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 13134
   HEAP32[$152 >> 2] = $135; //@line 13135
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13136
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13137
   STACKTOP = sp; //@line 13138
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 51) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 13146
   HEAP32[$152 >> 2] = $135; //@line 13147
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13148
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13149
   STACKTOP = sp; //@line 13150
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13155
 $152 = $agg$result; //@line 13156
 HEAP32[$152 >> 2] = $135; //@line 13157
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13158
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13159
 STACKTOP = sp; //@line 13160
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $1 = 0, $102 = 0, $109 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $13 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $30 = 0, $31 = 0, $32 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $63 = 0, $64 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $93 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13627
 STACKTOP = STACKTOP + 280 | 0; //@line 13628
 $__decimal_point = sp + 32 | 0; //@line 13630
 $__thousands_sep = sp + 40 | 0; //@line 13631
 $__grouping = sp + 48 | 0; //@line 13632
 $__buf = sp + 64 | 0; //@line 13633
 $__a_end = sp + 80 | 0; //@line 13634
 $__g = sp + 88 | 0; //@line 13635
 $__g_end = sp + 248 | 0; //@line 13636
 $__dc = sp + 256 | 0; //@line 13637
 $__in_units = sp + 264 | 0; //@line 13638
 $__exp = sp + 272 | 0; //@line 13639
 $1 = sp; //@line 13640
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep); //@line 13641
 $this2$i$i$i = $__buf; //@line 13642
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 13643
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 13643
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 13643
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 13644
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $8 = $__buf + 1 | 0; //@line 13650
  $$pre$phi33Z2D = $8; //@line 13652
  $$pre$phi35Z2D = $__buf + 8 | 0; //@line 13652
  $9 = $8; //@line 13652
 } else {
  $5 = $__buf + 8 | 0; //@line 13654
  $$pre$phi33Z2D = $__buf + 1 | 0; //@line 13658
  $$pre$phi35Z2D = $5; //@line 13658
  $9 = HEAP32[$5 >> 2] | 0; //@line 13658
 }
 HEAP32[$__a_end >> 2] = $9; //@line 13660
 $11 = $__g; //@line 13662
 HEAP32[$__g_end >> 2] = $11; //@line 13663
 HEAP32[$__dc >> 2] = 0; //@line 13664
 HEAP8[$__in_units] = 1; //@line 13665
 HEAP8[$__exp] = 69; //@line 13666
 $12 = $__b; //@line 13667
 $13 = $__e; //@line 13668
 $14 = $__buf; //@line 13669
 $15 = $__buf + 4 | 0; //@line 13670
 $16 = HEAP8[$__decimal_point] | 0; //@line 13671
 $17 = HEAP8[$__thousands_sep] | 0; //@line 13672
 $$pre$i$i$i4 = HEAP32[$12 >> 2] | 0; //@line 13674
 $__a$0 = $9; //@line 13674
 L5 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $30 = 0; //@line 13679
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $30 = $$pre$i$i$i4; //@line 13687
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $30 = $$pre$i$i$i4; //@line 13697
     break;
    }
    HEAP32[$12 >> 2] = 0; //@line 13700
    $30 = 0; //@line 13701
   }
  } while (0);
  $31 = ($30 | 0) == 0; //@line 13704
  $32 = HEAP32[$13 >> 2] | 0; //@line 13705
  do {
   if (($32 | 0) == 0) {
    label = 14; //@line 13709
   } else {
    if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
     if ($31) {
      $45 = $32; //@line 13718
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 13721
      $__a$2 = $__a$0; //@line 13721
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1) {
     HEAP32[$13 >> 2] = 0; //@line 13732
     label = 14; //@line 13733
     break;
    } else {
     if ($31) {
      $45 = $32; //@line 13737
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 13740
      $__a$2 = $__a$0; //@line 13740
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0; //@line 13747
   if ($31) {
    $$pre$i2$i$i = 0; //@line 13749
    $__a$2 = $__a$0; //@line 13749
    break;
   } else {
    $45 = 0; //@line 13752
   }
  }
  $50 = HEAP8[$this2$i$i$i] | 0; //@line 13759
  $52 = ($50 & 1) == 0; //@line 13761
  if ($52) {
   $56 = ($50 & 255) >>> 1; //@line 13765
  } else {
   $56 = HEAP32[$15 >> 2] | 0; //@line 13768
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($56 | 0)) {
   if ($52) {
    $63 = ($50 & 255) >>> 1; //@line 13777
    $64 = ($50 & 255) >>> 1; //@line 13777
   } else {
    $58 = HEAP32[$15 >> 2] | 0; //@line 13779
    $63 = $58; //@line 13780
    $64 = $58; //@line 13780
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64 << 1, 0); //@line 13783
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $71 = 10; //@line 13788
   } else {
    $71 = (HEAP32[$14 >> 2] & -2) + -1 | 0; //@line 13793
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $71, 0); //@line 13795
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = $$pre$phi33Z2D; //@line 13800
   } else {
    $76 = HEAP32[$$pre$phi35Z2D >> 2] | 0; //@line 13803
   }
   HEAP32[$__a_end >> 2] = $76 + $63; //@line 13806
   $__a$1 = $76; //@line 13807
  } else {
   $__a$1 = $__a$0; //@line 13809
  }
  $78 = $30 + 12 | 0; //@line 13811
  $79 = HEAP32[$78 >> 2] | 0; //@line 13812
  $80 = $30 + 16 | 0; //@line 13813
  if (($79 | 0) == (HEAP32[$80 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; //@line 13822
  } else {
   $$0$i$i = HEAPU8[$79] | 0; //@line 13826
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $11, $__g_end, $__dc, $1) | 0) != 0) {
   $$pre$i2$i$i = $45; //@line 13832
   $__a$2 = $__a$1; //@line 13832
   break;
  }
  $93 = HEAP32[$78 >> 2] | 0; //@line 13835
  if (($93 | 0) == (HEAP32[$80 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 40 >> 2] & 127]($30) | 0; //@line 13843
   $$pre$i$i$i4 = $30; //@line 13844
   $__a$0 = $__a$1; //@line 13844
   continue;
  } else {
   HEAP32[$78 >> 2] = $93 + 1; //@line 13848
   $$pre$i$i$i4 = $30; //@line 13849
   $__a$0 = $__a$1; //@line 13849
   continue;
  }
 }
 $102 = HEAP8[$__grouping] | 0; //@line 13854
 if (($102 & 1) == 0) {
  $109 = ($102 & 255) >>> 1; //@line 13860
 } else {
  $109 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 13864
 }
 do {
  if (($109 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 13874
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 13882
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 13884
   HEAP32[$113 >> 2] = $118; //@line 13885
  }
 } while (0);
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13890
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $11, HEAP32[$__g_end >> 2] | 0, $__err); //@line 13892
 do {
  if (($30 | 0) == 0) {
   $135 = 0; //@line 13896
  } else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
    $135 = $30; //@line 13904
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1)) {
    $135 = $30; //@line 13914
    break;
   }
   HEAP32[$12 >> 2] = 0; //@line 13917
   $135 = 0; //@line 13918
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 13921
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51; //@line 13925
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 13936
    HEAP32[$152 >> 2] = $135; //@line 13937
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13938
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13939
    STACKTOP = sp; //@line 13940
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$13 >> 2] = 0; //@line 13949
    label = 51; //@line 13950
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 13958
   HEAP32[$152 >> 2] = $135; //@line 13959
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13960
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13961
   STACKTOP = sp; //@line 13962
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 51) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 13970
   HEAP32[$152 >> 2] = $135; //@line 13971
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13972
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13973
   STACKTOP = sp; //@line 13974
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13979
 $152 = $agg$result; //@line 13980
 HEAP32[$152 >> 2] = $135; //@line 13981
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13982
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13983
 STACKTOP = sp; //@line 13984
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $1 = 0, $102 = 0, $109 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $13 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $30 = 0, $31 = 0, $32 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $63 = 0, $64 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $93 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13215
 STACKTOP = STACKTOP + 280 | 0; //@line 13216
 $__decimal_point = sp + 32 | 0; //@line 13218
 $__thousands_sep = sp + 40 | 0; //@line 13219
 $__grouping = sp + 48 | 0; //@line 13220
 $__buf = sp + 64 | 0; //@line 13221
 $__a_end = sp + 80 | 0; //@line 13222
 $__g = sp + 88 | 0; //@line 13223
 $__g_end = sp + 248 | 0; //@line 13224
 $__dc = sp + 256 | 0; //@line 13225
 $__in_units = sp + 264 | 0; //@line 13226
 $__exp = sp + 272 | 0; //@line 13227
 $1 = sp; //@line 13228
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep); //@line 13229
 $this2$i$i$i = $__buf; //@line 13230
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 13231
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 13231
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 13231
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 13232
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $8 = $__buf + 1 | 0; //@line 13238
  $$pre$phi33Z2D = $8; //@line 13240
  $$pre$phi35Z2D = $__buf + 8 | 0; //@line 13240
  $9 = $8; //@line 13240
 } else {
  $5 = $__buf + 8 | 0; //@line 13242
  $$pre$phi33Z2D = $__buf + 1 | 0; //@line 13246
  $$pre$phi35Z2D = $5; //@line 13246
  $9 = HEAP32[$5 >> 2] | 0; //@line 13246
 }
 HEAP32[$__a_end >> 2] = $9; //@line 13248
 $11 = $__g; //@line 13250
 HEAP32[$__g_end >> 2] = $11; //@line 13251
 HEAP32[$__dc >> 2] = 0; //@line 13252
 HEAP8[$__in_units] = 1; //@line 13253
 HEAP8[$__exp] = 69; //@line 13254
 $12 = $__b; //@line 13255
 $13 = $__e; //@line 13256
 $14 = $__buf; //@line 13257
 $15 = $__buf + 4 | 0; //@line 13258
 $16 = HEAP8[$__decimal_point] | 0; //@line 13259
 $17 = HEAP8[$__thousands_sep] | 0; //@line 13260
 $$pre$i$i$i4 = HEAP32[$12 >> 2] | 0; //@line 13262
 $__a$0 = $9; //@line 13262
 L5 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $30 = 0; //@line 13267
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $30 = $$pre$i$i$i4; //@line 13275
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $30 = $$pre$i$i$i4; //@line 13285
     break;
    }
    HEAP32[$12 >> 2] = 0; //@line 13288
    $30 = 0; //@line 13289
   }
  } while (0);
  $31 = ($30 | 0) == 0; //@line 13292
  $32 = HEAP32[$13 >> 2] | 0; //@line 13293
  do {
   if (($32 | 0) == 0) {
    label = 14; //@line 13297
   } else {
    if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
     if ($31) {
      $45 = $32; //@line 13306
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 13309
      $__a$2 = $__a$0; //@line 13309
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1) {
     HEAP32[$13 >> 2] = 0; //@line 13320
     label = 14; //@line 13321
     break;
    } else {
     if ($31) {
      $45 = $32; //@line 13325
      break;
     } else {
      $$pre$i2$i$i = $32; //@line 13328
      $__a$2 = $__a$0; //@line 13328
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0; //@line 13335
   if ($31) {
    $$pre$i2$i$i = 0; //@line 13337
    $__a$2 = $__a$0; //@line 13337
    break;
   } else {
    $45 = 0; //@line 13340
   }
  }
  $50 = HEAP8[$this2$i$i$i] | 0; //@line 13347
  $52 = ($50 & 1) == 0; //@line 13349
  if ($52) {
   $56 = ($50 & 255) >>> 1; //@line 13353
  } else {
   $56 = HEAP32[$15 >> 2] | 0; //@line 13356
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($56 | 0)) {
   if ($52) {
    $63 = ($50 & 255) >>> 1; //@line 13365
    $64 = ($50 & 255) >>> 1; //@line 13365
   } else {
    $58 = HEAP32[$15 >> 2] | 0; //@line 13367
    $63 = $58; //@line 13368
    $64 = $58; //@line 13368
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64 << 1, 0); //@line 13371
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $71 = 10; //@line 13376
   } else {
    $71 = (HEAP32[$14 >> 2] & -2) + -1 | 0; //@line 13381
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $71, 0); //@line 13383
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = $$pre$phi33Z2D; //@line 13388
   } else {
    $76 = HEAP32[$$pre$phi35Z2D >> 2] | 0; //@line 13391
   }
   HEAP32[$__a_end >> 2] = $76 + $63; //@line 13394
   $__a$1 = $76; //@line 13395
  } else {
   $__a$1 = $__a$0; //@line 13397
  }
  $78 = $30 + 12 | 0; //@line 13399
  $79 = HEAP32[$78 >> 2] | 0; //@line 13400
  $80 = $30 + 16 | 0; //@line 13401
  if (($79 | 0) == (HEAP32[$80 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; //@line 13410
  } else {
   $$0$i$i = HEAPU8[$79] | 0; //@line 13414
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $11, $__g_end, $__dc, $1) | 0) != 0) {
   $$pre$i2$i$i = $45; //@line 13420
   $__a$2 = $__a$1; //@line 13420
   break;
  }
  $93 = HEAP32[$78 >> 2] | 0; //@line 13423
  if (($93 | 0) == (HEAP32[$80 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 40 >> 2] & 127]($30) | 0; //@line 13431
   $$pre$i$i$i4 = $30; //@line 13432
   $__a$0 = $__a$1; //@line 13432
   continue;
  } else {
   HEAP32[$78 >> 2] = $93 + 1; //@line 13436
   $$pre$i$i$i4 = $30; //@line 13437
   $__a$0 = $__a$1; //@line 13437
   continue;
  }
 }
 $102 = HEAP8[$__grouping] | 0; //@line 13442
 if (($102 & 1) == 0) {
  $109 = ($102 & 255) >>> 1; //@line 13448
 } else {
  $109 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 13452
 }
 do {
  if (($109 | 0) != 0) {
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 13462
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 13470
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 13472
   HEAP32[$113 >> 2] = $118; //@line 13473
  }
 } while (0);
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13478
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $11, HEAP32[$__g_end >> 2] | 0, $__err); //@line 13480
 do {
  if (($30 | 0) == 0) {
   $135 = 0; //@line 13484
  } else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
    $135 = $30; //@line 13492
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0) == -1)) {
    $135 = $30; //@line 13502
    break;
   }
   HEAP32[$12 >> 2] = 0; //@line 13505
   $135 = 0; //@line 13506
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 13509
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51; //@line 13513
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 13524
    HEAP32[$152 >> 2] = $135; //@line 13525
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13526
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13527
    STACKTOP = sp; //@line 13528
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$13 >> 2] = 0; //@line 13537
    label = 51; //@line 13538
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 13546
   HEAP32[$152 >> 2] = $135; //@line 13547
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13548
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13549
   STACKTOP = sp; //@line 13550
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 51) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 13558
   HEAP32[$152 >> 2] = $135; //@line 13559
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13560
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13561
   STACKTOP = sp; //@line 13562
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13567
 $152 = $agg$result; //@line 13568
 HEAP32[$152 >> 2] = $135; //@line 13569
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 13570
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 13571
 STACKTOP = sp; //@line 13572
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1648
 STACKTOP = STACKTOP + 328 | 0; //@line 1649
 $__atoms = sp; //@line 1650
 $__thousands_sep = sp + 104 | 0; //@line 1651
 $__grouping = sp + 112 | 0; //@line 1652
 $__buf = sp + 128 | 0; //@line 1653
 $__a_end = sp + 144 | 0; //@line 1654
 $__g = sp + 152 | 0; //@line 1655
 $__g_end = sp + 312 | 0; //@line 1656
 $__dc = sp + 320 | 0; //@line 1657
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 1660
 if (($3 | 0) == 0) {
  $$0$i = 0; //@line 1662
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 1664
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 1666
 } else {
  $$0$i = 10; //@line 1668
 }
 $5 = $__atoms; //@line 1671
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 1672
 $this2$i$i$i = $__buf; //@line 1673
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 1674
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 1674
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 1674
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 1675
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 1681
  $$pre$phi34Z2D = $12; //@line 1683
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 1683
  $13 = $12; //@line 1683
 } else {
  $9 = $__buf + 8 | 0; //@line 1685
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 1689
  $$pre$phi36Z2D = $9; //@line 1689
  $13 = HEAP32[$9 >> 2] | 0; //@line 1689
 }
 HEAP32[$__a_end >> 2] = $13; //@line 1691
 $15 = $__g; //@line 1693
 HEAP32[$__g_end >> 2] = $15; //@line 1694
 HEAP32[$__dc >> 2] = 0; //@line 1695
 $16 = $__b; //@line 1696
 $17 = $__e; //@line 1697
 $18 = $__buf; //@line 1698
 $19 = $__buf + 4 | 0; //@line 1699
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 1700
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 1702
 $__a$0 = $13; //@line 1702
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 1707
    $35 = 1; //@line 1707
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 1710
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 1720
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 1723
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 1727
     $35 = 0; //@line 1727
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 1730
    $34 = 0; //@line 1731
    $35 = 1; //@line 1731
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 1734
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 1738
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 1741
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 1751
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 1754
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 1758
     label = 21; //@line 1759
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 1763
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 1766
      $__a$2 = $__a$0; //@line 1766
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 1773
   if ($35) {
    $$pre$i3$i$i = 0; //@line 1775
    $__a$2 = $__a$0; //@line 1775
    break;
   } else {
    $50 = 0; //@line 1778
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 1785
  $57 = ($55 & 1) == 0; //@line 1787
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 1791
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 1794
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 1803
    $69 = ($55 & 255) >>> 1; //@line 1803
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 1805
    $68 = $63; //@line 1806
    $69 = $63; //@line 1806
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 1809
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 1814
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 1819
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 1821
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 1826
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 1829
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 1832
   $__a$1 = $81; //@line 1833
  } else {
   $__a$1 = $__a$0; //@line 1835
  }
  $83 = $34 + 12 | 0; //@line 1837
  $84 = HEAP32[$83 >> 2] | 0; //@line 1838
  $85 = $34 + 16 | 0; //@line 1839
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1848
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 1851
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 1856
   $__a$2 = $__a$1; //@line 1856
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 1859
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 1867
   $$pre$i$i$i5 = $34; //@line 1868
   $__a$0 = $__a$1; //@line 1868
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 1872
   $$pre$i$i$i5 = $34; //@line 1873
   $__a$0 = $__a$1; //@line 1873
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 1878
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 1884
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 1888
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 1893
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 1901
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 1903
   HEAP32[$114 >> 2] = $119; //@line 1904
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 1909
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 1911
 do {
  if (($34 | 0) == 0) {
   $137 = 0; //@line 1915
   $138 = 1; //@line 1915
  } else {
   $126 = HEAP32[$34 + 12 >> 2] | 0; //@line 1918
   if (($126 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1928
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 1931
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $34; //@line 1935
    $138 = 0; //@line 1935
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 1938
   $137 = 0; //@line 1939
   $138 = 1; //@line 1939
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 1945
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 1948
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 1958
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 1961
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 1965
    label = 60; //@line 1966
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 1972
   HEAP32[$154 >> 2] = $137; //@line 1973
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1974
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1975
   STACKTOP = sp; //@line 1976
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 1984
   HEAP32[$154 >> 2] = $137; //@line 1985
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1986
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1987
   STACKTOP = sp; //@line 1988
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 1993
 $154 = $agg$result; //@line 1994
 HEAP32[$154 >> 2] = $137; //@line 1995
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1996
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1997
 STACKTOP = sp; //@line 1998
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1242
 STACKTOP = STACKTOP + 328 | 0; //@line 1243
 $__atoms = sp; //@line 1244
 $__thousands_sep = sp + 104 | 0; //@line 1245
 $__grouping = sp + 112 | 0; //@line 1246
 $__buf = sp + 128 | 0; //@line 1247
 $__a_end = sp + 144 | 0; //@line 1248
 $__g = sp + 152 | 0; //@line 1249
 $__g_end = sp + 312 | 0; //@line 1250
 $__dc = sp + 320 | 0; //@line 1251
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 1254
 if (($3 | 0) == 0) {
  $$0$i = 0; //@line 1256
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 1258
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 1260
 } else {
  $$0$i = 10; //@line 1262
 }
 $5 = $__atoms; //@line 1265
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 1266
 $this2$i$i$i = $__buf; //@line 1267
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 1268
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 1268
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 1268
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 1269
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 1275
  $$pre$phi34Z2D = $12; //@line 1277
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 1277
  $13 = $12; //@line 1277
 } else {
  $9 = $__buf + 8 | 0; //@line 1279
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 1283
  $$pre$phi36Z2D = $9; //@line 1283
  $13 = HEAP32[$9 >> 2] | 0; //@line 1283
 }
 HEAP32[$__a_end >> 2] = $13; //@line 1285
 $15 = $__g; //@line 1287
 HEAP32[$__g_end >> 2] = $15; //@line 1288
 HEAP32[$__dc >> 2] = 0; //@line 1289
 $16 = $__b; //@line 1290
 $17 = $__e; //@line 1291
 $18 = $__buf; //@line 1292
 $19 = $__buf + 4 | 0; //@line 1293
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 1294
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 1296
 $__a$0 = $13; //@line 1296
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 1301
    $35 = 1; //@line 1301
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 1304
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 1314
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 1317
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 1321
     $35 = 0; //@line 1321
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 1324
    $34 = 0; //@line 1325
    $35 = 1; //@line 1325
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 1328
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 1332
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 1335
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 1345
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 1348
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 1352
     label = 21; //@line 1353
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 1357
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 1360
      $__a$2 = $__a$0; //@line 1360
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 1367
   if ($35) {
    $$pre$i3$i$i = 0; //@line 1369
    $__a$2 = $__a$0; //@line 1369
    break;
   } else {
    $50 = 0; //@line 1372
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 1379
  $57 = ($55 & 1) == 0; //@line 1381
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 1385
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 1388
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 1397
    $69 = ($55 & 255) >>> 1; //@line 1397
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 1399
    $68 = $63; //@line 1400
    $69 = $63; //@line 1400
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 1403
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 1408
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 1413
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 1415
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 1420
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 1423
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 1426
   $__a$1 = $81; //@line 1427
  } else {
   $__a$1 = $__a$0; //@line 1429
  }
  $83 = $34 + 12 | 0; //@line 1431
  $84 = HEAP32[$83 >> 2] | 0; //@line 1432
  $85 = $34 + 16 | 0; //@line 1433
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1442
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 1445
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 1450
   $__a$2 = $__a$1; //@line 1450
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 1453
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 1461
   $$pre$i$i$i5 = $34; //@line 1462
   $__a$0 = $__a$1; //@line 1462
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 1466
   $$pre$i$i$i5 = $34; //@line 1467
   $__a$0 = $__a$1; //@line 1467
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 1472
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 1478
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 1482
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 1487
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 1495
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 1497
   HEAP32[$114 >> 2] = $119; //@line 1498
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 1503
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 1505
 do {
  if (($34 | 0) == 0) {
   $137 = 0; //@line 1509
   $138 = 1; //@line 1509
  } else {
   $126 = HEAP32[$34 + 12 >> 2] | 0; //@line 1512
   if (($126 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1522
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 1525
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $34; //@line 1529
    $138 = 0; //@line 1529
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 1532
   $137 = 0; //@line 1533
   $138 = 1; //@line 1533
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 1539
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 1542
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 1552
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 1555
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 1559
    label = 60; //@line 1560
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 1566
   HEAP32[$154 >> 2] = $137; //@line 1567
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1568
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1569
   STACKTOP = sp; //@line 1570
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 1578
   HEAP32[$154 >> 2] = $137; //@line 1579
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1580
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1581
   STACKTOP = sp; //@line 1582
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 1587
 $154 = $agg$result; //@line 1588
 HEAP32[$154 >> 2] = $137; //@line 1589
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1590
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1591
 STACKTOP = sp; //@line 1592
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $122 = 0, $124 = 0, $13 = 0, $131 = 0, $142 = 0, $143 = 0, $146 = 0, $15 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 424
 STACKTOP = STACKTOP + 328 | 0; //@line 425
 $__atoms = sp; //@line 426
 $__thousands_sep = sp + 104 | 0; //@line 427
 $__grouping = sp + 112 | 0; //@line 428
 $__buf = sp + 128 | 0; //@line 429
 $__a_end = sp + 144 | 0; //@line 430
 $__g = sp + 152 | 0; //@line 431
 $__g_end = sp + 312 | 0; //@line 432
 $__dc = sp + 320 | 0; //@line 433
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 436
 if (($3 | 0) == 8) {
  $$0$i = 16; //@line 438
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 440
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 442
 } else {
  $$0$i = 10; //@line 444
 }
 $5 = $__atoms; //@line 447
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 448
 $this2$i$i$i = $__buf; //@line 449
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 450
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 450
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 450
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 451
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 457
  $$pre$phi34Z2D = $12; //@line 459
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 459
  $13 = $12; //@line 459
 } else {
  $9 = $__buf + 8 | 0; //@line 461
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 465
  $$pre$phi36Z2D = $9; //@line 465
  $13 = HEAP32[$9 >> 2] | 0; //@line 465
 }
 HEAP32[$__a_end >> 2] = $13; //@line 467
 $15 = $__g; //@line 469
 HEAP32[$__g_end >> 2] = $15; //@line 470
 HEAP32[$__dc >> 2] = 0; //@line 471
 $16 = $__b; //@line 472
 $17 = $__e; //@line 473
 $18 = $__buf; //@line 474
 $19 = $__buf + 4 | 0; //@line 475
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 476
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 478
 $__a$0 = $13; //@line 478
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 483
    $35 = 1; //@line 483
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 486
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 496
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 499
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 503
     $35 = 0; //@line 503
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 506
    $34 = 0; //@line 507
    $35 = 1; //@line 507
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 510
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 514
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 517
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 527
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 530
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 534
     label = 21; //@line 535
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 539
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 542
      $__a$2 = $__a$0; //@line 542
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 549
   if ($35) {
    $$pre$i3$i$i = 0; //@line 551
    $__a$2 = $__a$0; //@line 551
    break;
   } else {
    $50 = 0; //@line 554
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 561
  $57 = ($55 & 1) == 0; //@line 563
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 567
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 570
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 579
    $69 = ($55 & 255) >>> 1; //@line 579
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 581
    $68 = $63; //@line 582
    $69 = $63; //@line 582
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 585
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 590
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 595
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 597
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 602
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 605
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 608
   $__a$1 = $81; //@line 609
  } else {
   $__a$1 = $__a$0; //@line 611
  }
  $83 = $34 + 12 | 0; //@line 613
  $84 = HEAP32[$83 >> 2] | 0; //@line 614
  $85 = $34 + 16 | 0; //@line 615
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 624
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 627
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 632
   $__a$2 = $__a$1; //@line 632
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 635
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 643
   $$pre$i$i$i5 = $34; //@line 644
   $__a$0 = $__a$1; //@line 644
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 648
   $$pre$i$i$i5 = $34; //@line 649
   $__a$0 = $__a$1; //@line 649
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 654
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 660
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 664
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 669
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 677
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 679
   HEAP32[$114 >> 2] = $119; //@line 680
  }
 } while (0);
 $122 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 684
 $124 = $__v; //@line 686
 HEAP32[$124 >> 2] = $122; //@line 688
 HEAP32[$124 + 4 >> 2] = tempRet0; //@line 691
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 693
 do {
  if (($34 | 0) == 0) {
   $142 = 0; //@line 697
   $143 = 1; //@line 697
  } else {
   $131 = HEAP32[$34 + 12 >> 2] | 0; //@line 700
   if (($131 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 710
   } else {
    $$0$i$i$i$i = HEAP32[$131 >> 2] | 0; //@line 713
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $142 = $34; //@line 717
    $143 = 0; //@line 717
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 720
   $142 = 0; //@line 721
   $143 = 1; //@line 721
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 727
  } else {
   $146 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 730
   if (($146 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 740
   } else {
    $$0$i$i1$i$i = HEAP32[$146 >> 2] | 0; //@line 743
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 747
    label = 60; //@line 748
    break;
   }
   if (!$143) {
    break;
   }
   $159 = $agg$result; //@line 754
   HEAP32[$159 >> 2] = $142; //@line 755
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 756
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 757
   STACKTOP = sp; //@line 758
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($143) {
    break;
   }
   $159 = $agg$result; //@line 766
   HEAP32[$159 >> 2] = $142; //@line 767
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 768
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 769
   STACKTOP = sp; //@line 770
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 775
 $159 = $agg$result; //@line 776
 HEAP32[$159 >> 2] = $142; //@line 777
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 778
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 779
 STACKTOP = sp; //@line 780
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11144
 STACKTOP = STACKTOP + 256 | 0; //@line 11145
 $__atoms = sp; //@line 11146
 $__thousands_sep = sp + 32 | 0; //@line 11147
 $__grouping = sp + 40 | 0; //@line 11148
 $__buf = sp + 56 | 0; //@line 11149
 $__a_end = sp + 72 | 0; //@line 11150
 $__g = sp + 80 | 0; //@line 11151
 $__g_end = sp + 240 | 0; //@line 11152
 $__dc = sp + 248 | 0; //@line 11153
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 11156
 if (($3 | 0) == 8) {
  $$0$i = 16; //@line 11158
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 11160
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 11162
 } else {
  $$0$i = 10; //@line 11164
 }
 $4 = $__atoms; //@line 11166
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 11167
 $this2$i$i$i = $__buf; //@line 11168
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 11169
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 11169
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 11169
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 11170
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 11176
  $$pre$phi32Z2D = $11; //@line 11178
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 11178
  $12 = $11; //@line 11178
 } else {
  $8 = $__buf + 8 | 0; //@line 11180
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 11184
  $$pre$phi34Z2D = $8; //@line 11184
  $12 = HEAP32[$8 >> 2] | 0; //@line 11184
 }
 HEAP32[$__a_end >> 2] = $12; //@line 11186
 $14 = $__g; //@line 11188
 HEAP32[$__g_end >> 2] = $14; //@line 11189
 HEAP32[$__dc >> 2] = 0; //@line 11190
 $15 = $__b; //@line 11191
 $16 = $__e; //@line 11192
 $17 = $__buf; //@line 11193
 $18 = $__buf + 4 | 0; //@line 11194
 $19 = HEAP8[$__thousands_sep] | 0; //@line 11195
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 11197
 $__a$0 = $12; //@line 11197
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 11202
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 11210
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 11220
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 11223
    $32 = 0; //@line 11224
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 11227
  $34 = HEAP32[$16 >> 2] | 0; //@line 11228
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 11232
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 11241
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 11244
      $__a$2 = $__a$0; //@line 11244
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 11255
     label = 18; //@line 11256
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 11260
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 11263
      $__a$2 = $__a$0; //@line 11263
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 11270
   if ($33) {
    $$pre$i2$i$i = 0; //@line 11272
    $__a$2 = $__a$0; //@line 11272
    break;
   } else {
    $47 = 0; //@line 11275
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 11282
  $54 = ($52 & 1) == 0; //@line 11284
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 11288
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 11291
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 11300
    $66 = ($52 & 255) >>> 1; //@line 11300
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 11302
    $65 = $60; //@line 11303
    $66 = $60; //@line 11303
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 11306
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 11311
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 11316
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 11318
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 11323
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 11326
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 11329
   $__a$1 = $78; //@line 11330
  } else {
   $__a$1 = $__a$0; //@line 11332
  }
  $80 = $32 + 12 | 0; //@line 11334
  $81 = HEAP32[$80 >> 2] | 0; //@line 11335
  $82 = $32 + 16 | 0; //@line 11336
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 11345
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 11349
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 11355
   $__a$2 = $__a$1; //@line 11355
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 11358
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 11366
   $$pre$i$i$i4 = $32; //@line 11367
   $__a$0 = $__a$1; //@line 11367
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 11371
   $$pre$i$i$i4 = $32; //@line 11372
   $__a$0 = $__a$1; //@line 11372
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 11377
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 11383
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 11387
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 11392
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 11400
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 11402
   HEAP32[$113 >> 2] = $118; //@line 11403
  }
 } while (0);
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 11408
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 11410
 do {
  if (($32 | 0) == 0) {
   $135 = 0; //@line 11414
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $135 = $32; //@line 11422
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $135 = $32; //@line 11432
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 11435
   $135 = 0; //@line 11436
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 11439
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 11443
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 11454
    HEAP32[$152 >> 2] = $135; //@line 11455
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11456
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11457
    STACKTOP = sp; //@line 11458
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 11467
    label = 54; //@line 11468
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 11476
   HEAP32[$152 >> 2] = $135; //@line 11477
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11478
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11479
   STACKTOP = sp; //@line 11480
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 11488
   HEAP32[$152 >> 2] = $135; //@line 11489
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11490
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11491
   STACKTOP = sp; //@line 11492
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11497
 $152 = $agg$result; //@line 11498
 HEAP32[$152 >> 2] = $135; //@line 11499
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11500
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11501
 STACKTOP = sp; //@line 11502
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11970
 STACKTOP = STACKTOP + 256 | 0; //@line 11971
 $__atoms = sp; //@line 11972
 $__thousands_sep = sp + 32 | 0; //@line 11973
 $__grouping = sp + 40 | 0; //@line 11974
 $__buf = sp + 56 | 0; //@line 11975
 $__a_end = sp + 72 | 0; //@line 11976
 $__g = sp + 80 | 0; //@line 11977
 $__g_end = sp + 240 | 0; //@line 11978
 $__dc = sp + 248 | 0; //@line 11979
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 11982
 if (($3 | 0) == 64) {
  $$0$i = 8; //@line 11984
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 11986
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 11988
 } else {
  $$0$i = 10; //@line 11990
 }
 $4 = $__atoms; //@line 11992
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 11993
 $this2$i$i$i = $__buf; //@line 11994
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 11995
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 11995
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 11995
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 11996
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 12002
  $$pre$phi32Z2D = $11; //@line 12004
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 12004
  $12 = $11; //@line 12004
 } else {
  $8 = $__buf + 8 | 0; //@line 12006
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 12010
  $$pre$phi34Z2D = $8; //@line 12010
  $12 = HEAP32[$8 >> 2] | 0; //@line 12010
 }
 HEAP32[$__a_end >> 2] = $12; //@line 12012
 $14 = $__g; //@line 12014
 HEAP32[$__g_end >> 2] = $14; //@line 12015
 HEAP32[$__dc >> 2] = 0; //@line 12016
 $15 = $__b; //@line 12017
 $16 = $__e; //@line 12018
 $17 = $__buf; //@line 12019
 $18 = $__buf + 4 | 0; //@line 12020
 $19 = HEAP8[$__thousands_sep] | 0; //@line 12021
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 12023
 $__a$0 = $12; //@line 12023
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 12028
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 12036
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 12046
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 12049
    $32 = 0; //@line 12050
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 12053
  $34 = HEAP32[$16 >> 2] | 0; //@line 12054
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 12058
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 12067
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 12070
      $__a$2 = $__a$0; //@line 12070
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 12081
     label = 18; //@line 12082
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 12086
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 12089
      $__a$2 = $__a$0; //@line 12089
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 12096
   if ($33) {
    $$pre$i2$i$i = 0; //@line 12098
    $__a$2 = $__a$0; //@line 12098
    break;
   } else {
    $47 = 0; //@line 12101
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 12108
  $54 = ($52 & 1) == 0; //@line 12110
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 12114
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 12117
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 12126
    $66 = ($52 & 255) >>> 1; //@line 12126
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 12128
    $65 = $60; //@line 12129
    $66 = $60; //@line 12129
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 12132
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 12137
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 12142
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 12144
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 12149
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 12152
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 12155
   $__a$1 = $78; //@line 12156
  } else {
   $__a$1 = $__a$0; //@line 12158
  }
  $80 = $32 + 12 | 0; //@line 12160
  $81 = HEAP32[$80 >> 2] | 0; //@line 12161
  $82 = $32 + 16 | 0; //@line 12162
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 12171
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 12175
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 12181
   $__a$2 = $__a$1; //@line 12181
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 12184
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 12192
   $$pre$i$i$i4 = $32; //@line 12193
   $__a$0 = $__a$1; //@line 12193
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 12197
   $$pre$i$i$i4 = $32; //@line 12198
   $__a$0 = $__a$1; //@line 12198
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 12203
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 12209
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 12213
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 12218
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 12226
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 12228
   HEAP32[$113 >> 2] = $118; //@line 12229
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 12234
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 12236
 do {
  if (($32 | 0) == 0) {
   $135 = 0; //@line 12240
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $135 = $32; //@line 12248
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $135 = $32; //@line 12258
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 12261
   $135 = 0; //@line 12262
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 12265
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 12269
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 12280
    HEAP32[$152 >> 2] = $135; //@line 12281
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12282
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12283
    STACKTOP = sp; //@line 12284
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 12293
    label = 54; //@line 12294
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 12302
   HEAP32[$152 >> 2] = $135; //@line 12303
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12304
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12305
   STACKTOP = sp; //@line 12306
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 12314
   HEAP32[$152 >> 2] = $135; //@line 12315
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12316
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12317
   STACKTOP = sp; //@line 12318
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12323
 $152 = $agg$result; //@line 12324
 HEAP32[$152 >> 2] = $135; //@line 12325
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 12326
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 12327
 STACKTOP = sp; //@line 12328
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11557
 STACKTOP = STACKTOP + 256 | 0; //@line 11558
 $__atoms = sp; //@line 11559
 $__thousands_sep = sp + 32 | 0; //@line 11560
 $__grouping = sp + 40 | 0; //@line 11561
 $__buf = sp + 56 | 0; //@line 11562
 $__a_end = sp + 72 | 0; //@line 11563
 $__g = sp + 80 | 0; //@line 11564
 $__g_end = sp + 240 | 0; //@line 11565
 $__dc = sp + 248 | 0; //@line 11566
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 11569
 if (($3 | 0) == 64) {
  $$0$i = 8; //@line 11571
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 11573
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 11575
 } else {
  $$0$i = 10; //@line 11577
 }
 $4 = $__atoms; //@line 11579
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 11580
 $this2$i$i$i = $__buf; //@line 11581
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 11582
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 11582
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 11582
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 11583
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 11589
  $$pre$phi32Z2D = $11; //@line 11591
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 11591
  $12 = $11; //@line 11591
 } else {
  $8 = $__buf + 8 | 0; //@line 11593
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 11597
  $$pre$phi34Z2D = $8; //@line 11597
  $12 = HEAP32[$8 >> 2] | 0; //@line 11597
 }
 HEAP32[$__a_end >> 2] = $12; //@line 11599
 $14 = $__g; //@line 11601
 HEAP32[$__g_end >> 2] = $14; //@line 11602
 HEAP32[$__dc >> 2] = 0; //@line 11603
 $15 = $__b; //@line 11604
 $16 = $__e; //@line 11605
 $17 = $__buf; //@line 11606
 $18 = $__buf + 4 | 0; //@line 11607
 $19 = HEAP8[$__thousands_sep] | 0; //@line 11608
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 11610
 $__a$0 = $12; //@line 11610
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 11615
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 11623
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 11633
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 11636
    $32 = 0; //@line 11637
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 11640
  $34 = HEAP32[$16 >> 2] | 0; //@line 11641
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 11645
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 11654
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 11657
      $__a$2 = $__a$0; //@line 11657
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 11668
     label = 18; //@line 11669
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 11673
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 11676
      $__a$2 = $__a$0; //@line 11676
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 11683
   if ($33) {
    $$pre$i2$i$i = 0; //@line 11685
    $__a$2 = $__a$0; //@line 11685
    break;
   } else {
    $47 = 0; //@line 11688
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 11695
  $54 = ($52 & 1) == 0; //@line 11697
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 11701
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 11704
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 11713
    $66 = ($52 & 255) >>> 1; //@line 11713
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 11715
    $65 = $60; //@line 11716
    $66 = $60; //@line 11716
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 11719
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 11724
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 11729
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 11731
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 11736
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 11739
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 11742
   $__a$1 = $78; //@line 11743
  } else {
   $__a$1 = $__a$0; //@line 11745
  }
  $80 = $32 + 12 | 0; //@line 11747
  $81 = HEAP32[$80 >> 2] | 0; //@line 11748
  $82 = $32 + 16 | 0; //@line 11749
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 11758
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 11762
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 11768
   $__a$2 = $__a$1; //@line 11768
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 11771
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 11779
   $$pre$i$i$i4 = $32; //@line 11780
   $__a$0 = $__a$1; //@line 11780
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 11784
   $$pre$i$i$i4 = $32; //@line 11785
   $__a$0 = $__a$1; //@line 11785
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 11790
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 11796
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 11800
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 11805
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 11813
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 11815
   HEAP32[$113 >> 2] = $118; //@line 11816
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 11821
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 11823
 do {
  if (($32 | 0) == 0) {
   $135 = 0; //@line 11827
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $135 = $32; //@line 11835
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $135 = $32; //@line 11845
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 11848
   $135 = 0; //@line 11849
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 11852
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 11856
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 11867
    HEAP32[$152 >> 2] = $135; //@line 11868
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11869
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11870
    STACKTOP = sp; //@line 11871
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 11880
    label = 54; //@line 11881
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 11889
   HEAP32[$152 >> 2] = $135; //@line 11890
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11891
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11892
   STACKTOP = sp; //@line 11893
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 11901
   HEAP32[$152 >> 2] = $135; //@line 11902
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11903
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11904
   STACKTOP = sp; //@line 11905
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11910
 $152 = $agg$result; //@line 11911
 HEAP32[$152 >> 2] = $135; //@line 11912
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 11913
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 11914
 STACKTOP = sp; //@line 11915
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $104 = 0, $11 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $52 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10311
 STACKTOP = STACKTOP + 256 | 0; //@line 10312
 $__atoms = sp; //@line 10313
 $__thousands_sep = sp + 32 | 0; //@line 10314
 $__grouping = sp + 40 | 0; //@line 10315
 $__buf = sp + 56 | 0; //@line 10316
 $__a_end = sp + 72 | 0; //@line 10317
 $__g = sp + 80 | 0; //@line 10318
 $__g_end = sp + 240 | 0; //@line 10319
 $__dc = sp + 248 | 0; //@line 10320
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 10323
 if (($3 | 0) == 8) {
  $$0$i = 16; //@line 10325
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 10327
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 10329
 } else {
  $$0$i = 10; //@line 10331
 }
 $4 = $__atoms; //@line 10333
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $4, $__thousands_sep); //@line 10334
 $this2$i$i$i = $__buf; //@line 10335
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 10336
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 10336
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 10336
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 10337
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $11 = $__buf + 1 | 0; //@line 10343
  $$pre$phi32Z2D = $11; //@line 10345
  $$pre$phi34Z2D = $__buf + 8 | 0; //@line 10345
  $12 = $11; //@line 10345
 } else {
  $8 = $__buf + 8 | 0; //@line 10347
  $$pre$phi32Z2D = $__buf + 1 | 0; //@line 10351
  $$pre$phi34Z2D = $8; //@line 10351
  $12 = HEAP32[$8 >> 2] | 0; //@line 10351
 }
 HEAP32[$__a_end >> 2] = $12; //@line 10353
 $14 = $__g; //@line 10355
 HEAP32[$__g_end >> 2] = $14; //@line 10356
 HEAP32[$__dc >> 2] = 0; //@line 10357
 $15 = $__b; //@line 10358
 $16 = $__e; //@line 10359
 $17 = $__buf; //@line 10360
 $18 = $__buf + 4 | 0; //@line 10361
 $19 = HEAP8[$__thousands_sep] | 0; //@line 10362
 $$pre$i$i$i4 = HEAP32[$15 >> 2] | 0; //@line 10364
 $__a$0 = $12; //@line 10364
 L10 : while (1) {
  do {
   if (($$pre$i$i$i4 | 0) == 0) {
    $32 = 0; //@line 10369
   } else {
    if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) != (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
     $32 = $$pre$i$i$i4; //@line 10377
     break;
    }
    if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i4) | 0) == -1)) {
     $32 = $$pre$i$i$i4; //@line 10387
     break;
    }
    HEAP32[$15 >> 2] = 0; //@line 10390
    $32 = 0; //@line 10391
   }
  } while (0);
  $33 = ($32 | 0) == 0; //@line 10394
  $34 = HEAP32[$16 >> 2] | 0; //@line 10395
  do {
   if (($34 | 0) == 0) {
    label = 18; //@line 10399
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($33) {
      $47 = $34; //@line 10408
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 10411
      $__a$2 = $__a$0; //@line 10411
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0) == -1) {
     HEAP32[$16 >> 2] = 0; //@line 10422
     label = 18; //@line 10423
     break;
    } else {
     if ($33) {
      $47 = $34; //@line 10427
      break;
     } else {
      $$pre$i2$i$i = $34; //@line 10430
      $__a$2 = $__a$0; //@line 10430
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0; //@line 10437
   if ($33) {
    $$pre$i2$i$i = 0; //@line 10439
    $__a$2 = $__a$0; //@line 10439
    break;
   } else {
    $47 = 0; //@line 10442
   }
  }
  $52 = HEAP8[$this2$i$i$i] | 0; //@line 10449
  $54 = ($52 & 1) == 0; //@line 10451
  if ($54) {
   $58 = ($52 & 255) >>> 1; //@line 10455
  } else {
   $58 = HEAP32[$18 >> 2] | 0; //@line 10458
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($58 | 0)) {
   if ($54) {
    $65 = ($52 & 255) >>> 1; //@line 10467
    $66 = ($52 & 255) >>> 1; //@line 10467
   } else {
    $60 = HEAP32[$18 >> 2] | 0; //@line 10469
    $65 = $60; //@line 10470
    $66 = $60; //@line 10470
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $66 << 1, 0); //@line 10473
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $73 = 10; //@line 10478
   } else {
    $73 = (HEAP32[$17 >> 2] & -2) + -1 | 0; //@line 10483
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $73, 0); //@line 10485
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $78 = $$pre$phi32Z2D; //@line 10490
   } else {
    $78 = HEAP32[$$pre$phi34Z2D >> 2] | 0; //@line 10493
   }
   HEAP32[$__a_end >> 2] = $78 + $65; //@line 10496
   $__a$1 = $78; //@line 10497
  } else {
   $__a$1 = $__a$0; //@line 10499
  }
  $80 = $32 + 12 | 0; //@line 10501
  $81 = HEAP32[$80 >> 2] | 0; //@line 10502
  $82 = $32 + 16 | 0; //@line 10503
  if (($81 | 0) == (HEAP32[$82 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; //@line 10512
  } else {
   $$0$i$i = HEAPU8[$81] | 0; //@line 10516
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $14, $__g_end, $4) | 0) != 0) {
   $$pre$i2$i$i = $47; //@line 10522
   $__a$2 = $__a$1; //@line 10522
   break;
  }
  $95 = HEAP32[$80 >> 2] | 0; //@line 10525
  if (($95 | 0) == (HEAP32[$82 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] & 127]($32) | 0; //@line 10533
   $$pre$i$i$i4 = $32; //@line 10534
   $__a$0 = $__a$1; //@line 10534
   continue;
  } else {
   HEAP32[$80 >> 2] = $95 + 1; //@line 10538
   $$pre$i$i$i4 = $32; //@line 10539
   $__a$0 = $__a$1; //@line 10539
   continue;
  }
 }
 $104 = HEAP8[$__grouping] | 0; //@line 10544
 if (($104 & 1) == 0) {
  $111 = ($104 & 255) >>> 1; //@line 10550
 } else {
  $111 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 10554
 }
 do {
  if (($111 | 0) != 0) {
   $113 = HEAP32[$__g_end >> 2] | 0; //@line 10559
   if (($113 - $__g | 0) >= 160) {
    break;
   }
   $118 = HEAP32[$__dc >> 2] | 0; //@line 10567
   HEAP32[$__g_end >> 2] = $113 + 4; //@line 10569
   HEAP32[$113 >> 2] = $118; //@line 10570
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 10575
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $14, HEAP32[$__g_end >> 2] | 0, $__err); //@line 10577
 do {
  if (($32 | 0) == 0) {
   $135 = 0; //@line 10581
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    $135 = $32; //@line 10589
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1)) {
    $135 = $32; //@line 10599
    break;
   }
   HEAP32[$15 >> 2] = 0; //@line 10602
   $135 = 0; //@line 10603
  }
 } while (0);
 $136 = ($135 | 0) == 0; //@line 10606
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54; //@line 10610
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$136) {
     break;
    }
    $152 = $agg$result; //@line 10621
    HEAP32[$152 >> 2] = $135; //@line 10622
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 10623
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 10624
    STACKTOP = sp; //@line 10625
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$16 >> 2] = 0; //@line 10634
    label = 54; //@line 10635
    break;
   }
   if (!($136 ^ ($$pre$i2$i$i | 0) == 0)) {
    break;
   }
   $152 = $agg$result; //@line 10643
   HEAP32[$152 >> 2] = $135; //@line 10644
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 10645
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 10646
   STACKTOP = sp; //@line 10647
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 54) {
   if ($136) {
    break;
   }
   $152 = $agg$result; //@line 10655
   HEAP32[$152 >> 2] = $135; //@line 10656
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 10657
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 10658
   STACKTOP = sp; //@line 10659
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10664
 $152 = $agg$result; //@line 10665
 HEAP32[$152 >> 2] = $135; //@line 10666
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 10667
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 10668
 STACKTOP = sp; //@line 10669
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 836
 STACKTOP = STACKTOP + 328 | 0; //@line 837
 $__atoms = sp; //@line 838
 $__thousands_sep = sp + 104 | 0; //@line 839
 $__grouping = sp + 112 | 0; //@line 840
 $__buf = sp + 128 | 0; //@line 841
 $__a_end = sp + 144 | 0; //@line 842
 $__g = sp + 152 | 0; //@line 843
 $__g_end = sp + 312 | 0; //@line 844
 $__dc = sp + 320 | 0; //@line 845
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 848
 if (($3 | 0) == 0) {
  $$0$i = 0; //@line 850
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 852
 } else if (($3 | 0) == 64) {
  $$0$i = 8; //@line 854
 } else {
  $$0$i = 10; //@line 856
 }
 $5 = $__atoms; //@line 859
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 860
 $this2$i$i$i = $__buf; //@line 861
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 862
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 862
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 862
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 863
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 869
  $$pre$phi34Z2D = $12; //@line 871
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 871
  $13 = $12; //@line 871
 } else {
  $9 = $__buf + 8 | 0; //@line 873
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 877
  $$pre$phi36Z2D = $9; //@line 877
  $13 = HEAP32[$9 >> 2] | 0; //@line 877
 }
 HEAP32[$__a_end >> 2] = $13; //@line 879
 $15 = $__g; //@line 881
 HEAP32[$__g_end >> 2] = $15; //@line 882
 HEAP32[$__dc >> 2] = 0; //@line 883
 $16 = $__b; //@line 884
 $17 = $__e; //@line 885
 $18 = $__buf; //@line 886
 $19 = $__buf + 4 | 0; //@line 887
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 888
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 890
 $__a$0 = $13; //@line 890
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 895
    $35 = 1; //@line 895
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 898
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 908
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 911
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 915
     $35 = 0; //@line 915
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 918
    $34 = 0; //@line 919
    $35 = 1; //@line 919
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 922
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 926
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 929
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 939
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 942
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 946
     label = 21; //@line 947
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 951
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 954
      $__a$2 = $__a$0; //@line 954
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 961
   if ($35) {
    $$pre$i3$i$i = 0; //@line 963
    $__a$2 = $__a$0; //@line 963
    break;
   } else {
    $50 = 0; //@line 966
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 973
  $57 = ($55 & 1) == 0; //@line 975
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 979
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 982
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 991
    $69 = ($55 & 255) >>> 1; //@line 991
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 993
    $68 = $63; //@line 994
    $69 = $63; //@line 994
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 997
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 1002
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 1007
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 1009
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 1014
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 1017
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 1020
   $__a$1 = $81; //@line 1021
  } else {
   $__a$1 = $__a$0; //@line 1023
  }
  $83 = $34 + 12 | 0; //@line 1025
  $84 = HEAP32[$83 >> 2] | 0; //@line 1026
  $85 = $34 + 16 | 0; //@line 1027
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1036
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 1039
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 1044
   $__a$2 = $__a$1; //@line 1044
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 1047
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 1055
   $$pre$i$i$i5 = $34; //@line 1056
   $__a$0 = $__a$1; //@line 1056
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 1060
   $$pre$i$i$i5 = $34; //@line 1061
   $__a$0 = $__a$1; //@line 1061
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 1066
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 1072
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 1076
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 1081
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 1089
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 1091
   HEAP32[$114 >> 2] = $119; //@line 1092
  }
 } while (0);
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 1097
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 1099
 do {
  if (($34 | 0) == 0) {
   $137 = 0; //@line 1103
   $138 = 1; //@line 1103
  } else {
   $126 = HEAP32[$34 + 12 >> 2] | 0; //@line 1106
   if (($126 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 1116
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 1119
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $34; //@line 1123
    $138 = 0; //@line 1123
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 1126
   $137 = 0; //@line 1127
   $138 = 1; //@line 1127
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 1133
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 1136
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 1146
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 1149
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 1153
    label = 60; //@line 1154
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 1160
   HEAP32[$154 >> 2] = $137; //@line 1161
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1162
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1163
   STACKTOP = sp; //@line 1164
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 1172
   HEAP32[$154 >> 2] = $137; //@line 1173
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1174
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1175
   STACKTOP = sp; //@line 1176
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 1181
 $154 = $agg$result; //@line 1182
 HEAP32[$154 >> 2] = $137; //@line 1183
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 1184
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 1185
 STACKTOP = sp; //@line 1186
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $105 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $137 = 0, $138 = 0, $141 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $5 = 0, $50 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $76 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18
 STACKTOP = STACKTOP + 328 | 0; //@line 19
 $__atoms = sp; //@line 20
 $__thousands_sep = sp + 104 | 0; //@line 21
 $__grouping = sp + 112 | 0; //@line 22
 $__buf = sp + 128 | 0; //@line 23
 $__a_end = sp + 144 | 0; //@line 24
 $__g = sp + 152 | 0; //@line 25
 $__g_end = sp + 312 | 0; //@line 26
 $__dc = sp + 320 | 0; //@line 27
 $3 = HEAP32[$__iob + 4 >> 2] & 74; //@line 30
 if (($3 | 0) == 64) {
  $$0$i = 8; //@line 32
 } else if (($3 | 0) == 0) {
  $$0$i = 0; //@line 34
 } else if (($3 | 0) == 8) {
  $$0$i = 16; //@line 36
 } else {
  $$0$i = 10; //@line 38
 }
 $5 = $__atoms; //@line 41
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $5, $__thousands_sep); //@line 42
 $this2$i$i$i = $__buf; //@line 43
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 44
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 44
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 44
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0); //@line 45
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $12 = $__buf + 1 | 0; //@line 51
  $$pre$phi34Z2D = $12; //@line 53
  $$pre$phi36Z2D = $__buf + 8 | 0; //@line 53
  $13 = $12; //@line 53
 } else {
  $9 = $__buf + 8 | 0; //@line 55
  $$pre$phi34Z2D = $__buf + 1 | 0; //@line 59
  $$pre$phi36Z2D = $9; //@line 59
  $13 = HEAP32[$9 >> 2] | 0; //@line 59
 }
 HEAP32[$__a_end >> 2] = $13; //@line 61
 $15 = $__g; //@line 63
 HEAP32[$__g_end >> 2] = $15; //@line 64
 HEAP32[$__dc >> 2] = 0; //@line 65
 $16 = $__b; //@line 66
 $17 = $__e; //@line 67
 $18 = $__buf; //@line 68
 $19 = $__buf + 4 | 0; //@line 69
 $20 = HEAP32[$__thousands_sep >> 2] | 0; //@line 70
 $$pre$i$i$i5 = HEAP32[$16 >> 2] | 0; //@line 72
 $__a$0 = $13; //@line 72
 L10 : while (1) {
  do {
   if (($$pre$i$i$i5 | 0) == 0) {
    $34 = 0; //@line 77
    $35 = 1; //@line 77
   } else {
    $23 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0; //@line 80
    if (($23 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 127]($$pre$i$i$i5) | 0; //@line 90
    } else {
     $$0$i$i$i$i3 = HEAP32[$23 >> 2] | 0; //@line 93
    }
    if (!(($$0$i$i$i$i3 | 0) == -1)) {
     $34 = $$pre$i$i$i5; //@line 97
     $35 = 0; //@line 97
     break;
    }
    HEAP32[$16 >> 2] = 0; //@line 100
    $34 = 0; //@line 101
    $35 = 1; //@line 101
   }
  } while (0);
  $36 = HEAP32[$17 >> 2] | 0; //@line 104
  do {
   if (($36 | 0) == 0) {
    label = 21; //@line 108
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 111
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; //@line 121
    } else {
     $$0$i$i1$i$i9 = HEAP32[$39 >> 2] | 0; //@line 124
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 128
     label = 21; //@line 129
     break;
    } else {
     if ($35) {
      $50 = $36; //@line 133
      break;
     } else {
      $$pre$i3$i$i = $36; //@line 136
      $__a$2 = $__a$0; //@line 136
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 143
   if ($35) {
    $$pre$i3$i$i = 0; //@line 145
    $__a$2 = $__a$0; //@line 145
    break;
   } else {
    $50 = 0; //@line 148
   }
  }
  $55 = HEAP8[$this2$i$i$i] | 0; //@line 155
  $57 = ($55 & 1) == 0; //@line 157
  if ($57) {
   $61 = ($55 & 255) >>> 1; //@line 161
  } else {
   $61 = HEAP32[$19 >> 2] | 0; //@line 164
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($61 | 0)) {
   if ($57) {
    $68 = ($55 & 255) >>> 1; //@line 173
    $69 = ($55 & 255) >>> 1; //@line 173
   } else {
    $63 = HEAP32[$19 >> 2] | 0; //@line 175
    $68 = $63; //@line 176
    $69 = $63; //@line 176
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $69 << 1, 0); //@line 179
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $76 = 10; //@line 184
   } else {
    $76 = (HEAP32[$18 >> 2] & -2) + -1 | 0; //@line 189
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $76, 0); //@line 191
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $81 = $$pre$phi34Z2D; //@line 196
   } else {
    $81 = HEAP32[$$pre$phi36Z2D >> 2] | 0; //@line 199
   }
   HEAP32[$__a_end >> 2] = $81 + $68; //@line 202
   $__a$1 = $81; //@line 203
  } else {
   $__a$1 = $__a$0; //@line 205
  }
  $83 = $34 + 12 | 0; //@line 207
  $84 = HEAP32[$83 >> 2] | 0; //@line 208
  $85 = $34 + 16 | 0; //@line 209
  if (($84 | 0) == (HEAP32[$85 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 218
  } else {
   $$0$i$i = HEAP32[$84 >> 2] | 0; //@line 221
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $20, $__grouping, $15, $__g_end, $5) | 0) != 0) {
   $$pre$i3$i$i = $50; //@line 226
   $__a$2 = $__a$1; //@line 226
   break;
  }
  $96 = HEAP32[$83 >> 2] | 0; //@line 229
  if (($96 | 0) == (HEAP32[$85 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] & 127]($34) | 0; //@line 237
   $$pre$i$i$i5 = $34; //@line 238
   $__a$0 = $__a$1; //@line 238
   continue;
  } else {
   HEAP32[$83 >> 2] = $96 + 4; //@line 242
   $$pre$i$i$i5 = $34; //@line 243
   $__a$0 = $__a$1; //@line 243
   continue;
  }
 }
 $105 = HEAP8[$__grouping] | 0; //@line 248
 if (($105 & 1) == 0) {
  $112 = ($105 & 255) >>> 1; //@line 254
 } else {
  $112 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 258
 }
 do {
  if (($112 | 0) != 0) {
   $114 = HEAP32[$__g_end >> 2] | 0; //@line 263
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   $119 = HEAP32[$__dc >> 2] | 0; //@line 271
   HEAP32[$__g_end >> 2] = $114 + 4; //@line 273
   HEAP32[$114 >> 2] = $119; //@line 274
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0; //@line 279
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $15, HEAP32[$__g_end >> 2] | 0, $__err); //@line 281
 do {
  if (($34 | 0) == 0) {
   $137 = 0; //@line 285
   $138 = 1; //@line 285
  } else {
   $126 = HEAP32[$34 + 12 >> 2] | 0; //@line 288
   if (($126 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 298
   } else {
    $$0$i$i$i$i = HEAP32[$126 >> 2] | 0; //@line 301
   }
   if (!(($$0$i$i$i$i | 0) == -1)) {
    $137 = $34; //@line 305
    $138 = 0; //@line 305
    break;
   }
   HEAP32[$16 >> 2] = 0; //@line 308
   $137 = 0; //@line 309
   $138 = 1; //@line 309
  }
 } while (0);
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60; //@line 315
  } else {
   $141 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 318
   if (($141 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i) | 0; //@line 328
   } else {
    $$0$i$i1$i$i = HEAP32[$141 >> 2] | 0; //@line 331
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 335
    label = 60; //@line 336
    break;
   }
   if (!$138) {
    break;
   }
   $154 = $agg$result; //@line 342
   HEAP32[$154 >> 2] = $137; //@line 343
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 344
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 345
   STACKTOP = sp; //@line 346
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($138) {
    break;
   }
   $154 = $agg$result; //@line 354
   HEAP32[$154 >> 2] = $137; //@line 355
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 356
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 357
   STACKTOP = sp; //@line 358
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 363
 $154 = $agg$result; //@line 364
 HEAP32[$154 >> 2] = $137; //@line 365
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf); //@line 366
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 367
 STACKTOP = sp; //@line 368
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $37 = 0, $4 = 0, $44 = 0, $48 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9771
 STACKTOP = STACKTOP + 16 | 0; //@line 9772
 $$byval_copy = sp; //@line 9773
 $vararg_buffer9 = sp + 8 | 0; //@line 9774
 $vararg_buffer5 = STACKTOP; //@line 9776
 STACKTOP = STACKTOP + 16 | 0; //@line 9776
 $vararg_buffer2 = STACKTOP; //@line 9778
 STACKTOP = STACKTOP + 8 | 0; //@line 9778
 $vararg_buffer = STACKTOP; //@line 9780
 STACKTOP = STACKTOP + 16 | 0; //@line 9780
 $__fmt = STACKTOP; //@line 9782
 STACKTOP = STACKTOP + 8 | 0; //@line 9782
 $__nar = STACKTOP; //@line 9783
 STACKTOP = STACKTOP + 32 | 0; //@line 9783
 $__nb = STACKTOP; //@line 9784
 STACKTOP = STACKTOP + 8 | 0; //@line 9784
 $__o = STACKTOP; //@line 9785
 STACKTOP = STACKTOP + 232 | 0; //@line 9785
 $__op = STACKTOP; //@line 9786
 STACKTOP = STACKTOP + 8 | 0; //@line 9786
 $__oe = STACKTOP; //@line 9787
 STACKTOP = STACKTOP + 8 | 0; //@line 9787
 $1 = STACKTOP; //@line 9788
 STACKTOP = STACKTOP + 8 | 0; //@line 9788
 $2 = STACKTOP; //@line 9789
 STACKTOP = STACKTOP + 8 | 0; //@line 9789
 $3 = STACKTOP; //@line 9790
 STACKTOP = STACKTOP + 8 | 0; //@line 9790
 $4 = $__fmt; //@line 9791
 HEAP32[$4 >> 2] = 37; //@line 9793
 HEAP32[$4 + 4 >> 2] = 0; //@line 9796
 $8 = $__fmt; //@line 9797
 $9 = $8 + 1 | 0; //@line 9798
 $10 = $__iob + 4 | 0; //@line 9799
 $11 = HEAP32[$10 >> 2] | 0; //@line 9800
 if (($11 & 2048 | 0) == 0) {
  $$0$i = $9; //@line 9804
 } else {
  HEAP8[$9] = 43; //@line 9807
  $$0$i = $8 + 2 | 0; //@line 9808
 }
 if (($11 & 1024 | 0) == 0) {
  $$1$i = $$0$i; //@line 9813
 } else {
  HEAP8[$$0$i] = 35; //@line 9816
  $$1$i = $$0$i + 1 | 0; //@line 9817
 }
 $18 = $11 & 260; //@line 9819
 $19 = $11 >>> 14; //@line 9820
 do {
  if (($18 | 0) == 260) {
   HEAP8[$$1$i] = 76; //@line 9824
   $scevgep14 = $$1$i + 1 | 0; //@line 9825
   if (($19 & 1 | 0) == 0) {
    HEAP8[$scevgep14] = 97; //@line 9829
    $specify_precision$0$off0$ph$i15 = 0; //@line 9830
    break;
   } else {
    HEAP8[$scevgep14] = 65; //@line 9833
    $specify_precision$0$off0$ph$i15 = 0; //@line 9834
    break;
   }
  } else {
   HEAP8[$$1$i] = 46; //@line 9839
   HEAP8[$$1$i + 1 | 0] = 42; //@line 9841
   HEAP8[$$1$i + 2 | 0] = 76; //@line 9842
   $scevgep = $$1$i + 3 | 0; //@line 9843
   if (($18 | 0) == 256) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 101; //@line 9848
     $specify_precision$0$off0$ph$i15 = 1; //@line 9849
     break;
    } else {
     HEAP8[$scevgep] = 69; //@line 9852
     $specify_precision$0$off0$ph$i15 = 1; //@line 9853
     break;
    }
   } else if (($18 | 0) == 4) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 102; //@line 9860
     $specify_precision$0$off0$ph$i15 = 1; //@line 9861
     break;
    } else {
     HEAP8[$scevgep] = 70; //@line 9864
     $specify_precision$0$off0$ph$i15 = 1; //@line 9865
     break;
    }
   } else {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 103; //@line 9872
     $specify_precision$0$off0$ph$i15 = 1; //@line 9873
     break;
    } else {
     HEAP8[$scevgep] = 71; //@line 9876
     $specify_precision$0$off0$ph$i15 = 1; //@line 9877
     break;
    }
   }
  }
 } while (0);
 $31 = $__nar; //@line 9883
 HEAP32[$__nb >> 2] = $31; //@line 9884
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9895
   ___cxa_guard_release(5608); //@line 9896
  }
 } while (0);
 $37 = HEAP32[1400] | 0; //@line 9899
 if ($specify_precision$0$off0$ph$i15) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9904
  $vararg_ptr1 = $vararg_buffer + 4 | 0; //@line 9905
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9906
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9906
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9906
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer) | 0; //@line 9908
 } else {
  $vararg_ptr4 = $vararg_buffer2; //@line 9910
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9911
  HEAP32[$vararg_ptr4 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9911
  HEAP32[$vararg_ptr4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9911
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer2) | 0; //@line 9913
 }
 do {
  if (($__nc$0 | 0) > 29) {
   $44 = (HEAP8[5608] | 0) == 0; //@line 9919
   if ($specify_precision$0$off0$ph$i15) {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9929
      ___cxa_guard_release(5608); //@line 9930
     }
    } while (0);
    $48 = HEAP32[1400] | 0; //@line 9933
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9937
    $vararg_ptr8 = $vararg_buffer5 + 4 | 0; //@line 9938
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9939
    HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9939
    HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9939
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $48, $8, $vararg_buffer5) | 0; //@line 9941
   } else {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9951
      ___cxa_guard_release(5608); //@line 9952
     }
    } while (0);
    $55 = HEAP32[1400] | 0; //@line 9955
    $vararg_ptr11 = $vararg_buffer9; //@line 9956
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9957
    HEAP32[$vararg_ptr11 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9957
    HEAP32[$vararg_ptr11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9957
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $55, $8, $vararg_buffer9) | 0; //@line 9959
   }
   $57 = HEAP32[$__nb >> 2] | 0; //@line 9961
   if (($57 | 0) != 0) {
    $59 = $57; //@line 9964
    $60 = $57; //@line 9964
    $__nc$2 = $__nc$1; //@line 9964
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 9967
  } else {
   $59 = HEAP32[$__nb >> 2] | 0; //@line 9971
   $60 = 0; //@line 9971
   $__nc$2 = $__nc$0; //@line 9971
  }
 } while (0);
 $61 = $59 + $__nc$2 | 0; //@line 9974
 $63 = HEAP32[$10 >> 2] & 176; //@line 9976
 do {
  if (($63 | 0) == 32) {
   $$0$i7 = $61; //@line 9979
  } else if (($63 | 0) == 16) {
   $64 = HEAP8[$59] | 0; //@line 9981
   if ($64 << 24 >> 24 == 43 | $64 << 24 >> 24 == 45) {
    $$0$i7 = $59 + 1 | 0; //@line 9984
    break;
   }
   if (!(($__nc$2 | 0) > 1 & $64 << 24 >> 24 == 48)) {
    label = 44; //@line 9991
    break;
   }
   $69 = HEAP8[$59 + 1 | 0] | 0; //@line 9995
   if (!($69 << 24 >> 24 == 88 | $69 << 24 >> 24 == 120)) {
    label = 44; //@line 9997
    break;
   }
   $$0$i7 = $59 + 2 | 0; //@line 10001
  } else {
   label = 44; //@line 10003
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $59; //@line 10007
 }
 do {
  if (($59 | 0) == ($31 | 0)) {
   $78 = $31; //@line 10014
   $79 = 0; //@line 10014
   $__ob$0 = $__o; //@line 10014
  } else {
   $75 = _malloc($__nc$2 << 3) | 0; //@line 10017
   $76 = $75; //@line 10018
   if (($75 | 0) != 0) {
    $78 = $59; //@line 10021
    $79 = $76; //@line 10021
    $__ob$0 = $76; //@line 10021
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 10024
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 10028
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($78, $$0$i7, $61, $__ob$0, $__op, $__oe, $1); //@line 10029
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 10033
 $83 = $__s; //@line 10034
 HEAP32[$3 >> 2] = HEAP32[$83 >> 2]; //@line 10037
 $86 = HEAP32[$__op >> 2] | 0; //@line 10038
 $87 = HEAP32[$__oe >> 2] | 0; //@line 10039
 $89 = $$byval_copy; //@line 10041
 $90 = $3; //@line 10042
 HEAP32[$89 + 0 >> 2] = HEAP32[$90 + 0 >> 2]; //@line 10043
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $$byval_copy, $__ob$0, $86, $87, $__iob, $__fl); //@line 10044
 $93 = HEAP32[$2 >> 2] | 0; //@line 10047
 HEAP32[$83 >> 2] = $93; //@line 10048
 HEAP32[$agg$result >> 2] = $93; //@line 10050
 if (($79 | 0) != 0) {
  _free($79); //@line 10054
 }
 if (($60 | 0) == 0) {
  STACKTOP = sp; //@line 10058
  return;
 }
 _free($60); //@line 10060
 STACKTOP = sp; //@line 10061
 return;
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $111 = 0, $115 = 0, $118 = 0, $121 = 0, $125 = 0, $128 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $145 = 0, $146 = 0, $153 = 0, $154 = 0, $164 = 0, $175 = 0, $184 = 0, $197 = 0, $2 = 0, $210 = 0, $26 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $5 = 0, $55 = 0, $57 = 0, $6 = 0, $7 = 0, $70 = 0, $77 = 0, $83 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $93 = 0, $96 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0, sp = 0;
 sp = STACKTOP; //@line 18259
 $1 = $p + 4 | 0; //@line 18260
 $2 = HEAP32[$1 >> 2] | 0; //@line 18261
 $3 = $2 & -8; //@line 18262
 $4 = $p; //@line 18263
 $5 = $4 + $3 | 0; //@line 18264
 $6 = $5; //@line 18265
 $7 = HEAP32[14048 >> 2] | 0; //@line 18266
 if ($4 >>> 0 < $7 >>> 0) {
  _abort(); //@line 18269
 }
 $9 = $2 & 3; //@line 18272
 if (!(($9 | 0) != 1 & $4 >>> 0 < $5 >>> 0)) {
  _abort(); //@line 18277
 }
 $13 = $4 + ($3 | 4) | 0; //@line 18282
 $14 = HEAP32[$13 >> 2] | 0; //@line 18283
 if (($14 & 1 | 0) == 0) {
  _abort(); //@line 18287
 }
 if (($9 | 0) == 0) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0; //@line 18294
   STACKTOP = sp; //@line 18295
   return $newp$0 | 0; //@line 18295
  }
  do {
   if (!($3 >>> 0 < ($nb + 4 | 0) >>> 0)) {
    if (($3 - $nb | 0) >>> 0 > HEAP32[14512 >> 2] << 1 >>> 0) {
     break;
    } else {
     $newp$0 = $p; //@line 18308
    }
    STACKTOP = sp; //@line 18310
    return $newp$0 | 0; //@line 18310
   }
  } while (0);
  $newp$0 = 0; //@line 18313
  STACKTOP = sp; //@line 18314
  return $newp$0 | 0; //@line 18314
 }
 if (!($3 >>> 0 < $nb >>> 0)) {
  $26 = $3 - $nb | 0; //@line 18318
  if (!($26 >>> 0 > 15)) {
   $newp$0 = $p; //@line 18321
   STACKTOP = sp; //@line 18322
   return $newp$0 | 0; //@line 18322
  }
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2; //@line 18329
  HEAP32[$4 + ($nb + 4) >> 2] = $26 | 3; //@line 18334
  HEAP32[$13 >> 2] = HEAP32[$13 >> 2] | 1; //@line 18337
  _dispose_chunk($4 + $nb | 0, $26); //@line 18338
  $newp$0 = $p; //@line 18339
  STACKTOP = sp; //@line 18340
  return $newp$0 | 0; //@line 18340
 }
 if (($6 | 0) == (HEAP32[14056 >> 2] | 0)) {
  $41 = (HEAP32[14044 >> 2] | 0) + $3 | 0; //@line 18346
  if (!($41 >>> 0 > $nb >>> 0)) {
   $newp$0 = 0; //@line 18349
   STACKTOP = sp; //@line 18350
   return $newp$0 | 0; //@line 18350
  }
  $43 = $41 - $nb | 0; //@line 18352
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2; //@line 18358
  HEAP32[$4 + ($nb + 4) >> 2] = $43 | 1; //@line 18363
  HEAP32[14056 >> 2] = $4 + $nb; //@line 18364
  HEAP32[14044 >> 2] = $43; //@line 18365
  $newp$0 = $p; //@line 18366
  STACKTOP = sp; //@line 18367
  return $newp$0 | 0; //@line 18367
 }
 if (($6 | 0) == (HEAP32[14052 >> 2] | 0)) {
  $55 = (HEAP32[14040 >> 2] | 0) + $3 | 0; //@line 18373
  if ($55 >>> 0 < $nb >>> 0) {
   $newp$0 = 0; //@line 18376
   STACKTOP = sp; //@line 18377
   return $newp$0 | 0; //@line 18377
  }
  $57 = $55 - $nb | 0; //@line 18379
  if ($57 >>> 0 > 15) {
   HEAP32[$1 >> 2] = $2 & 1 | $nb | 2; //@line 18388
   HEAP32[$4 + ($nb + 4) >> 2] = $57 | 1; //@line 18393
   HEAP32[$4 + $55 >> 2] = $57; //@line 18395
   $70 = $4 + ($55 + 4) | 0; //@line 18398
   HEAP32[$70 >> 2] = HEAP32[$70 >> 2] & -2; //@line 18401
   $storemerge = $4 + $nb | 0; //@line 18402
   $storemerge21 = $57; //@line 18402
  } else {
   HEAP32[$1 >> 2] = $2 & 1 | $55 | 2; //@line 18407
   $77 = $4 + ($55 + 4) | 0; //@line 18410
   HEAP32[$77 >> 2] = HEAP32[$77 >> 2] | 1; //@line 18413
   $storemerge = 0; //@line 18414
   $storemerge21 = 0; //@line 18414
  }
  HEAP32[14040 >> 2] = $storemerge21; //@line 18416
  HEAP32[14052 >> 2] = $storemerge; //@line 18417
  $newp$0 = $p; //@line 18418
  STACKTOP = sp; //@line 18419
  return $newp$0 | 0; //@line 18419
 }
 if (($14 & 2 | 0) != 0) {
  $newp$0 = 0; //@line 18424
  STACKTOP = sp; //@line 18425
  return $newp$0 | 0; //@line 18425
 }
 $83 = ($14 & -8) + $3 | 0; //@line 18428
 if ($83 >>> 0 < $nb >>> 0) {
  $newp$0 = 0; //@line 18431
  STACKTOP = sp; //@line 18432
  return $newp$0 | 0; //@line 18432
 }
 $85 = $83 - $nb | 0; //@line 18434
 $86 = $14 >>> 3; //@line 18435
 L52 : do {
  if ($14 >>> 0 < 256) {
   $90 = HEAP32[$4 + ($3 + 8) >> 2] | 0; //@line 18442
   $93 = HEAP32[$4 + ($3 + 12) >> 2] | 0; //@line 18446
   $96 = 14072 + ($86 << 1 << 2) | 0; //@line 18449
   do {
    if (($90 | 0) != ($96 | 0)) {
     if ($90 >>> 0 < $7 >>> 0) {
      _abort(); //@line 18456
     }
     if ((HEAP32[$90 + 12 >> 2] | 0) == ($6 | 0)) {
      break;
     }
     _abort(); //@line 18465
    }
   } while (0);
   if (($93 | 0) == ($90 | 0)) {
    HEAP32[3508] = HEAP32[3508] & ~(1 << $86); //@line 18475
    break;
   }
   do {
    if (($93 | 0) == ($96 | 0)) {
     $$pre$phiZ2D = $93 + 8 | 0; //@line 18482
    } else {
     if ($93 >>> 0 < $7 >>> 0) {
      _abort(); //@line 18487
     }
     $111 = $93 + 8 | 0; //@line 18490
     if ((HEAP32[$111 >> 2] | 0) == ($6 | 0)) {
      $$pre$phiZ2D = $111; //@line 18494
      break;
     }
     _abort(); //@line 18497
    }
   } while (0);
   HEAP32[$90 + 12 >> 2] = $93; //@line 18502
   HEAP32[$$pre$phiZ2D >> 2] = $90; //@line 18503
  } else {
   $115 = $5; //@line 18505
   $118 = HEAP32[$4 + ($3 + 24) >> 2] | 0; //@line 18509
   $121 = HEAP32[$4 + ($3 + 12) >> 2] | 0; //@line 18513
   do {
    if (($121 | 0) == ($115 | 0)) {
     $135 = $4 + ($3 + 20) | 0; //@line 18519
     $136 = HEAP32[$135 >> 2] | 0; //@line 18520
     if (($136 | 0) == 0) {
      $139 = $4 + ($3 + 16) | 0; //@line 18525
      $140 = HEAP32[$139 >> 2] | 0; //@line 18526
      if (($140 | 0) == 0) {
       $R$1 = 0; //@line 18529
       break;
      } else {
       $R$0 = $140; //@line 18532
       $RP$0 = $139; //@line 18532
      }
     } else {
      $R$0 = $136; //@line 18535
      $RP$0 = $135; //@line 18535
     }
     while (1) {
      $142 = $R$0 + 20 | 0; //@line 18538
      $143 = HEAP32[$142 >> 2] | 0; //@line 18539
      if (($143 | 0) != 0) {
       $RP$0 = $142; //@line 18542
       $R$0 = $143; //@line 18542
       continue;
      }
      $145 = $R$0 + 16 | 0; //@line 18545
      $146 = HEAP32[$145 >> 2] | 0; //@line 18546
      if (($146 | 0) == 0) {
       break;
      } else {
       $R$0 = $146; //@line 18551
       $RP$0 = $145; //@line 18551
      }
     }
     if ($RP$0 >>> 0 < $7 >>> 0) {
      _abort(); //@line 18557
     } else {
      HEAP32[$RP$0 >> 2] = 0; //@line 18560
      $R$1 = $R$0; //@line 18561
      break;
     }
    } else {
     $125 = HEAP32[$4 + ($3 + 8) >> 2] | 0; //@line 18568
     if ($125 >>> 0 < $7 >>> 0) {
      _abort(); //@line 18572
     }
     $128 = $125 + 12 | 0; //@line 18575
     if ((HEAP32[$128 >> 2] | 0) != ($115 | 0)) {
      _abort(); //@line 18579
     }
     $131 = $121 + 8 | 0; //@line 18582
     if ((HEAP32[$131 >> 2] | 0) == ($115 | 0)) {
      HEAP32[$128 >> 2] = $121; //@line 18586
      HEAP32[$131 >> 2] = $125; //@line 18587
      $R$1 = $121; //@line 18588
      break;
     } else {
      _abort(); //@line 18591
     }
    }
   } while (0);
   if (($118 | 0) == 0) {
    break;
   }
   $153 = HEAP32[$4 + ($3 + 28) >> 2] | 0; //@line 18603
   $154 = 14336 + ($153 << 2) | 0; //@line 18604
   do {
    if (($115 | 0) == (HEAP32[$154 >> 2] | 0)) {
     HEAP32[$154 >> 2] = $R$1; //@line 18609
     if (($R$1 | 0) != 0) {
      break;
     }
     HEAP32[14036 >> 2] = HEAP32[14036 >> 2] & ~(1 << $153); //@line 18618
     break L52;
    } else {
     if ($118 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 18625
     }
     $164 = $118 + 16 | 0; //@line 18628
     if ((HEAP32[$164 >> 2] | 0) == ($115 | 0)) {
      HEAP32[$164 >> 2] = $R$1; //@line 18632
     } else {
      HEAP32[$118 + 20 >> 2] = $R$1; //@line 18635
     }
     if (($R$1 | 0) == 0) {
      break L52;
     }
    }
   } while (0);
   if ($R$1 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 18647
   }
   HEAP32[$R$1 + 24 >> 2] = $118; //@line 18651
   $175 = HEAP32[$4 + ($3 + 16) >> 2] | 0; //@line 18655
   do {
    if (($175 | 0) != 0) {
     if ($175 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
      _abort(); //@line 18663
     } else {
      HEAP32[$R$1 + 16 >> 2] = $175; //@line 18667
      HEAP32[$175 + 24 >> 2] = $R$1; //@line 18669
      break;
     }
    }
   } while (0);
   $184 = HEAP32[$4 + ($3 + 20) >> 2] | 0; //@line 18677
   if (($184 | 0) == 0) {
    break;
   }
   if ($184 >>> 0 < (HEAP32[14048 >> 2] | 0) >>> 0) {
    _abort(); //@line 18686
   } else {
    HEAP32[$R$1 + 20 >> 2] = $184; //@line 18690
    HEAP32[$184 + 24 >> 2] = $R$1; //@line 18692
    break;
   }
  }
 } while (0);
 if ($85 >>> 0 < 16) {
  HEAP32[$1 >> 2] = $83 | HEAP32[$1 >> 2] & 1 | 2; //@line 18703
  $197 = $4 + ($83 | 4) | 0; //@line 18706
  HEAP32[$197 >> 2] = HEAP32[$197 >> 2] | 1; //@line 18709
  $newp$0 = $p; //@line 18710
  STACKTOP = sp; //@line 18711
  return $newp$0 | 0; //@line 18711
 } else {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & 1 | $nb | 2; //@line 18719
  HEAP32[$4 + ($nb + 4) >> 2] = $85 | 3; //@line 18724
  $210 = $4 + ($83 | 4) | 0; //@line 18727
  HEAP32[$210 >> 2] = HEAP32[$210 >> 2] | 1; //@line 18730
  _dispose_chunk($4 + $nb | 0, $85); //@line 18731
  $newp$0 = $p; //@line 18732
  STACKTOP = sp; //@line 18733
  return $newp$0 | 0; //@line 18733
 }
 return 0; //@line 18735
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $37 = 0, $4 = 0, $44 = 0, $48 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7250
 STACKTOP = STACKTOP + 16 | 0; //@line 7251
 $$byval_copy = sp; //@line 7252
 $vararg_buffer9 = sp + 8 | 0; //@line 7253
 $vararg_buffer5 = STACKTOP; //@line 7255
 STACKTOP = STACKTOP + 16 | 0; //@line 7255
 $vararg_buffer2 = STACKTOP; //@line 7257
 STACKTOP = STACKTOP + 8 | 0; //@line 7257
 $vararg_buffer = STACKTOP; //@line 7259
 STACKTOP = STACKTOP + 16 | 0; //@line 7259
 $__fmt = STACKTOP; //@line 7261
 STACKTOP = STACKTOP + 8 | 0; //@line 7261
 $__nar = STACKTOP; //@line 7262
 STACKTOP = STACKTOP + 32 | 0; //@line 7262
 $__nb = STACKTOP; //@line 7263
 STACKTOP = STACKTOP + 8 | 0; //@line 7263
 $__o = STACKTOP; //@line 7264
 STACKTOP = STACKTOP + 64 | 0; //@line 7264
 $__op = STACKTOP; //@line 7265
 STACKTOP = STACKTOP + 8 | 0; //@line 7265
 $__oe = STACKTOP; //@line 7266
 STACKTOP = STACKTOP + 8 | 0; //@line 7266
 $1 = STACKTOP; //@line 7267
 STACKTOP = STACKTOP + 8 | 0; //@line 7267
 $2 = STACKTOP; //@line 7268
 STACKTOP = STACKTOP + 8 | 0; //@line 7268
 $3 = STACKTOP; //@line 7269
 STACKTOP = STACKTOP + 8 | 0; //@line 7269
 $4 = $__fmt; //@line 7270
 HEAP32[$4 >> 2] = 37; //@line 7272
 HEAP32[$4 + 4 >> 2] = 0; //@line 7275
 $8 = $__fmt; //@line 7276
 $9 = $8 + 1 | 0; //@line 7277
 $10 = $__iob + 4 | 0; //@line 7278
 $11 = HEAP32[$10 >> 2] | 0; //@line 7279
 if (($11 & 2048 | 0) == 0) {
  $$0$i = $9; //@line 7283
 } else {
  HEAP8[$9] = 43; //@line 7286
  $$0$i = $8 + 2 | 0; //@line 7287
 }
 if (($11 & 1024 | 0) == 0) {
  $$1$i = $$0$i; //@line 7292
 } else {
  HEAP8[$$0$i] = 35; //@line 7295
  $$1$i = $$0$i + 1 | 0; //@line 7296
 }
 $18 = $11 & 260; //@line 7298
 $19 = $11 >>> 14; //@line 7299
 do {
  if (($18 | 0) == 260) {
   HEAP8[$$1$i] = 76; //@line 7303
   $scevgep16 = $$1$i + 1 | 0; //@line 7304
   if (($19 & 1 | 0) == 0) {
    HEAP8[$scevgep16] = 97; //@line 7308
    $specify_precision$0$off0$ph$i17 = 0; //@line 7309
    break;
   } else {
    HEAP8[$scevgep16] = 65; //@line 7312
    $specify_precision$0$off0$ph$i17 = 0; //@line 7313
    break;
   }
  } else {
   HEAP8[$$1$i] = 46; //@line 7318
   HEAP8[$$1$i + 1 | 0] = 42; //@line 7320
   HEAP8[$$1$i + 2 | 0] = 76; //@line 7321
   $scevgep = $$1$i + 3 | 0; //@line 7322
   if (($18 | 0) == 4) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 102; //@line 7327
     $specify_precision$0$off0$ph$i17 = 1; //@line 7328
     break;
    } else {
     HEAP8[$scevgep] = 70; //@line 7331
     $specify_precision$0$off0$ph$i17 = 1; //@line 7332
     break;
    }
   } else if (($18 | 0) == 256) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 101; //@line 7339
     $specify_precision$0$off0$ph$i17 = 1; //@line 7340
     break;
    } else {
     HEAP8[$scevgep] = 69; //@line 7343
     $specify_precision$0$off0$ph$i17 = 1; //@line 7344
     break;
    }
   } else {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 103; //@line 7351
     $specify_precision$0$off0$ph$i17 = 1; //@line 7352
     break;
    } else {
     HEAP8[$scevgep] = 71; //@line 7355
     $specify_precision$0$off0$ph$i17 = 1; //@line 7356
     break;
    }
   }
  }
 } while (0);
 $31 = $__nar; //@line 7362
 HEAP32[$__nb >> 2] = $31; //@line 7363
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 7374
   ___cxa_guard_release(5608); //@line 7375
  }
 } while (0);
 $37 = HEAP32[1400] | 0; //@line 7378
 if ($specify_precision$0$off0$ph$i17) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 7383
  $vararg_ptr1 = $vararg_buffer + 4 | 0; //@line 7384
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 7385
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 7385
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 7385
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer) | 0; //@line 7387
 } else {
  $vararg_ptr4 = $vararg_buffer2; //@line 7389
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 7390
  HEAP32[$vararg_ptr4 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 7390
  HEAP32[$vararg_ptr4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 7390
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer2) | 0; //@line 7392
 }
 do {
  if (($__nc$0 | 0) > 29) {
   $44 = (HEAP8[5608] | 0) == 0; //@line 7398
   if ($specify_precision$0$off0$ph$i17) {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 7408
      ___cxa_guard_release(5608); //@line 7409
     }
    } while (0);
    $48 = HEAP32[1400] | 0; //@line 7412
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 7416
    $vararg_ptr8 = $vararg_buffer5 + 4 | 0; //@line 7417
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 7418
    HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 7418
    HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 7418
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $48, $8, $vararg_buffer5) | 0; //@line 7420
   } else {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 7430
      ___cxa_guard_release(5608); //@line 7431
     }
    } while (0);
    $55 = HEAP32[1400] | 0; //@line 7434
    $vararg_ptr11 = $vararg_buffer9; //@line 7435
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 7436
    HEAP32[$vararg_ptr11 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 7436
    HEAP32[$vararg_ptr11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 7436
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $55, $8, $vararg_buffer9) | 0; //@line 7438
   }
   $57 = HEAP32[$__nb >> 2] | 0; //@line 7440
   if (($57 | 0) != 0) {
    $59 = $57; //@line 7443
    $60 = $57; //@line 7443
    $__nc$2 = $__nc$1; //@line 7443
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 7446
  } else {
   $59 = HEAP32[$__nb >> 2] | 0; //@line 7450
   $60 = 0; //@line 7450
   $__nc$2 = $__nc$0; //@line 7450
  }
 } while (0);
 $61 = $59 + $__nc$2 | 0; //@line 7453
 $63 = HEAP32[$10 >> 2] & 176; //@line 7455
 do {
  if (($63 | 0) == 32) {
   $$0$i7 = $61; //@line 7458
  } else if (($63 | 0) == 16) {
   $64 = HEAP8[$59] | 0; //@line 7460
   if ($64 << 24 >> 24 == 43 | $64 << 24 >> 24 == 45) {
    $$0$i7 = $59 + 1 | 0; //@line 7463
    break;
   }
   if (!(($__nc$2 | 0) > 1 & $64 << 24 >> 24 == 48)) {
    label = 44; //@line 7470
    break;
   }
   $69 = HEAP8[$59 + 1 | 0] | 0; //@line 7474
   if (!($69 << 24 >> 24 == 88 | $69 << 24 >> 24 == 120)) {
    label = 44; //@line 7476
    break;
   }
   $$0$i7 = $59 + 2 | 0; //@line 7480
  } else {
   label = 44; //@line 7482
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $59; //@line 7486
 }
 do {
  if (($59 | 0) == ($31 | 0)) {
   $76 = $31; //@line 7492
   $77 = 0; //@line 7492
   $__ob$0 = $__o; //@line 7492
  } else {
   $74 = _malloc($__nc$2 << 1) | 0; //@line 7495
   if (($74 | 0) != 0) {
    $76 = $59; //@line 7498
    $77 = $74; //@line 7498
    $__ob$0 = $74; //@line 7498
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 7501
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 7505
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($76, $$0$i7, $61, $__ob$0, $__op, $__oe, $1); //@line 7506
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 7510
 $81 = $__s; //@line 7511
 HEAP32[$3 >> 2] = HEAP32[$81 >> 2]; //@line 7514
 $84 = HEAP32[$__op >> 2] | 0; //@line 7515
 $85 = HEAP32[$__oe >> 2] | 0; //@line 7516
 $87 = $$byval_copy; //@line 7518
 $88 = $3; //@line 7519
 HEAP32[$87 + 0 >> 2] = HEAP32[$88 + 0 >> 2]; //@line 7520
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $$byval_copy, $__ob$0, $84, $85, $__iob, $__fl); //@line 7521
 $91 = HEAP32[$2 >> 2] | 0; //@line 7524
 HEAP32[$81 >> 2] = $91; //@line 7525
 HEAP32[$agg$result >> 2] = $91; //@line 7527
 if (($77 | 0) != 0) {
  _free($77); //@line 7530
 }
 if (($60 | 0) == 0) {
  STACKTOP = sp; //@line 7534
  return;
 }
 _free($60); //@line 7536
 STACKTOP = sp; //@line 7537
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $31 = 0, $37 = 0, $4 = 0, $44 = 0, $48 = 0, $55 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $71 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8966
 STACKTOP = STACKTOP + 24 | 0; //@line 8967
 $$byval_copy = sp; //@line 8968
 $vararg_buffer9 = sp + 8 | 0; //@line 8969
 $vararg_buffer5 = STACKTOP; //@line 8971
 STACKTOP = STACKTOP + 16 | 0; //@line 8971
 $vararg_buffer2 = STACKTOP; //@line 8973
 STACKTOP = STACKTOP + 8 | 0; //@line 8973
 $vararg_buffer = STACKTOP; //@line 8975
 STACKTOP = STACKTOP + 16 | 0; //@line 8975
 $__fmt = STACKTOP; //@line 8977
 STACKTOP = STACKTOP + 8 | 0; //@line 8977
 $__nar = STACKTOP; //@line 8978
 STACKTOP = STACKTOP + 32 | 0; //@line 8978
 $__nb = STACKTOP; //@line 8979
 STACKTOP = STACKTOP + 8 | 0; //@line 8979
 $__o = STACKTOP; //@line 8980
 STACKTOP = STACKTOP + 232 | 0; //@line 8980
 $__op = STACKTOP; //@line 8981
 STACKTOP = STACKTOP + 8 | 0; //@line 8981
 $__oe = STACKTOP; //@line 8982
 STACKTOP = STACKTOP + 8 | 0; //@line 8982
 $1 = STACKTOP; //@line 8983
 STACKTOP = STACKTOP + 8 | 0; //@line 8983
 $2 = STACKTOP; //@line 8984
 STACKTOP = STACKTOP + 8 | 0; //@line 8984
 $3 = STACKTOP; //@line 8985
 STACKTOP = STACKTOP + 8 | 0; //@line 8985
 $4 = $__fmt; //@line 8986
 HEAP32[$4 >> 2] = 37; //@line 8988
 HEAP32[$4 + 4 >> 2] = 0; //@line 8991
 $8 = $__fmt; //@line 8992
 $9 = $8 + 1 | 0; //@line 8993
 $10 = $__iob + 4 | 0; //@line 8994
 $11 = HEAP32[$10 >> 2] | 0; //@line 8995
 if (($11 & 2048 | 0) == 0) {
  $$0$i = $9; //@line 8999
 } else {
  HEAP8[$9] = 43; //@line 9002
  $$0$i = $8 + 2 | 0; //@line 9003
 }
 if (($11 & 1024 | 0) == 0) {
  $$1$i = $$0$i; //@line 9008
 } else {
  HEAP8[$$0$i] = 35; //@line 9011
  $$1$i = $$0$i + 1 | 0; //@line 9012
 }
 $18 = $11 & 260; //@line 9014
 $19 = $11 >>> 14; //@line 9015
 do {
  if (($18 | 0) == 260) {
   if (($19 & 1 | 0) == 0) {
    HEAP8[$$1$i] = 97; //@line 9022
    $specify_precision$0$off0$ph$i10 = 0; //@line 9023
    break;
   } else {
    HEAP8[$$1$i] = 65; //@line 9026
    $specify_precision$0$off0$ph$i10 = 0; //@line 9027
    break;
   }
  } else {
   HEAP8[$$1$i] = 46; //@line 9032
   $22 = $$1$i + 2 | 0; //@line 9033
   HEAP8[$$1$i + 1 | 0] = 42; //@line 9034
   if (($18 | 0) == 4) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 102; //@line 9039
     $specify_precision$0$off0$ph$i10 = 1; //@line 9040
     break;
    } else {
     HEAP8[$22] = 70; //@line 9043
     $specify_precision$0$off0$ph$i10 = 1; //@line 9044
     break;
    }
   } else if (($18 | 0) == 256) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 101; //@line 9051
     $specify_precision$0$off0$ph$i10 = 1; //@line 9052
     break;
    } else {
     HEAP8[$22] = 69; //@line 9055
     $specify_precision$0$off0$ph$i10 = 1; //@line 9056
     break;
    }
   } else {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 103; //@line 9063
     $specify_precision$0$off0$ph$i10 = 1; //@line 9064
     break;
    } else {
     HEAP8[$22] = 71; //@line 9067
     $specify_precision$0$off0$ph$i10 = 1; //@line 9068
     break;
    }
   }
  }
 } while (0);
 $31 = $__nar; //@line 9074
 HEAP32[$__nb >> 2] = $31; //@line 9075
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9086
   ___cxa_guard_release(5608); //@line 9087
  }
 } while (0);
 $37 = HEAP32[1400] | 0; //@line 9090
 if ($specify_precision$0$off0$ph$i10) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9095
  $vararg_ptr1 = $vararg_buffer + 4 | 0; //@line 9096
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9097
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9097
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9097
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer) | 0; //@line 9099
 } else {
  $vararg_ptr4 = $vararg_buffer2; //@line 9101
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9102
  HEAP32[$vararg_ptr4 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9102
  HEAP32[$vararg_ptr4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9102
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer2) | 0; //@line 9104
 }
 do {
  if (($__nc$0 | 0) > 29) {
   $44 = (HEAP8[5608] | 0) == 0; //@line 9110
   if ($specify_precision$0$off0$ph$i10) {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9120
      ___cxa_guard_release(5608); //@line 9121
     }
    } while (0);
    $48 = HEAP32[1400] | 0; //@line 9124
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9128
    $vararg_ptr8 = $vararg_buffer5 + 4 | 0; //@line 9129
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9130
    HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9130
    HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9130
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $48, $8, $vararg_buffer5) | 0; //@line 9132
   } else {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 9142
      ___cxa_guard_release(5608); //@line 9143
     }
    } while (0);
    $55 = HEAP32[1400] | 0; //@line 9146
    HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9150
    $vararg_ptr12 = $vararg_buffer9 + 4 | 0; //@line 9151
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 9152
    HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 9152
    HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 9152
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $55, $8, $vararg_buffer9) | 0; //@line 9154
   }
   $59 = HEAP32[$__nb >> 2] | 0; //@line 9156
   if (($59 | 0) != 0) {
    $61 = $59; //@line 9159
    $62 = $59; //@line 9159
    $__nc$2 = $__nc$1; //@line 9159
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 9162
  } else {
   $61 = HEAP32[$__nb >> 2] | 0; //@line 9166
   $62 = 0; //@line 9166
   $__nc$2 = $__nc$0; //@line 9166
  }
 } while (0);
 $63 = $61 + $__nc$2 | 0; //@line 9169
 $65 = HEAP32[$10 >> 2] & 176; //@line 9171
 do {
  if (($65 | 0) == 16) {
   $66 = HEAP8[$61] | 0; //@line 9174
   if ($66 << 24 >> 24 == 43 | $66 << 24 >> 24 == 45) {
    $$0$i7 = $61 + 1 | 0; //@line 9177
    break;
   }
   if (!(($__nc$2 | 0) > 1 & $66 << 24 >> 24 == 48)) {
    label = 44; //@line 9184
    break;
   }
   $71 = HEAP8[$61 + 1 | 0] | 0; //@line 9188
   if (!($71 << 24 >> 24 == 88 | $71 << 24 >> 24 == 120)) {
    label = 44; //@line 9190
    break;
   }
   $$0$i7 = $61 + 2 | 0; //@line 9194
  } else if (($65 | 0) == 32) {
   $$0$i7 = $63; //@line 9196
  } else {
   label = 44; //@line 9198
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $61; //@line 9202
 }
 do {
  if (($61 | 0) == ($31 | 0)) {
   $80 = $31; //@line 9209
   $81 = 0; //@line 9209
   $__ob$0 = $__o; //@line 9209
  } else {
   $77 = _malloc($__nc$2 << 3) | 0; //@line 9212
   $78 = $77; //@line 9213
   if (($77 | 0) != 0) {
    $80 = $61; //@line 9216
    $81 = $78; //@line 9216
    $__ob$0 = $78; //@line 9216
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 9219
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 9223
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($80, $$0$i7, $63, $__ob$0, $__op, $__oe, $1); //@line 9224
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 9228
 $85 = $__s; //@line 9229
 HEAP32[$3 >> 2] = HEAP32[$85 >> 2]; //@line 9232
 $88 = HEAP32[$__op >> 2] | 0; //@line 9233
 $89 = HEAP32[$__oe >> 2] | 0; //@line 9234
 $91 = $$byval_copy; //@line 9236
 $92 = $3; //@line 9237
 HEAP32[$91 + 0 >> 2] = HEAP32[$92 + 0 >> 2]; //@line 9238
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $$byval_copy, $__ob$0, $88, $89, $__iob, $__fl); //@line 9239
 $95 = HEAP32[$2 >> 2] | 0; //@line 9242
 HEAP32[$85 >> 2] = $95; //@line 9243
 HEAP32[$agg$result >> 2] = $95; //@line 9245
 if (($81 | 0) != 0) {
  _free($81); //@line 9249
 }
 if (($62 | 0) == 0) {
  STACKTOP = sp; //@line 9253
  return;
 }
 _free($62); //@line 9255
 STACKTOP = sp; //@line 9256
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $31 = 0, $37 = 0, $4 = 0, $44 = 0, $48 = 0, $55 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6433
 STACKTOP = STACKTOP + 24 | 0; //@line 6434
 $$byval_copy = sp; //@line 6435
 $vararg_buffer9 = sp + 8 | 0; //@line 6436
 $vararg_buffer5 = STACKTOP; //@line 6438
 STACKTOP = STACKTOP + 16 | 0; //@line 6438
 $vararg_buffer2 = STACKTOP; //@line 6440
 STACKTOP = STACKTOP + 8 | 0; //@line 6440
 $vararg_buffer = STACKTOP; //@line 6442
 STACKTOP = STACKTOP + 16 | 0; //@line 6442
 $__fmt = STACKTOP; //@line 6444
 STACKTOP = STACKTOP + 8 | 0; //@line 6444
 $__nar = STACKTOP; //@line 6445
 STACKTOP = STACKTOP + 32 | 0; //@line 6445
 $__nb = STACKTOP; //@line 6446
 STACKTOP = STACKTOP + 8 | 0; //@line 6446
 $__o = STACKTOP; //@line 6447
 STACKTOP = STACKTOP + 64 | 0; //@line 6447
 $__op = STACKTOP; //@line 6448
 STACKTOP = STACKTOP + 8 | 0; //@line 6448
 $__oe = STACKTOP; //@line 6449
 STACKTOP = STACKTOP + 8 | 0; //@line 6449
 $1 = STACKTOP; //@line 6450
 STACKTOP = STACKTOP + 8 | 0; //@line 6450
 $2 = STACKTOP; //@line 6451
 STACKTOP = STACKTOP + 8 | 0; //@line 6451
 $3 = STACKTOP; //@line 6452
 STACKTOP = STACKTOP + 8 | 0; //@line 6452
 $4 = $__fmt; //@line 6453
 HEAP32[$4 >> 2] = 37; //@line 6455
 HEAP32[$4 + 4 >> 2] = 0; //@line 6458
 $8 = $__fmt; //@line 6459
 $9 = $8 + 1 | 0; //@line 6460
 $10 = $__iob + 4 | 0; //@line 6461
 $11 = HEAP32[$10 >> 2] | 0; //@line 6462
 if (($11 & 2048 | 0) == 0) {
  $$0$i = $9; //@line 6466
 } else {
  HEAP8[$9] = 43; //@line 6469
  $$0$i = $8 + 2 | 0; //@line 6470
 }
 if (($11 & 1024 | 0) == 0) {
  $$1$i = $$0$i; //@line 6475
 } else {
  HEAP8[$$0$i] = 35; //@line 6478
  $$1$i = $$0$i + 1 | 0; //@line 6479
 }
 $18 = $11 & 260; //@line 6481
 $19 = $11 >>> 14; //@line 6482
 do {
  if (($18 | 0) == 260) {
   if (($19 & 1 | 0) == 0) {
    HEAP8[$$1$i] = 97; //@line 6489
    $specify_precision$0$off0$ph$i12 = 0; //@line 6490
    break;
   } else {
    HEAP8[$$1$i] = 65; //@line 6493
    $specify_precision$0$off0$ph$i12 = 0; //@line 6494
    break;
   }
  } else {
   HEAP8[$$1$i] = 46; //@line 6499
   $22 = $$1$i + 2 | 0; //@line 6500
   HEAP8[$$1$i + 1 | 0] = 42; //@line 6501
   if (($18 | 0) == 4) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 102; //@line 6506
     $specify_precision$0$off0$ph$i12 = 1; //@line 6507
     break;
    } else {
     HEAP8[$22] = 70; //@line 6510
     $specify_precision$0$off0$ph$i12 = 1; //@line 6511
     break;
    }
   } else if (($18 | 0) == 256) {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 101; //@line 6518
     $specify_precision$0$off0$ph$i12 = 1; //@line 6519
     break;
    } else {
     HEAP8[$22] = 69; //@line 6522
     $specify_precision$0$off0$ph$i12 = 1; //@line 6523
     break;
    }
   } else {
    if (($19 & 1 | 0) == 0) {
     HEAP8[$22] = 103; //@line 6530
     $specify_precision$0$off0$ph$i12 = 1; //@line 6531
     break;
    } else {
     HEAP8[$22] = 71; //@line 6534
     $specify_precision$0$off0$ph$i12 = 1; //@line 6535
     break;
    }
   }
  }
 } while (0);
 $31 = $__nar; //@line 6541
 HEAP32[$__nb >> 2] = $31; //@line 6542
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6553
   ___cxa_guard_release(5608); //@line 6554
  }
 } while (0);
 $37 = HEAP32[1400] | 0; //@line 6557
 if ($specify_precision$0$off0$ph$i12) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 6562
  $vararg_ptr1 = $vararg_buffer + 4 | 0; //@line 6563
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 6564
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 6564
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 6564
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer) | 0; //@line 6566
 } else {
  $vararg_ptr4 = $vararg_buffer2; //@line 6568
  HEAPF64[tempDoublePtr >> 3] = $__v; //@line 6569
  HEAP32[$vararg_ptr4 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 6569
  HEAP32[$vararg_ptr4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 6569
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31, 30, $37, $8, $vararg_buffer2) | 0; //@line 6571
 }
 do {
  if (($__nc$0 | 0) > 29) {
   $44 = (HEAP8[5608] | 0) == 0; //@line 6577
   if ($specify_precision$0$off0$ph$i12) {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6587
      ___cxa_guard_release(5608); //@line 6588
     }
    } while (0);
    $48 = HEAP32[1400] | 0; //@line 6591
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 6595
    $vararg_ptr8 = $vararg_buffer5 + 4 | 0; //@line 6596
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 6597
    HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 6597
    HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 6597
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $48, $8, $vararg_buffer5) | 0; //@line 6599
   } else {
    do {
     if ($44) {
      if ((___cxa_guard_acquire(5608) | 0) == 0) {
       break;
      }
      HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6609
      ___cxa_guard_release(5608); //@line 6610
     }
    } while (0);
    $55 = HEAP32[1400] | 0; //@line 6613
    HEAP32[$vararg_buffer9 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 6617
    $vararg_ptr12 = $vararg_buffer9 + 4 | 0; //@line 6618
    HEAPF64[tempDoublePtr >> 3] = $__v; //@line 6619
    HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 6619
    HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 6619
    $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $55, $8, $vararg_buffer9) | 0; //@line 6621
   }
   $59 = HEAP32[$__nb >> 2] | 0; //@line 6623
   if (($59 | 0) != 0) {
    $61 = $59; //@line 6626
    $62 = $59; //@line 6626
    $__nc$2 = $__nc$1; //@line 6626
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 6629
  } else {
   $61 = HEAP32[$__nb >> 2] | 0; //@line 6633
   $62 = 0; //@line 6633
   $__nc$2 = $__nc$0; //@line 6633
  }
 } while (0);
 $63 = $61 + $__nc$2 | 0; //@line 6636
 $65 = HEAP32[$10 >> 2] & 176; //@line 6638
 do {
  if (($65 | 0) == 16) {
   $66 = HEAP8[$61] | 0; //@line 6641
   if ($66 << 24 >> 24 == 43 | $66 << 24 >> 24 == 45) {
    $$0$i7 = $61 + 1 | 0; //@line 6644
    break;
   }
   if (!(($__nc$2 | 0) > 1 & $66 << 24 >> 24 == 48)) {
    label = 44; //@line 6651
    break;
   }
   $71 = HEAP8[$61 + 1 | 0] | 0; //@line 6655
   if (!($71 << 24 >> 24 == 88 | $71 << 24 >> 24 == 120)) {
    label = 44; //@line 6657
    break;
   }
   $$0$i7 = $61 + 2 | 0; //@line 6661
  } else if (($65 | 0) == 32) {
   $$0$i7 = $63; //@line 6663
  } else {
   label = 44; //@line 6665
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $61; //@line 6669
 }
 do {
  if (($61 | 0) == ($31 | 0)) {
   $78 = $31; //@line 6675
   $79 = 0; //@line 6675
   $__ob$0 = $__o; //@line 6675
  } else {
   $76 = _malloc($__nc$2 << 1) | 0; //@line 6678
   if (($76 | 0) != 0) {
    $78 = $61; //@line 6681
    $79 = $76; //@line 6681
    $__ob$0 = $76; //@line 6681
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 6684
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 6688
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($78, $$0$i7, $63, $__ob$0, $__op, $__oe, $1); //@line 6689
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 6693
 $83 = $__s; //@line 6694
 HEAP32[$3 >> 2] = HEAP32[$83 >> 2]; //@line 6697
 $86 = HEAP32[$__op >> 2] | 0; //@line 6698
 $87 = HEAP32[$__oe >> 2] | 0; //@line 6699
 $89 = $$byval_copy; //@line 6701
 $90 = $3; //@line 6702
 HEAP32[$89 + 0 >> 2] = HEAP32[$90 + 0 >> 2]; //@line 6703
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, $$byval_copy, $__ob$0, $86, $87, $__iob, $__fl); //@line 6704
 $93 = HEAP32[$2 >> 2] | 0; //@line 6707
 HEAP32[$83 >> 2] = $93; //@line 6708
 HEAP32[$agg$result >> 2] = $93; //@line 6710
 if (($79 | 0) != 0) {
  _free($79); //@line 6713
 }
 if (($62 | 0) == 0) {
  STACKTOP = sp; //@line 6717
  return;
 }
 _free($62); //@line 6719
 STACKTOP = sp; //@line 6720
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $1 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $31 = 0, $35 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $57 = 0, $59 = 0, $60 = 0, $64 = 0, $71 = 0, $72 = 0, $79 = 0, $83 = 0, $90 = 0, $91 = 0, $98 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $this2$i$i$i7 = 0, $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr = 0, $vararg_ptr3 = 0, sp = 0;
 sp = STACKTOP; //@line 4111
 STACKTOP = STACKTOP + 16 | 0; //@line 4112
 $$byval_copy = sp; //@line 4113
 $vararg_buffer1 = sp + 8 | 0; //@line 4114
 $vararg_buffer = STACKTOP; //@line 4116
 STACKTOP = STACKTOP + 8 | 0; //@line 4116
 $__p$i$i$i$i = STACKTOP; //@line 4118
 STACKTOP = STACKTOP + 16 | 0; //@line 4118
 $__buf = STACKTOP; //@line 4119
 STACKTOP = STACKTOP + 104 | 0; //@line 4119
 $__bb = STACKTOP; //@line 4120
 STACKTOP = STACKTOP + 8 | 0; //@line 4120
 $__digits = STACKTOP; //@line 4121
 STACKTOP = STACKTOP + 400 | 0; //@line 4121
 $__loc = STACKTOP; //@line 4122
 STACKTOP = STACKTOP + 8 | 0; //@line 4122
 $__pat = STACKTOP; //@line 4123
 STACKTOP = STACKTOP + 8 | 0; //@line 4123
 $tmpcast = $__pat; //@line 4124
 $__dp = STACKTOP; //@line 4125
 STACKTOP = STACKTOP + 8 | 0; //@line 4125
 $__ts = STACKTOP; //@line 4126
 STACKTOP = STACKTOP + 8 | 0; //@line 4126
 $__grp = STACKTOP; //@line 4127
 STACKTOP = STACKTOP + 16 | 0; //@line 4127
 $__sym = STACKTOP; //@line 4128
 STACKTOP = STACKTOP + 16 | 0; //@line 4128
 $__sn = STACKTOP; //@line 4129
 STACKTOP = STACKTOP + 16 | 0; //@line 4129
 $__fd = STACKTOP; //@line 4130
 STACKTOP = STACKTOP + 8 | 0; //@line 4130
 $__mbuf = STACKTOP; //@line 4131
 STACKTOP = STACKTOP + 400 | 0; //@line 4131
 $__mi = STACKTOP; //@line 4132
 STACKTOP = STACKTOP + 8 | 0; //@line 4132
 $__me = STACKTOP; //@line 4133
 STACKTOP = STACKTOP + 8 | 0; //@line 4133
 $1 = STACKTOP; //@line 4134
 STACKTOP = STACKTOP + 8 | 0; //@line 4134
 $2 = $__buf; //@line 4135
 HEAP32[$__bb >> 2] = $2; //@line 4136
 $4 = $__digits; //@line 4138
 $vararg_ptr = $vararg_buffer; //@line 4139
 HEAPF64[tempDoublePtr >> 3] = $__units; //@line 4140
 HEAP32[$vararg_ptr >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 4140
 HEAP32[$vararg_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 4140
 $5 = _snprintf($2 | 0, 100, 5464, $vararg_buffer | 0) | 0; //@line 4141
 do {
  if ($5 >>> 0 > 99) {
   do {
    if ((HEAP8[5608] | 0) == 0) {
     if ((___cxa_guard_acquire(5608) | 0) == 0) {
      break;
     }
     HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 4155
     ___cxa_guard_release(5608); //@line 4156
    }
   } while (0);
   $12 = HEAP32[1400] | 0; //@line 4159
   $vararg_ptr3 = $vararg_buffer1; //@line 4160
   HEAPF64[tempDoublePtr >> 3] = $__units; //@line 4161
   HEAP32[$vararg_ptr3 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 4161
   HEAP32[$vararg_ptr3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 4161
   $13 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $12, 5464, $vararg_buffer1) | 0; //@line 4162
   $14 = HEAP32[$__bb >> 2] | 0; //@line 4163
   if (($14 | 0) == 0) {
    __ZSt17__throw_bad_allocv(); //@line 4166
   }
   $17 = _malloc($13 << 2) | 0; //@line 4170
   $18 = $17; //@line 4171
   if (($17 | 0) != 0) {
    $20 = $14; //@line 4174
    $21 = $18; //@line 4174
    $__db$0 = $18; //@line 4174
    $__n$0 = $13; //@line 4174
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 4177
  } else {
   $20 = 0; //@line 4180
   $21 = 0; //@line 4180
   $__db$0 = $4; //@line 4180
   $__n$0 = $5; //@line 4180
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 4183
 $22 = $__loc; //@line 4184
 $23 = HEAP32[$22 >> 2] | 0; //@line 4185
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 4191
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4193
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4195
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 4196
 }
 $31 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 4199
 $35 = HEAP32[$23 + 8 >> 2] | 0; //@line 4203
 if (!((HEAP32[$23 + 12 >> 2] | 0) - $35 >> 2 >>> 0 > $31 >>> 0)) {
  $44 = ___cxa_allocate_exception(4) | 0; //@line 4210
  $45 = $44; //@line 4211
  __ZNSt8bad_castC2Ev($45); //@line 4212
  ___cxa_throw($44 | 0, 13672, 114); //@line 4213
 }
 $42 = HEAP32[$35 + ($31 << 2) >> 2] | 0; //@line 4217
 if (($42 | 0) == 0) {
  $44 = ___cxa_allocate_exception(4) | 0; //@line 4220
  $45 = $44; //@line 4221
  __ZNSt8bad_castC2Ev($45); //@line 4222
  ___cxa_throw($44 | 0, 13672, 114); //@line 4223
 }
 $46 = $42; //@line 4226
 $47 = HEAP32[$__bb >> 2] | 0; //@line 4227
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$42 >> 2] | 0) + 48 >> 2] & 15]($46, $47, $47 + $__n$0 | 0, $__db$0) | 0; //@line 4233
 if (($__n$0 | 0) == 0) {
  $57 = 0; //@line 4236
 } else {
  $57 = (HEAP8[HEAP32[$__bb >> 2] | 0] | 0) == 45; //@line 4241
 }
 HEAP32[$__pat >> 2] = 0; //@line 4243
 $this2$i$i$i = $__grp; //@line 4244
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 4245
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 4245
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 4245
 $this2$i$i$i6 = $__sym; //@line 4246
 HEAP32[$this2$i$i$i6 + 0 >> 2] = 0; //@line 4247
 HEAP32[$this2$i$i$i6 + 4 >> 2] = 0; //@line 4247
 HEAP32[$this2$i$i$i6 + 8 >> 2] = 0; //@line 4247
 $this2$i$i$i7 = $__sn; //@line 4248
 HEAP32[$this2$i$i$i7 + 0 >> 2] = 0; //@line 4249
 HEAP32[$this2$i$i$i7 + 4 >> 2] = 0; //@line 4249
 HEAP32[$this2$i$i$i7 + 8 >> 2] = 0; //@line 4249
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $57, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 4250
 $59 = $__mbuf; //@line 4252
 $60 = HEAP32[$__fd >> 2] | 0; //@line 4253
 if (($__n$0 | 0) > ($60 | 0)) {
  $64 = HEAP8[$this2$i$i$i7] | 0; //@line 4258
  if (($64 & 1) == 0) {
   $71 = ($64 & 255) >>> 1; //@line 4264
  } else {
   $71 = HEAP32[$__sn + 4 >> 2] | 0; //@line 4268
  }
  $72 = HEAP8[$this2$i$i$i6] | 0; //@line 4270
  if (($72 & 1) == 0) {
   $79 = ($72 & 255) >>> 1; //@line 4276
  } else {
   $79 = HEAP32[$__sym + 4 >> 2] | 0; //@line 4280
  }
  $$pn = $71 + ($__n$0 - $60 << 1 | 1) + $79 | 0; //@line 4285
 } else {
  $83 = HEAP8[$this2$i$i$i7] | 0; //@line 4287
  if (($83 & 1) == 0) {
   $90 = ($83 & 255) >>> 1; //@line 4293
  } else {
   $90 = HEAP32[$__sn + 4 >> 2] | 0; //@line 4297
  }
  $91 = HEAP8[$this2$i$i$i6] | 0; //@line 4299
  if (($91 & 1) == 0) {
   $98 = ($91 & 255) >>> 1; //@line 4305
  } else {
   $98 = HEAP32[$__sym + 4 >> 2] | 0; //@line 4309
  }
  $$pn = $90 + 2 + $98 | 0; //@line 4313
 }
 $101 = $$pn + $60 | 0; //@line 4315
 do {
  if ($101 >>> 0 > 100) {
   $104 = _malloc($101 << 2) | 0; //@line 4320
   $105 = $104; //@line 4321
   if (($104 | 0) != 0) {
    $107 = $105; //@line 4324
    $__mb$0 = $105; //@line 4324
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 4327
  } else {
   $107 = 0; //@line 4330
   $__mb$0 = $59; //@line 4330
  }
 } while (0);
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $46, $57, $tmpcast, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $60); //@line 4338
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 4342
 $116 = HEAP32[$__mi >> 2] | 0; //@line 4343
 $117 = HEAP32[$__me >> 2] | 0; //@line 4344
 $119 = $$byval_copy; //@line 4346
 $120 = $1; //@line 4347
 HEAP32[$119 + 0 >> 2] = HEAP32[$120 + 0 >> 2]; //@line 4348
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $116, $117, $__iob, $__fl); //@line 4349
 if (($107 | 0) != 0) {
  _free($107); //@line 4354
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn); //@line 4356
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym); //@line 4357
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 4358
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$22 >> 2] | 0) | 0; //@line 4361
 if (($21 | 0) != 0) {
  _free($21); //@line 4365
 }
 if (($20 | 0) == 0) {
  STACKTOP = sp; //@line 4369
  return;
 }
 _free($20); //@line 4371
 STACKTOP = sp; //@line 4372
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $1 = 0, $101 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $54 = 0, $55 = 0, $56 = 0, $60 = 0, $67 = 0, $68 = 0, $75 = 0, $79 = 0, $86 = 0, $87 = 0, $94 = 0, $97 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i7 = 0, $this2$i$i$i8 = 0, $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr = 0, $vararg_ptr3 = 0, sp = 0;
 sp = STACKTOP; //@line 2665
 STACKTOP = STACKTOP + 16 | 0; //@line 2666
 $$byval_copy = sp; //@line 2667
 $vararg_buffer1 = sp + 8 | 0; //@line 2668
 $vararg_buffer = STACKTOP; //@line 2670
 STACKTOP = STACKTOP + 8 | 0; //@line 2670
 $__p$i$i$i$i = STACKTOP; //@line 2672
 STACKTOP = STACKTOP + 16 | 0; //@line 2672
 $__buf = STACKTOP; //@line 2673
 STACKTOP = STACKTOP + 104 | 0; //@line 2673
 $__bb = STACKTOP; //@line 2674
 STACKTOP = STACKTOP + 8 | 0; //@line 2674
 $__digits = STACKTOP; //@line 2675
 STACKTOP = STACKTOP + 104 | 0; //@line 2675
 $__loc = STACKTOP; //@line 2676
 STACKTOP = STACKTOP + 8 | 0; //@line 2676
 $__pat = STACKTOP; //@line 2677
 STACKTOP = STACKTOP + 8 | 0; //@line 2677
 $tmpcast = $__pat; //@line 2678
 $__dp = STACKTOP; //@line 2679
 STACKTOP = STACKTOP + 8 | 0; //@line 2679
 $__ts = STACKTOP; //@line 2680
 STACKTOP = STACKTOP + 8 | 0; //@line 2680
 $__grp = STACKTOP; //@line 2681
 STACKTOP = STACKTOP + 16 | 0; //@line 2681
 $__sym = STACKTOP; //@line 2682
 STACKTOP = STACKTOP + 16 | 0; //@line 2682
 $__sn = STACKTOP; //@line 2683
 STACKTOP = STACKTOP + 16 | 0; //@line 2683
 $__fd = STACKTOP; //@line 2684
 STACKTOP = STACKTOP + 8 | 0; //@line 2684
 $__mbuf = STACKTOP; //@line 2685
 STACKTOP = STACKTOP + 104 | 0; //@line 2685
 $__mi = STACKTOP; //@line 2686
 STACKTOP = STACKTOP + 8 | 0; //@line 2686
 $__me = STACKTOP; //@line 2687
 STACKTOP = STACKTOP + 8 | 0; //@line 2687
 $1 = STACKTOP; //@line 2688
 STACKTOP = STACKTOP + 8 | 0; //@line 2688
 $2 = $__buf; //@line 2689
 HEAP32[$__bb >> 2] = $2; //@line 2690
 $3 = $__digits; //@line 2691
 $vararg_ptr = $vararg_buffer; //@line 2692
 HEAPF64[tempDoublePtr >> 3] = $__units; //@line 2693
 HEAP32[$vararg_ptr >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 2693
 HEAP32[$vararg_ptr + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 2693
 $4 = _snprintf($2 | 0, 100, 5464, $vararg_buffer | 0) | 0; //@line 2694
 do {
  if ($4 >>> 0 > 99) {
   do {
    if ((HEAP8[5608] | 0) == 0) {
     if ((___cxa_guard_acquire(5608) | 0) == 0) {
      break;
     }
     HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 2708
     ___cxa_guard_release(5608); //@line 2709
    }
   } while (0);
   $11 = HEAP32[1400] | 0; //@line 2712
   $vararg_ptr3 = $vararg_buffer1; //@line 2713
   HEAPF64[tempDoublePtr >> 3] = $__units; //@line 2714
   HEAP32[$vararg_ptr3 >> 2] = HEAP32[tempDoublePtr >> 2]; //@line 2714
   HEAP32[$vararg_ptr3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2]; //@line 2714
   $12 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $11, 5464, $vararg_buffer1) | 0; //@line 2715
   $13 = HEAP32[$__bb >> 2] | 0; //@line 2716
   if (($13 | 0) == 0) {
    __ZSt17__throw_bad_allocv(); //@line 2719
   }
   $15 = _malloc($12) | 0; //@line 2722
   if (($15 | 0) != 0) {
    $17 = $13; //@line 2725
    $18 = $15; //@line 2725
    $__db$0 = $15; //@line 2725
    $__n$0 = $12; //@line 2725
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 2728
  } else {
   $17 = 0; //@line 2731
   $18 = 0; //@line 2731
   $__db$0 = $3; //@line 2731
   $__n$0 = $4; //@line 2731
  }
 } while (0);
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 2734
 $19 = $__loc; //@line 2735
 $20 = HEAP32[$19 >> 2] | 0; //@line 2736
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 2742
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 2744
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 2746
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 2747
 }
 $28 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 2750
 $32 = HEAP32[$20 + 8 >> 2] | 0; //@line 2754
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $32 >> 2 >>> 0 > $28 >>> 0)) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 2761
  $42 = $41; //@line 2762
  __ZNSt8bad_castC2Ev($42); //@line 2763
  ___cxa_throw($41 | 0, 13672, 114); //@line 2764
 }
 $39 = HEAP32[$32 + ($28 << 2) >> 2] | 0; //@line 2768
 if (($39 | 0) == 0) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 2771
  $42 = $41; //@line 2772
  __ZNSt8bad_castC2Ev($42); //@line 2773
  ___cxa_throw($41 | 0, 13672, 114); //@line 2774
 }
 $43 = $39; //@line 2777
 $44 = HEAP32[$__bb >> 2] | 0; //@line 2778
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$39 >> 2] | 0) + 32 >> 2] & 15]($43, $44, $44 + $__n$0 | 0, $__db$0) | 0; //@line 2784
 if (($__n$0 | 0) == 0) {
  $54 = 0; //@line 2787
 } else {
  $54 = (HEAP8[HEAP32[$__bb >> 2] | 0] | 0) == 45; //@line 2792
 }
 HEAP32[$__pat >> 2] = 0; //@line 2794
 $this2$i$i$i = $__grp; //@line 2795
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 2796
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 2796
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 2796
 $this2$i$i$i7 = $__sym; //@line 2797
 HEAP32[$this2$i$i$i7 + 0 >> 2] = 0; //@line 2798
 HEAP32[$this2$i$i$i7 + 4 >> 2] = 0; //@line 2798
 HEAP32[$this2$i$i$i7 + 8 >> 2] = 0; //@line 2798
 $this2$i$i$i8 = $__sn; //@line 2799
 HEAP32[$this2$i$i$i8 + 0 >> 2] = 0; //@line 2800
 HEAP32[$this2$i$i$i8 + 4 >> 2] = 0; //@line 2800
 HEAP32[$this2$i$i$i8 + 8 >> 2] = 0; //@line 2800
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $54, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 2801
 $55 = $__mbuf; //@line 2802
 $56 = HEAP32[$__fd >> 2] | 0; //@line 2803
 if (($__n$0 | 0) > ($56 | 0)) {
  $60 = HEAP8[$this2$i$i$i8] | 0; //@line 2808
  if (($60 & 1) == 0) {
   $67 = ($60 & 255) >>> 1; //@line 2814
  } else {
   $67 = HEAP32[$__sn + 4 >> 2] | 0; //@line 2818
  }
  $68 = HEAP8[$this2$i$i$i7] | 0; //@line 2820
  if (($68 & 1) == 0) {
   $75 = ($68 & 255) >>> 1; //@line 2826
  } else {
   $75 = HEAP32[$__sym + 4 >> 2] | 0; //@line 2830
  }
  $$pn = $67 + ($__n$0 - $56 << 1 | 1) + $75 | 0; //@line 2835
 } else {
  $79 = HEAP8[$this2$i$i$i8] | 0; //@line 2837
  if (($79 & 1) == 0) {
   $86 = ($79 & 255) >>> 1; //@line 2843
  } else {
   $86 = HEAP32[$__sn + 4 >> 2] | 0; //@line 2847
  }
  $87 = HEAP8[$this2$i$i$i7] | 0; //@line 2849
  if (($87 & 1) == 0) {
   $94 = ($87 & 255) >>> 1; //@line 2855
  } else {
   $94 = HEAP32[$__sym + 4 >> 2] | 0; //@line 2859
  }
  $$pn = $86 + 2 + $94 | 0; //@line 2863
 }
 $97 = $$pn + $56 | 0; //@line 2865
 do {
  if ($97 >>> 0 > 100) {
   $99 = _malloc($97) | 0; //@line 2869
   if (($99 | 0) != 0) {
    $101 = $99; //@line 2872
    $__mb$0 = $99; //@line 2872
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 2875
  } else {
   $101 = 0; //@line 2878
   $__mb$0 = $55; //@line 2878
  }
 } while (0);
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $43, $54, $tmpcast, HEAP8[$__dp] | 0, HEAP8[$__ts] | 0, $__grp, $__sym, $__sn, $56); //@line 2886
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 2890
 $110 = HEAP32[$__mi >> 2] | 0; //@line 2891
 $111 = HEAP32[$__me >> 2] | 0; //@line 2892
 $113 = $$byval_copy; //@line 2894
 $114 = $1; //@line 2895
 HEAP32[$113 + 0 >> 2] = HEAP32[$114 + 0 >> 2]; //@line 2896
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $110, $111, $__iob, $__fl); //@line 2897
 if (($101 | 0) != 0) {
  _free($101); //@line 2901
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn); //@line 2903
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym); //@line 2904
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 2905
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$19 >> 2] | 0) | 0; //@line 2908
 if (($18 | 0) != 0) {
  _free($18); //@line 2911
 }
 if (($17 | 0) == 0) {
  STACKTOP = sp; //@line 2915
  return;
 }
 _free($17); //@line 2917
 STACKTOP = sp; //@line 2918
 return;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i10 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $108 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $136 = 0, $138 = 0, $14 = 0, $144 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $158 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $172 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $34 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $55 = 0, $62 = 0, $71 = 0, $72 = 0, $77 = 0, $79 = 0, $87 = 0, $88 = 0, $89 = 0, $93 = 0, $94 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 8051
 STACKTOP = STACKTOP + 48 | 0; //@line 8052
 $__p$i$i$i$i1 = sp; //@line 8053
 $__p$i$i$i$i = sp + 16 | 0; //@line 8054
 $__grouping = sp + 32 | 0; //@line 8055
 $1 = $__loc; //@line 8056
 $2 = HEAP32[$1 >> 2] | 0; //@line 8057
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 8063
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 8065
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 8067
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 8068
 }
 $10 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 8071
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 8075
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 8082
  $24 = $23; //@line 8083
  __ZNSt8bad_castC2Ev($24); //@line 8084
  ___cxa_throw($23 | 0, 13672, 114); //@line 8085
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 8089
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 8092
  $24 = $23; //@line 8093
  __ZNSt8bad_castC2Ev($24); //@line 8094
  ___cxa_throw($23 | 0, 13672, 114); //@line 8095
 }
 $25 = $21; //@line 8098
 $26 = HEAP32[$1 >> 2] | 0; //@line 8099
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5864; //@line 8105
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 125; //@line 8107
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0; //@line 8109
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i1, 126); //@line 8110
 }
 $34 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 8113
 $38 = HEAP32[$26 + 8 >> 2] | 0; //@line 8117
 if (!((HEAP32[$26 + 12 >> 2] | 0) - $38 >> 2 >>> 0 > $34 >>> 0)) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 8124
  $48 = $47; //@line 8125
  __ZNSt8bad_castC2Ev($48); //@line 8126
  ___cxa_throw($47 | 0, 13672, 114); //@line 8127
 }
 $45 = HEAP32[$38 + ($34 << 2) >> 2] | 0; //@line 8131
 if (($45 | 0) == 0) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 8134
  $48 = $47; //@line 8135
  __ZNSt8bad_castC2Ev($48); //@line 8136
  ___cxa_throw($47 | 0, 13672, 114); //@line 8137
 }
 $49 = $45; //@line 8140
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $49); //@line 8145
 $54 = $__grouping; //@line 8146
 $55 = HEAP8[$54] | 0; //@line 8147
 if (($55 & 1) == 0) {
  $62 = ($55 & 255) >>> 1; //@line 8153
 } else {
  $62 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 8157
 }
 do {
  if (($62 | 0) == 0) {
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 48 >> 2] & 15]($25, $__nb, $__ne, $__ob) | 0; //@line 8166
   $71 = $__ob + ($__ne - $__nb << 2) | 0; //@line 8170
   HEAP32[$__oe >> 2] = $71; //@line 8171
   $172 = $71; //@line 8172
  } else {
   HEAP32[$__oe >> 2] = $__ob; //@line 8174
   $72 = HEAP8[$__nb] | 0; //@line 8175
   if ($72 << 24 >> 24 == 43 | $72 << 24 >> 24 == 45) {
    $77 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 44 >> 2] & 31]($25, $72) | 0; //@line 8181
    $79 = HEAP32[$__oe >> 2] | 0; //@line 8183
    HEAP32[$__oe >> 2] = $79 + 4; //@line 8185
    HEAP32[$79 >> 2] = $77; //@line 8186
    $__nf$0 = $__nb + 1 | 0; //@line 8187
   } else {
    $__nf$0 = $__nb; //@line 8189
   }
   do {
    if (($__ne - $__nf$0 | 0) > 1) {
     if ((HEAP8[$__nf$0] | 0) != 48) {
      $__nf$1 = $__nf$0; //@line 8200
      break;
     }
     $87 = $__nf$0 + 1 | 0; //@line 8203
     $88 = HEAP8[$87] | 0; //@line 8204
     if (!($88 << 24 >> 24 == 88 | $88 << 24 >> 24 == 120)) {
      $__nf$1 = $__nf$0; //@line 8206
      break;
     }
     $89 = $21; //@line 8209
     $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$89 >> 2] | 0) + 44 >> 2] & 31]($25, 48) | 0; //@line 8213
     $94 = HEAP32[$__oe >> 2] | 0; //@line 8214
     HEAP32[$__oe >> 2] = $94 + 4; //@line 8216
     HEAP32[$94 >> 2] = $93; //@line 8217
     $100 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$89 >> 2] | 0) + 44 >> 2] & 31]($25, HEAP8[$87] | 0) | 0; //@line 8222
     $102 = HEAP32[$__oe >> 2] | 0; //@line 8224
     HEAP32[$__oe >> 2] = $102 + 4; //@line 8226
     HEAP32[$102 >> 2] = $100; //@line 8227
     $__nf$1 = $__nf$0 + 2 | 0; //@line 8228
    } else {
     $__nf$1 = $__nf$0; //@line 8230
    }
   } while (0);
   do {
    if (($__nf$1 | 0) != ($__ne | 0)) {
     $105 = $__ne + -1 | 0; //@line 8236
     if ($105 >>> 0 > $__nf$1 >>> 0) {
      $$012$i$i = $__nf$1; //@line 8239
      $107 = $105; //@line 8239
     } else {
      break;
     }
     do {
      $108 = HEAP8[$$012$i$i] | 0; //@line 8244
      HEAP8[$$012$i$i] = HEAP8[$107] | 0; //@line 8246
      HEAP8[$107] = $108; //@line 8247
      $$012$i$i = $$012$i$i + 1 | 0; //@line 8248
      $107 = $107 + -1 | 0; //@line 8249
     } while ($$012$i$i >>> 0 < $107 >>> 0);
    }
   } while (0);
   $117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 127]($49) | 0; //@line 8263
   if ($__nf$1 >>> 0 < $__ne >>> 0) {
    $120 = $__grouping + 1 | 0; //@line 8267
    $121 = $21; //@line 8268
    $122 = $__grouping + 4 | 0; //@line 8269
    $123 = $__grouping + 8 | 0; //@line 8270
    $__dc$012 = 0; //@line 8271
    $__dg$013 = 0; //@line 8271
    $__p$014 = $__nf$1; //@line 8271
    while (1) {
     $126 = (HEAP8[$54] & 1) == 0; //@line 8275
     do {
      if ((HEAP8[($126 ? $120 : HEAP32[$123 >> 2] | 0) + $__dg$013 | 0] | 0) == 0) {
       $__dc$1 = $__dc$012; //@line 8283
       $__dg$1 = $__dg$013; //@line 8283
      } else {
       if (($__dc$012 | 0) != (HEAP8[($126 ? $120 : HEAP32[$123 >> 2] | 0) + $__dg$013 | 0] | 0)) {
        $__dc$1 = $__dc$012; //@line 8292
        $__dg$1 = $__dg$013; //@line 8292
        break;
       }
       $136 = HEAP32[$__oe >> 2] | 0; //@line 8295
       HEAP32[$__oe >> 2] = $136 + 4; //@line 8297
       HEAP32[$136 >> 2] = $117; //@line 8298
       $138 = HEAP8[$54] | 0; //@line 8299
       if (($138 & 1) == 0) {
        $144 = ($138 & 255) >>> 1; //@line 8305
       } else {
        $144 = HEAP32[$122 >> 2] | 0; //@line 8308
       }
       $__dc$1 = 0; //@line 8314
       $__dg$1 = ($__dg$013 >>> 0 < ($144 + -1 | 0) >>> 0) + $__dg$013 | 0; //@line 8314
      }
     } while (0);
     $152 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$121 >> 2] | 0) + 44 >> 2] & 31]($25, HEAP8[$__p$014] | 0) | 0; //@line 8321
     $153 = HEAP32[$__oe >> 2] | 0; //@line 8322
     $154 = $153 + 4 | 0; //@line 8323
     HEAP32[$__oe >> 2] = $154; //@line 8324
     HEAP32[$153 >> 2] = $152; //@line 8325
     $156 = $__p$014 + 1 | 0; //@line 8327
     if ($156 >>> 0 < $__ne >>> 0) {
      $__dc$012 = $__dc$1 + 1 | 0; //@line 8330
      $__dg$013 = $__dg$1; //@line 8330
      $__p$014 = $156; //@line 8330
     } else {
      $158 = $154; //@line 8332
      break;
     }
    }
   } else {
    $158 = HEAP32[$__oe >> 2] | 0; //@line 8338
   }
   $162 = $__ob + ($__nf$1 - $__nb << 2) | 0; //@line 8343
   if (($162 | 0) == ($158 | 0)) {
    $172 = $158; //@line 8346
    break;
   }
   $164 = $158 + -4 | 0; //@line 8349
   if ($164 >>> 0 > $162 >>> 0) {
    $$012$i$i10 = $162; //@line 8352
    $166 = $164; //@line 8352
   } else {
    $172 = $158; //@line 8354
    break;
   }
   while (1) {
    $167 = HEAP32[$$012$i$i10 >> 2] | 0; //@line 8358
    HEAP32[$$012$i$i10 >> 2] = HEAP32[$166 >> 2]; //@line 8360
    HEAP32[$166 >> 2] = $167; //@line 8361
    $169 = $$012$i$i10 + 4 | 0; //@line 8362
    $170 = $166 + -4 | 0; //@line 8363
    if ($169 >>> 0 < $170 >>> 0) {
     $166 = $170; //@line 8366
     $$012$i$i10 = $169; //@line 8366
    } else {
     $172 = $158; //@line 8368
     break;
    }
   }
  }
 } while (0);
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $172; //@line 8376
  HEAP32[$__op >> 2] = $storemerge; //@line 8377
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 8378
  STACKTOP = sp; //@line 8379
  return;
 }
 $storemerge = $__ob + ($__np - $__nb << 2) | 0; //@line 8385
 HEAP32[$__op >> 2] = $storemerge; //@line 8386
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 8387
 STACKTOP = sp; //@line 8388
 return;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i10 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $108 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $136 = 0, $138 = 0, $14 = 0, $144 = 0, $152 = 0, $153 = 0, $156 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $34 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $55 = 0, $62 = 0, $72 = 0, $77 = 0, $79 = 0, $87 = 0, $88 = 0, $89 = 0, $93 = 0, $94 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 5636
 STACKTOP = STACKTOP + 48 | 0; //@line 5637
 $__p$i$i$i$i1 = sp; //@line 5638
 $__p$i$i$i$i = sp + 16 | 0; //@line 5639
 $__grouping = sp + 32 | 0; //@line 5640
 $1 = $__loc; //@line 5641
 $2 = HEAP32[$1 >> 2] | 0; //@line 5642
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 5648
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 5650
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 5652
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 5653
 }
 $10 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 5656
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 5660
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 5667
  $24 = $23; //@line 5668
  __ZNSt8bad_castC2Ev($24); //@line 5669
  ___cxa_throw($23 | 0, 13672, 114); //@line 5670
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 5674
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 5677
  $24 = $23; //@line 5678
  __ZNSt8bad_castC2Ev($24); //@line 5679
  ___cxa_throw($23 | 0, 13672, 114); //@line 5680
 }
 $25 = $21; //@line 5683
 $26 = HEAP32[$1 >> 2] | 0; //@line 5684
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5856; //@line 5690
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 125; //@line 5692
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0; //@line 5694
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i1, 126); //@line 5695
 }
 $34 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 5698
 $38 = HEAP32[$26 + 8 >> 2] | 0; //@line 5702
 if (!((HEAP32[$26 + 12 >> 2] | 0) - $38 >> 2 >>> 0 > $34 >>> 0)) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 5709
  $48 = $47; //@line 5710
  __ZNSt8bad_castC2Ev($48); //@line 5711
  ___cxa_throw($47 | 0, 13672, 114); //@line 5712
 }
 $45 = HEAP32[$38 + ($34 << 2) >> 2] | 0; //@line 5716
 if (($45 | 0) == 0) {
  $47 = ___cxa_allocate_exception(4) | 0; //@line 5719
  $48 = $47; //@line 5720
  __ZNSt8bad_castC2Ev($48); //@line 5721
  ___cxa_throw($47 | 0, 13672, 114); //@line 5722
 }
 $49 = $45; //@line 5725
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $49); //@line 5730
 $54 = $__grouping; //@line 5731
 $55 = HEAP8[$54] | 0; //@line 5732
 if (($55 & 1) == 0) {
  $62 = ($55 & 255) >>> 1; //@line 5738
 } else {
  $62 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 5742
 }
 do {
  if (($62 | 0) == 0) {
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 15]($25, $__nb, $__ne, $__ob) | 0; //@line 5751
   HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb); //@line 5756
  } else {
   HEAP32[$__oe >> 2] = $__ob; //@line 5758
   $72 = HEAP8[$__nb] | 0; //@line 5759
   if ($72 << 24 >> 24 == 43 | $72 << 24 >> 24 == 45) {
    $77 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 31]($25, $72) | 0; //@line 5765
    $79 = HEAP32[$__oe >> 2] | 0; //@line 5767
    HEAP32[$__oe >> 2] = $79 + 1; //@line 5769
    HEAP8[$79] = $77; //@line 5770
    $__nf$0 = $__nb + 1 | 0; //@line 5771
   } else {
    $__nf$0 = $__nb; //@line 5773
   }
   do {
    if (($__ne - $__nf$0 | 0) > 1) {
     if ((HEAP8[$__nf$0] | 0) != 48) {
      $__nf$1 = $__nf$0; //@line 5784
      break;
     }
     $87 = $__nf$0 + 1 | 0; //@line 5787
     $88 = HEAP8[$87] | 0; //@line 5788
     if (!($88 << 24 >> 24 == 88 | $88 << 24 >> 24 == 120)) {
      $__nf$1 = $__nf$0; //@line 5790
      break;
     }
     $89 = $21; //@line 5793
     $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$89 >> 2] | 0) + 28 >> 2] & 31]($25, 48) | 0; //@line 5797
     $94 = HEAP32[$__oe >> 2] | 0; //@line 5798
     HEAP32[$__oe >> 2] = $94 + 1; //@line 5800
     HEAP8[$94] = $93; //@line 5801
     $100 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$89 >> 2] | 0) + 28 >> 2] & 31]($25, HEAP8[$87] | 0) | 0; //@line 5806
     $102 = HEAP32[$__oe >> 2] | 0; //@line 5808
     HEAP32[$__oe >> 2] = $102 + 1; //@line 5810
     HEAP8[$102] = $100; //@line 5811
     $__nf$1 = $__nf$0 + 2 | 0; //@line 5812
    } else {
     $__nf$1 = $__nf$0; //@line 5814
    }
   } while (0);
   do {
    if (($__nf$1 | 0) != ($__ne | 0)) {
     $105 = $__ne + -1 | 0; //@line 5820
     if ($105 >>> 0 > $__nf$1 >>> 0) {
      $$012$i$i = $__nf$1; //@line 5823
      $107 = $105; //@line 5823
     } else {
      break;
     }
     do {
      $108 = HEAP8[$$012$i$i] | 0; //@line 5828
      HEAP8[$$012$i$i] = HEAP8[$107] | 0; //@line 5830
      HEAP8[$107] = $108; //@line 5831
      $$012$i$i = $$012$i$i + 1 | 0; //@line 5832
      $107 = $107 + -1 | 0; //@line 5833
     } while ($$012$i$i >>> 0 < $107 >>> 0);
    }
   } while (0);
   $117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 127]($49) | 0; //@line 5847
   if ($__nf$1 >>> 0 < $__ne >>> 0) {
    $120 = $__grouping + 1 | 0; //@line 5851
    $121 = $21; //@line 5852
    $122 = $__grouping + 4 | 0; //@line 5853
    $123 = $__grouping + 8 | 0; //@line 5854
    $__dc$013 = 0; //@line 5855
    $__dg$014 = 0; //@line 5855
    $__p$015 = $__nf$1; //@line 5855
    while (1) {
     $126 = (HEAP8[$54] & 1) == 0; //@line 5859
     do {
      if ((HEAP8[($126 ? $120 : HEAP32[$123 >> 2] | 0) + $__dg$014 | 0] | 0) == 0) {
       $__dc$1 = $__dc$013; //@line 5867
       $__dg$1 = $__dg$014; //@line 5867
      } else {
       if (($__dc$013 | 0) != (HEAP8[($126 ? $120 : HEAP32[$123 >> 2] | 0) + $__dg$014 | 0] | 0)) {
        $__dc$1 = $__dc$013; //@line 5876
        $__dg$1 = $__dg$014; //@line 5876
        break;
       }
       $136 = HEAP32[$__oe >> 2] | 0; //@line 5879
       HEAP32[$__oe >> 2] = $136 + 1; //@line 5881
       HEAP8[$136] = $117; //@line 5882
       $138 = HEAP8[$54] | 0; //@line 5883
       if (($138 & 1) == 0) {
        $144 = ($138 & 255) >>> 1; //@line 5889
       } else {
        $144 = HEAP32[$122 >> 2] | 0; //@line 5892
       }
       $__dc$1 = 0; //@line 5898
       $__dg$1 = ($__dg$014 >>> 0 < ($144 + -1 | 0) >>> 0) + $__dg$014 | 0; //@line 5898
      }
     } while (0);
     $152 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$121 >> 2] | 0) + 28 >> 2] & 31]($25, HEAP8[$__p$015] | 0) | 0; //@line 5905
     $153 = HEAP32[$__oe >> 2] | 0; //@line 5906
     HEAP32[$__oe >> 2] = $153 + 1; //@line 5908
     HEAP8[$153] = $152; //@line 5909
     $156 = $__p$015 + 1 | 0; //@line 5911
     if ($156 >>> 0 < $__ne >>> 0) {
      $__dc$013 = $__dc$1 + 1 | 0; //@line 5914
      $__dg$014 = $__dg$1; //@line 5914
      $__p$015 = $156; //@line 5914
     } else {
      break;
     }
    }
   }
   $161 = $__ob + ($__nf$1 - $__nb) | 0; //@line 5923
   $162 = HEAP32[$__oe >> 2] | 0; //@line 5924
   if (($161 | 0) == ($162 | 0)) {
    break;
   }
   $164 = $162 + -1 | 0; //@line 5929
   if ($164 >>> 0 > $161 >>> 0) {
    $$012$i$i10 = $161; //@line 5932
    $166 = $164; //@line 5932
   } else {
    break;
   }
   do {
    $167 = HEAP8[$$012$i$i10] | 0; //@line 5937
    HEAP8[$$012$i$i10] = HEAP8[$166] | 0; //@line 5939
    HEAP8[$166] = $167; //@line 5940
    $$012$i$i10 = $$012$i$i10 + 1 | 0; //@line 5941
    $166 = $166 + -1 | 0; //@line 5942
   } while ($$012$i$i10 >>> 0 < $166 >>> 0);
  }
 } while (0);
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = HEAP32[$__oe >> 2] | 0; //@line 5955
  HEAP32[$__op >> 2] = $storemerge; //@line 5956
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 5957
  STACKTOP = sp; //@line 5958
  return;
 } else {
  $storemerge = $__ob + ($__np - $__nb) | 0; //@line 5964
  HEAP32[$__op >> 2] = $storemerge; //@line 5965
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping); //@line 5966
  STACKTOP = sp; //@line 5967
  return;
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $105 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $139 = 0, $150 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $34 = 0, $35 = 0, $37 = 0, $47 = 0, $5 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $71 = 0, $72 = 0, $75 = 0, $86 = 0, $89 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15319
 $1 = $__b; //@line 15320
 $2 = HEAP32[$1 >> 2] | 0; //@line 15321
 do {
  if (($2 | 0) == 0) {
   $16 = 1; //@line 15325
  } else {
   $5 = HEAP32[$2 + 12 >> 2] | 0; //@line 15328
   if (($5 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0; //@line 15338
   } else {
    $$0$i$i$i$i = HEAP32[$5 >> 2] | 0; //@line 15341
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 15345
    $16 = 1; //@line 15346
    break;
   } else {
    $16 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15351
    break;
   }
  }
 } while (0);
 $17 = $__e; //@line 15356
 $18 = HEAP32[$17 >> 2] | 0; //@line 15357
 do {
  if (($18 | 0) == 0) {
   label = 14; //@line 15361
  } else {
   $21 = HEAP32[$18 + 12 >> 2] | 0; //@line 15364
   if (($21 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0; //@line 15374
   } else {
    $$0$i$i1$i$i = HEAP32[$21 >> 2] | 0; //@line 15377
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 15381
    label = 14; //@line 15382
    break;
   } else {
    if ($16) {
     $34 = $18; //@line 15386
     break;
    } else {
     label = 16; //@line 15389
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($16) {
   label = 16; //@line 15397
  } else {
   $34 = 0; //@line 15399
  }
 }
 if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 15405
  $$01 = 0; //@line 15406
  STACKTOP = sp; //@line 15407
  return $$01 | 0; //@line 15407
 }
 $35 = HEAP32[$1 >> 2] | 0; //@line 15409
 $37 = HEAP32[$35 + 12 >> 2] | 0; //@line 15411
 if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; //@line 15421
 } else {
  $$0$i$i = HEAP32[$37 >> 2] | 0; //@line 15424
 }
 $47 = $__ct; //@line 15426
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$47 >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15434
  $$01 = 0; //@line 15435
  STACKTOP = sp; //@line 15436
  return $$01 | 0; //@line 15436
 }
 $54 = $__ct; //@line 15438
 $59 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24; //@line 15443
 $60 = HEAP32[$1 >> 2] | 0; //@line 15444
 $61 = $60 + 12 | 0; //@line 15445
 $62 = HEAP32[$61 >> 2] | 0; //@line 15446
 if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 40 >> 2] & 127]($60) | 0; //@line 15455
  $$0$in = $__n; //@line 15456
  $$pre$i3$i$i10 = $34; //@line 15456
  $71 = $34; //@line 15456
  $__r$0$in = $59; //@line 15456
 } else {
  HEAP32[$61 >> 2] = $62 + 4; //@line 15459
  $$0$in = $__n; //@line 15460
  $$pre$i3$i$i10 = $34; //@line 15460
  $71 = $34; //@line 15460
  $__r$0$in = $59; //@line 15460
 }
 while (1) {
  $__r$0 = $__r$0$in + -48 | 0; //@line 15463
  $$0 = $$0$in + -1 | 0; //@line 15464
  $72 = HEAP32[$1 >> 2] | 0; //@line 15465
  do {
   if (($72 | 0) == 0) {
    $86 = 1; //@line 15469
   } else {
    $75 = HEAP32[$72 + 12 >> 2] | 0; //@line 15472
    if (($75 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
     $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 127]($72) | 0; //@line 15482
    } else {
     $$0$i$i$i$i2 = HEAP32[$75 >> 2] | 0; //@line 15485
    }
    if (($$0$i$i$i$i2 | 0) == -1) {
     HEAP32[$1 >> 2] = 0; //@line 15489
     $86 = 1; //@line 15490
     break;
    } else {
     $86 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15495
     break;
    }
   }
  } while (0);
  do {
   if (($71 | 0) == 0) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10; //@line 15503
    $100 = 0; //@line 15503
    $101 = 1; //@line 15503
   } else {
    $89 = HEAP32[$71 + 12 >> 2] | 0; //@line 15506
    if (($89 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 127]($71) | 0; //@line 15516
    } else {
     $$0$i$i1$i$i8 = HEAP32[$89 >> 2] | 0; //@line 15519
    }
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$17 >> 2] = 0; //@line 15523
     $$pre$i3$i$i25 = 0; //@line 15524
     $100 = 0; //@line 15524
     $101 = 1; //@line 15524
     break;
    } else {
     $$pre$i3$i$i25 = $$pre$i3$i$i10; //@line 15528
     $100 = $$pre$i3$i$i10; //@line 15528
     $101 = ($$pre$i3$i$i10 | 0) == 0; //@line 15528
     break;
    }
   }
  } while (0);
  $103 = HEAP32[$1 >> 2] | 0; //@line 15536
  if (!(($86 ^ $101) & ($$0 | 0) > 0)) {
   break;
  }
  $105 = HEAP32[$103 + 12 >> 2] | 0; //@line 15541
  if (($105 | 0) == (HEAP32[$103 + 16 >> 2] | 0)) {
   $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] & 127]($103) | 0; //@line 15551
  } else {
   $$0$i$i14 = HEAP32[$105 >> 2] | 0; //@line 15554
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$47 >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
   $$01 = $__r$0; //@line 15561
   label = 63; //@line 15562
   break;
  }
  $125 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0; //@line 15571
  $126 = HEAP32[$1 >> 2] | 0; //@line 15572
  $127 = $126 + 12 | 0; //@line 15573
  $128 = HEAP32[$127 >> 2] | 0; //@line 15574
  if (($128 | 0) == (HEAP32[$126 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 40 >> 2] & 127]($126) | 0; //@line 15583
   $$0$in$phi = $$0; //@line 15584
   $$pre$i3$i$i10 = $$pre$i3$i$i25; //@line 15584
   $71 = $100; //@line 15584
   $__r$0$in = $125; //@line 15584
   $$0$in = $$0$in$phi; //@line 15584
   continue;
  } else {
   HEAP32[$127 >> 2] = $128 + 4; //@line 15588
   $$0$in$phi = $$0; //@line 15589
   $$pre$i3$i$i10 = $$pre$i3$i$i25; //@line 15589
   $71 = $100; //@line 15589
   $__r$0$in = $125; //@line 15589
   $$0$in = $$0$in$phi; //@line 15589
   continue;
  }
 }
 if ((label | 0) == 63) {
  STACKTOP = sp; //@line 15594
  return $$01 | 0; //@line 15594
 }
 do {
  if (($103 | 0) == 0) {
   $150 = 1; //@line 15599
  } else {
   $139 = HEAP32[$103 + 12 >> 2] | 0; //@line 15602
   if (($139 | 0) == (HEAP32[$103 + 16 >> 2] | 0)) {
    $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] & 127]($103) | 0; //@line 15612
   } else {
    $$0$i$i$i$i17 = HEAP32[$139 >> 2] | 0; //@line 15615
   }
   if (($$0$i$i$i$i17 | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 15619
    $150 = 1; //@line 15620
    break;
   } else {
    $150 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15625
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i25 | 0) == 0) {
   label = 60; //@line 15633
  } else {
   $153 = HEAP32[$$pre$i3$i$i25 + 12 >> 2] | 0; //@line 15636
   if (($153 | 0) == (HEAP32[$$pre$i3$i$i25 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i25) | 0; //@line 15646
   } else {
    $$0$i$i1$i$i23 = HEAP32[$153 >> 2] | 0; //@line 15649
   }
   if (($$0$i$i1$i$i23 | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 15653
    label = 60; //@line 15654
    break;
   }
   if ($150) {
    $$01 = $__r$0; //@line 15658
   } else {
    break;
   }
   STACKTOP = sp; //@line 15662
   return $$01 | 0; //@line 15662
  }
 } while (0);
 do {
  if ((label | 0) == 60) {
   if ($150) {
    break;
   } else {
    $$01 = $__r$0; //@line 15670
   }
   STACKTOP = sp; //@line 15672
   return $$01 | 0; //@line 15672
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 15677
 $$01 = $__r$0; //@line 15678
 STACKTOP = sp; //@line 15679
 return $$01 | 0; //@line 15679
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $1 = 0, $102 = 0, $105 = 0, $107 = 0, $118 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $15 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $33 = 0, $34 = 0, $36 = 0, $47 = 0, $49 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $74 = 0, $75 = 0, $88 = 0, $89 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12601
 $1 = $__b; //@line 12602
 $2 = HEAP32[$1 >> 2] | 0; //@line 12603
 do {
  if (($2 | 0) == 0) {
   $15 = 0; //@line 12607
  } else {
   if ((HEAP32[$2 + 12 >> 2] | 0) != (HEAP32[$2 + 16 >> 2] | 0)) {
    $15 = $2; //@line 12615
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 12625
    $15 = 0; //@line 12626
    break;
   } else {
    $15 = HEAP32[$1 >> 2] | 0; //@line 12630
    break;
   }
  }
 } while (0);
 $16 = ($15 | 0) == 0; //@line 12635
 $17 = $__e; //@line 12636
 $18 = HEAP32[$17 >> 2] | 0; //@line 12637
 L8 : do {
  if (($18 | 0) == 0) {
   label = 11; //@line 12641
  } else {
   do {
    if ((HEAP32[$18 + 12 >> 2] | 0) == (HEAP32[$18 + 16 >> 2] | 0)) {
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0) == -1)) {
      break;
     }
     HEAP32[$17 >> 2] = 0; //@line 12659
     label = 11; //@line 12660
     break L8;
    }
   } while (0);
   if ($16) {
    $33 = $18; //@line 12665
   } else {
    label = 12; //@line 12667
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($16) {
   label = 12; //@line 12673
  } else {
   $33 = 0; //@line 12675
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 12681
  $$01 = 0; //@line 12682
  STACKTOP = sp; //@line 12683
  return $$01 | 0; //@line 12683
 }
 $34 = HEAP32[$1 >> 2] | 0; //@line 12685
 $36 = HEAP32[$34 + 12 >> 2] | 0; //@line 12687
 if (($36 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 12697
 } else {
  $$0$i$i = HEAPU8[$36] | 0; //@line 12701
 }
 $47 = $$0$i$i & 255; //@line 12703
 do {
  if ($47 << 24 >> 24 > -1) {
   $49 = $__ct + 8 | 0; //@line 12709
   if ((HEAP16[(HEAP32[$49 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) == 0) {
    break;
   }
   $57 = $__ct; //@line 12718
   $62 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 31]($__ct, $47, 0) | 0) << 24 >> 24; //@line 12723
   $63 = HEAP32[$1 >> 2] | 0; //@line 12724
   $64 = $63 + 12 | 0; //@line 12725
   $65 = HEAP32[$64 >> 2] | 0; //@line 12726
   if (($65 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 40 >> 2] & 127]($63) | 0; //@line 12735
    $$0$in = $__n; //@line 12736
    $$pre$i2$i$i7 = $33; //@line 12736
    $74 = $33; //@line 12736
    $__r$0$in = $62; //@line 12736
   } else {
    HEAP32[$64 >> 2] = $65 + 1; //@line 12739
    $$0$in = $__n; //@line 12740
    $$pre$i2$i$i7 = $33; //@line 12740
    $74 = $33; //@line 12740
    $__r$0$in = $62; //@line 12740
   }
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0; //@line 12743
    $$0 = $$0$in + -1 | 0; //@line 12744
    $75 = HEAP32[$1 >> 2] | 0; //@line 12745
    do {
     if (($75 | 0) == 0) {
      $88 = 0; //@line 12749
     } else {
      if ((HEAP32[$75 + 12 >> 2] | 0) != (HEAP32[$75 + 16 >> 2] | 0)) {
       $88 = $75; //@line 12757
       break;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 36 >> 2] & 127]($75) | 0) == -1) {
       HEAP32[$1 >> 2] = 0; //@line 12767
       $88 = 0; //@line 12768
       break;
      } else {
       $88 = HEAP32[$1 >> 2] | 0; //@line 12772
       break;
      }
     }
    } while (0);
    $89 = ($88 | 0) == 0; //@line 12777
    do {
     if (($74 | 0) == 0) {
      $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 12781
      $102 = 0; //@line 12781
     } else {
      if ((HEAP32[$74 + 12 >> 2] | 0) != (HEAP32[$74 + 16 >> 2] | 0)) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 12789
       $102 = $74; //@line 12789
       break;
      }
      if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 127]($74) | 0) == -1)) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 12799
       $102 = $$pre$i2$i$i7; //@line 12799
       break;
      }
      HEAP32[$17 >> 2] = 0; //@line 12802
      $$pre$i2$i$i20 = 0; //@line 12803
      $102 = 0; //@line 12803
     }
    } while (0);
    $105 = HEAP32[$1 >> 2] | 0; //@line 12810
    if (!(($89 ^ ($102 | 0) == 0) & ($$0 | 0) > 0)) {
     label = 40; //@line 12812
     break;
    }
    $107 = HEAP32[$105 + 12 >> 2] | 0; //@line 12816
    if (($107 | 0) == (HEAP32[$105 + 16 >> 2] | 0)) {
     $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$105 >> 2] | 0) + 36 >> 2] & 127]($105) | 0; //@line 12826
    } else {
     $$0$i$i10 = HEAPU8[$107] | 0; //@line 12830
    }
    $118 = $$0$i$i10 & 255; //@line 12832
    if (!($118 << 24 >> 24 > -1)) {
     $$01 = $__r$0; //@line 12835
     label = 52; //@line 12836
     break;
    }
    if ((HEAP16[(HEAP32[$49 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
     $$01 = $__r$0; //@line 12847
     label = 52; //@line 12848
     break;
    }
    $131 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 31]($__ct, $118, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0; //@line 12857
    $132 = HEAP32[$1 >> 2] | 0; //@line 12858
    $133 = $132 + 12 | 0; //@line 12859
    $134 = HEAP32[$133 >> 2] | 0; //@line 12860
    if (($134 | 0) == (HEAP32[$132 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 40 >> 2] & 127]($132) | 0; //@line 12869
     $$0$in$phi = $$0; //@line 12870
     $$pre$i2$i$i7 = $$pre$i2$i$i20; //@line 12870
     $74 = $102; //@line 12870
     $__r$0$in = $131; //@line 12870
     $$0$in = $$0$in$phi; //@line 12870
     continue;
    } else {
     HEAP32[$133 >> 2] = $134 + 1; //@line 12874
     $$0$in$phi = $$0; //@line 12875
     $$pre$i2$i$i7 = $$pre$i2$i$i20; //@line 12875
     $74 = $102; //@line 12875
     $__r$0$in = $131; //@line 12875
     $$0$in = $$0$in$phi; //@line 12875
     continue;
    }
   }
   if ((label | 0) == 40) {
    do {
     if (($105 | 0) == 0) {
      $155 = 0; //@line 12883
     } else {
      if ((HEAP32[$105 + 12 >> 2] | 0) != (HEAP32[$105 + 16 >> 2] | 0)) {
       $155 = $105; //@line 12891
       break;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$105 >> 2] | 0) + 36 >> 2] & 127]($105) | 0) == -1) {
       HEAP32[$1 >> 2] = 0; //@line 12901
       $155 = 0; //@line 12902
       break;
      } else {
       $155 = HEAP32[$1 >> 2] | 0; //@line 12906
       break;
      }
     }
    } while (0);
    $156 = ($155 | 0) == 0; //@line 12911
    L63 : do {
     if (($$pre$i2$i$i20 | 0) == 0) {
      label = 50; //@line 12915
     } else {
      do {
       if ((HEAP32[$$pre$i2$i$i20 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20 + 16 >> 2] | 0)) {
        if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i20) | 0) == -1)) {
         break;
        }
        HEAP32[$17 >> 2] = 0; //@line 12933
        label = 50; //@line 12934
        break L63;
       }
      } while (0);
      if ($156) {
       $$01 = $__r$0; //@line 12939
      } else {
       break;
      }
      STACKTOP = sp; //@line 12943
      return $$01 | 0; //@line 12943
     }
    } while (0);
    do {
     if ((label | 0) == 50) {
      if ($156) {
       break;
      } else {
       $$01 = $__r$0; //@line 12951
      }
      STACKTOP = sp; //@line 12953
      return $$01 | 0; //@line 12953
     }
    } while (0);
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12958
    $$01 = $__r$0; //@line 12959
    STACKTOP = sp; //@line 12960
    return $$01 | 0; //@line 12960
   } else if ((label | 0) == 52) {
    STACKTOP = sp; //@line 12963
    return $$01 | 0; //@line 12963
   }
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 12969
 $$01 = 0; //@line 12970
 STACKTOP = sp; //@line 12971
 return $$01 | 0; //@line 12971
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $1 = 0, $102 = 0, $105 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $139 = 0, $140 = 0, $15 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $83 = 0, $87 = 0, $94 = 0, $95 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, sp = 0;
 sp = STACKTOP; //@line 5282
 STACKTOP = STACKTOP + 40 | 0; //@line 5283
 $$byval_copy = sp; //@line 5284
 $__p$i$i$i$i = sp + 8 | 0; //@line 5285
 $__loc = sp + 24 | 0; //@line 5286
 $__pat = sp + 32 | 0; //@line 5287
 $tmpcast = $__pat; //@line 5288
 $__dp = STACKTOP; //@line 5289
 STACKTOP = STACKTOP + 8 | 0; //@line 5289
 $__ts = STACKTOP; //@line 5290
 STACKTOP = STACKTOP + 8 | 0; //@line 5290
 $__grp = STACKTOP; //@line 5291
 STACKTOP = STACKTOP + 16 | 0; //@line 5291
 $__sym = STACKTOP; //@line 5292
 STACKTOP = STACKTOP + 16 | 0; //@line 5292
 $__sn = STACKTOP; //@line 5293
 STACKTOP = STACKTOP + 16 | 0; //@line 5293
 $__fd = STACKTOP; //@line 5294
 STACKTOP = STACKTOP + 8 | 0; //@line 5294
 $__mbuf = STACKTOP; //@line 5295
 STACKTOP = STACKTOP + 400 | 0; //@line 5295
 $__mi = STACKTOP; //@line 5296
 STACKTOP = STACKTOP + 8 | 0; //@line 5296
 $__me = STACKTOP; //@line 5297
 STACKTOP = STACKTOP + 8 | 0; //@line 5297
 $1 = STACKTOP; //@line 5298
 STACKTOP = STACKTOP + 8 | 0; //@line 5298
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 5299
 $2 = $__loc; //@line 5300
 $3 = HEAP32[$2 >> 2] | 0; //@line 5301
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 5307
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 5309
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 5311
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 5312
 }
 $11 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 5315
 $15 = HEAP32[$3 + 8 >> 2] | 0; //@line 5319
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $15 >> 2 >>> 0 > $11 >>> 0)) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 5326
  $25 = $24; //@line 5327
  __ZNSt8bad_castC2Ev($25); //@line 5328
  ___cxa_throw($24 | 0, 13672, 114); //@line 5329
 }
 $22 = HEAP32[$15 + ($11 << 2) >> 2] | 0; //@line 5333
 if (($22 | 0) == 0) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 5336
  $25 = $24; //@line 5337
  __ZNSt8bad_castC2Ev($25); //@line 5338
  ___cxa_throw($24 | 0, 13672, 114); //@line 5339
 }
 $26 = $22; //@line 5342
 $27 = $__digits; //@line 5343
 $28 = HEAP8[$27] | 0; //@line 5344
 $30 = ($28 & 1) == 0; //@line 5346
 if ($30) {
  $35 = ($28 & 255) >>> 1; //@line 5350
 } else {
  $35 = HEAP32[$__digits + 4 >> 2] | 0; //@line 5354
 }
 if (($35 | 0) == 0) {
  $48 = 0; //@line 5358
 } else {
  if ($30) {
   $40 = $__digits + 4 | 0; //@line 5362
  } else {
   $40 = HEAP32[$__digits + 8 >> 2] | 0; //@line 5366
  }
  $41 = HEAP32[$40 >> 2] | 0; //@line 5368
  $48 = ($41 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$22 >> 2] | 0) + 44 >> 2] & 31]($26, 45) | 0); //@line 5375
 }
 HEAP32[$__pat >> 2] = 0; //@line 5377
 $this2$i$i$i = $__grp; //@line 5378
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 5379
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 5379
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 5379
 $this2$i$i$i5 = $__sym; //@line 5380
 HEAP32[$this2$i$i$i5 + 0 >> 2] = 0; //@line 5381
 HEAP32[$this2$i$i$i5 + 4 >> 2] = 0; //@line 5381
 HEAP32[$this2$i$i$i5 + 8 >> 2] = 0; //@line 5381
 $this2$i$i$i6 = $__sn; //@line 5382
 HEAP32[$this2$i$i$i6 + 0 >> 2] = 0; //@line 5383
 HEAP32[$this2$i$i$i6 + 4 >> 2] = 0; //@line 5383
 HEAP32[$this2$i$i$i6 + 8 >> 2] = 0; //@line 5383
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $48, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 5384
 $50 = $__mbuf; //@line 5386
 $51 = HEAP8[$27] | 0; //@line 5387
 $53 = ($51 & 1) == 0; //@line 5389
 if ($53) {
  $58 = ($51 & 255) >>> 1; //@line 5393
 } else {
  $58 = HEAP32[$__digits + 4 >> 2] | 0; //@line 5397
 }
 $59 = HEAP32[$__fd >> 2] | 0; //@line 5399
 if (($58 | 0) > ($59 | 0)) {
  if ($53) {
   $65 = ($51 & 255) >>> 1; //@line 5405
  } else {
   $65 = HEAP32[$__digits + 4 >> 2] | 0; //@line 5409
  }
  $68 = HEAP8[$this2$i$i$i6] | 0; //@line 5413
  if (($68 & 1) == 0) {
   $75 = ($68 & 255) >>> 1; //@line 5419
  } else {
   $75 = HEAP32[$__sn + 4 >> 2] | 0; //@line 5423
  }
  $76 = HEAP8[$this2$i$i$i5] | 0; //@line 5425
  if (($76 & 1) == 0) {
   $83 = ($76 & 255) >>> 1; //@line 5431
  } else {
   $83 = HEAP32[$__sym + 4 >> 2] | 0; //@line 5435
  }
  $$pn = $75 + ($65 - $59 << 1 | 1) + $83 | 0; //@line 5440
 } else {
  $87 = HEAP8[$this2$i$i$i6] | 0; //@line 5442
  if (($87 & 1) == 0) {
   $94 = ($87 & 255) >>> 1; //@line 5448
  } else {
   $94 = HEAP32[$__sn + 4 >> 2] | 0; //@line 5452
  }
  $95 = HEAP8[$this2$i$i$i5] | 0; //@line 5454
  if (($95 & 1) == 0) {
   $102 = ($95 & 255) >>> 1; //@line 5460
  } else {
   $102 = HEAP32[$__sym + 4 >> 2] | 0; //@line 5464
  }
  $$pn = $94 + 2 + $102 | 0; //@line 5468
 }
 $105 = $$pn + $59 | 0; //@line 5470
 do {
  if ($105 >>> 0 > 100) {
   $108 = _malloc($105 << 2) | 0; //@line 5475
   $109 = $108; //@line 5476
   if (($108 | 0) != 0) {
    $111 = $109; //@line 5479
    $__mb$0 = $109; //@line 5479
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 5482
  } else {
   $111 = 0; //@line 5485
   $__mb$0 = $50; //@line 5485
  }
 } while (0);
 if (($51 & 1) == 0) {
  $123 = $__digits + 4 | 0; //@line 5496
  $124 = ($51 & 255) >>> 1; //@line 5496
 } else {
  $123 = HEAP32[$__digits + 8 >> 2] | 0; //@line 5502
  $124 = HEAP32[$__digits + 4 >> 2] | 0; //@line 5502
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $123, $123 + ($124 << 2) | 0, $26, $48, $tmpcast, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $59); //@line 5507
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 5511
 $131 = HEAP32[$__mi >> 2] | 0; //@line 5512
 $132 = HEAP32[$__me >> 2] | 0; //@line 5513
 $134 = $$byval_copy; //@line 5515
 $135 = $1; //@line 5516
 HEAP32[$134 + 0 >> 2] = HEAP32[$135 + 0 >> 2]; //@line 5517
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $131, $132, $__iob, $__fl); //@line 5518
 if (($111 | 0) == 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn); //@line 5522
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym); //@line 5523
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 5524
  $139 = HEAP32[$2 >> 2] | 0; //@line 5525
  $140 = $139; //@line 5526
  __ZNSt3__114__shared_count16__release_sharedEv($140) | 0; //@line 5527
  STACKTOP = sp; //@line 5528
  return;
 }
 _free($111); //@line 5531
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn); //@line 5532
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym); //@line 5533
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 5534
 $139 = HEAP32[$2 >> 2] | 0; //@line 5535
 $140 = $139; //@line 5536
 __ZNSt3__114__shared_count16__release_sharedEv($140) | 0; //@line 5537
 STACKTOP = sp; //@line 5538
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $1 = 0, $102 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $122 = 0, $123 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $137 = 0, $138 = 0, $15 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $41 = 0, $42 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $83 = 0, $87 = 0, $94 = 0, $95 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, sp = 0;
 sp = STACKTOP; //@line 3825
 STACKTOP = STACKTOP + 40 | 0; //@line 3826
 $$byval_copy = sp; //@line 3827
 $__p$i$i$i$i = sp + 8 | 0; //@line 3828
 $__loc = sp + 24 | 0; //@line 3829
 $__pat = sp + 32 | 0; //@line 3830
 $tmpcast = $__pat; //@line 3831
 $__dp = STACKTOP; //@line 3832
 STACKTOP = STACKTOP + 8 | 0; //@line 3832
 $__ts = STACKTOP; //@line 3833
 STACKTOP = STACKTOP + 8 | 0; //@line 3833
 $__grp = STACKTOP; //@line 3834
 STACKTOP = STACKTOP + 16 | 0; //@line 3834
 $__sym = STACKTOP; //@line 3835
 STACKTOP = STACKTOP + 16 | 0; //@line 3835
 $__sn = STACKTOP; //@line 3836
 STACKTOP = STACKTOP + 16 | 0; //@line 3836
 $__fd = STACKTOP; //@line 3837
 STACKTOP = STACKTOP + 8 | 0; //@line 3837
 $__mbuf = STACKTOP; //@line 3838
 STACKTOP = STACKTOP + 104 | 0; //@line 3838
 $__mi = STACKTOP; //@line 3839
 STACKTOP = STACKTOP + 8 | 0; //@line 3839
 $__me = STACKTOP; //@line 3840
 STACKTOP = STACKTOP + 8 | 0; //@line 3840
 $1 = STACKTOP; //@line 3841
 STACKTOP = STACKTOP + 8 | 0; //@line 3841
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 3842
 $2 = $__loc; //@line 3843
 $3 = HEAP32[$2 >> 2] | 0; //@line 3844
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 3850
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 3852
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 3854
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 3855
 }
 $11 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 3858
 $15 = HEAP32[$3 + 8 >> 2] | 0; //@line 3862
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $15 >> 2 >>> 0 > $11 >>> 0)) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 3869
  $25 = $24; //@line 3870
  __ZNSt8bad_castC2Ev($25); //@line 3871
  ___cxa_throw($24 | 0, 13672, 114); //@line 3872
 }
 $22 = HEAP32[$15 + ($11 << 2) >> 2] | 0; //@line 3876
 if (($22 | 0) == 0) {
  $24 = ___cxa_allocate_exception(4) | 0; //@line 3879
  $25 = $24; //@line 3880
  __ZNSt8bad_castC2Ev($25); //@line 3881
  ___cxa_throw($24 | 0, 13672, 114); //@line 3882
 }
 $26 = $22; //@line 3885
 $27 = $__digits; //@line 3886
 $28 = HEAP8[$27] | 0; //@line 3887
 $30 = ($28 & 1) == 0; //@line 3889
 if ($30) {
  $35 = ($28 & 255) >>> 1; //@line 3893
 } else {
  $35 = HEAP32[$__digits + 4 >> 2] | 0; //@line 3897
 }
 if (($35 | 0) == 0) {
  $49 = 0; //@line 3901
 } else {
  if ($30) {
   $41 = $__digits + 1 | 0; //@line 3906
  } else {
   $41 = HEAP32[$__digits + 8 >> 2] | 0; //@line 3910
  }
  $42 = HEAP8[$41] | 0; //@line 3912
  $49 = $42 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] & 31]($26, 45) | 0) << 24 >> 24; //@line 3919
 }
 HEAP32[$__pat >> 2] = 0; //@line 3921
 $this2$i$i$i = $__grp; //@line 3922
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 3923
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 3923
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 3923
 $this2$i$i$i5 = $__sym; //@line 3924
 HEAP32[$this2$i$i$i5 + 0 >> 2] = 0; //@line 3925
 HEAP32[$this2$i$i$i5 + 4 >> 2] = 0; //@line 3925
 HEAP32[$this2$i$i$i5 + 8 >> 2] = 0; //@line 3925
 $this2$i$i$i6 = $__sn; //@line 3926
 HEAP32[$this2$i$i$i6 + 0 >> 2] = 0; //@line 3927
 HEAP32[$this2$i$i$i6 + 4 >> 2] = 0; //@line 3927
 HEAP32[$this2$i$i$i6 + 8 >> 2] = 0; //@line 3927
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $49, $__loc, $tmpcast, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 3928
 $50 = $__mbuf; //@line 3929
 $51 = HEAP8[$27] | 0; //@line 3930
 $53 = ($51 & 1) == 0; //@line 3932
 if ($53) {
  $58 = ($51 & 255) >>> 1; //@line 3936
 } else {
  $58 = HEAP32[$__digits + 4 >> 2] | 0; //@line 3940
 }
 $59 = HEAP32[$__fd >> 2] | 0; //@line 3942
 if (($58 | 0) > ($59 | 0)) {
  if ($53) {
   $65 = ($51 & 255) >>> 1; //@line 3948
  } else {
   $65 = HEAP32[$__digits + 4 >> 2] | 0; //@line 3952
  }
  $68 = HEAP8[$this2$i$i$i6] | 0; //@line 3956
  if (($68 & 1) == 0) {
   $75 = ($68 & 255) >>> 1; //@line 3962
  } else {
   $75 = HEAP32[$__sn + 4 >> 2] | 0; //@line 3966
  }
  $76 = HEAP8[$this2$i$i$i5] | 0; //@line 3968
  if (($76 & 1) == 0) {
   $83 = ($76 & 255) >>> 1; //@line 3974
  } else {
   $83 = HEAP32[$__sym + 4 >> 2] | 0; //@line 3978
  }
  $$pn = $75 + ($65 - $59 << 1 | 1) + $83 | 0; //@line 3983
 } else {
  $87 = HEAP8[$this2$i$i$i6] | 0; //@line 3985
  if (($87 & 1) == 0) {
   $94 = ($87 & 255) >>> 1; //@line 3991
  } else {
   $94 = HEAP32[$__sn + 4 >> 2] | 0; //@line 3995
  }
  $95 = HEAP8[$this2$i$i$i5] | 0; //@line 3997
  if (($95 & 1) == 0) {
   $102 = ($95 & 255) >>> 1; //@line 4003
  } else {
   $102 = HEAP32[$__sym + 4 >> 2] | 0; //@line 4007
  }
  $$pn = $94 + 2 + $102 | 0; //@line 4011
 }
 $105 = $$pn + $59 | 0; //@line 4013
 do {
  if ($105 >>> 0 > 100) {
   $107 = _malloc($105) | 0; //@line 4017
   if (($107 | 0) != 0) {
    $109 = $107; //@line 4020
    $__mb$0 = $107; //@line 4020
    break;
   }
   __ZSt17__throw_bad_allocv(); //@line 4023
  } else {
   $109 = 0; //@line 4026
   $__mb$0 = $50; //@line 4026
  }
 } while (0);
 if (($51 & 1) == 0) {
  $122 = $__digits + 1 | 0; //@line 4038
  $123 = ($51 & 255) >>> 1; //@line 4038
 } else {
  $122 = HEAP32[$__digits + 8 >> 2] | 0; //@line 4044
  $123 = HEAP32[$__digits + 4 >> 2] | 0; //@line 4044
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $122, $122 + $123 | 0, $26, $49, $tmpcast, HEAP8[$__dp] | 0, HEAP8[$__ts] | 0, $__grp, $__sym, $__sn, $59); //@line 4049
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 4053
 $130 = HEAP32[$__mi >> 2] | 0; //@line 4054
 $131 = HEAP32[$__me >> 2] | 0; //@line 4055
 $133 = $$byval_copy; //@line 4057
 $134 = $1; //@line 4058
 HEAP32[$133 + 0 >> 2] = HEAP32[$134 + 0 >> 2]; //@line 4059
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $130, $131, $__iob, $__fl); //@line 4060
 if (($109 | 0) == 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn); //@line 4064
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym); //@line 4065
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 4066
  $137 = HEAP32[$2 >> 2] | 0; //@line 4067
  $138 = $137; //@line 4068
  __ZNSt3__114__shared_count16__release_sharedEv($138) | 0; //@line 4069
  STACKTOP = sp; //@line 4070
  return;
 }
 _free($109); //@line 4072
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn); //@line 4073
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym); //@line 4074
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp); //@line 4075
 $137 = HEAP32[$2 >> 2] | 0; //@line 4076
 $138 = $137; //@line 4077
 __ZNSt3__114__shared_count16__release_sharedEv($138) | 0; //@line 4078
 STACKTOP = sp; //@line 4079
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $1 = 0, $100 = 0, $101 = 0, $104 = 0, $121 = 0, $16 = 0, $20 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $57 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $70 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $85 = 0, $86 = 0, $89 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19525
 STACKTOP = STACKTOP + 16 | 0; //@line 19526
 $$byval_copy = sp; //@line 19527
 $vararg_buffer = sp + 8 | 0; //@line 19528
 $__p$i$i$i$i = STACKTOP; //@line 19530
 STACKTOP = STACKTOP + 16 | 0; //@line 19530
 $__wbuf = STACKTOP; //@line 19531
 STACKTOP = STACKTOP + 400 | 0; //@line 19531
 $__wb = STACKTOP; //@line 19532
 STACKTOP = STACKTOP + 8 | 0; //@line 19532
 $__wn = STACKTOP; //@line 19533
 STACKTOP = STACKTOP + 8 | 0; //@line 19533
 $__loc = STACKTOP; //@line 19534
 STACKTOP = STACKTOP + 8 | 0; //@line 19534
 $__neg = STACKTOP; //@line 19535
 STACKTOP = STACKTOP + 8 | 0; //@line 19535
 $1 = STACKTOP; //@line 19536
 STACKTOP = STACKTOP + 8 | 0; //@line 19536
 $__atoms = STACKTOP; //@line 19537
 STACKTOP = STACKTOP + 40 | 0; //@line 19537
 $__nbuf = STACKTOP; //@line 19538
 STACKTOP = STACKTOP + 104 | 0; //@line 19538
 $4 = $__wb; //@line 19541
 HEAP32[$4 >> 2] = $__wbuf; //@line 19542
 $5 = $__wb + 4 | 0; //@line 19543
 HEAP32[$5 >> 2] = 127; //@line 19544
 $6 = $__wbuf + 400 | 0; //@line 19545
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 19546
 $7 = $__loc; //@line 19547
 $8 = HEAP32[$7 >> 2] | 0; //@line 19548
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 19554
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 19556
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 19558
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 19559
 }
 $16 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 19562
 $20 = HEAP32[$8 + 8 >> 2] | 0; //@line 19566
 if (!((HEAP32[$8 + 12 >> 2] | 0) - $20 >> 2 >>> 0 > $16 >>> 0)) {
  $29 = ___cxa_allocate_exception(4) | 0; //@line 19573
  $30 = $29; //@line 19574
  __ZNSt8bad_castC2Ev($30); //@line 19575
  ___cxa_throw($29 | 0, 13672, 114); //@line 19576
 }
 $27 = HEAP32[$20 + ($16 << 2) >> 2] | 0; //@line 19580
 if (($27 | 0) == 0) {
  $29 = ___cxa_allocate_exception(4) | 0; //@line 19583
  $30 = $29; //@line 19584
  __ZNSt8bad_castC2Ev($30); //@line 19585
  ___cxa_throw($29 | 0, 13672, 114); //@line 19586
 }
 $31 = $27; //@line 19589
 HEAP8[$__neg] = 0; //@line 19590
 $32 = $__e; //@line 19591
 HEAP32[$1 >> 2] = HEAP32[$32 >> 2]; //@line 19594
 $36 = HEAP32[$__iob + 4 >> 2] | 0; //@line 19596
 $38 = $$byval_copy; //@line 19598
 $39 = $1; //@line 19599
 HEAP32[$38 + 0 >> 2] = HEAP32[$39 + 0 >> 2]; //@line 19600
 $40 = __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $36, $__err, $__neg, $31, $__wb, $__wn, $6) | 0; //@line 19601
 do {
  if ($40) {
   $43 = $__atoms; //@line 19606
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$27 >> 2] | 0) + 48 >> 2] & 15]($31, 5408, 5418 | 0, $43) | 0; //@line 19611
   $48 = $__nbuf; //@line 19612
   $49 = HEAP32[$__wn >> 2] | 0; //@line 19613
   $50 = HEAP32[$4 >> 2] | 0; //@line 19614
   $53 = $49 - $50 | 0; //@line 19617
   do {
    if (($53 | 0) > 392) {
     $57 = _malloc(($53 >> 2) + 2 | 0) | 0; //@line 19623
     if (($57 | 0) != 0) {
      $59 = $57; //@line 19626
      $__nc$0 = $57; //@line 19626
      break;
     }
     __ZSt17__throw_bad_allocv(); //@line 19629
    } else {
     $59 = 0; //@line 19632
     $__nc$0 = $48; //@line 19632
    }
   } while (0);
   if ((HEAP8[$__neg] | 0) == 0) {
    $__nc$1 = $__nc$0; //@line 19638
   } else {
    HEAP8[$__nc$0] = 45; //@line 19641
    $__nc$1 = $__nc$0 + 1 | 0; //@line 19642
   }
   if ($50 >>> 0 < $49 >>> 0) {
    $64 = $__atoms + 40 | 0; //@line 19646
    $65 = $__atoms; //@line 19647
    $__nc$210 = $__nc$1; //@line 19648
    $__w$011 = $50; //@line 19648
    while (1) {
     $66 = HEAP32[$__w$011 >> 2] | 0; //@line 19650
     $$01$i = $43; //@line 19651
     while (1) {
      $70 = $$01$i + 4 | 0; //@line 19655
      if ((HEAP32[$$01$i >> 2] | 0) == ($66 | 0)) {
       $$0$lcssa$i = $$01$i; //@line 19657
       break;
      }
      if (($70 | 0) == ($64 | 0)) {
       $$0$lcssa$i = $64; //@line 19662
       break;
      } else {
       $$01$i = $70; //@line 19665
      }
     }
     HEAP8[$__nc$210] = HEAP8[5408 + ($$0$lcssa$i - $65 >> 2) | 0] | 0; //@line 19673
     $76 = $__w$011 + 4 | 0; //@line 19674
     $77 = $__nc$210 + 1 | 0; //@line 19675
     if ($76 >>> 0 < (HEAP32[$__wn >> 2] | 0) >>> 0) {
      $__nc$210 = $77; //@line 19679
      $__w$011 = $76; //@line 19679
     } else {
      $__nc$2$lcssa = $77; //@line 19681
      break;
     }
    }
   } else {
    $__nc$2$lcssa = $__nc$1; //@line 19686
   }
   HEAP8[$__nc$2$lcssa] = 0; //@line 19688
   HEAP32[$vararg_buffer >> 2] = $__v; //@line 19690
   if ((_sscanf($48 | 0, 5344, $vararg_buffer | 0) | 0) != 1) {
    $82 = ___cxa_allocate_exception(8) | 0; //@line 19694
    __ZNSt13runtime_errorC2EPKc($82, 5352); //@line 19696
    ___cxa_throw($82 | 0, 2720, 32); //@line 19697
   }
   if (($59 | 0) == 0) {
    break;
   }
   _free($59); //@line 19704
  }
 } while (0);
 $85 = $__b; //@line 19707
 $86 = HEAP32[$85 >> 2] | 0; //@line 19708
 do {
  if (($86 | 0) == 0) {
   $100 = 1; //@line 19712
  } else {
   $89 = HEAP32[$86 + 12 >> 2] | 0; //@line 19715
   if (($89 | 0) == (HEAP32[$86 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] & 127]($86) | 0; //@line 19725
   } else {
    $$0$i$i$i$i = HEAP32[$89 >> 2] | 0; //@line 19728
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$85 >> 2] = 0; //@line 19732
    $100 = 1; //@line 19733
    break;
   } else {
    $100 = (HEAP32[$85 >> 2] | 0) == 0; //@line 19738
    break;
   }
  }
 } while (0);
 $101 = HEAP32[$32 >> 2] | 0; //@line 19743
 do {
  if (($101 | 0) == 0) {
   label = 35; //@line 19747
  } else {
   $104 = HEAP32[$101 + 12 >> 2] | 0; //@line 19750
   if (($104 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] & 127]($101) | 0; //@line 19760
   } else {
    $$0$i$i1$i$i = HEAP32[$104 >> 2] | 0; //@line 19763
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$32 >> 2] = 0; //@line 19767
    label = 35; //@line 19768
    break;
   } else {
    if ($100) {
     break;
    } else {
     label = 37; //@line 19774
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 35) {
  if ($100) {
   label = 37; //@line 19782
  }
 }
 if ((label | 0) == 37) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 19788
 }
 HEAP32[$agg$result >> 2] = HEAP32[$85 >> 2]; //@line 19792
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$7 >> 2] | 0) | 0; //@line 19795
 $121 = HEAP32[$4 >> 2] | 0; //@line 19796
 HEAP32[$4 >> 2] = 0; //@line 19797
 if (($121 | 0) == 0) {
  STACKTOP = sp; //@line 19800
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($121); //@line 19804
 STACKTOP = sp; //@line 19805
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $1 = 0, $115 = 0, $15 = 0, $19 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $78 = 0, $81 = 0, $82 = 0, $95 = 0, $96 = 0, $97 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16403
 STACKTOP = STACKTOP + 16 | 0; //@line 16404
 $$byval_copy = sp; //@line 16405
 $vararg_buffer = sp + 8 | 0; //@line 16406
 $__p$i$i$i$i = STACKTOP; //@line 16408
 STACKTOP = STACKTOP + 16 | 0; //@line 16408
 $__wbuf = STACKTOP; //@line 16409
 STACKTOP = STACKTOP + 104 | 0; //@line 16409
 $__wb = STACKTOP; //@line 16410
 STACKTOP = STACKTOP + 8 | 0; //@line 16410
 $__wn = STACKTOP; //@line 16411
 STACKTOP = STACKTOP + 8 | 0; //@line 16411
 $__loc = STACKTOP; //@line 16412
 STACKTOP = STACKTOP + 8 | 0; //@line 16412
 $__neg = STACKTOP; //@line 16413
 STACKTOP = STACKTOP + 8 | 0; //@line 16413
 $1 = STACKTOP; //@line 16414
 STACKTOP = STACKTOP + 8 | 0; //@line 16414
 $__atoms = STACKTOP; //@line 16415
 STACKTOP = STACKTOP + 16 | 0; //@line 16415
 $__nbuf = STACKTOP; //@line 16416
 STACKTOP = STACKTOP + 104 | 0; //@line 16416
 $3 = $__wb; //@line 16418
 HEAP32[$3 >> 2] = $__wbuf; //@line 16419
 $4 = $__wb + 4 | 0; //@line 16420
 HEAP32[$4 >> 2] = 127; //@line 16421
 $5 = $__wbuf + 100 | 0; //@line 16422
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 16423
 $6 = $__loc; //@line 16424
 $7 = HEAP32[$6 >> 2] | 0; //@line 16425
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 16431
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 16433
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 16435
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 16436
 }
 $15 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 16439
 $19 = HEAP32[$7 + 8 >> 2] | 0; //@line 16443
 if (!((HEAP32[$7 + 12 >> 2] | 0) - $19 >> 2 >>> 0 > $15 >>> 0)) {
  $28 = ___cxa_allocate_exception(4) | 0; //@line 16450
  $29 = $28; //@line 16451
  __ZNSt8bad_castC2Ev($29); //@line 16452
  ___cxa_throw($28 | 0, 13672, 114); //@line 16453
 }
 $26 = HEAP32[$19 + ($15 << 2) >> 2] | 0; //@line 16457
 if (($26 | 0) == 0) {
  $28 = ___cxa_allocate_exception(4) | 0; //@line 16460
  $29 = $28; //@line 16461
  __ZNSt8bad_castC2Ev($29); //@line 16462
  ___cxa_throw($28 | 0, 13672, 114); //@line 16463
 }
 $30 = $26; //@line 16466
 HEAP8[$__neg] = 0; //@line 16467
 $31 = $__e; //@line 16468
 HEAP32[$1 >> 2] = HEAP32[$31 >> 2]; //@line 16471
 $35 = HEAP32[$__iob + 4 >> 2] | 0; //@line 16473
 $37 = $$byval_copy; //@line 16475
 $38 = $1; //@line 16476
 HEAP32[$37 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 16477
 $39 = __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $35, $__err, $__neg, $30, $__wb, $__wn, $5) | 0; //@line 16478
 do {
  if ($39) {
   $41 = $__atoms; //@line 16482
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 32 >> 2] & 15]($30, 5328, 5338 | 0, $41) | 0; //@line 16487
   $46 = $__nbuf; //@line 16488
   $47 = HEAP32[$__wn >> 2] | 0; //@line 16489
   $48 = HEAP32[$3 >> 2] | 0; //@line 16490
   $51 = $47 - $48 | 0; //@line 16493
   do {
    if (($51 | 0) > 98) {
     $54 = _malloc($51 + 2 | 0) | 0; //@line 16498
     if (($54 | 0) != 0) {
      $56 = $54; //@line 16501
      $__nc$0 = $54; //@line 16501
      break;
     }
     __ZSt17__throw_bad_allocv(); //@line 16504
    } else {
     $56 = 0; //@line 16507
     $__nc$0 = $46; //@line 16507
    }
   } while (0);
   if ((HEAP8[$__neg] | 0) == 0) {
    $__nc$1 = $__nc$0; //@line 16513
   } else {
    HEAP8[$__nc$0] = 45; //@line 16516
    $__nc$1 = $__nc$0 + 1 | 0; //@line 16517
   }
   if ($48 >>> 0 < $47 >>> 0) {
    $61 = $__atoms + 10 | 0; //@line 16521
    $62 = $__atoms; //@line 16522
    $__nc$211 = $__nc$1; //@line 16523
    $__w$012 = $48; //@line 16523
    while (1) {
     $63 = HEAP8[$__w$012] | 0; //@line 16525
     $$01$i = $41; //@line 16526
     while (1) {
      $67 = $$01$i + 1 | 0; //@line 16530
      if ((HEAP8[$$01$i] | 0) == $63 << 24 >> 24) {
       $$0$lcssa$i = $$01$i; //@line 16532
       break;
      }
      if (($67 | 0) == ($61 | 0)) {
       $$0$lcssa$i = $61; //@line 16537
       break;
      } else {
       $$01$i = $67; //@line 16540
      }
     }
     HEAP8[$__nc$211] = HEAP8[5328 + ($$0$lcssa$i - $62) | 0] | 0; //@line 16547
     $72 = $__w$012 + 1 | 0; //@line 16548
     $73 = $__nc$211 + 1 | 0; //@line 16549
     if ($72 >>> 0 < (HEAP32[$__wn >> 2] | 0) >>> 0) {
      $__nc$211 = $73; //@line 16553
      $__w$012 = $72; //@line 16553
     } else {
      $__nc$2$lcssa = $73; //@line 16555
      break;
     }
    }
   } else {
    $__nc$2$lcssa = $__nc$1; //@line 16560
   }
   HEAP8[$__nc$2$lcssa] = 0; //@line 16562
   HEAP32[$vararg_buffer >> 2] = $__v; //@line 16564
   if ((_sscanf($46 | 0, 5344, $vararg_buffer | 0) | 0) != 1) {
    $78 = ___cxa_allocate_exception(8) | 0; //@line 16568
    __ZNSt13runtime_errorC2EPKc($78, 5352); //@line 16570
    ___cxa_throw($78 | 0, 2720, 32); //@line 16571
   }
   if (($56 | 0) == 0) {
    break;
   }
   _free($56); //@line 16578
  }
 } while (0);
 $81 = $__b; //@line 16581
 $82 = HEAP32[$81 >> 2] | 0; //@line 16582
 do {
  if (($82 | 0) == 0) {
   $95 = 0; //@line 16586
  } else {
   if ((HEAP32[$82 + 12 >> 2] | 0) != (HEAP32[$82 + 16 >> 2] | 0)) {
    $95 = $82; //@line 16594
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] & 127]($82) | 0) == -1)) {
    $95 = $82; //@line 16604
    break;
   }
   HEAP32[$81 >> 2] = 0; //@line 16607
   $95 = 0; //@line 16608
  }
 } while (0);
 $96 = ($95 | 0) == 0; //@line 16611
 $97 = HEAP32[$31 >> 2] | 0; //@line 16612
 do {
  if (($97 | 0) == 0) {
   label = 31; //@line 16616
  } else {
   if ((HEAP32[$97 + 12 >> 2] | 0) != (HEAP32[$97 + 16 >> 2] | 0)) {
    if ($96) {
     break;
    } else {
     label = 33; //@line 16627
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 36 >> 2] & 127]($97) | 0) == -1) {
    HEAP32[$31 >> 2] = 0; //@line 16638
    label = 31; //@line 16639
    break;
   } else {
    if ($96) {
     break;
    } else {
     label = 33; //@line 16645
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if ($96) {
   label = 33; //@line 16653
  }
 }
 if ((label | 0) == 33) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 16659
 }
 HEAP32[$agg$result >> 2] = $95; //@line 16662
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$6 >> 2] | 0) | 0; //@line 16665
 $115 = HEAP32[$3 >> 2] | 0; //@line 16666
 HEAP32[$3 >> 2] = 0; //@line 16667
 if (($115 | 0) == 0) {
  STACKTOP = sp; //@line 16670
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($115); //@line 16673
 STACKTOP = sp; //@line 16674
 return;
}
function __Z27read_board_from_human_inputRNSt3__113basic_istreamIcNS_11char_traitsIcEEEE($agg$result, $is) {
 $agg$result = $agg$result | 0;
 $is = $is | 0;
 var $$0$i2$i = 0, $$0$i3$i = 0, $1 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $32 = 0, $38 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $59 = 0, $61 = 0, $66 = 0, $7 = 0, $70 = 0, $72 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $91 = 0, $93 = 0, $98 = 0, $99 = 0, $__p$0$i$i$i = 0, $board_init = 0, $card_value = 0, $i$022 = 0, $j$024 = 0, $next_color_str = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 441
 STACKTOP = STACKTOP + 56 | 0; //@line 442
 $next_color_str = sp; //@line 443
 $1 = sp + 16 | 0; //@line 444
 $board_init = sp + 32 | 0; //@line 445
 $card_value = sp + 48 | 0; //@line 446
 $this2$i$i$i = $next_color_str; //@line 447
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 448
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 448
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 448
 __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE($is, $next_color_str) | 0; //@line 449
 $2 = $is; //@line 450
 $7 = $is; //@line 455
 if ((HEAP32[$7 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5 | 0) != 0) {
  $13 = ___cxa_allocate_exception(8) | 0; //@line 463
  __ZNSt13runtime_errorC2EPKc($13, 200); //@line 465
  ___cxa_throw($13 | 0, 2720, 32); //@line 466
 }
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $18 = $1; //@line 473
  HEAP32[$18 + 0 >> 2] = HEAP32[$this2$i$i$i + 0 >> 2]; //@line 474
  HEAP32[$18 + 4 >> 2] = HEAP32[$this2$i$i$i + 4 >> 2]; //@line 474
  HEAP32[$18 + 8 >> 2] = HEAP32[$this2$i$i$i + 8 >> 2]; //@line 474
 } else {
  $20 = HEAP32[$next_color_str + 8 >> 2] | 0; //@line 477
  $22 = HEAP32[$next_color_str + 4 >> 2] | 0; //@line 479
  if ($22 >>> 0 > 4294967279) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 482
  }
  if ($22 >>> 0 < 11) {
   HEAP8[$1] = $22 << 1; //@line 490
   $__p$0$i$i$i = $1 + 1 | 0; //@line 493
  } else {
   $31 = $22 + 16 & -16; //@line 496
   $32 = __Znwj($31) | 0; //@line 497
   HEAP32[$1 + 8 >> 2] = $32; //@line 499
   HEAP32[$1 >> 2] = $31 | 1; //@line 502
   HEAP32[$1 + 4 >> 2] = $22; //@line 504
   $__p$0$i$i$i = $32; //@line 505
  }
  _memcpy($__p$0$i$i$i | 0, $20 | 0, $22 | 0) | 0; //@line 507
  HEAP8[$__p$0$i$i$i + $22 | 0] = 0; //@line 509
 }
 $38 = __Z26human_string_to_next_colorNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1) | 0; //@line 511
 if (!((HEAP8[$1] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 519
 }
 $45 = $board_init; //@line 521
 HEAP32[$45 >> 2] = 0; //@line 522
 $46 = $board_init + 4 | 0; //@line 523
 HEAP32[$46 >> 2] = 0; //@line 524
 $47 = $board_init + 8 | 0; //@line 525
 HEAP32[$47 >> 2] = 0; //@line 526
 $48 = 0; //@line 527
 $j$024 = 0; //@line 527
 L18 : while (1) {
  $49 = $48; //@line 529
  $i$022 = 0; //@line 529
  while (1) {
   __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERj($is, $card_value) | 0; //@line 531
   if ((HEAP32[$7 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5 | 0) != 0) {
    label = 16; //@line 543
    break L18;
   }
   $61 = HEAP32[$card_value >> 2] | 0; //@line 546
   do {
    if (($61 | 0) == 0) {
     $111 = $49; //@line 550
    } else {
     if (!(($61 + -1 | 0) >>> 0 < 2)) {
      if ((($61 >>> 0) % 3 | 0 | 0) != 0) {
       label = 21; //@line 558
       break L18;
      }
      $66 = ($61 >>> 0) / 3 | 0; //@line 561
      if (($66 + 2147483647 & $66 | 0) != 0) {
       label = 21; //@line 566
       break L18;
      }
     }
     $72 = HEAP32[$47 >> 2] | 0; //@line 570
     if ($49 >>> 0 < $72 >>> 0) {
      if (($49 | 0) == 0) {
       $78 = 0; //@line 575
      } else {
       HEAP32[$49 >> 2] = $61; //@line 578
       HEAP32[$49 + 4 >> 2] = $i$022; //@line 580
       HEAP32[$49 + 8 >> 2] = $j$024; //@line 582
       $78 = HEAP32[$46 >> 2] | 0; //@line 584
      }
      $79 = $78 + 12 | 0; //@line 586
      HEAP32[$46 >> 2] = $79; //@line 587
      $111 = $79; //@line 588
      break;
     }
     $80 = HEAP32[$45 >> 2] | 0; //@line 591
     $82 = $80; //@line 593
     $83 = $49 - $82 | 0; //@line 594
     $84 = ($83 | 0) / 12 | 0; //@line 595
     $85 = $84 + 1 | 0; //@line 596
     if ($85 >>> 0 > 357913941) {
      label = 27; //@line 599
      break L18;
     }
     $89 = ($72 - $82 | 0) / 12 | 0; //@line 604
     if ($89 >>> 0 < 178956970) {
      $91 = $89 << 1; //@line 607
      $93 = $91 >>> 0 < $85 >>> 0 ? $85 : $91; //@line 609
      if (($93 | 0) == 0) {
       $$0$i3$i = 0; //@line 612
       $98 = 0; //@line 612
      } else {
       $$0$i2$i = $93; //@line 614
       label = 30; //@line 615
      }
     } else {
      $$0$i2$i = 357913941; //@line 618
      label = 30; //@line 619
     }
     if ((label | 0) == 30) {
      label = 0; //@line 622
      $$0$i3$i = $$0$i2$i; //@line 626
      $98 = __Znwj($$0$i2$i * 12 | 0) | 0; //@line 626
     }
     $99 = $98 + ($84 * 12 | 0) | 0; //@line 628
     if (($99 | 0) != 0) {
      HEAP32[$99 >> 2] = $61; //@line 633
      HEAP32[$98 + ($84 * 12 | 0) + 4 >> 2] = $i$022; //@line 635
      HEAP32[$98 + ($84 * 12 | 0) + 8 >> 2] = $j$024; //@line 637
     }
     $105 = $98 + ($85 * 12 | 0) | 0; //@line 639
     $107 = $98 + (((($83 | 0) / -12 | 0) + $84 | 0) * 12 | 0) | 0; //@line 642
     $109 = $80; //@line 644
     _memcpy($107 | 0, $109 | 0, $83 | 0) | 0; //@line 645
     HEAP32[$45 >> 2] = $107; //@line 646
     HEAP32[$46 >> 2] = $105; //@line 647
     HEAP32[$47 >> 2] = $98 + ($$0$i3$i * 12 | 0); //@line 648
     if (($80 | 0) == 0) {
      $111 = $105; //@line 651
      break;
     }
     __ZdlPv($109); //@line 654
     $111 = $105; //@line 655
    }
   } while (0);
   $112 = $i$022 + 1 | 0; //@line 658
   if ($112 >>> 0 < 4) {
    $49 = $111; //@line 661
    $i$022 = $112; //@line 661
   } else {
    break;
   }
  }
  $114 = $j$024 + 1 | 0; //@line 666
  if ($114 >>> 0 < 4) {
   $48 = $111; //@line 669
   $j$024 = $114; //@line 669
  } else {
   label = 37; //@line 671
   break;
  }
 }
 if ((label | 0) == 16) {
  $59 = ___cxa_allocate_exception(8) | 0; //@line 676
  __ZNSt13runtime_errorC2EPKc($59, 216); //@line 678
  ___cxa_throw($59 | 0, 2720, 32); //@line 679
 } else if ((label | 0) == 21) {
  $70 = ___cxa_allocate_exception(8) | 0; //@line 683
  __ZNSt13runtime_errorC2EPKc($70, 960); //@line 685
  ___cxa_throw($70 | 0, 2720, 32); //@line 686
 } else if ((label | 0) == 27) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0); //@line 690
 } else if ((label | 0) == 37) {
  __ZN5BoardC2INSt3__16vectorI13CardPlacementNS1_9allocatorIS3_EEEEEERKT_9NextColor($agg$result, $board_init, $38); //@line 694
  $116 = HEAP32[$45 >> 2] | 0; //@line 695
  if (($116 | 0) != 0) {
   $118 = HEAP32[$46 >> 2] | 0; //@line 698
   if (($118 | 0) != ($116 | 0)) {
    HEAP32[$46 >> 2] = $118 + (~((($118 + -12 + (0 - $116) | 0) >>> 0) / 12 | 0) * 12 | 0); //@line 710
   }
   __ZdlPv($116); //@line 713
  }
  if ((HEAP8[$this2$i$i$i] & 1) == 0) {
   STACKTOP = sp; //@line 719
   return;
  }
  __ZdlPv(HEAP32[$next_color_str + 8 >> 2] | 0); //@line 723
  STACKTOP = sp; //@line 724
  return;
 }
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre5 = 0, $100 = 0, $104 = 0, $107 = 0, $128 = 0, $132 = 0, $133 = 0, $135 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $36 = 0, $42 = 0, $51 = 0, $53 = 0, $60 = 0, $69 = 0, $79 = 0, $81 = 0, $83 = 0, $89 = 0, $92 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8686
 HEAP32[$frm_nxt >> 2] = $frm; //@line 8687
 HEAP32[$to_nxt >> 2] = $to; //@line 8688
 $$pre5 = HEAP32[$frm_nxt >> 2] | 0; //@line 8691
 do {
  if (($mode & 4 | 0) == 0) {
   $16 = $$pre5; //@line 8694
  } else {
   if (($frm_end - $$pre5 | 0) <= 2) {
    $16 = $$pre5; //@line 8701
    break;
   }
   if (!((HEAP8[$$pre5] | 0) == -17)) {
    $16 = $$pre5; //@line 8707
    break;
   }
   if (!((HEAP8[$$pre5 + 1 | 0] | 0) == -69)) {
    $16 = $$pre5; //@line 8714
    break;
   }
   if (!((HEAP8[$$pre5 + 2 | 0] | 0) == -65)) {
    $16 = $$pre5; //@line 8721
    break;
   }
   $15 = $$pre5 + 3 | 0; //@line 8724
   HEAP32[$frm_nxt >> 2] = $15; //@line 8725
   $16 = $15; //@line 8726
  }
 } while (0);
 L8 : do {
  if ($16 >>> 0 < $frm_end >>> 0) {
   $18 = $frm_end; //@line 8732
   $19 = $to_end; //@line 8733
   $20 = $16; //@line 8735
   $21 = HEAP32[$to_nxt >> 2] | 0; //@line 8735
   L10 : while (1) {
    if (!($21 >>> 0 < $to_end >>> 0)) {
     $135 = $20; //@line 8739
     break L8;
    }
    $23 = HEAP8[$20] | 0; //@line 8742
    $24 = $23 & 255; //@line 8743
    if ($24 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2; //@line 8746
     label = 41; //@line 8747
     break;
    }
    do {
     if ($23 << 24 >> 24 > -1) {
      HEAP16[$21 >> 1] = $23 & 255; //@line 8754
      HEAP32[$frm_nxt >> 2] = $20 + 1; //@line 8756
     } else {
      if (($23 & 255) < 194) {
       $$0 = 2; //@line 8760
       label = 41; //@line 8761
       break L10;
      }
      if (($23 & 255) < 224) {
       if (($18 - $20 | 0) < 2) {
        $$0 = 1; //@line 8770
        label = 41; //@line 8771
        break L10;
       }
       $36 = HEAPU8[$20 + 1 | 0] | 0; //@line 8776
       if (($36 & 192 | 0) != 128) {
        $$0 = 2; //@line 8780
        label = 41; //@line 8781
        break L10;
       }
       $42 = $36 & 63 | $24 << 6 & 1984; //@line 8787
       if ($42 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 8790
        label = 41; //@line 8791
        break L10;
       }
       HEAP16[$21 >> 1] = $42; //@line 8795
       HEAP32[$frm_nxt >> 2] = $20 + 2; //@line 8797
       break;
      }
      if (($23 & 255) < 240) {
       if (($18 - $20 | 0) < 3) {
        $$0 = 1; //@line 8806
        label = 41; //@line 8807
        break L10;
       }
       $51 = HEAP8[$20 + 1 | 0] | 0; //@line 8811
       $53 = HEAP8[$20 + 2 | 0] | 0; //@line 8813
       if (($24 | 0) == 237) {
        if (!(($51 & -32) << 24 >> 24 == -128)) {
         $$0 = 2; //@line 8818
         label = 41; //@line 8819
         break L10;
        }
       } else if (($24 | 0) == 224) {
        if (!(($51 & -32) << 24 >> 24 == -96)) {
         $$0 = 2; //@line 8826
         label = 41; //@line 8827
         break L10;
        }
       } else {
        if (!(($51 & -64) << 24 >> 24 == -128)) {
         $$0 = 2; //@line 8834
         label = 41; //@line 8835
         break L10;
        }
       }
       $60 = $53 & 255; //@line 8839
       if (($60 & 192 | 0) != 128) {
        $$0 = 2; //@line 8843
        label = 41; //@line 8844
        break L10;
       }
       $69 = ($51 & 255) << 6 & 4032 | $24 << 12 | $60 & 63; //@line 8853
       if (($69 & 65535) >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 8857
        label = 41; //@line 8858
        break L10;
       }
       HEAP16[$21 >> 1] = $69; //@line 8862
       HEAP32[$frm_nxt >> 2] = $20 + 3; //@line 8864
       break;
      }
      if (!(($23 & 255) < 245)) {
       $$0 = 2; //@line 8869
       label = 41; //@line 8870
       break L10;
      }
      if (($18 - $20 | 0) < 4) {
       $$0 = 1; //@line 8877
       label = 41; //@line 8878
       break L10;
      }
      $79 = HEAP8[$20 + 1 | 0] | 0; //@line 8882
      $81 = HEAP8[$20 + 2 | 0] | 0; //@line 8884
      $83 = HEAP8[$20 + 3 | 0] | 0; //@line 8886
      if (($24 | 0) == 240) {
       if (!(($79 + 112 << 24 >> 24 & 255) < 48)) {
        $$0 = 2; //@line 8891
        label = 41; //@line 8892
        break L10;
       }
      } else if (($24 | 0) == 244) {
       if (!(($79 & -16) << 24 >> 24 == -128)) {
        $$0 = 2; //@line 8899
        label = 41; //@line 8900
        break L10;
       }
      } else {
       if (!(($79 & -64) << 24 >> 24 == -128)) {
        $$0 = 2; //@line 8907
        label = 41; //@line 8908
        break L10;
       }
      }
      $89 = $81 & 255; //@line 8912
      if (($89 & 192 | 0) != 128) {
       $$0 = 2; //@line 8916
       label = 41; //@line 8917
       break L10;
      }
      $92 = $83 & 255; //@line 8920
      if (($92 & 192 | 0) != 128) {
       $$0 = 2; //@line 8924
       label = 41; //@line 8925
       break L10;
      }
      if (($19 - $21 | 0) < 4) {
       $$0 = 1; //@line 8932
       label = 41; //@line 8933
       break L10;
      }
      $98 = $24 & 7; //@line 8936
      $100 = $79 & 255; //@line 8938
      $104 = $89 << 6; //@line 8942
      $107 = $92 & 63; //@line 8945
      if (($100 << 12 & 258048 | $98 << 18 | $104 & 4032 | $107) >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 8949
       label = 41; //@line 8950
       break L10;
      }
      HEAP16[$21 >> 1] = $100 << 2 & 60 | $89 >>> 4 & 3 | (($100 >>> 4 & 3 | $98 << 2) << 6) + 16320 | 55296; //@line 8967
      $128 = $21 + 2 | 0; //@line 8972
      HEAP32[$to_nxt >> 2] = $128; //@line 8973
      HEAP16[$128 >> 1] = $107 | $104 & 960 | 56320; //@line 8974
      HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4; //@line 8977
     }
    } while (0);
    $132 = (HEAP32[$to_nxt >> 2] | 0) + 2 | 0; //@line 8981
    HEAP32[$to_nxt >> 2] = $132; //@line 8982
    $133 = HEAP32[$frm_nxt >> 2] | 0; //@line 8983
    if ($133 >>> 0 < $frm_end >>> 0) {
     $20 = $133; //@line 8986
     $21 = $132; //@line 8986
    } else {
     $135 = $133; //@line 8988
     break L8;
    }
   }
   if ((label | 0) == 41) {
    STACKTOP = sp; //@line 8993
    return $$0 | 0; //@line 8993
   }
  } else {
   $135 = $16; //@line 8996
  }
 } while (0);
 $$0 = $135 >>> 0 < $frm_end >>> 0 | 0; //@line 9001
 STACKTOP = sp; //@line 9002
 return $$0 | 0; //@line 9002
}
function __ZN5Board12_shift_innerERK10PlayerMoveb($this, $pm, $mutate) {
 $this = $this | 0;
 $pm = $pm | 0;
 $mutate = $mutate | 0;
 var $$0 = 0, $$byval_copy = 0, $$ph = 0, $$ph70 = 0, $$ph71 = 0, $$ph72 = 0, $$ph73 = 0, $$ph74 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $7 = 0, $70 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $changed$0$off092 = 0, $changed$1$off0$lcssa = 0, $changed$1$off067$us = 0, $changed$2$off0$us = 0, $i$093 = 0, $j$068 = 0, $j$068$us = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3533
 STACKTOP = STACKTOP + 24 | 0; //@line 3534
 $$byval_copy = sp; //@line 3535
 $1 = sp + 8 | 0; //@line 3536
 $2 = sp + 16 | 0; //@line 3537
 $3 = HEAP32[$pm >> 2] | 0; //@line 3538
 if (($3 | 0) == 2) {
  $$ph = 2; //@line 3540
  $$ph70 = 0; //@line 3540
  $$ph71 = 0; //@line 3540
  $$ph72 = 1; //@line 3540
  $$ph73 = 1; //@line 3540
  $$ph74 = 0; //@line 3540
 } else if (($3 | 0) == 3) {
  $$ph = 0; //@line 3542
  $$ph70 = 1; //@line 3542
  $$ph71 = 1; //@line 3542
  $$ph72 = 0; //@line 3542
  $$ph73 = 0; //@line 3542
  $$ph74 = -1; //@line 3542
 } else if (($3 | 0) == 4) {
  $$ph = 0; //@line 3544
  $$ph70 = 2; //@line 3544
  $$ph71 = 1; //@line 3544
  $$ph72 = 0; //@line 3544
  $$ph73 = 0; //@line 3544
  $$ph74 = 1; //@line 3544
 } else if (($3 | 0) == 1) {
  $$ph = 1; //@line 3546
  $$ph70 = 0; //@line 3546
  $$ph71 = 0; //@line 3546
  $$ph72 = 1; //@line 3546
  $$ph73 = -1; //@line 3546
  $$ph74 = 0; //@line 3546
 } else {
  ___assert_fail(48, 56, 247, 624); //@line 3548
 }
 $4 = $2; //@line 3551
 $5 = $1; //@line 3552
 $6 = $$ph70; //@line 3553
 $7 = $$ph; //@line 3553
 $changed$0$off092 = 0; //@line 3553
 $i$093 = 0; //@line 3553
 L7 : while (1) {
  if ($mutate) {
   $8 = $6; //@line 3556
   $9 = $7; //@line 3556
   $changed$1$off067$us = $changed$0$off092; //@line 3556
   $j$068$us = 0; //@line 3556
   while (1) {
    $10 = $8 + $$ph74 | 0; //@line 3558
    $11 = $9 + $$ph73 | 0; //@line 3559
    $12 = $8 | $9; //@line 3560
    if (!($12 >>> 0 < 4)) {
     label = 21; //@line 3563
     break L7;
    }
    $15 = ($9 << 2) + $8 | 0; //@line 3567
    $16 = $this + ($15 << 2) | 0; //@line 3568
    $18 = HEAP32[$16 >> 2] | 0; //@line 3570
    do {
     if (($18 | 0) == 0) {
      $changed$2$off0$us = $changed$1$off067$us; //@line 3574
     } else {
      if ($12 >>> 0 > 3) {
       label = 24; //@line 3578
       break L7;
      }
      $20 = $10 | $11; //@line 3581
      if (!($20 >>> 0 < 4)) {
       label = 26; //@line 3584
       break L7;
      }
      $25 = $this + (($11 << 2) + $10 << 2) | 0; //@line 3590
      $26 = HEAP32[$25 >> 2] | 0; //@line 3591
      if (($18 | 0) == 1 & ($26 | 0) == 1) {
       $changed$2$off0$us = $changed$1$off067$us; //@line 3595
       break;
      }
      $28 = $26 + $18 | 0; //@line 3598
      if (!(($28 + -1 | 0) >>> 0 < 2)) {
       if ((($28 >>> 0) % 3 | 0 | 0) != 0) {
        $changed$2$off0$us = $changed$1$off067$us; //@line 3605
        break;
       }
       $32 = ($28 >>> 0) / 3 | 0; //@line 3608
       if ($28 >>> 0 < 3) {
        $changed$2$off0$us = $changed$1$off067$us; //@line 3611
        break;
       }
       if (($32 + 2147483647 & $32 | 0) != 0) {
        $changed$2$off0$us = $changed$1$off067$us; //@line 3618
        break;
       }
      }
      if ($20 >>> 0 > 3) {
       label = 32; //@line 3624
       break L7;
      }
      HEAP32[$4 >> 2] = $26; //@line 3627
      $38 = $$byval_copy; //@line 3629
      $39 = $2; //@line 3630
      HEAP32[$38 + 0 >> 2] = HEAP32[$39 + 0 >> 2]; //@line 3631
      __ZNK4Card7combineES_($1, $16, $$byval_copy); //@line 3632
      HEAP32[$25 >> 2] = HEAP32[$5 >> 2]; //@line 3635
      HEAP32[$this + ($15 << 2) >> 2] = 0; //@line 3637
      $changed$2$off0$us = 1; //@line 3638
     }
    } while (0);
    $45 = $j$068$us + 1 | 0; //@line 3643
    if ($45 >>> 0 < 4) {
     $8 = $8 + $$ph72 | 0; //@line 3646
     $9 = $9 + $$ph71 | 0; //@line 3646
     $changed$1$off067$us = $changed$2$off0$us; //@line 3646
     $j$068$us = $45; //@line 3646
    } else {
     $changed$1$off0$lcssa = $changed$2$off0$us; //@line 3648
     break;
    }
   }
  } else {
   $47 = $6; //@line 3653
   $48 = $7; //@line 3653
   $j$068 = 0; //@line 3653
   while (1) {
    $49 = $47 + $$ph74 | 0; //@line 3655
    $50 = $48 + $$ph73 | 0; //@line 3656
    $51 = $47 | $48; //@line 3657
    if (!($51 >>> 0 < 4)) {
     label = 21; //@line 3660
     break L7;
    }
    $56 = HEAP32[$this + (($48 << 2) + $47 << 2) >> 2] | 0; //@line 3666
    do {
     if (($56 | 0) != 0) {
      if ($51 >>> 0 > 3) {
       label = 24; //@line 3672
       break L7;
      }
      if (!(($49 | $50) >>> 0 < 4)) {
       label = 26; //@line 3678
       break L7;
      }
      $64 = HEAP32[$this + (($50 << 2) + $49 << 2) >> 2] | 0; //@line 3685
      if (($56 | 0) == 1 & ($64 | 0) == 1) {
       break;
      }
      $66 = $64 + $56 | 0; //@line 3691
      if (($66 + -1 | 0) >>> 0 < 2) {
       $$0 = 1; //@line 3695
       label = 35; //@line 3696
       break L7;
      }
      if ((($66 >>> 0) % 3 | 0 | 0) != 0) {
       break;
      }
      $70 = ($66 >>> 0) / 3 | 0; //@line 3704
      if ($66 >>> 0 < 3) {
       break;
      }
      if (($70 + 2147483647 & $70 | 0) == 0) {
       $$0 = 1; //@line 3713
       label = 35; //@line 3714
       break L7;
      }
     }
    } while (0);
    $77 = $j$068 + 1 | 0; //@line 3721
    if ($77 >>> 0 < 4) {
     $47 = $47 + $$ph72 | 0; //@line 3724
     $48 = $48 + $$ph71 | 0; //@line 3724
     $j$068 = $77; //@line 3724
    } else {
     $changed$1$off0$lcssa = $changed$0$off092; //@line 3726
     break;
    }
   }
  }
  $81 = $i$093 + 1 | 0; //@line 3733
  if ($81 >>> 0 < 3) {
   $6 = $6 - $$ph74 | 0; //@line 3736
   $7 = $7 - $$ph73 | 0; //@line 3736
   $changed$0$off092 = $changed$1$off0$lcssa; //@line 3736
   $i$093 = $81; //@line 3736
  } else {
   $$0 = $changed$1$off0$lcssa; //@line 3738
   label = 35; //@line 3739
   break;
  }
 }
 if ((label | 0) == 21) {
  ___assert_fail(640, 56, 198, 672); //@line 3744
 } else if ((label | 0) == 24) {
  ___assert_fail(640, 56, 198, 672); //@line 3748
 } else if ((label | 0) == 26) {
  ___assert_fail(640, 56, 198, 672); //@line 3752
 } else if ((label | 0) == 32) {
  ___assert_fail(640, 56, 198, 672); //@line 3756
 } else if ((label | 0) == 35) {
  STACKTOP = sp; //@line 3760
  return $$0 | 0; //@line 3760
 }
 return 0; //@line 3762
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $59 = 0, $60 = 0, $62 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7674
 STACKTOP = STACKTOP + 8 | 0; //@line 7675
 $save_state = sp; //@line 7676
 $tmpcast = $save_state; //@line 7677
 $tmp = STACKTOP; //@line 7678
 STACKTOP = STACKTOP + 8 | 0; //@line 7678
 $1 = ($frm | 0) == ($frm_end | 0); //@line 7679
 L1 : do {
  if ($1) {
   HEAP32[$to_nxt >> 2] = $to; //@line 7682
   HEAP32[$frm_nxt >> 2] = $frm; //@line 7683
   $76 = $frm; //@line 7684
  } else {
   $fend$052 = $frm; //@line 7686
   while (1) {
    $5 = $fend$052 + 4 | 0; //@line 7690
    if ((HEAP32[$fend$052 >> 2] | 0) == 0) {
     $fend$0$lcssa = $fend$052; //@line 7692
     break;
    }
    if (($5 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end; //@line 7697
     break;
    } else {
     $fend$052 = $5; //@line 7700
    }
   }
   HEAP32[$to_nxt >> 2] = $to; //@line 7703
   HEAP32[$frm_nxt >> 2] = $frm; //@line 7704
   if ($1 | ($to | 0) == ($to_end | 0)) {
    $76 = $frm; //@line 7708
    break;
   }
   $7 = $st; //@line 7711
   $8 = $to_end; //@line 7712
   $9 = $this + 8 | 0; //@line 7713
   $10 = $tmp; //@line 7714
   $$0148 = $frm; //@line 7715
   $$0247 = $to; //@line 7715
   $fend$149 = $fend$0$lcssa; //@line 7715
   while (1) {
    $11 = $7; //@line 7717
    $16 = HEAP32[$11 + 4 >> 2] | 0; //@line 7722
    $17 = $save_state; //@line 7723
    HEAP32[$17 >> 2] = HEAP32[$11 >> 2]; //@line 7725
    HEAP32[$17 + 4 >> 2] = $16; //@line 7728
    $28 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 7736
    $29 = _wcsnrtombs($$0247, $frm_nxt, $fend$149 - $$0148 >> 2, $8 - $$0247 | 0, $st) | 0; //@line 7737
    if (($28 | 0) != 0) {
     _uselocale($28 | 0) | 0; //@line 7740
    }
    if (($29 | 0) == -1) {
     label = 10; //@line 7743
     break;
    } else if (($29 | 0) == 0) {
     $$0 = 1; //@line 7746
     label = 33; //@line 7747
     break;
    }
    $46 = (HEAP32[$to_nxt >> 2] | 0) + $29 | 0; //@line 7751
    HEAP32[$to_nxt >> 2] = $46; //@line 7752
    if (($46 | 0) == ($to_end | 0)) {
     label = 31; //@line 7755
     break;
    }
    if (($fend$149 | 0) == ($frm_end | 0)) {
     $72 = HEAP32[$frm_nxt >> 2] | 0; //@line 7761
     $73 = $46; //@line 7761
     $fend$3 = $frm_end; //@line 7761
    } else {
     $50 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 7764
     $51 = _wcrtomb($10, 0, $st) | 0; //@line 7765
     if (($50 | 0) != 0) {
      _uselocale($50 | 0) | 0; //@line 7768
     }
     if (($51 | 0) == -1) {
      $$0 = 2; //@line 7772
      label = 33; //@line 7773
      break;
     }
     $54 = HEAP32[$to_nxt >> 2] | 0; //@line 7776
     if ($51 >>> 0 > ($8 - $54 | 0) >>> 0) {
      $$0 = 1; //@line 7781
      label = 33; //@line 7782
      break;
     }
     L22 : do {
      if (($51 | 0) != 0) {
       $59 = $54; //@line 7788
       $n$011 = $51; //@line 7788
       $p$012 = $10; //@line 7788
       while (1) {
        $60 = HEAP8[$p$012] | 0; //@line 7790
        HEAP32[$to_nxt >> 2] = $59 + 1; //@line 7792
        HEAP8[$59] = $60; //@line 7793
        $62 = $n$011 + -1 | 0; //@line 7794
        if (($62 | 0) == 0) {
         break L22;
        }
        $59 = HEAP32[$to_nxt >> 2] | 0; //@line 7801
        $p$012 = $p$012 + 1 | 0; //@line 7801
        $n$011 = $62; //@line 7801
       }
      }
     } while (0);
     $66 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0; //@line 7806
     HEAP32[$frm_nxt >> 2] = $66; //@line 7807
     L27 : do {
      if (($66 | 0) == ($frm_end | 0)) {
       $fend$2$lcssa = $frm_end; //@line 7811
      } else {
       $fend$215 = $66; //@line 7813
       while (1) {
        $71 = $fend$215 + 4 | 0; //@line 7817
        if ((HEAP32[$fend$215 >> 2] | 0) == 0) {
         $fend$2$lcssa = $fend$215; //@line 7819
         break L27;
        }
        if (($71 | 0) == ($frm_end | 0)) {
         $fend$2$lcssa = $frm_end; //@line 7824
         break;
        } else {
         $fend$215 = $71; //@line 7827
        }
       }
      }
     } while (0);
     $72 = $66; //@line 7833
     $73 = HEAP32[$to_nxt >> 2] | 0; //@line 7833
     $fend$3 = $fend$2$lcssa; //@line 7833
    }
    if (($72 | 0) == ($frm_end | 0) | ($73 | 0) == ($to_end | 0)) {
     $76 = $72; //@line 7839
     break L1;
    } else {
     $$0148 = $72; //@line 7842
     $$0247 = $73; //@line 7842
     $fend$149 = $fend$3; //@line 7842
    }
   }
   if ((label | 0) == 10) {
    HEAP32[$to_nxt >> 2] = $$0247; //@line 7846
    L35 : do {
     if (($$0148 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      $$1$lcssa = $$0148; //@line 7851
     } else {
      $$19 = $$0148; //@line 7853
      $33 = $$0247; //@line 7853
      while (1) {
       $34 = HEAP32[$$19 >> 2] | 0; //@line 7855
       $36 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 7857
       $37 = _wcrtomb($33, $34, $tmpcast) | 0; //@line 7858
       if (($36 | 0) != 0) {
        _uselocale($36 | 0) | 0; //@line 7861
       }
       if (($37 | 0) == -1) {
        $$1$lcssa = $$19; //@line 7865
        break L35;
       }
       $41 = (HEAP32[$to_nxt >> 2] | 0) + $37 | 0; //@line 7869
       HEAP32[$to_nxt >> 2] = $41; //@line 7870
       $42 = $$19 + 4 | 0; //@line 7871
       if (($42 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
        $$1$lcssa = $42; //@line 7875
        break;
       } else {
        $$19 = $42; //@line 7878
        $33 = $41; //@line 7878
       }
      }
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa; //@line 7883
    $$0 = 2; //@line 7884
    STACKTOP = sp; //@line 7885
    return $$0 | 0; //@line 7885
   } else if ((label | 0) == 31) {
    $76 = HEAP32[$frm_nxt >> 2] | 0; //@line 7889
    break;
   } else if ((label | 0) == 33) {
    STACKTOP = sp; //@line 7893
    return $$0 | 0; //@line 7893
   }
  }
 } while (0);
 $$0 = ($76 | 0) != ($frm_end | 0) | 0; //@line 7899
 STACKTOP = sp; //@line 7900
 return $$0 | 0; //@line 7900
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $116 = 0, $18 = 0, $19 = 0, $20 = 0, $31 = 0, $41 = 0, $45 = 0, $47 = 0, $60 = 0, $74 = 0, $80 = 0, $82 = 0, $84 = 0, $96 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9051
 do {
  if (($mode & 4 | 0) == 0) {
   $frm_nxt$1$ph = $frm; //@line 9056
  } else {
   if (($frm_end - $frm | 0) <= 2) {
    $frm_nxt$1$ph = $frm; //@line 9063
    break;
   }
   if (!((HEAP8[$frm] | 0) == -17)) {
    $frm_nxt$1$ph = $frm; //@line 9069
    break;
   }
   if (!((HEAP8[$frm + 1 | 0] | 0) == -69)) {
    $frm_nxt$1$ph = $frm; //@line 9076
    break;
   }
   $frm_nxt$1$ph = (HEAP8[$frm + 2 | 0] | 0) == -65 ? $frm + 3 | 0 : $frm; //@line 9084
  }
 } while (0);
 L7 : do {
  if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   $18 = $frm_end; //@line 9092
   $frm_nxt$115 = $frm_nxt$1$ph; //@line 9093
   $nchar16_t$014 = 0; //@line 9093
   L9 : while (1) {
    $19 = HEAP8[$frm_nxt$115] | 0; //@line 9095
    $20 = $19 & 255; //@line 9096
    if ($20 >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9099
     break L7;
    }
    do {
     if ($19 << 24 >> 24 > -1) {
      $frm_nxt$2 = $frm_nxt$115 + 1 | 0; //@line 9106
      $nchar16_t$1 = $nchar16_t$014; //@line 9106
     } else {
      if (($19 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9110
       break L7;
      }
      if (($19 & 255) < 224) {
       if (($18 - $frm_nxt$115 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9119
        break L7;
       }
       $31 = HEAPU8[$frm_nxt$115 + 1 | 0] | 0; //@line 9124
       if (($31 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9128
        break L7;
       }
       if (($31 & 63 | $20 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9137
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 2 | 0; //@line 9141
       $nchar16_t$1 = $nchar16_t$014; //@line 9141
       break;
      }
      if (($19 & 255) < 240) {
       $41 = $frm_nxt$115; //@line 9146
       if (($18 - $41 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9150
        break L7;
       }
       $45 = HEAP8[$frm_nxt$115 + 1 | 0] | 0; //@line 9154
       $47 = HEAP8[$frm_nxt$115 + 2 | 0] | 0; //@line 9156
       if (($20 | 0) == 224) {
        if (!(($45 & -32) << 24 >> 24 == -96)) {
         label = 21; //@line 9161
         break L9;
        }
       } else if (($20 | 0) == 237) {
        if (!(($45 & -32) << 24 >> 24 == -128)) {
         label = 23; //@line 9168
         break L9;
        }
       } else {
        if (!(($45 & -64) << 24 >> 24 == -128)) {
         label = 25; //@line 9175
         break L9;
        }
       }
       $60 = $47 & 255; //@line 9179
       if (($60 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9183
        break L7;
       }
       if ((($45 & 255) << 6 & 4032 | $20 << 12 & 61440 | $60 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9196
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 3 | 0; //@line 9200
       $nchar16_t$1 = $nchar16_t$014; //@line 9200
       break;
      }
      if (!(($19 & 255) < 245)) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9205
       break L7;
      }
      $74 = $frm_nxt$115; //@line 9208
      if (($18 - $74 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9212
       break L7;
      }
      if (($mx - $nchar16_t$014 | 0) >>> 0 < 2) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9218
       break L7;
      }
      $80 = HEAP8[$frm_nxt$115 + 1 | 0] | 0; //@line 9222
      $82 = HEAP8[$frm_nxt$115 + 2 | 0] | 0; //@line 9224
      $84 = HEAP8[$frm_nxt$115 + 3 | 0] | 0; //@line 9226
      if (($20 | 0) == 244) {
       if (!(($80 & -16) << 24 >> 24 == -128)) {
        label = 36; //@line 9231
        break L9;
       }
      } else if (($20 | 0) == 240) {
       if (!(($80 + 112 << 24 >> 24 & 255) < 48)) {
        label = 34; //@line 9238
        break L9;
       }
      } else {
       if (!(($80 & -64) << 24 >> 24 == -128)) {
        label = 38; //@line 9245
        break L9;
       }
      }
      $96 = $82 & 255; //@line 9249
      if (($96 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9253
       break L7;
      }
      $99 = $84 & 255; //@line 9256
      if (($99 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9260
       break L7;
      }
      if ((($80 & 255) << 12 & 258048 | $20 << 18 & 1835008 | $96 << 6 & 4032 | $99 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9276
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 4 | 0; //@line 9281
      $nchar16_t$1 = $nchar16_t$014 + 1 | 0; //@line 9281
     }
    } while (0);
    $116 = $nchar16_t$1 + 1 | 0; //@line 9284
    if ($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $116 >>> 0 < $mx >>> 0) {
     $frm_nxt$115 = $frm_nxt$2; //@line 9289
     $nchar16_t$014 = $116; //@line 9289
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2; //@line 9291
     break L7;
    }
   }
   if ((label | 0) == 21) {
    $$0 = $41 - $frm | 0; //@line 9298
    STACKTOP = sp; //@line 9299
    return $$0 | 0; //@line 9299
   } else if ((label | 0) == 23) {
    $$0 = $41 - $frm | 0; //@line 9304
    STACKTOP = sp; //@line 9305
    return $$0 | 0; //@line 9305
   } else if ((label | 0) == 25) {
    $$0 = $41 - $frm | 0; //@line 9310
    STACKTOP = sp; //@line 9311
    return $$0 | 0; //@line 9311
   } else if ((label | 0) == 34) {
    $$0 = $74 - $frm | 0; //@line 9316
    STACKTOP = sp; //@line 9317
    return $$0 | 0; //@line 9317
   } else if ((label | 0) == 36) {
    $$0 = $74 - $frm | 0; //@line 9322
    STACKTOP = sp; //@line 9323
    return $$0 | 0; //@line 9323
   } else if ((label | 0) == 38) {
    $$0 = $74 - $frm | 0; //@line 9328
    STACKTOP = sp; //@line 9329
    return $$0 | 0; //@line 9329
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph; //@line 9332
  }
 } while (0);
 $$0 = $frm_nxt$1$lcssa - $frm | 0; //@line 9338
 STACKTOP = sp; //@line 9339
 return $$0 | 0; //@line 9339
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre113 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $20 = 0, $27 = 0, $28 = 0, $35 = 0, $36 = 0, $41 = 0, $46 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$3 = 0, $save_state = 0, $storemerge14 = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7916
 STACKTOP = STACKTOP + 8 | 0; //@line 7917
 $save_state = sp; //@line 7918
 $tmpcast = $save_state; //@line 7919
 $1 = ($frm | 0) == ($frm_end | 0); //@line 7920
 L1 : do {
  if ($1) {
   HEAP32[$to_nxt >> 2] = $to; //@line 7923
   HEAP32[$frm_nxt >> 2] = $frm; //@line 7924
   $67 = $frm; //@line 7925
  } else {
   $fend$059 = $frm; //@line 7927
   while (1) {
    $5 = $fend$059 + 1 | 0; //@line 7931
    if ((HEAP8[$fend$059] | 0) == 0) {
     $fend$0$lcssa = $fend$059; //@line 7933
     break;
    }
    if (($5 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end; //@line 7938
     break;
    } else {
     $fend$059 = $5; //@line 7941
    }
   }
   HEAP32[$to_nxt >> 2] = $to; //@line 7944
   HEAP32[$frm_nxt >> 2] = $frm; //@line 7945
   if ($1 | ($to | 0) == ($to_end | 0)) {
    $67 = $frm; //@line 7949
    break;
   }
   $7 = $st; //@line 7952
   $8 = $to_end; //@line 7953
   $9 = $this + 8 | 0; //@line 7954
   $$0155 = $frm; //@line 7955
   $$0254 = $to; //@line 7955
   $fend$156 = $fend$0$lcssa; //@line 7955
   while (1) {
    $10 = $7; //@line 7957
    $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 7962
    $16 = $save_state; //@line 7963
    HEAP32[$16 >> 2] = HEAP32[$10 >> 2]; //@line 7965
    HEAP32[$16 + 4 >> 2] = $15; //@line 7968
    $20 = $fend$156; //@line 7969
    $27 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 7976
    $28 = _mbsnrtowcs($$0254, $frm_nxt, $20 - $$0155 | 0, $8 - $$0254 >> 2, $st) | 0; //@line 7977
    if (($27 | 0) != 0) {
     _uselocale($27 | 0) | 0; //@line 7980
    }
    if (($28 | 0) == 0) {
     $$0 = 2; //@line 7983
     label = 32; //@line 7984
     break;
    } else if (($28 | 0) == -1) {
     label = 10; //@line 7987
     break;
    }
    $46 = (HEAP32[$to_nxt >> 2] | 0) + ($28 << 2) | 0; //@line 7991
    HEAP32[$to_nxt >> 2] = $46; //@line 7992
    if (($46 | 0) == ($to_end | 0)) {
     label = 30; //@line 7995
     break;
    }
    $$pre113 = HEAP32[$frm_nxt >> 2] | 0; //@line 7999
    if (($fend$156 | 0) == ($frm_end | 0)) {
     $63 = $$pre113; //@line 8001
     $64 = $46; //@line 8001
     $fend$3 = $frm_end; //@line 8001
    } else {
     $50 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 8004
     $51 = _mbrtowc($46, $$pre113, 1, $st) | 0; //@line 8005
     if (($50 | 0) != 0) {
      _uselocale($50 | 0) | 0; //@line 8008
     }
     if (($51 | 0) != 0) {
      $$0 = 2; //@line 8012
      label = 32; //@line 8013
      break;
     }
     HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4; //@line 8018
     $57 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0; //@line 8020
     HEAP32[$frm_nxt >> 2] = $57; //@line 8021
     L21 : do {
      if (($57 | 0) == ($frm_end | 0)) {
       $fend$2$lcssa = $frm_end; //@line 8025
      } else {
       $fend$216 = $57; //@line 8027
       while (1) {
        $62 = $fend$216 + 1 | 0; //@line 8031
        if ((HEAP8[$fend$216] | 0) == 0) {
         $fend$2$lcssa = $fend$216; //@line 8033
         break L21;
        }
        if (($62 | 0) == ($frm_end | 0)) {
         $fend$2$lcssa = $frm_end; //@line 8038
         break;
        } else {
         $fend$216 = $62; //@line 8041
        }
       }
      }
     } while (0);
     $63 = $57; //@line 8047
     $64 = HEAP32[$to_nxt >> 2] | 0; //@line 8047
     $fend$3 = $fend$2$lcssa; //@line 8047
    }
    if (($63 | 0) == ($frm_end | 0) | ($64 | 0) == ($to_end | 0)) {
     $67 = $63; //@line 8053
     break L1;
    } else {
     $$0155 = $63; //@line 8056
     $$0254 = $64; //@line 8056
     $fend$156 = $fend$3; //@line 8056
    }
   }
   if ((label | 0) == 10) {
    HEAP32[$to_nxt >> 2] = $$0254; //@line 8060
    L31 : do {
     if (($$0155 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      $$1$lcssa = $$0155; //@line 8065
     } else {
      $$115 = $$0155; //@line 8067
      $storemerge14 = $$0254; //@line 8067
      while (1) {
       $35 = _uselocale(HEAP32[$9 >> 2] | 0) | 0; //@line 8072
       $36 = _mbrtowc($storemerge14, $$115, $20 - $$115 | 0, $tmpcast) | 0; //@line 8073
       if (($35 | 0) != 0) {
        _uselocale($35 | 0) | 0; //@line 8076
       }
       if (($36 | 0) == -1) {
        label = 15; //@line 8079
        break;
       } else if (($36 | 0) == -2) {
        label = 16; //@line 8082
        break;
       } else if (($36 | 0) == 0) {
        $$2 = $$115 + 1 | 0; //@line 8086
       } else {
        $$2 = $$115 + $36 | 0; //@line 8089
       }
       $41 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0; //@line 8092
       HEAP32[$to_nxt >> 2] = $41; //@line 8093
       if (($$2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
        $$1$lcssa = $$2; //@line 8097
        break L31;
       } else {
        $$115 = $$2; //@line 8100
        $storemerge14 = $41; //@line 8100
       }
      }
      if ((label | 0) == 15) {
       HEAP32[$frm_nxt >> 2] = $$115; //@line 8104
       $$0 = 2; //@line 8105
       STACKTOP = sp; //@line 8106
       return $$0 | 0; //@line 8106
      } else if ((label | 0) == 16) {
       HEAP32[$frm_nxt >> 2] = $$115; //@line 8109
       $$0 = 1; //@line 8110
       STACKTOP = sp; //@line 8111
       return $$0 | 0; //@line 8111
      }
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa; //@line 8115
    $$0 = ($$1$lcssa | 0) != ($frm_end | 0) | 0; //@line 8118
    STACKTOP = sp; //@line 8119
    return $$0 | 0; //@line 8119
   } else if ((label | 0) == 30) {
    $67 = HEAP32[$frm_nxt >> 2] | 0; //@line 8123
    break;
   } else if ((label | 0) == 32) {
    STACKTOP = sp; //@line 8127
    return $$0 | 0; //@line 8127
   }
  }
 } while (0);
 $$0 = ($67 | 0) != ($frm_end | 0) | 0; //@line 8133
 STACKTOP = sp; //@line 8134
 return $$0 | 0; //@line 8134
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $6 = 0, $63 = 0, $64 = 0, $77 = 0, $8 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3973
 STACKTOP = STACKTOP + 32 | 0; //@line 3974
 $1 = sp; //@line 3975
 $2 = sp + 8 | 0; //@line 3976
 $3 = sp + 16 | 0; //@line 3977
 $4 = sp + 24 | 0; //@line 3978
 $5 = HEAP32[_stdin >> 2] | 0; //@line 3979
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(1688, $5, 1744); //@line 3980
 HEAP32[244] = 3116; //@line 3981
 HEAP32[984 >> 2] = 3136; //@line 3982
 HEAP32[980 >> 2] = 0; //@line 3983
 __ZNSt3__18ios_base4initEPv(984 | 0, 1688); //@line 3984
 HEAP32[1056 >> 2] = 0; //@line 3985
 HEAP32[1060 >> 2] = -1; //@line 3986
 $6 = HEAP32[_stdout >> 2] | 0; //@line 3987
 HEAP32[448] = 2984; //@line 3989
 __ZNSt3__16localeC2Ev(1796 | 0); //@line 3990
 HEAP32[1800 >> 2] = 0; //@line 3991
 HEAP32[1804 >> 2] = 0; //@line 3991
 HEAP32[1808 >> 2] = 0; //@line 3991
 HEAP32[1812 >> 2] = 0; //@line 3991
 HEAP32[1816 >> 2] = 0; //@line 3991
 HEAP32[1820 >> 2] = 0; //@line 3991
 HEAP32[448] = 2304; //@line 3992
 HEAP32[1824 >> 2] = $6; //@line 3993
 __ZNSt3__16localeC2ERKS0_($4, 1796 | 0); //@line 3994
 $8 = __ZNKSt3__16locale9use_facetERNS0_2idE($4, 5776) | 0; //@line 3995
 $9 = $8; //@line 3996
 __ZNSt3__16localeD2Ev($4); //@line 3997
 HEAP32[1828 >> 2] = $9; //@line 3998
 HEAP32[1832 >> 2] = 1752; //@line 3999
 HEAP8[1836 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1; //@line 4006
 HEAP32[266] = 3196; //@line 4007
 HEAP32[1068 >> 2] = 3216; //@line 4008
 __ZNSt3__18ios_base4initEPv(1068 | 0, 1792); //@line 4009
 HEAP32[1140 >> 2] = 0; //@line 4010
 HEAP32[1144 >> 2] = -1; //@line 4011
 $16 = HEAP32[_stderr >> 2] | 0; //@line 4012
 HEAP32[460] = 2984; //@line 4014
 __ZNSt3__16localeC2Ev(1844 | 0); //@line 4015
 HEAP32[1848 >> 2] = 0; //@line 4016
 HEAP32[1852 >> 2] = 0; //@line 4016
 HEAP32[1856 >> 2] = 0; //@line 4016
 HEAP32[1860 >> 2] = 0; //@line 4016
 HEAP32[1864 >> 2] = 0; //@line 4016
 HEAP32[1868 >> 2] = 0; //@line 4016
 HEAP32[460] = 2304; //@line 4017
 HEAP32[1872 >> 2] = $16; //@line 4018
 __ZNSt3__16localeC2ERKS0_($3, 1844 | 0); //@line 4019
 $18 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 5776) | 0; //@line 4020
 $19 = $18; //@line 4021
 __ZNSt3__16localeD2Ev($3); //@line 4022
 HEAP32[1876 >> 2] = $19; //@line 4023
 HEAP32[1880 >> 2] = 1760; //@line 4024
 HEAP8[1884 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] & 127]($19) | 0) & 1; //@line 4031
 HEAP32[288] = 3196; //@line 4032
 HEAP32[1156 >> 2] = 3216; //@line 4033
 __ZNSt3__18ios_base4initEPv(1156 | 0, 1840); //@line 4034
 HEAP32[1228 >> 2] = 0; //@line 4035
 HEAP32[1232 >> 2] = -1; //@line 4036
 $32 = HEAP32[(HEAP32[(HEAP32[288] | 0) + -12 >> 2] | 0) + 1176 >> 2] | 0; //@line 4044
 HEAP32[310] = 3196; //@line 4045
 HEAP32[1244 >> 2] = 3216; //@line 4046
 __ZNSt3__18ios_base4initEPv(1244 | 0, $32); //@line 4047
 HEAP32[1316 >> 2] = 0; //@line 4048
 HEAP32[1320 >> 2] = -1; //@line 4049
 HEAP32[(HEAP32[(HEAP32[244] | 0) + -12 >> 2] | 0) + 1048 >> 2] = 1064; //@line 4057
 $44 = (HEAP32[(HEAP32[288] | 0) + -12 >> 2] | 0) + 1156 | 0; //@line 4064
 HEAP32[$44 >> 2] = HEAP32[$44 >> 2] | 8192; //@line 4067
 HEAP32[(HEAP32[(HEAP32[288] | 0) + -12 >> 2] | 0) + 1224 >> 2] = 1064; //@line 4075
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(1888, $5, 1768 | 0); //@line 4076
 HEAP32[332] = 3156; //@line 4077
 HEAP32[1336 >> 2] = 3176; //@line 4078
 HEAP32[1332 >> 2] = 0; //@line 4079
 __ZNSt3__18ios_base4initEPv(1336 | 0, 1888); //@line 4080
 HEAP32[1408 >> 2] = 0; //@line 4081
 HEAP32[1412 >> 2] = -1; //@line 4082
 HEAP32[486] = 3048; //@line 4084
 __ZNSt3__16localeC2Ev(1948 | 0); //@line 4085
 HEAP32[1952 >> 2] = 0; //@line 4086
 HEAP32[1956 >> 2] = 0; //@line 4086
 HEAP32[1960 >> 2] = 0; //@line 4086
 HEAP32[1964 >> 2] = 0; //@line 4086
 HEAP32[1968 >> 2] = 0; //@line 4086
 HEAP32[1972 >> 2] = 0; //@line 4086
 HEAP32[486] = 2048; //@line 4087
 HEAP32[1976 >> 2] = $6; //@line 4088
 __ZNSt3__16localeC2ERKS0_($2, 1948 | 0); //@line 4089
 $54 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 5784) | 0; //@line 4090
 $55 = $54; //@line 4091
 __ZNSt3__16localeD2Ev($2); //@line 4092
 HEAP32[1980 >> 2] = $55; //@line 4093
 HEAP32[1984 >> 2] = 1776; //@line 4094
 HEAP8[1988 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 28 >> 2] & 127]($55) | 0) & 1; //@line 4101
 HEAP32[354] = 3236; //@line 4102
 HEAP32[1420 >> 2] = 3256; //@line 4103
 __ZNSt3__18ios_base4initEPv(1420 | 0, 1944); //@line 4104
 HEAP32[1492 >> 2] = 0; //@line 4105
 HEAP32[1496 >> 2] = -1; //@line 4106
 HEAP32[498] = 3048; //@line 4108
 __ZNSt3__16localeC2Ev(1996 | 0); //@line 4109
 HEAP32[2e3 >> 2] = 0; //@line 4110
 HEAP32[2004 >> 2] = 0; //@line 4110
 HEAP32[2008 >> 2] = 0; //@line 4110
 HEAP32[2012 >> 2] = 0; //@line 4110
 HEAP32[2016 >> 2] = 0; //@line 4110
 HEAP32[2020 >> 2] = 0; //@line 4110
 HEAP32[498] = 2048; //@line 4111
 HEAP32[2024 >> 2] = $16; //@line 4112
 __ZNSt3__16localeC2ERKS0_($1, 1996 | 0); //@line 4113
 $63 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5784) | 0; //@line 4114
 $64 = $63; //@line 4115
 __ZNSt3__16localeD2Ev($1); //@line 4116
 HEAP32[2028 >> 2] = $64; //@line 4117
 HEAP32[2032 >> 2] = 1784; //@line 4118
 HEAP8[2036 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 28 >> 2] & 127]($64) | 0) & 1; //@line 4125
 HEAP32[376] = 3236; //@line 4126
 HEAP32[1508 >> 2] = 3256; //@line 4127
 __ZNSt3__18ios_base4initEPv(1508 | 0, 1992); //@line 4128
 HEAP32[1580 >> 2] = 0; //@line 4129
 HEAP32[1584 >> 2] = -1; //@line 4130
 $77 = HEAP32[(HEAP32[(HEAP32[376] | 0) + -12 >> 2] | 0) + 1528 >> 2] | 0; //@line 4138
 HEAP32[398] = 3236; //@line 4139
 HEAP32[1596 >> 2] = 3256; //@line 4140
 __ZNSt3__18ios_base4initEPv(1596 | 0, $77); //@line 4141
 HEAP32[1668 >> 2] = 0; //@line 4142
 HEAP32[1672 >> 2] = -1; //@line 4143
 HEAP32[(HEAP32[(HEAP32[332] | 0) + -12 >> 2] | 0) + 1400 >> 2] = 1416; //@line 4151
 $89 = (HEAP32[(HEAP32[376] | 0) + -12 >> 2] | 0) + 1508 | 0; //@line 4158
 HEAP32[$89 >> 2] = HEAP32[$89 >> 2] | 8192; //@line 4161
 HEAP32[(HEAP32[(HEAP32[376] | 0) + -12 >> 2] | 0) + 1576 >> 2] = 1416; //@line 4169
 STACKTOP = sp; //@line 4170
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $$pre14 = 0, $1 = 0, $103 = 0, $16 = 0, $20 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $83 = 0, $86 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1923
 STACKTOP = STACKTOP + 464 | 0; //@line 1924
 $$byval_copy = sp; //@line 1925
 $__p$i$i$i$i = sp + 8 | 0; //@line 1926
 $__wbuf = sp + 24 | 0; //@line 1927
 $__wb = sp + 424 | 0; //@line 1928
 $__wn = sp + 432 | 0; //@line 1929
 $__loc = sp + 440 | 0; //@line 1930
 $__neg = sp + 448 | 0; //@line 1931
 $1 = sp + 456 | 0; //@line 1932
 $4 = $__wb; //@line 1935
 HEAP32[$4 >> 2] = $__wbuf; //@line 1936
 $5 = $__wb + 4 | 0; //@line 1937
 HEAP32[$5 >> 2] = 127; //@line 1938
 $6 = $__wbuf + 400 | 0; //@line 1939
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 1940
 $7 = $__loc; //@line 1941
 $8 = HEAP32[$7 >> 2] | 0; //@line 1942
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 1948
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 1950
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 1952
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 1953
 }
 $16 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 1956
 $20 = HEAP32[$8 + 8 >> 2] | 0; //@line 1960
 if (!((HEAP32[$8 + 12 >> 2] | 0) - $20 >> 2 >>> 0 > $16 >>> 0)) {
  $29 = ___cxa_allocate_exception(4) | 0; //@line 1967
  $30 = $29; //@line 1968
  __ZNSt8bad_castC2Ev($30); //@line 1969
  ___cxa_throw($29 | 0, 13672, 114); //@line 1970
 }
 $27 = HEAP32[$20 + ($16 << 2) >> 2] | 0; //@line 1974
 if (($27 | 0) == 0) {
  $29 = ___cxa_allocate_exception(4) | 0; //@line 1977
  $30 = $29; //@line 1978
  __ZNSt8bad_castC2Ev($30); //@line 1979
  ___cxa_throw($29 | 0, 13672, 114); //@line 1980
 }
 $31 = $27; //@line 1983
 HEAP8[$__neg] = 0; //@line 1984
 $32 = $__e; //@line 1985
 $33 = HEAP32[$32 >> 2] | 0; //@line 1986
 HEAP32[$1 >> 2] = $33; //@line 1988
 $36 = HEAP32[$__iob + 4 >> 2] | 0; //@line 1990
 $38 = $$byval_copy; //@line 1992
 $39 = $1; //@line 1993
 HEAP32[$38 + 0 >> 2] = HEAP32[$39 + 0 >> 2]; //@line 1994
 $40 = __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $36, $__err, $__neg, $31, $__wb, $__wn, $6) | 0; //@line 1995
 if ($40) {
  $42 = $__v; //@line 1998
  if ((HEAP8[$42] & 1) == 0) {
   HEAP32[$__v + 4 >> 2] = 0; //@line 2004
   HEAP8[$42] = 0; //@line 2005
  } else {
   HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0; //@line 2009
   HEAP32[$__v + 4 >> 2] = 0; //@line 2011
  }
  $$pre14 = $27; //@line 2015
  if ((HEAP8[$__neg] | 0) != 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre14 >> 2] | 0) + 44 >> 2] & 31]($31, 45) | 0); //@line 2021
  }
  $59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre14 >> 2] | 0) + 44 >> 2] & 31]($31, 48) | 0; //@line 2026
  $60 = HEAP32[$4 >> 2] | 0; //@line 2027
  $61 = HEAP32[$__wn >> 2] | 0; //@line 2028
  $62 = $61 + -4 | 0; //@line 2029
  L19 : do {
   if ($60 >>> 0 < $62 >>> 0) {
    $__w$09 = $60; //@line 2033
    while (1) {
     $67 = $__w$09 + 4 | 0; //@line 2037
     if ((HEAP32[$__w$09 >> 2] | 0) != ($59 | 0)) {
      $__w$0$lcssa = $__w$09; //@line 2039
      break L19;
     }
     if ($67 >>> 0 < $62 >>> 0) {
      $__w$09 = $67; //@line 2044
     } else {
      $__w$0$lcssa = $67; //@line 2046
      break;
     }
    }
   } else {
    $__w$0$lcssa = $60; //@line 2051
   }
  } while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $61) | 0; //@line 2054
 }
 $68 = $__b; //@line 2056
 $69 = HEAP32[$68 >> 2] | 0; //@line 2057
 do {
  if (($69 | 0) == 0) {
   $83 = 1; //@line 2061
  } else {
   $72 = HEAP32[$69 + 12 >> 2] | 0; //@line 2064
   if (($72 | 0) == (HEAP32[$69 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 36 >> 2] & 127]($69) | 0; //@line 2074
   } else {
    $$0$i$i$i$i = HEAP32[$72 >> 2] | 0; //@line 2077
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$68 >> 2] = 0; //@line 2081
    $83 = 1; //@line 2082
    break;
   } else {
    $83 = (HEAP32[$68 >> 2] | 0) == 0; //@line 2087
    break;
   }
  }
 } while (0);
 do {
  if (($33 | 0) == 0) {
   label = 29; //@line 2095
  } else {
   $86 = HEAP32[$33 + 12 >> 2] | 0; //@line 2098
   if (($86 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; //@line 2108
   } else {
    $$0$i$i1$i$i = HEAP32[$86 >> 2] | 0; //@line 2111
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$32 >> 2] = 0; //@line 2115
    label = 29; //@line 2116
    break;
   } else {
    if ($83) {
     break;
    } else {
     label = 31; //@line 2122
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 29) {
  if ($83) {
   label = 31; //@line 2130
  }
 }
 if ((label | 0) == 31) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 2136
 }
 HEAP32[$agg$result >> 2] = HEAP32[$68 >> 2]; //@line 2140
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$7 >> 2] | 0) | 0; //@line 2143
 $103 = HEAP32[$4 >> 2] | 0; //@line 2144
 HEAP32[$4 >> 2] = 0; //@line 2145
 if (($103 | 0) == 0) {
  STACKTOP = sp; //@line 2148
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($103); //@line 2152
 STACKTOP = sp; //@line 2153
 return;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $18 = 0, $19 = 0, $20 = 0, $31 = 0, $41 = 0, $45 = 0, $47 = 0, $60 = 0, $74 = 0, $78 = 0, $80 = 0, $82 = 0, $94 = 0, $97 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9944
 do {
  if (($mode & 4 | 0) == 0) {
   $frm_nxt$1$ph = $frm; //@line 9949
  } else {
   if (($frm_end - $frm | 0) <= 2) {
    $frm_nxt$1$ph = $frm; //@line 9956
    break;
   }
   if (!((HEAP8[$frm] | 0) == -17)) {
    $frm_nxt$1$ph = $frm; //@line 9962
    break;
   }
   if (!((HEAP8[$frm + 1 | 0] | 0) == -69)) {
    $frm_nxt$1$ph = $frm; //@line 9969
    break;
   }
   $frm_nxt$1$ph = (HEAP8[$frm + 2 | 0] | 0) == -65 ? $frm + 3 | 0 : $frm; //@line 9977
  }
 } while (0);
 L7 : do {
  if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   $18 = $frm_end; //@line 9985
   $frm_nxt$115 = $frm_nxt$1$ph; //@line 9986
   $nchar32_t$014 = 1; //@line 9986
   L9 : while (1) {
    $19 = HEAP8[$frm_nxt$115] | 0; //@line 9988
    $20 = $19 & 255; //@line 9989
    do {
     if ($19 << 24 >> 24 > -1) {
      if ($20 >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 9995
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 1 | 0; //@line 9999
     } else {
      if (($19 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10003
       break L7;
      }
      if (($19 & 255) < 224) {
       if (($18 - $frm_nxt$115 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10012
        break L7;
       }
       $31 = HEAPU8[$frm_nxt$115 + 1 | 0] | 0; //@line 10017
       if (($31 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10021
        break L7;
       }
       if (($31 & 63 | $20 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10030
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 2 | 0; //@line 10034
       break;
      }
      if (($19 & 255) < 240) {
       $41 = $frm_nxt$115; //@line 10039
       if (($18 - $41 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10043
        break L7;
       }
       $45 = HEAP8[$frm_nxt$115 + 1 | 0] | 0; //@line 10047
       $47 = HEAP8[$frm_nxt$115 + 2 | 0] | 0; //@line 10049
       if (($20 | 0) == 237) {
        if (!(($45 & -32) << 24 >> 24 == -128)) {
         label = 23; //@line 10054
         break L9;
        }
       } else if (($20 | 0) == 224) {
        if (!(($45 & -32) << 24 >> 24 == -96)) {
         label = 21; //@line 10061
         break L9;
        }
       } else {
        if (!(($45 & -64) << 24 >> 24 == -128)) {
         label = 25; //@line 10068
         break L9;
        }
       }
       $60 = $47 & 255; //@line 10072
       if (($60 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10076
        break L7;
       }
       if ((($45 & 255) << 6 & 4032 | $20 << 12 & 61440 | $60 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10089
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 3 | 0; //@line 10093
       break;
      }
      if (!(($19 & 255) < 245)) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10098
       break L7;
      }
      $74 = $frm_nxt$115; //@line 10101
      if (($18 - $74 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10105
       break L7;
      }
      $78 = HEAP8[$frm_nxt$115 + 1 | 0] | 0; //@line 10109
      $80 = HEAP8[$frm_nxt$115 + 2 | 0] | 0; //@line 10111
      $82 = HEAP8[$frm_nxt$115 + 3 | 0] | 0; //@line 10113
      if (($20 | 0) == 240) {
       if (!(($78 + 112 << 24 >> 24 & 255) < 48)) {
        label = 33; //@line 10118
        break L9;
       }
      } else if (($20 | 0) == 244) {
       if (!(($78 & -16) << 24 >> 24 == -128)) {
        label = 35; //@line 10125
        break L9;
       }
      } else {
       if (!(($78 & -64) << 24 >> 24 == -128)) {
        label = 37; //@line 10132
        break L9;
       }
      }
      $94 = $80 & 255; //@line 10136
      if (($94 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10140
       break L7;
      }
      $97 = $82 & 255; //@line 10143
      if (($97 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10147
       break L7;
      }
      if ((($78 & 255) << 12 & 258048 | $20 << 18 & 1835008 | $94 << 6 & 4032 | $97 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115; //@line 10163
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 4 | 0; //@line 10167
     }
    } while (0);
    if (!($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $nchar32_t$014 >>> 0 < $mx >>> 0)) {
     $frm_nxt$1$lcssa = $frm_nxt$2; //@line 10174
     break L7;
    }
    $frm_nxt$115 = $frm_nxt$2; //@line 10178
    $nchar32_t$014 = $nchar32_t$014 + 1 | 0; //@line 10178
   }
   if ((label | 0) == 21) {
    $$0 = $41 - $frm | 0; //@line 10183
    STACKTOP = sp; //@line 10184
    return $$0 | 0; //@line 10184
   } else if ((label | 0) == 23) {
    $$0 = $41 - $frm | 0; //@line 10189
    STACKTOP = sp; //@line 10190
    return $$0 | 0; //@line 10190
   } else if ((label | 0) == 25) {
    $$0 = $41 - $frm | 0; //@line 10195
    STACKTOP = sp; //@line 10196
    return $$0 | 0; //@line 10196
   } else if ((label | 0) == 33) {
    $$0 = $74 - $frm | 0; //@line 10201
    STACKTOP = sp; //@line 10202
    return $$0 | 0; //@line 10202
   } else if ((label | 0) == 35) {
    $$0 = $74 - $frm | 0; //@line 10207
    STACKTOP = sp; //@line 10208
    return $$0 | 0; //@line 10208
   } else if ((label | 0) == 37) {
    $$0 = $74 - $frm | 0; //@line 10213
    STACKTOP = sp; //@line 10214
    return $$0 | 0; //@line 10214
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph; //@line 10217
  }
 } while (0);
 $$0 = $frm_nxt$1$lcssa - $frm | 0; //@line 10223
 STACKTOP = sp; //@line 10224
 return $$0 | 0; //@line 10224
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$pre14 = 0, $1 = 0, $102 = 0, $15 = 0, $19 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18660
 STACKTOP = STACKTOP + 168 | 0; //@line 18661
 $$byval_copy = sp; //@line 18662
 $__p$i$i$i$i = sp + 8 | 0; //@line 18663
 $__wbuf = sp + 24 | 0; //@line 18664
 $__wb = sp + 128 | 0; //@line 18665
 $__wn = sp + 136 | 0; //@line 18666
 $__loc = sp + 144 | 0; //@line 18667
 $__neg = sp + 152 | 0; //@line 18668
 $1 = sp + 160 | 0; //@line 18669
 $3 = $__wb; //@line 18671
 HEAP32[$3 >> 2] = $__wbuf; //@line 18672
 $4 = $__wb + 4 | 0; //@line 18673
 HEAP32[$4 >> 2] = 127; //@line 18674
 $5 = $__wbuf + 100 | 0; //@line 18675
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 18676
 $6 = $__loc; //@line 18677
 $7 = HEAP32[$6 >> 2] | 0; //@line 18678
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 18684
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 18686
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 18688
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 18689
 }
 $15 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 18692
 $19 = HEAP32[$7 + 8 >> 2] | 0; //@line 18696
 if (!((HEAP32[$7 + 12 >> 2] | 0) - $19 >> 2 >>> 0 > $15 >>> 0)) {
  $28 = ___cxa_allocate_exception(4) | 0; //@line 18703
  $29 = $28; //@line 18704
  __ZNSt8bad_castC2Ev($29); //@line 18705
  ___cxa_throw($28 | 0, 13672, 114); //@line 18706
 }
 $26 = HEAP32[$19 + ($15 << 2) >> 2] | 0; //@line 18710
 if (($26 | 0) == 0) {
  $28 = ___cxa_allocate_exception(4) | 0; //@line 18713
  $29 = $28; //@line 18714
  __ZNSt8bad_castC2Ev($29); //@line 18715
  ___cxa_throw($28 | 0, 13672, 114); //@line 18716
 }
 $30 = $26; //@line 18719
 HEAP8[$__neg] = 0; //@line 18720
 $31 = $__e; //@line 18721
 $32 = HEAP32[$31 >> 2] | 0; //@line 18722
 HEAP32[$1 >> 2] = $32; //@line 18724
 $35 = HEAP32[$__iob + 4 >> 2] | 0; //@line 18726
 $37 = $$byval_copy; //@line 18728
 $38 = $1; //@line 18729
 HEAP32[$37 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 18730
 $39 = __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $35, $__err, $__neg, $30, $__wb, $__wn, $5) | 0; //@line 18731
 if ($39) {
  $41 = $__v; //@line 18734
  if ((HEAP8[$41] & 1) == 0) {
   HEAP8[$__v + 1 | 0] = 0; //@line 18741
   HEAP8[$41] = 0; //@line 18742
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] | 0] = 0; //@line 18746
   HEAP32[$__v + 4 >> 2] = 0; //@line 18748
  }
  $$pre14 = $26; //@line 18752
  if ((HEAP8[$__neg] | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre14 >> 2] | 0) + 28 >> 2] & 31]($30, 45) | 0); //@line 18758
  }
  $59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre14 >> 2] | 0) + 28 >> 2] & 31]($30, 48) | 0; //@line 18763
  $60 = HEAP32[$3 >> 2] | 0; //@line 18764
  $61 = HEAP32[$__wn >> 2] | 0; //@line 18765
  $62 = $61 + -1 | 0; //@line 18766
  L19 : do {
   if ($60 >>> 0 < $62 >>> 0) {
    $__w$09 = $60; //@line 18770
    while (1) {
     $67 = $__w$09 + 1 | 0; //@line 18774
     if (!((HEAP8[$__w$09] | 0) == $59 << 24 >> 24)) {
      $__w$0$lcssa = $__w$09; //@line 18776
      break L19;
     }
     if ($67 >>> 0 < $62 >>> 0) {
      $__w$09 = $67; //@line 18781
     } else {
      $__w$0$lcssa = $67; //@line 18783
      break;
     }
    }
   } else {
    $__w$0$lcssa = $60; //@line 18788
   }
  } while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $61) | 0; //@line 18791
 }
 $68 = $__b; //@line 18793
 $69 = HEAP32[$68 >> 2] | 0; //@line 18794
 do {
  if (($69 | 0) == 0) {
   $82 = 0; //@line 18798
  } else {
   if ((HEAP32[$69 + 12 >> 2] | 0) != (HEAP32[$69 + 16 >> 2] | 0)) {
    $82 = $69; //@line 18806
    break;
   }
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 36 >> 2] & 127]($69) | 0) == -1)) {
    $82 = $69; //@line 18816
    break;
   }
   HEAP32[$68 >> 2] = 0; //@line 18819
   $82 = 0; //@line 18820
  }
 } while (0);
 $83 = ($82 | 0) == 0; //@line 18823
 do {
  if (($32 | 0) == 0) {
   label = 25; //@line 18827
  } else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) {
    if ($83) {
     break;
    } else {
     label = 27; //@line 18838
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0) == -1) {
    HEAP32[$31 >> 2] = 0; //@line 18849
    label = 25; //@line 18850
    break;
   } else {
    if ($83 ^ ($32 | 0) == 0) {
     break;
    } else {
     label = 27; //@line 18858
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  if ($83) {
   label = 27; //@line 18866
  }
 }
 if ((label | 0) == 27) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 18872
 }
 HEAP32[$agg$result >> 2] = $82; //@line 18875
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$6 >> 2] | 0) | 0; //@line 18878
 $102 = HEAP32[$3 >> 2] | 0; //@line 18879
 HEAP32[$3 >> 2] = 0; //@line 18880
 if (($102 | 0) == 0) {
  STACKTOP = sp; //@line 18883
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$4 >> 2] & 255]($102); //@line 18886
 STACKTOP = sp; //@line 18887
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $14 = 0, $15 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $69 = 0, $73 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, sp = 0;
 sp = STACKTOP; //@line 14708
 STACKTOP = STACKTOP + 136 | 0; //@line 14709
 $$byval_copy2 = sp; //@line 14710
 $$byval_copy1 = sp + 8 | 0; //@line 14711
 $$byval_copy = sp + 16 | 0; //@line 14712
 $__p$i$i$i$i4 = sp + 24 | 0; //@line 14713
 $__p$i$i$i$i = sp + 40 | 0; //@line 14714
 $__lv = sp + 56 | 0; //@line 14715
 $1 = sp + 64 | 0; //@line 14716
 $2 = sp + 72 | 0; //@line 14717
 $3 = sp + 80 | 0; //@line 14718
 $4 = sp + 88 | 0; //@line 14719
 $5 = sp + 96 | 0; //@line 14720
 $__names = sp + 104 | 0; //@line 14721
 $6 = sp + 128 | 0; //@line 14722
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1; //@line 14728
  $14 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0; //@line 14732
  $15 = $__b; //@line 14733
  HEAP32[$2 >> 2] = HEAP32[$15 >> 2]; //@line 14736
  HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 14740
  $22 = $$byval_copy; //@line 14742
  $23 = $2; //@line 14743
  HEAP32[$22 + 0 >> 2] = HEAP32[$23 + 0 >> 2]; //@line 14744
  $25 = $$byval_copy1; //@line 14746
  $26 = $3; //@line 14747
  HEAP32[$25 + 0 >> 2] = HEAP32[$26 + 0 >> 2]; //@line 14748
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv); //@line 14749
  $30 = HEAP32[$1 >> 2] | 0; //@line 14753
  HEAP32[$15 >> 2] = $30; //@line 14754
  $31 = HEAP32[$__lv >> 2] | 0; //@line 14755
  if (($31 | 0) == 0) {
   HEAP8[$__v] = 0; //@line 14757
  } else if (($31 | 0) == 1) {
   HEAP8[$__v] = 1; //@line 14759
  } else {
   HEAP8[$__v] = 1; //@line 14761
   HEAP32[$__err >> 2] = 4; //@line 14762
  }
  HEAP32[$agg$result >> 2] = $30; //@line 14765
  STACKTOP = sp; //@line 14766
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($4, $__iob); //@line 14768
 $33 = $4; //@line 14769
 $34 = HEAP32[$33 >> 2] | 0; //@line 14770
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 14776
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 14778
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 14780
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 14781
 }
 $42 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 14784
 $46 = HEAP32[$34 + 8 >> 2] | 0; //@line 14788
 if (!((HEAP32[$34 + 12 >> 2] | 0) - $46 >> 2 >>> 0 > $42 >>> 0)) {
  $55 = ___cxa_allocate_exception(4) | 0; //@line 14795
  $56 = $55; //@line 14796
  __ZNSt8bad_castC2Ev($56); //@line 14797
  ___cxa_throw($55 | 0, 13672, 114); //@line 14798
 }
 $53 = HEAP32[$46 + ($42 << 2) >> 2] | 0; //@line 14802
 if (($53 | 0) == 0) {
  $55 = ___cxa_allocate_exception(4) | 0; //@line 14805
  $56 = $55; //@line 14806
  __ZNSt8bad_castC2Ev($56); //@line 14807
  ___cxa_throw($55 | 0, 13672, 114); //@line 14808
 }
 $57 = $53; //@line 14811
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$33 >> 2] | 0) | 0; //@line 14814
 __ZNKSt3__18ios_base6getlocEv($5, $__iob); //@line 14815
 $60 = $5; //@line 14816
 $61 = HEAP32[$60 >> 2] | 0; //@line 14817
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i4 >> 2] = 5864; //@line 14823
  HEAP32[$__p$i$i$i$i4 + 4 >> 2] = 125; //@line 14825
  HEAP32[$__p$i$i$i$i4 + 8 >> 2] = 0; //@line 14827
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i4, 126); //@line 14828
 }
 $69 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 14831
 $73 = HEAP32[$61 + 8 >> 2] | 0; //@line 14835
 if (!((HEAP32[$61 + 12 >> 2] | 0) - $73 >> 2 >>> 0 > $69 >>> 0)) {
  $82 = ___cxa_allocate_exception(4) | 0; //@line 14842
  $83 = $82; //@line 14843
  __ZNSt8bad_castC2Ev($83); //@line 14844
  ___cxa_throw($82 | 0, 13672, 114); //@line 14845
 }
 $80 = HEAP32[$73 + ($69 << 2) >> 2] | 0; //@line 14849
 if (($80 | 0) == 0) {
  $82 = ___cxa_allocate_exception(4) | 0; //@line 14852
  $83 = $82; //@line 14853
  __ZNSt8bad_castC2Ev($83); //@line 14854
  ___cxa_throw($82 | 0, 13672, 114); //@line 14855
 }
 $84 = $80; //@line 14858
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$60 >> 2] | 0) | 0; //@line 14861
 $87 = $__names; //@line 14862
 $88 = $80; //@line 14863
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 24 >> 2] & 63]($87, $84); //@line 14867
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $84); //@line 14872
 HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 14876
 $99 = $__names + 24 | 0; //@line 14877
 $101 = $$byval_copy2; //@line 14879
 $102 = $6; //@line 14880
 HEAP32[$101 + 0 >> 2] = HEAP32[$102 + 0 >> 2]; //@line 14881
 $103 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $87, $99, $57, $__err, 1) | 0; //@line 14882
 HEAP8[$__v] = ($103 | 0) == ($87 | 0) | 0; //@line 14886
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2]; //@line 14890
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names + 12 | 0); //@line 14892
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names); //@line 14894
 STACKTOP = sp; //@line 14895
 return;
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$04$i = 0, $$04$i16 = 0, $1 = 0, $10 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $46 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $88 = 0, $89 = 0, $97 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $this2$i$i$i = 0, $this2$i$i$i8 = 0, $tmpcast$i = 0, $tmpcast$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5751
 STACKTOP = STACKTOP + 240 | 0; //@line 5752
 $__mb$i11 = sp; //@line 5753
 $__buf$i13 = sp + 8 | 0; //@line 5754
 $__bn$i14 = sp + 40 | 0; //@line 5755
 $__wn$i = sp + 48 | 0; //@line 5756
 $__mb$i = sp + 56 | 0; //@line 5757
 $__buf$i = sp + 64 | 0; //@line 5758
 $__bn$i = sp + 192 | 0; //@line 5759
 $__nn$i = sp + 200 | 0; //@line 5760
 $__ndflt = sp + 208 | 0; //@line 5761
 $1 = sp + 224 | 0; //@line 5762
 $2 = sp + 232 | 0; //@line 5763
 $this2$i$i$i = $__ndflt; //@line 5764
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 5765
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 5765
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 5765
 HEAP32[$1 + 4 >> 2] = 0; //@line 5767
 HEAP32[$1 >> 2] = 7368; //@line 5769
 $6 = HEAP8[$__dflt] | 0; //@line 5771
 if (($6 & 1) == 0) {
  $17 = $__dflt + 4 | 0; //@line 5779
  $18 = $__dflt + 4 | 0; //@line 5779
  $19 = ($6 & 255) >>> 1; //@line 5779
 } else {
  $10 = HEAP32[$__dflt + 8 >> 2] | 0; //@line 5782
  $17 = $10; //@line 5785
  $18 = $10; //@line 5785
  $19 = HEAP32[$__dflt + 4 >> 2] | 0; //@line 5785
 }
 $20 = $17 + ($19 << 2) | 0; //@line 5787
 $22 = $__buf$i13; //@line 5789
 $tmpcast$i12 = $__mb$i11; //@line 5792
 $25 = $__mb$i11; //@line 5793
 HEAP32[$25 >> 2] = 0; //@line 5795
 HEAP32[$25 + 4 >> 2] = 0; //@line 5798
 L5 : do {
  if ($18 >>> 0 < $20 >>> 0) {
   $30 = $1; //@line 5802
   $31 = $1; //@line 5803
   $32 = $__buf$i13 + 32 | 0; //@line 5804
   $$04$i16 = $18; //@line 5805
   $33 = 7368 | 0; //@line 5805
   while (1) {
    HEAP32[$__wn$i >> 2] = $$04$i16; //@line 5807
    $37 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$33 + 12 >> 2] & 15]($30, $tmpcast$i12, $$04$i16, $20, $__wn$i, $22, $32, $__bn$i14) | 0) == 2; //@line 5811
    $38 = HEAP32[$__wn$i >> 2] | 0; //@line 5812
    if ($37 | ($38 | 0) == ($$04$i16 | 0)) {
     break;
    }
    if ($22 >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0) {
     $__p$03$i20 = $22; //@line 5821
     do {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$03$i20] | 0); //@line 5824
      $__p$03$i20 = $__p$03$i20 + 1 | 0; //@line 5825
     } while ($__p$03$i20 >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0);
     $46 = HEAP32[$__wn$i >> 2] | 0; //@line 5835
    } else {
     $46 = $38; //@line 5837
    }
    if (!($46 >>> 0 < $20 >>> 0)) {
     break L5;
    }
    $$04$i16 = $46; //@line 5844
    $33 = HEAP32[$31 >> 2] | 0; //@line 5844
   }
   __ZNSt3__121__throw_runtime_errorEPKc(6592); //@line 5846
  }
 } while (0);
 if ((HEAP8[$this2$i$i$i] & 1) == 0) {
  $59 = $__ndflt + 1 | 0; //@line 5860
 } else {
  $59 = HEAP32[$__ndflt + 8 >> 2] | 0; //@line 5864
 }
 $60 = _catgets((($__c | 0) == -1 ? -1 : $__c << 1) | 0, $__set | 0, $__msgid | 0, $59 | 0) | 0; //@line 5866
 $this2$i$i$i8 = $agg$result; //@line 5867
 HEAP32[$this2$i$i$i8 + 0 >> 2] = 0; //@line 5868
 HEAP32[$this2$i$i$i8 + 4 >> 2] = 0; //@line 5868
 HEAP32[$this2$i$i$i8 + 8 >> 2] = 0; //@line 5868
 HEAP32[$2 + 4 >> 2] = 0; //@line 5870
 HEAP32[$2 >> 2] = 7472; //@line 5872
 $63 = _strlen($60 | 0) | 0; //@line 5873
 $64 = $60 + $63 | 0; //@line 5874
 $tmpcast$i = $__mb$i; //@line 5878
 $68 = $__mb$i; //@line 5879
 HEAP32[$68 >> 2] = 0; //@line 5881
 HEAP32[$68 + 4 >> 2] = 0; //@line 5884
 if (($63 | 0) <= 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt); //@line 5887
  STACKTOP = sp; //@line 5888
  return;
 }
 $74 = $2; //@line 5891
 $75 = $2; //@line 5892
 $76 = $64; //@line 5893
 $77 = $__buf$i; //@line 5894
 $78 = $__buf$i + 128 | 0; //@line 5895
 $$04$i = $60; //@line 5896
 $79 = 7472 | 0; //@line 5896
 while (1) {
  HEAP32[$__nn$i >> 2] = $$04$i; //@line 5898
  $88 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$79 + 16 >> 2] & 15]($74, $tmpcast$i, $$04$i, ($76 - $$04$i | 0) > 32 ? $$04$i + 32 | 0 : $64, $__nn$i, $77, $78, $__bn$i) | 0) == 2; //@line 5907
  $89 = HEAP32[$__nn$i >> 2] | 0; //@line 5908
  if ($88 | ($89 | 0) == ($$04$i | 0)) {
   label = 20; //@line 5912
   break;
  }
  if ($77 >>> 0 < (HEAP32[$__bn$i >> 2] | 0) >>> 0) {
   $__p$03$i = $77; //@line 5918
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$03$i >> 2] | 0); //@line 5921
    $__p$03$i = $__p$03$i + 4 | 0; //@line 5922
   } while ($__p$03$i >>> 0 < (HEAP32[$__bn$i >> 2] | 0) >>> 0);
   $97 = HEAP32[$__nn$i >> 2] | 0; //@line 5932
  } else {
   $97 = $89; //@line 5934
  }
  if (!($97 >>> 0 < $64 >>> 0)) {
   label = 25; //@line 5938
   break;
  }
  $$04$i = $97; //@line 5942
  $79 = HEAP32[$75 >> 2] | 0; //@line 5942
 }
 if ((label | 0) == 20) {
  __ZNSt3__121__throw_runtime_errorEPKc(6592); //@line 5945
 } else if ((label | 0) == 25) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt); //@line 5949
  STACKTOP = sp; //@line 5950
  return;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $14 = 0, $15 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $69 = 0, $73 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, sp = 0;
 sp = STACKTOP; //@line 9556
 STACKTOP = STACKTOP + 136 | 0; //@line 9557
 $$byval_copy2 = sp; //@line 9558
 $$byval_copy1 = sp + 8 | 0; //@line 9559
 $$byval_copy = sp + 16 | 0; //@line 9560
 $__p$i$i$i$i4 = sp + 24 | 0; //@line 9561
 $__p$i$i$i$i = sp + 40 | 0; //@line 9562
 $__lv = sp + 56 | 0; //@line 9563
 $1 = sp + 64 | 0; //@line 9564
 $2 = sp + 72 | 0; //@line 9565
 $3 = sp + 80 | 0; //@line 9566
 $4 = sp + 88 | 0; //@line 9567
 $5 = sp + 96 | 0; //@line 9568
 $__names = sp + 104 | 0; //@line 9569
 $6 = sp + 128 | 0; //@line 9570
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1; //@line 9576
  $14 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0; //@line 9580
  $15 = $__b; //@line 9581
  HEAP32[$2 >> 2] = HEAP32[$15 >> 2]; //@line 9584
  HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 9588
  $22 = $$byval_copy; //@line 9590
  $23 = $2; //@line 9591
  HEAP32[$22 + 0 >> 2] = HEAP32[$23 + 0 >> 2]; //@line 9592
  $25 = $$byval_copy1; //@line 9594
  $26 = $3; //@line 9595
  HEAP32[$25 + 0 >> 2] = HEAP32[$26 + 0 >> 2]; //@line 9596
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv); //@line 9597
  $30 = HEAP32[$1 >> 2] | 0; //@line 9601
  HEAP32[$15 >> 2] = $30; //@line 9602
  $31 = HEAP32[$__lv >> 2] | 0; //@line 9603
  if (($31 | 0) == 0) {
   HEAP8[$__v] = 0; //@line 9605
  } else if (($31 | 0) == 1) {
   HEAP8[$__v] = 1; //@line 9607
  } else {
   HEAP8[$__v] = 1; //@line 9609
   HEAP32[$__err >> 2] = 4; //@line 9610
  }
  HEAP32[$agg$result >> 2] = $30; //@line 9613
  STACKTOP = sp; //@line 9614
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($4, $__iob); //@line 9616
 $33 = $4; //@line 9617
 $34 = HEAP32[$33 >> 2] | 0; //@line 9618
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 9624
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 9626
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 9628
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 9629
 }
 $42 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 9632
 $46 = HEAP32[$34 + 8 >> 2] | 0; //@line 9636
 if (!((HEAP32[$34 + 12 >> 2] | 0) - $46 >> 2 >>> 0 > $42 >>> 0)) {
  $55 = ___cxa_allocate_exception(4) | 0; //@line 9643
  $56 = $55; //@line 9644
  __ZNSt8bad_castC2Ev($56); //@line 9645
  ___cxa_throw($55 | 0, 13672, 114); //@line 9646
 }
 $53 = HEAP32[$46 + ($42 << 2) >> 2] | 0; //@line 9650
 if (($53 | 0) == 0) {
  $55 = ___cxa_allocate_exception(4) | 0; //@line 9653
  $56 = $55; //@line 9654
  __ZNSt8bad_castC2Ev($56); //@line 9655
  ___cxa_throw($55 | 0, 13672, 114); //@line 9656
 }
 $57 = $53; //@line 9659
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$33 >> 2] | 0) | 0; //@line 9662
 __ZNKSt3__18ios_base6getlocEv($5, $__iob); //@line 9663
 $60 = $5; //@line 9664
 $61 = HEAP32[$60 >> 2] | 0; //@line 9665
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i4 >> 2] = 5856; //@line 9671
  HEAP32[$__p$i$i$i$i4 + 4 >> 2] = 125; //@line 9673
  HEAP32[$__p$i$i$i$i4 + 8 >> 2] = 0; //@line 9675
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i4, 126); //@line 9676
 }
 $69 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 9679
 $73 = HEAP32[$61 + 8 >> 2] | 0; //@line 9683
 if (!((HEAP32[$61 + 12 >> 2] | 0) - $73 >> 2 >>> 0 > $69 >>> 0)) {
  $82 = ___cxa_allocate_exception(4) | 0; //@line 9690
  $83 = $82; //@line 9691
  __ZNSt8bad_castC2Ev($83); //@line 9692
  ___cxa_throw($82 | 0, 13672, 114); //@line 9693
 }
 $80 = HEAP32[$73 + ($69 << 2) >> 2] | 0; //@line 9697
 if (($80 | 0) == 0) {
  $82 = ___cxa_allocate_exception(4) | 0; //@line 9700
  $83 = $82; //@line 9701
  __ZNSt8bad_castC2Ev($83); //@line 9702
  ___cxa_throw($82 | 0, 13672, 114); //@line 9703
 }
 $84 = $80; //@line 9706
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$60 >> 2] | 0) | 0; //@line 9709
 $87 = $__names; //@line 9710
 $88 = $80; //@line 9711
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 24 >> 2] & 63]($87, $84); //@line 9715
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $84); //@line 9720
 HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 9724
 $99 = $__names + 24 | 0; //@line 9725
 $101 = $$byval_copy2; //@line 9727
 $102 = $6; //@line 9728
 HEAP32[$101 + 0 >> 2] = HEAP32[$102 + 0 >> 2]; //@line 9729
 $103 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $87, $99, $57, $__err, 1) | 0; //@line 9730
 HEAP8[$__v] = ($103 | 0) == ($87 | 0) | 0; //@line 9734
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2]; //@line 9738
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names + 12 | 0); //@line 9740
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names); //@line 9742
 STACKTOP = sp; //@line 9743
 return;
}
function _serialize_board($board, $str, $size) {
 $board = $board | 0;
 $str = $str | 0;
 $size = $size | 0;
 var $1 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $41 = 0, $42 = 0, $51 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $71 = 0, $73 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $ret_string = 0, $serialized = 0, $this2$i$i$i$i$i$i = 0, $x$07 = 0, $y$08 = 0, sp = 0;
 sp = STACKTOP; //@line 1118
 STACKTOP = STACKTOP + 184 | 0; //@line 1119
 $1 = sp; //@line 1120
 $serialized = sp + 16 | 0; //@line 1121
 $2 = sp + 152 | 0; //@line 1122
 $ret_string = sp + 168 | 0; //@line 1123
 $3 = $board; //@line 1124
 $6 = $serialized; //@line 1127
 $7 = $serialized + 4 | 0; //@line 1128
 HEAP32[$6 >> 2] = 420; //@line 1129
 $8 = $serialized + 56 | 0; //@line 1130
 HEAP32[$8 >> 2] = 440; //@line 1131
 $9 = $serialized + 56 | 0; //@line 1132
 __ZNSt3__18ios_base4initEPv($9, $7); //@line 1134
 HEAP32[$serialized + 128 >> 2] = 0; //@line 1137
 HEAP32[$serialized + 132 >> 2] = -1; //@line 1139
 HEAP32[$6 >> 2] = 292; //@line 1140
 HEAP32[$serialized + 56 >> 2] = 312; //@line 1141
 $14 = $1; //@line 1142
 $15 = $7; //@line 1143
 HEAP32[$15 >> 2] = 2984; //@line 1144
 $16 = $serialized + 8 | 0; //@line 1145
 __ZNSt3__16localeC2Ev($16); //@line 1146
 $18 = $serialized + 12 | 0; //@line 1148
 HEAP32[$18 + 0 >> 2] = 0; //@line 1149
 HEAP32[$18 + 4 >> 2] = 0; //@line 1149
 HEAP32[$18 + 8 >> 2] = 0; //@line 1149
 HEAP32[$18 + 12 >> 2] = 0; //@line 1149
 HEAP32[$18 + 16 >> 2] = 0; //@line 1149
 HEAP32[$18 + 20 >> 2] = 0; //@line 1149
 HEAP32[$15 >> 2] = 456; //@line 1150
 $this2$i$i$i$i$i$i = $serialized + 36 | 0; //@line 1152
 $20 = $serialized + 52 | 0; //@line 1153
 HEAP32[$this2$i$i$i$i$i$i + 0 >> 2] = 0; //@line 1154
 HEAP32[$this2$i$i$i$i$i$i + 4 >> 2] = 0; //@line 1154
 HEAP32[$this2$i$i$i$i$i$i + 8 >> 2] = 0; //@line 1154
 HEAP32[$this2$i$i$i$i$i$i + 12 >> 2] = 0; //@line 1154
 HEAP32[$20 >> 2] = 16; //@line 1155
 HEAP32[$14 + 0 >> 2] = 0; //@line 1156
 HEAP32[$14 + 4 >> 2] = 0; //@line 1156
 HEAP32[$14 + 8 >> 2] = 0; //@line 1156
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($7, $1); //@line 1157
 if (!((HEAP8[$14] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 1164
 }
 $26 = $serialized; //@line 1166
 $29 = HEAP32[$board + 64 >> 2] | 0; //@line 1169
 if (($29 | 0) == 1) {
  HEAP8[$2] = 8; //@line 1172
  $31 = $2; //@line 1173
  $33 = $31 + 1 | 0; //@line 1175
  HEAP8[$33] = 1702194274; //@line 1176
  HEAP8[$33 + 1 | 0] = 6649196; //@line 1176
  HEAP8[$33 + 2 | 0] = 25973; //@line 1176
  HEAP8[$33 + 3 | 0] = 101; //@line 1176
  HEAP8[$31 + 5 | 0] = 0; //@line 1178
 } else if (($29 | 0) == 0) {
  HEAP8[$2] = 6; //@line 1181
  $37 = $2 + 1 | 0; //@line 1183
  HEAP8[$37 + 0 | 0] = HEAP8[16 | 0] | 0; //@line 1184
  HEAP8[$37 + 1 | 0] = HEAP8[17 | 0] | 0; //@line 1184
  HEAP8[$37 + 2 | 0] = HEAP8[18 | 0] | 0; //@line 1184
  HEAP8[$2 + 4 | 0] = 0; //@line 1187
 } else if (($29 | 0) == 2) {
  HEAP8[$2] = 10; //@line 1190
  $41 = $2; //@line 1191
  $42 = $41 + 1 | 0; //@line 1192
  HEAP8[$42 + 0 | 0] = HEAP8[24 | 0] | 0; //@line 1193
  HEAP8[$42 + 1 | 0] = HEAP8[25 | 0] | 0; //@line 1193
  HEAP8[$42 + 2 | 0] = HEAP8[26 | 0] | 0; //@line 1193
  HEAP8[$42 + 3 | 0] = HEAP8[27 | 0] | 0; //@line 1193
  HEAP8[$42 + 4 | 0] = HEAP8[28 | 0] | 0; //@line 1193
  HEAP8[$41 + 6 | 0] = 0; //@line 1195
 } else {
  ___assert_fail(48, 56, 175, 80); //@line 1197
 }
 __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($26, $2) | 0, 232) | 0; //@line 1201
 if ((HEAP8[$2] & 1) == 0) {
  $y$08 = 0; //@line 1207
 } else {
  __ZdlPv(HEAP32[$2 + 8 >> 2] | 0); //@line 1211
  $y$08 = 0; //@line 1212
 }
 do {
  $51 = $y$08 << 2; //@line 1215
  $x$07 = 0; //@line 1216
  do {
   __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($26, HEAP32[$3 + ($x$07 + $51 << 2) >> 2] | 0) | 0, 232) | 0; //@line 1222
   $x$07 = $x$07 + 1 | 0; //@line 1223
  } while ($x$07 >>> 0 < 4);
  $y$08 = $y$08 + 1 | 0; //@line 1231
 } while ($y$08 >>> 0 < 4);
 __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($ret_string, $7); //@line 1239
 $61 = HEAP8[$ret_string] | 0; //@line 1241
 if (($61 & 1) == 0) {
  $65 = ($61 & 255) >>> 1; //@line 1246
  $67 = $65 >>> 0 < $size >>> 0 ? $65 : $size; //@line 1248
  _memmove($str | 0, $ret_string + 1 | 0, $67 | 0) | 0; //@line 1251
  $78 = $67; //@line 1252
 } else {
  $71 = HEAP32[$ret_string + 4 >> 2] | 0; //@line 1255
  $73 = $71 >>> 0 < $size >>> 0 ? $71 : $size; //@line 1257
  _memmove($str | 0, HEAP32[$ret_string + 8 >> 2] | 0, $73 | 0) | 0; //@line 1260
  __ZdlPv(HEAP32[$ret_string + 8 >> 2] | 0); //@line 1263
  $78 = $73; //@line 1264
 }
 HEAP32[$6 >> 2] = 292; //@line 1266
 HEAP32[$8 >> 2] = 312; //@line 1267
 $79 = $serialized + 4 | 0; //@line 1268
 HEAP32[$79 >> 2] = 456; //@line 1269
 if ((HEAP8[$this2$i$i$i$i$i$i] & 1) == 0) {
  HEAP32[$79 >> 2] = 2984; //@line 1274
  __ZNSt3__16localeD2Ev($16); //@line 1275
  __ZNSt3__18ios_baseD2Ev($9); //@line 1276
  STACKTOP = sp; //@line 1277
  return $78 | 0; //@line 1277
 }
 __ZdlPv(HEAP32[$serialized + 44 >> 2] | 0); //@line 1281
 HEAP32[$79 >> 2] = 2984; //@line 1282
 __ZNSt3__16localeD2Ev($16); //@line 1283
 __ZNSt3__18ios_baseD2Ev($9); //@line 1284
 STACKTOP = sp; //@line 1285
 return $78 | 0; //@line 1285
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $10 = 0, $106 = 0, $111 = 0, $114 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $39 = 0, $42 = 0, $54 = 0, $59 = 0, $65 = 0, $67 = 0, $74 = 0, $8 = 0, $84 = 0, $88 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8373
 HEAP32[$frm_nxt >> 2] = $frm; //@line 8374
 HEAP32[$to_nxt >> 2] = $to; //@line 8375
 do {
  if (($mode & 2 | 0) != 0) {
   if (($to_end - $to | 0) < 3) {
    $$0 = 1; //@line 8385
    STACKTOP = sp; //@line 8386
    return $$0 | 0; //@line 8386
   } else {
    HEAP32[$to_nxt >> 2] = $to + 1; //@line 8389
    HEAP8[$to] = -17; //@line 8390
    $8 = HEAP32[$to_nxt >> 2] | 0; //@line 8391
    HEAP32[$to_nxt >> 2] = $8 + 1; //@line 8393
    HEAP8[$8] = -69; //@line 8394
    $10 = HEAP32[$to_nxt >> 2] | 0; //@line 8395
    HEAP32[$to_nxt >> 2] = $10 + 1; //@line 8397
    HEAP8[$10] = -65; //@line 8398
    break;
   }
  }
 } while (0);
 $12 = $frm_end; //@line 8403
 $13 = HEAP32[$frm_nxt >> 2] | 0; //@line 8404
 if (!($13 >>> 0 < $frm_end >>> 0)) {
  $$0 = 0; //@line 8407
  STACKTOP = sp; //@line 8408
  return $$0 | 0; //@line 8408
 }
 $15 = $to_end; //@line 8410
 $16 = $13; //@line 8411
 L10 : while (1) {
  $17 = HEAP16[$16 >> 1] | 0; //@line 8413
  $18 = $17 & 65535; //@line 8414
  if ($18 >>> 0 > $Maxcode >>> 0) {
   $$0 = 2; //@line 8417
   label = 26; //@line 8418
   break;
  }
  do {
   if (($17 & 65535) < 128) {
    $21 = HEAP32[$to_nxt >> 2] | 0; //@line 8424
    if (($15 - $21 | 0) < 1) {
     $$0 = 1; //@line 8429
     label = 26; //@line 8430
     break L10;
    }
    HEAP32[$to_nxt >> 2] = $21 + 1; //@line 8435
    HEAP8[$21] = $17; //@line 8436
   } else {
    if (($17 & 65535) < 2048) {
     $28 = HEAP32[$to_nxt >> 2] | 0; //@line 8440
     if (($15 - $28 | 0) < 2) {
      $$0 = 1; //@line 8445
      label = 26; //@line 8446
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $28 + 1; //@line 8453
     HEAP8[$28] = $18 >>> 6 | 192; //@line 8454
     $39 = HEAP32[$to_nxt >> 2] | 0; //@line 8458
     HEAP32[$to_nxt >> 2] = $39 + 1; //@line 8460
     HEAP8[$39] = $18 & 63 | 128; //@line 8461
     break;
    }
    if (($17 & 65535) < 55296) {
     $42 = HEAP32[$to_nxt >> 2] | 0; //@line 8466
     if (($15 - $42 | 0) < 3) {
      $$0 = 1; //@line 8471
      label = 26; //@line 8472
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $42 + 1; //@line 8479
     HEAP8[$42] = $18 >>> 12 | 224; //@line 8480
     $54 = HEAP32[$to_nxt >> 2] | 0; //@line 8485
     HEAP32[$to_nxt >> 2] = $54 + 1; //@line 8487
     HEAP8[$54] = $18 >>> 6 & 63 | 128; //@line 8488
     $59 = HEAP32[$to_nxt >> 2] | 0; //@line 8492
     HEAP32[$to_nxt >> 2] = $59 + 1; //@line 8494
     HEAP8[$59] = $18 & 63 | 128; //@line 8495
     break;
    }
    if (!(($17 & 65535) < 56320)) {
     if (($17 & 65535) < 57344) {
      $$0 = 2; //@line 8502
      label = 26; //@line 8503
      break L10;
     }
     $114 = HEAP32[$to_nxt >> 2] | 0; //@line 8506
     if (($15 - $114 | 0) < 3) {
      $$0 = 1; //@line 8511
      label = 26; //@line 8512
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $114 + 1; //@line 8519
     HEAP8[$114] = $18 >>> 12 | 224; //@line 8520
     $126 = HEAP32[$to_nxt >> 2] | 0; //@line 8525
     HEAP32[$to_nxt >> 2] = $126 + 1; //@line 8527
     HEAP8[$126] = $18 >>> 6 & 63 | 128; //@line 8528
     $131 = HEAP32[$to_nxt >> 2] | 0; //@line 8532
     HEAP32[$to_nxt >> 2] = $131 + 1; //@line 8534
     HEAP8[$131] = $18 & 63 | 128; //@line 8535
     break;
    }
    if (($12 - $16 | 0) < 4) {
     $$0 = 1; //@line 8542
     label = 26; //@line 8543
     break L10;
    }
    $65 = $16 + 2 | 0; //@line 8546
    $67 = HEAPU16[$65 >> 1] | 0; //@line 8548
    if (($67 & 64512 | 0) != 56320) {
     $$0 = 2; //@line 8552
     label = 26; //@line 8553
     break L10;
    }
    if (($15 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $$0 = 1; //@line 8561
     label = 26; //@line 8562
     break L10;
    }
    $74 = $18 & 960; //@line 8565
    if ((($74 << 10) + 65536 | $18 << 10 & 64512 | $67 & 1023) >>> 0 > $Maxcode >>> 0) {
     $$0 = 2; //@line 8575
     label = 26; //@line 8576
     break L10;
    }
    HEAP32[$frm_nxt >> 2] = $65; //@line 8579
    $84 = ($74 >>> 6) + 1 | 0; //@line 8581
    $88 = HEAP32[$to_nxt >> 2] | 0; //@line 8585
    HEAP32[$to_nxt >> 2] = $88 + 1; //@line 8587
    HEAP8[$88] = $84 >>> 2 | 240; //@line 8588
    $97 = HEAP32[$to_nxt >> 2] | 0; //@line 8596
    HEAP32[$to_nxt >> 2] = $97 + 1; //@line 8598
    HEAP8[$97] = $18 >>> 2 & 15 | $84 << 4 & 48 | 128; //@line 8599
    $106 = HEAP32[$to_nxt >> 2] | 0; //@line 8607
    HEAP32[$to_nxt >> 2] = $106 + 1; //@line 8609
    HEAP8[$106] = $18 << 4 & 48 | $67 >>> 6 & 15 | 128; //@line 8610
    $111 = HEAP32[$to_nxt >> 2] | 0; //@line 8614
    HEAP32[$to_nxt >> 2] = $111 + 1; //@line 8616
    HEAP8[$111] = $67 & 63 | 128; //@line 8617
   }
  } while (0);
  $134 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0; //@line 8621
  HEAP32[$frm_nxt >> 2] = $134; //@line 8622
  if ($134 >>> 0 < $frm_end >>> 0) {
   $16 = $134; //@line 8625
  } else {
   $$0 = 0; //@line 8627
   label = 26; //@line 8628
   break;
  }
 }
 if ((label | 0) == 26) {
  STACKTOP = sp; //@line 8633
  return $$0 | 0; //@line 8633
 }
 return 0; //@line 8635
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre5 = 0, $101 = 0, $105 = 0, $106 = 0, $108 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $34 = 0, $40 = 0, $48 = 0, $50 = 0, $57 = 0, $67 = 0, $75 = 0, $77 = 0, $79 = 0, $85 = 0, $88 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9630
 HEAP32[$frm_nxt >> 2] = $frm; //@line 9631
 HEAP32[$to_nxt >> 2] = $to; //@line 9632
 $$pre5 = HEAP32[$frm_nxt >> 2] | 0; //@line 9635
 do {
  if (($mode & 4 | 0) == 0) {
   $16 = $$pre5; //@line 9638
  } else {
   if (($frm_end - $$pre5 | 0) <= 2) {
    $16 = $$pre5; //@line 9645
    break;
   }
   if (!((HEAP8[$$pre5] | 0) == -17)) {
    $16 = $$pre5; //@line 9651
    break;
   }
   if (!((HEAP8[$$pre5 + 1 | 0] | 0) == -69)) {
    $16 = $$pre5; //@line 9658
    break;
   }
   if (!((HEAP8[$$pre5 + 2 | 0] | 0) == -65)) {
    $16 = $$pre5; //@line 9665
    break;
   }
   $15 = $$pre5 + 3 | 0; //@line 9668
   HEAP32[$frm_nxt >> 2] = $15; //@line 9669
   $16 = $15; //@line 9670
  }
 } while (0);
 L8 : do {
  if ($16 >>> 0 < $frm_end >>> 0) {
   $18 = $frm_end; //@line 9676
   $19 = $16; //@line 9678
   $20 = HEAP32[$to_nxt >> 2] | 0; //@line 9678
   while (1) {
    if (!($20 >>> 0 < $to_end >>> 0)) {
     $108 = $19; //@line 9682
     label = 39; //@line 9683
     break L8;
    }
    $22 = HEAP8[$19] | 0; //@line 9686
    $23 = $22 & 255; //@line 9687
    do {
     if ($22 << 24 >> 24 > -1) {
      if ($23 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 9693
       break L8;
      }
      HEAP32[$20 >> 2] = $23; //@line 9696
      HEAP32[$frm_nxt >> 2] = $19 + 1; //@line 9698
     } else {
      if (($22 & 255) < 194) {
       $$0 = 2; //@line 9702
       break L8;
      }
      if (($22 & 255) < 224) {
       if (($18 - $19 | 0) < 2) {
        $$0 = 1; //@line 9711
        break L8;
       }
       $34 = HEAPU8[$19 + 1 | 0] | 0; //@line 9716
       if (($34 & 192 | 0) != 128) {
        $$0 = 2; //@line 9720
        break L8;
       }
       $40 = $34 & 63 | $23 << 6 & 1984; //@line 9726
       if ($40 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 9729
        break L8;
       }
       HEAP32[$20 >> 2] = $40; //@line 9732
       HEAP32[$frm_nxt >> 2] = $19 + 2; //@line 9734
       break;
      }
      if (($22 & 255) < 240) {
       if (($18 - $19 | 0) < 3) {
        $$0 = 1; //@line 9743
        break L8;
       }
       $48 = HEAP8[$19 + 1 | 0] | 0; //@line 9747
       $50 = HEAP8[$19 + 2 | 0] | 0; //@line 9749
       if (($23 | 0) == 237) {
        if (!(($48 & -32) << 24 >> 24 == -128)) {
         $$0 = 2; //@line 9754
         break L8;
        }
       } else if (($23 | 0) == 224) {
        if (!(($48 & -32) << 24 >> 24 == -96)) {
         $$0 = 2; //@line 9761
         break L8;
        }
       } else {
        if (!(($48 & -64) << 24 >> 24 == -128)) {
         $$0 = 2; //@line 9768
         break L8;
        }
       }
       $57 = $50 & 255; //@line 9772
       if (($57 & 192 | 0) != 128) {
        $$0 = 2; //@line 9776
        break L8;
       }
       $67 = ($48 & 255) << 6 & 4032 | $23 << 12 & 61440 | $57 & 63; //@line 9786
       if ($67 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 9789
        break L8;
       }
       HEAP32[$20 >> 2] = $67; //@line 9792
       HEAP32[$frm_nxt >> 2] = $19 + 3; //@line 9794
       break;
      }
      if (!(($22 & 255) < 245)) {
       $$0 = 2; //@line 9799
       break L8;
      }
      if (($18 - $19 | 0) < 4) {
       $$0 = 1; //@line 9806
       break L8;
      }
      $75 = HEAP8[$19 + 1 | 0] | 0; //@line 9810
      $77 = HEAP8[$19 + 2 | 0] | 0; //@line 9812
      $79 = HEAP8[$19 + 3 | 0] | 0; //@line 9814
      if (($23 | 0) == 244) {
       if (!(($75 & -16) << 24 >> 24 == -128)) {
        $$0 = 2; //@line 9819
        break L8;
       }
      } else if (($23 | 0) == 240) {
       if (!(($75 + 112 << 24 >> 24 & 255) < 48)) {
        $$0 = 2; //@line 9826
        break L8;
       }
      } else {
       if (!(($75 & -64) << 24 >> 24 == -128)) {
        $$0 = 2; //@line 9833
        break L8;
       }
      }
      $85 = $77 & 255; //@line 9837
      if (($85 & 192 | 0) != 128) {
       $$0 = 2; //@line 9841
       break L8;
      }
      $88 = $79 & 255; //@line 9844
      if (($88 & 192 | 0) != 128) {
       $$0 = 2; //@line 9848
       break L8;
      }
      $101 = ($75 & 255) << 12 & 258048 | $23 << 18 & 1835008 | $85 << 6 & 4032 | $88 & 63; //@line 9861
      if ($101 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 9864
       break L8;
      }
      HEAP32[$20 >> 2] = $101; //@line 9867
      HEAP32[$frm_nxt >> 2] = $19 + 4; //@line 9869
     }
    } while (0);
    $105 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0; //@line 9873
    HEAP32[$to_nxt >> 2] = $105; //@line 9874
    $106 = HEAP32[$frm_nxt >> 2] | 0; //@line 9875
    if ($106 >>> 0 < $frm_end >>> 0) {
     $19 = $106; //@line 9878
     $20 = $105; //@line 9878
    } else {
     $108 = $106; //@line 9880
     label = 39; //@line 9881
     break;
    }
   }
  } else {
   $108 = $16; //@line 9886
   label = 39; //@line 9887
  }
 } while (0);
 if ((label | 0) == 39) {
  $$0 = $108 >>> 0 < $frm_end >>> 0 | 0; //@line 9893
 }
 STACKTOP = sp; //@line 9895
 return $$0 | 0; //@line 9895
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $1, $2, $__way, $__wch) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $__way = $__way | 0;
 $__wch = $__wch | 0;
 var $$pre = 0, $103 = 0, $108 = 0, $11 = 0, $120 = 0, $125 = 0, $133 = 0, $138 = 0, $154 = 0, $159 = 0, $16 = 0, $21 = 0, $26 = 0, $3 = 0, $38 = 0, $4 = 0, $45 = 0, $48 = 0, $5 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $94 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2674
 $3 = $this + 44 | 0; //@line 2675
 $4 = HEAP32[$3 >> 2] | 0; //@line 2676
 $5 = $this + 24 | 0; //@line 2677
 $6 = HEAP32[$5 >> 2] | 0; //@line 2678
 if ($4 >>> 0 < $6 >>> 0) {
  HEAP32[$3 >> 2] = $6; //@line 2681
  $8 = $6; //@line 2682
 } else {
  $8 = $4; //@line 2684
 }
 $9 = $__wch & 24; //@line 2686
 do {
  if (($9 | 0) == 0) {
   $11 = $agg$result; //@line 2690
   HEAP32[$11 >> 2] = 0; //@line 2692
   HEAP32[$11 + 4 >> 2] = 0; //@line 2695
   $16 = $agg$result + 8 | 0; //@line 2697
   HEAP32[$16 >> 2] = -1; //@line 2699
   HEAP32[$16 + 4 >> 2] = -1; //@line 2702
   STACKTOP = sp; //@line 2703
   return;
  } else if (($9 | 0) == 24) {
   if (($__way | 0) == 2) {
    label = 11; //@line 2706
    break;
   } else if (($__way | 0) == 0) {
    $73 = 0; //@line 2709
    $74 = 0; //@line 2709
    break;
   } else if (($__way | 0) != 1) {
    label = 15; //@line 2712
    break;
   }
   $21 = $agg$result; //@line 2716
   HEAP32[$21 >> 2] = 0; //@line 2718
   HEAP32[$21 + 4 >> 2] = 0; //@line 2721
   $26 = $agg$result + 8 | 0; //@line 2723
   HEAP32[$26 >> 2] = -1; //@line 2725
   HEAP32[$26 + 4 >> 2] = -1; //@line 2728
   STACKTOP = sp; //@line 2729
   return;
  } else {
   if (($__way | 0) == 2) {
    label = 11; //@line 2732
    break;
   } else if (($__way | 0) == 0) {
    $73 = 0; //@line 2735
    $74 = 0; //@line 2735
    break;
   } else if (($__way | 0) != 1) {
    label = 15; //@line 2738
    break;
   }
   if (($__wch & 8 | 0) == 0) {
    $45 = $6 - (HEAP32[$this + 20 >> 2] | 0) | 0; //@line 2748
    $73 = $45; //@line 2751
    $74 = (($45 | 0) < 0) << 31 >> 31; //@line 2751
    break;
   } else {
    $38 = (HEAP32[$this + 12 >> 2] | 0) - (HEAP32[$this + 8 >> 2] | 0) | 0; //@line 2760
    $73 = $38; //@line 2763
    $74 = (($38 | 0) < 0) << 31 >> 31; //@line 2763
    break;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  $64 = $agg$result; //@line 2770
  HEAP32[$64 >> 2] = 0; //@line 2772
  HEAP32[$64 + 4 >> 2] = 0; //@line 2775
  $69 = $agg$result + 8 | 0; //@line 2777
  HEAP32[$69 >> 2] = -1; //@line 2779
  HEAP32[$69 + 4 >> 2] = -1; //@line 2782
  STACKTOP = sp; //@line 2783
  return;
 }
 if ((label | 0) == 11) {
  $48 = $this + 32 | 0; //@line 2786
  if ((HEAP8[$48] & 1) == 0) {
   $57 = $48 + 1 | 0; //@line 2794
  } else {
   $57 = HEAP32[$this + 40 >> 2] | 0; //@line 2798
  }
  $60 = $8 - $57 | 0; //@line 2802
  $73 = $60; //@line 2805
  $74 = (($60 | 0) < 0) << 31 >> 31; //@line 2805
 }
 $75 = _i64Add($73 | 0, $74 | 0, $1 | 0, $2 | 0) | 0; //@line 2807
 $76 = tempRet0; //@line 2808
 do {
  if (!(($76 | 0) < 0 | ($76 | 0) == 0 & $75 >>> 0 < 0)) {
   $82 = $this + 32 | 0; //@line 2816
   if ((HEAP8[$82] & 1) == 0) {
    $91 = $82 + 1 | 0; //@line 2824
   } else {
    $91 = HEAP32[$this + 40 >> 2] | 0; //@line 2828
   }
   $94 = $8 - $91 | 0; //@line 2832
   $96 = (($94 | 0) < 0) << 31 >> 31; //@line 2834
   if (($96 | 0) < ($76 | 0) | ($96 | 0) == ($76 | 0) & $94 >>> 0 < $75 >>> 0) {
    break;
   }
   $$pre = $__wch & 8; //@line 2846
   do {
    if (!(($75 | 0) == 0 & ($76 | 0) == 0)) {
     do {
      if (($$pre | 0) != 0) {
       if ((HEAP32[$this + 12 >> 2] | 0) != 0) {
        break;
       }
       $120 = $agg$result; //@line 2859
       HEAP32[$120 >> 2] = 0; //@line 2861
       HEAP32[$120 + 4 >> 2] = 0; //@line 2864
       $125 = $agg$result + 8 | 0; //@line 2866
       HEAP32[$125 >> 2] = -1; //@line 2868
       HEAP32[$125 + 4 >> 2] = -1; //@line 2871
       STACKTOP = sp; //@line 2872
       return;
      }
     } while (0);
     if (!(($__wch & 16 | 0) != 0 & ($6 | 0) == 0)) {
      break;
     }
     $133 = $agg$result; //@line 2883
     HEAP32[$133 >> 2] = 0; //@line 2885
     HEAP32[$133 + 4 >> 2] = 0; //@line 2888
     $138 = $agg$result + 8 | 0; //@line 2890
     HEAP32[$138 >> 2] = -1; //@line 2892
     HEAP32[$138 + 4 >> 2] = -1; //@line 2895
     STACKTOP = sp; //@line 2896
     return;
    }
   } while (0);
   if (($$pre | 0) != 0) {
    HEAP32[$this + 12 >> 2] = (HEAP32[$this + 8 >> 2] | 0) + $75; //@line 2905
    HEAP32[$this + 16 >> 2] = $8; //@line 2907
   }
   if (($__wch & 16 | 0) != 0) {
    HEAP32[$5 >> 2] = (HEAP32[$this + 20 >> 2] | 0) + $75; //@line 2915
   }
   $154 = $agg$result; //@line 2918
   HEAP32[$154 >> 2] = 0; //@line 2920
   HEAP32[$154 + 4 >> 2] = 0; //@line 2923
   $159 = $agg$result + 8 | 0; //@line 2925
   HEAP32[$159 >> 2] = $75; //@line 2927
   HEAP32[$159 + 4 >> 2] = $76; //@line 2930
   STACKTOP = sp; //@line 2931
   return;
  }
 } while (0);
 $103 = $agg$result; //@line 2935
 HEAP32[$103 >> 2] = 0; //@line 2937
 HEAP32[$103 + 4 >> 2] = 0; //@line 2940
 $108 = $agg$result + 8 | 0; //@line 2942
 HEAP32[$108 >> 2] = -1; //@line 2944
 HEAP32[$108 + 4 >> 2] = -1; //@line 2947
 STACKTOP = sp; //@line 2948
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $33 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $51 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10075
 STACKTOP = STACKTOP + 16 | 0; //@line 10076
 $$byval_copy = sp; //@line 10077
 $vararg_buffer = sp + 8 | 0; //@line 10078
 $__p$i$i$i$i = STACKTOP; //@line 10080
 STACKTOP = STACKTOP + 16 | 0; //@line 10080
 $__fmt = STACKTOP; //@line 10081
 STACKTOP = STACKTOP + 8 | 0; //@line 10081
 $__nar = STACKTOP; //@line 10082
 STACKTOP = STACKTOP + 24 | 0; //@line 10082
 $__o = STACKTOP; //@line 10083
 STACKTOP = STACKTOP + 152 | 0; //@line 10083
 $1 = STACKTOP; //@line 10084
 STACKTOP = STACKTOP + 8 | 0; //@line 10084
 $2 = STACKTOP; //@line 10085
 STACKTOP = STACKTOP + 8 | 0; //@line 10085
 $3 = $__fmt; //@line 10086
 HEAP8[$3 + 0 | 0] = HEAP8[4512 | 0] | 0; //@line 10087
 HEAP8[$3 + 1 | 0] = HEAP8[4513 | 0] | 0; //@line 10087
 HEAP8[$3 + 2 | 0] = HEAP8[4514 | 0] | 0; //@line 10087
 HEAP8[$3 + 3 | 0] = HEAP8[4515 | 0] | 0; //@line 10087
 HEAP8[$3 + 4 | 0] = HEAP8[4516 | 0] | 0; //@line 10087
 HEAP8[$3 + 5 | 0] = HEAP8[4517 | 0] | 0; //@line 10087
 $4 = $__nar; //@line 10088
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 10099
   ___cxa_guard_release(5608); //@line 10100
  }
 } while (0);
 $10 = HEAP32[1400] | 0; //@line 10103
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 10105
 $11 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4, 20, $10, $3, $vararg_buffer) | 0; //@line 10106
 $12 = $__nar + $11 | 0; //@line 10107
 $15 = HEAP32[$__iob + 4 >> 2] & 176; //@line 10110
 do {
  if (($15 | 0) == 16) {
   $16 = HEAP8[$4] | 0; //@line 10113
   if ($16 << 24 >> 24 == 43 | $16 << 24 >> 24 == 45) {
    $$0$i = $__nar + 1 | 0; //@line 10116
    break;
   }
   if (!(($11 | 0) > 1 & $16 << 24 >> 24 == 48)) {
    label = 10; //@line 10123
    break;
   }
   $21 = HEAP8[$__nar + 1 | 0] | 0; //@line 10127
   if (!($21 << 24 >> 24 == 88 | $21 << 24 >> 24 == 120)) {
    label = 10; //@line 10129
    break;
   }
   $$0$i = $__nar + 2 | 0; //@line 10133
  } else if (($15 | 0) == 32) {
   $$0$i = $12; //@line 10135
  } else {
   label = 10; //@line 10137
  }
 } while (0);
 if ((label | 0) == 10) {
  $$0$i = $4; //@line 10141
 }
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 10144
 $24 = $1; //@line 10145
 $25 = HEAP32[$24 >> 2] | 0; //@line 10146
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 10152
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 10154
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 10156
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 10157
 }
 $33 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 10160
 $37 = HEAP32[$25 + 8 >> 2] | 0; //@line 10164
 if (!((HEAP32[$25 + 12 >> 2] | 0) - $37 >> 2 >>> 0 > $33 >>> 0)) {
  $46 = ___cxa_allocate_exception(4) | 0; //@line 10171
  $47 = $46; //@line 10172
  __ZNSt8bad_castC2Ev($47); //@line 10173
  ___cxa_throw($46 | 0, 13672, 114); //@line 10174
 }
 $44 = HEAP32[$37 + ($33 << 2) >> 2] | 0; //@line 10178
 if (($44 | 0) == 0) {
  $46 = ___cxa_allocate_exception(4) | 0; //@line 10181
  $47 = $46; //@line 10182
  __ZNSt8bad_castC2Ev($47); //@line 10183
  ___cxa_throw($46 | 0, 13672, 114); //@line 10184
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$24 >> 2] | 0) | 0; //@line 10190
 $51 = $__o; //@line 10191
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 48 >> 2] & 15]($44, $4, $12, $51) | 0; //@line 10196
 $56 = $__o + ($11 << 2) | 0; //@line 10197
 if (($$0$i | 0) == ($12 | 0)) {
  $__op$0 = $56; //@line 10200
  $62 = $__s; //@line 10201
  $63 = HEAP32[$62 >> 2] | 0; //@line 10202
  $64 = $2; //@line 10203
  HEAP32[$64 >> 2] = $63; //@line 10204
  $65 = $$byval_copy; //@line 10205
  $66 = $$byval_copy; //@line 10206
  $67 = $2; //@line 10207
  HEAP32[$66 + 0 >> 2] = HEAP32[$67 + 0 >> 2]; //@line 10208
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $51, $__op$0, $56, $__iob, $__fl); //@line 10209
  $68 = $$byval_copy; //@line 10210
  STACKTOP = sp; //@line 10211
  return;
 }
 $__op$0 = $__o + ($$0$i - $__nar << 2) | 0; //@line 10217
 $62 = $__s; //@line 10218
 $63 = HEAP32[$62 >> 2] | 0; //@line 10219
 $64 = $2; //@line 10220
 HEAP32[$64 >> 2] = $63; //@line 10221
 $65 = $$byval_copy; //@line 10222
 $66 = $$byval_copy; //@line 10223
 $67 = $2; //@line 10224
 HEAP32[$66 + 0 >> 2] = HEAP32[$67 + 0 >> 2]; //@line 10225
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $51, $__op$0, $56, $__iob, $__fl); //@line 10226
 $68 = $$byval_copy; //@line 10227
 STACKTOP = sp; //@line 10228
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $$pn$i = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $59 = 0, $62 = 0, $63 = 0, $65 = 0, $70 = 0, $81 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$0$i = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__sz$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3095
 if (($__c | 0) == -1) {
  $$0 = 0; //@line 3098
  STACKTOP = sp; //@line 3099
  return $$0 | 0; //@line 3099
 }
 $2 = $this; //@line 3101
 $3 = $this + 12 | 0; //@line 3102
 $5 = $this + 8 | 0; //@line 3104
 $9 = (HEAP32[$3 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0; //@line 3108
 $10 = $this + 24 | 0; //@line 3109
 $11 = HEAP32[$10 >> 2] | 0; //@line 3110
 $12 = $this + 28 | 0; //@line 3111
 $13 = HEAP32[$12 >> 2] | 0; //@line 3112
 if (($11 | 0) == ($13 | 0)) {
  $15 = $this + 48 | 0; //@line 3115
  if ((HEAP32[$15 >> 2] & 16 | 0) == 0) {
   $$0 = -1; //@line 3120
   STACKTOP = sp; //@line 3121
   return $$0 | 0; //@line 3121
  }
  $19 = $this + 20 | 0; //@line 3123
  $22 = HEAP32[$19 >> 2] | 0; //@line 3126
  $23 = $11 - $22 | 0; //@line 3127
  $24 = $this + 44 | 0; //@line 3128
  $27 = (HEAP32[$24 >> 2] | 0) - $22 | 0; //@line 3131
  $28 = $this + 32 | 0; //@line 3132
  $29 = $28; //@line 3133
  $30 = HEAP8[$29] | 0; //@line 3134
  $32 = ($30 & 1) != 0; //@line 3136
  if ($32) {
   $__cap$0$i = (HEAP32[$28 >> 2] & -2) + -1 | 0; //@line 3144
   $__sz$0$i = HEAP32[$this + 36 >> 2] | 0; //@line 3144
  } else {
   $__cap$0$i = 10; //@line 3148
   $__sz$0$i = ($30 & 255) >>> 1; //@line 3148
  }
  if (($__sz$0$i | 0) == ($__cap$0$i | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($28, $__cap$0$i, 1, $__cap$0$i, $__cap$0$i, 0, 0); //@line 3152
   if ((HEAP8[$29] & 1) == 0) {
    label = 11; //@line 3157
   } else {
    label = 12; //@line 3159
   }
  } else {
   if ($32) {
    label = 12; //@line 3163
   } else {
    label = 11; //@line 3165
   }
  }
  if ((label | 0) == 11) {
   HEAP8[$29] = ($__sz$0$i << 1) + 2; //@line 3174
   $$pn$i = $28 + 1 | 0; //@line 3176
   $__p$0$sum$pre$phi$iZZZ2D = $__sz$0$i + 1 | 0; //@line 3176
  } else if ((label | 0) == 12) {
   $51 = HEAP32[$this + 40 >> 2] | 0; //@line 3180
   $52 = $__sz$0$i + 1 | 0; //@line 3181
   HEAP32[$this + 36 >> 2] = $52; //@line 3183
   $$pn$i = $51; //@line 3184
   $__p$0$sum$pre$phi$iZZZ2D = $52; //@line 3184
  }
  HEAP8[$$pn$i + $__sz$0$i | 0] = 0; //@line 3187
  HEAP8[$$pn$i + $__p$0$sum$pre$phi$iZZZ2D | 0] = 0; //@line 3189
  $55 = HEAP8[$29] | 0; //@line 3190
  if (($55 & 1) == 0) {
   $62 = $55; //@line 3194
   $63 = 10; //@line 3194
  } else {
   $59 = HEAP32[$28 >> 2] | 0; //@line 3197
   $62 = $59 & 255; //@line 3201
   $63 = ($59 & -2) + -1 | 0; //@line 3201
  }
  $65 = ($62 & 1) == 0; //@line 3204
  if ($65) {
   $70 = ($62 & 255) >>> 1; //@line 3208
  } else {
   $70 = HEAP32[$this + 36 >> 2] | 0; //@line 3212
  }
  do {
   if ($70 >>> 0 < $63 >>> 0) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($28, $63 - $70 | 0, 0) | 0; //@line 3218
   } else {
    if ($65) {
     HEAP8[$28 + $63 + 1 | 0] = 0; //@line 3223
     HEAP8[$29] = $63 << 1; //@line 3226
     break;
    } else {
     HEAP8[(HEAP32[$this + 40 >> 2] | 0) + $63 | 0] = 0; //@line 3232
     HEAP32[$this + 36 >> 2] = $63; //@line 3234
     break;
    }
   }
  } while (0);
  $81 = HEAP8[$29] | 0; //@line 3239
  if (($81 & 1) == 0) {
   $92 = $28 + 1 | 0; //@line 3247
   $93 = ($81 & 255) >>> 1; //@line 3247
  } else {
   $92 = HEAP32[$this + 40 >> 2] | 0; //@line 3253
   $93 = HEAP32[$this + 36 >> 2] | 0; //@line 3253
  }
  $94 = $92 + $93 | 0; //@line 3255
  HEAP32[$19 >> 2] = $92; //@line 3256
  HEAP32[$12 >> 2] = $94; //@line 3257
  $95 = $92 + $23 | 0; //@line 3258
  HEAP32[$10 >> 2] = $95; //@line 3259
  $96 = $92 + $27 | 0; //@line 3260
  HEAP32[$24 >> 2] = $96; //@line 3261
  $$pre$phiZ2D = $15; //@line 3262
  $97 = $96; //@line 3262
  $98 = $94; //@line 3262
  $99 = $95; //@line 3262
 } else {
  $$pre$phiZ2D = $this + 48 | 0; //@line 3267
  $97 = HEAP32[$this + 44 >> 2] | 0; //@line 3267
  $98 = $13; //@line 3267
  $99 = $11; //@line 3267
 }
 $100 = $99 + 1 | 0; //@line 3269
 $103 = $100 >>> 0 < $97 >>> 0 ? $97 : $100; //@line 3272
 HEAP32[$this + 44 >> 2] = $103; //@line 3273
 if ((HEAP32[$$pre$phiZ2D >> 2] & 8 | 0) != 0) {
  $107 = $this + 32 | 0; //@line 3278
  if ((HEAP8[$107] & 1) == 0) {
   $116 = $107 + 1 | 0; //@line 3286
  } else {
   $116 = HEAP32[$this + 40 >> 2] | 0; //@line 3290
  }
  HEAP32[$5 >> 2] = $116; //@line 3293
  HEAP32[$3 >> 2] = $116 + $9; //@line 3294
  HEAP32[$this + 16 >> 2] = $103; //@line 3296
 }
 if (($99 | 0) == ($98 | 0)) {
  $$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($2, $__c & 255) | 0; //@line 3306
  STACKTOP = sp; //@line 3307
  return $$0 | 0; //@line 3307
 } else {
  HEAP32[$10 >> 2] = $100; //@line 3310
  HEAP8[$99] = $__c; //@line 3311
  $$0 = $__c & 255; //@line 3313
  STACKTOP = sp; //@line 3314
  return $$0 | 0; //@line 3314
 }
 return 0; //@line 3316
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $14 = 0, $16 = 0, $21 = 0, $25 = 0, $32 = 0, $36 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $50 = 0, $53 = 0, $54 = 0, $65 = 0, $68 = 0, $7 = 0, $77 = 0, $84 = 0, $86 = 0, $91 = 0, $93 = 0, sp = 0;
 sp = STACKTOP; //@line 4563
 if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) {
  if ((HEAP8[$__in_units] | 0) == 0) {
   $$0 = -1; //@line 4569
   STACKTOP = sp; //@line 4570
   return $$0 | 0; //@line 4570
  }
  HEAP8[$__in_units] = 0; //@line 4572
  $4 = HEAP32[$__a_end >> 2] | 0; //@line 4573
  HEAP32[$__a_end >> 2] = $4 + 1; //@line 4575
  HEAP8[$4] = 46; //@line 4576
  $7 = HEAP8[$__grouping] | 0; //@line 4578
  if (($7 & 1) == 0) {
   $14 = ($7 & 255) >>> 1; //@line 4584
  } else {
   $14 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 4588
  }
  if (($14 | 0) == 0) {
   $$0 = 0; //@line 4592
   STACKTOP = sp; //@line 4593
   return $$0 | 0; //@line 4593
  }
  $16 = HEAP32[$__g_end >> 2] | 0; //@line 4595
  if (($16 - $__g | 0) >= 160) {
   $$0 = 0; //@line 4601
   STACKTOP = sp; //@line 4602
   return $$0 | 0; //@line 4602
  }
  $21 = HEAP32[$__dc >> 2] | 0; //@line 4604
  HEAP32[$__g_end >> 2] = $16 + 4; //@line 4606
  HEAP32[$16 >> 2] = $21; //@line 4607
  $$0 = 0; //@line 4608
  STACKTOP = sp; //@line 4609
  return $$0 | 0; //@line 4609
 }
 do {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $25 = HEAP8[$__grouping] | 0; //@line 4615
   if (($25 & 1) == 0) {
    $32 = ($25 & 255) >>> 1; //@line 4621
   } else {
    $32 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 4625
   }
   if (($32 | 0) == 0) {
    break;
   }
   if ((HEAP8[$__in_units] | 0) == 0) {
    $$0 = -1; //@line 4634
    STACKTOP = sp; //@line 4635
    return $$0 | 0; //@line 4635
   }
   $36 = HEAP32[$__g_end >> 2] | 0; //@line 4637
   if (($36 - $__g | 0) >= 160) {
    $$0 = 0; //@line 4643
    STACKTOP = sp; //@line 4644
    return $$0 | 0; //@line 4644
   }
   $41 = HEAP32[$__dc >> 2] | 0; //@line 4646
   HEAP32[$__g_end >> 2] = $36 + 4; //@line 4648
   HEAP32[$36 >> 2] = $41; //@line 4649
   HEAP32[$__dc >> 2] = 0; //@line 4650
   $$0 = 0; //@line 4651
   STACKTOP = sp; //@line 4652
   return $$0 | 0; //@line 4652
  }
 } while (0);
 $43 = $__atoms + 32 | 0; //@line 4655
 $$01$i = $__atoms; //@line 4656
 while (1) {
  $47 = $$01$i + 1 | 0; //@line 4660
  if ((HEAP8[$$01$i] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i; //@line 4662
   break;
  }
  if (($47 | 0) == ($43 | 0)) {
   $$0$lcssa$i = $43; //@line 4667
   break;
  } else {
   $$01$i = $47; //@line 4670
  }
 }
 $50 = $$0$lcssa$i - $__atoms | 0; //@line 4675
 if (($50 | 0) > 31) {
  $$0 = -1; //@line 4678
  STACKTOP = sp; //@line 4679
  return $$0 | 0; //@line 4679
 }
 $53 = HEAP8[4256 + $50 | 0] | 0; //@line 4682
 if (($50 | 0) == 24 | ($50 | 0) == 25) {
  $54 = HEAP32[$__a_end >> 2] | 0; //@line 4684
  do {
   if (($54 | 0) != ($__a | 0)) {
    if ((HEAP8[$54 + -1 | 0] & 95 | 0) == (HEAP8[$__exp] & 127 | 0)) {
     break;
    } else {
     $$0 = -1; //@line 4699
    }
    STACKTOP = sp; //@line 4701
    return $$0 | 0; //@line 4701
   }
  } while (0);
  HEAP32[$__a_end >> 2] = $54 + 1; //@line 4705
  HEAP8[$54] = $53; //@line 4706
  $$0 = 0; //@line 4707
  STACKTOP = sp; //@line 4708
  return $$0 | 0; //@line 4708
 } else if (($50 | 0) == 23 | ($50 | 0) == 22) {
  HEAP8[$__exp] = 80; //@line 4710
  $65 = HEAP32[$__a_end >> 2] | 0; //@line 4711
  HEAP32[$__a_end >> 2] = $65 + 1; //@line 4713
  HEAP8[$65] = $53; //@line 4714
  $$0 = 0; //@line 4715
  STACKTOP = sp; //@line 4716
  return $$0 | 0; //@line 4716
 } else {
  $68 = $53 & 95; //@line 4719
  do {
   if (($68 | 0) == (HEAP8[$__exp] | 0)) {
    HEAP8[$__exp] = $68 | 128; //@line 4727
    if ((HEAP8[$__in_units] | 0) == 0) {
     break;
    }
    HEAP8[$__in_units] = 0; //@line 4733
    $77 = HEAP8[$__grouping] | 0; //@line 4735
    if (($77 & 1) == 0) {
     $84 = ($77 & 255) >>> 1; //@line 4741
    } else {
     $84 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 4745
    }
    if (($84 | 0) == 0) {
     break;
    }
    $86 = HEAP32[$__g_end >> 2] | 0; //@line 4751
    if (($86 - $__g | 0) >= 160) {
     break;
    }
    $91 = HEAP32[$__dc >> 2] | 0; //@line 4759
    HEAP32[$__g_end >> 2] = $86 + 4; //@line 4761
    HEAP32[$86 >> 2] = $91; //@line 4762
   }
  } while (0);
  $93 = HEAP32[$__a_end >> 2] | 0; //@line 4765
  HEAP32[$__a_end >> 2] = $93 + 1; //@line 4767
  HEAP8[$93] = $53; //@line 4768
  if (($50 | 0) > 21) {
   $$0 = 0; //@line 4771
   STACKTOP = sp; //@line 4772
   return $$0 | 0; //@line 4772
  }
  HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 4776
  $$0 = 0; //@line 4777
  STACKTOP = sp; //@line 4778
  return $$0 | 0; //@line 4778
 }
 return 0; //@line 4780
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $33 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $55 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7550
 STACKTOP = STACKTOP + 16 | 0; //@line 7551
 $$byval_copy = sp; //@line 7552
 $vararg_buffer = sp + 8 | 0; //@line 7553
 $__p$i$i$i$i = STACKTOP; //@line 7555
 STACKTOP = STACKTOP + 16 | 0; //@line 7555
 $__fmt = STACKTOP; //@line 7556
 STACKTOP = STACKTOP + 8 | 0; //@line 7556
 $__nar = STACKTOP; //@line 7557
 STACKTOP = STACKTOP + 24 | 0; //@line 7557
 $__o = STACKTOP; //@line 7558
 STACKTOP = STACKTOP + 40 | 0; //@line 7558
 $1 = STACKTOP; //@line 7559
 STACKTOP = STACKTOP + 8 | 0; //@line 7559
 $2 = STACKTOP; //@line 7560
 STACKTOP = STACKTOP + 8 | 0; //@line 7560
 $3 = $__fmt; //@line 7561
 HEAP8[$3 + 0 | 0] = HEAP8[4512 | 0] | 0; //@line 7562
 HEAP8[$3 + 1 | 0] = HEAP8[4513 | 0] | 0; //@line 7562
 HEAP8[$3 + 2 | 0] = HEAP8[4514 | 0] | 0; //@line 7562
 HEAP8[$3 + 3 | 0] = HEAP8[4515 | 0] | 0; //@line 7562
 HEAP8[$3 + 4 | 0] = HEAP8[4516 | 0] | 0; //@line 7562
 HEAP8[$3 + 5 | 0] = HEAP8[4517 | 0] | 0; //@line 7562
 $4 = $__nar; //@line 7563
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 7574
   ___cxa_guard_release(5608); //@line 7575
  }
 } while (0);
 $10 = HEAP32[1400] | 0; //@line 7578
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 7580
 $11 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4, 20, $10, $3, $vararg_buffer) | 0; //@line 7581
 $12 = $__nar + $11 | 0; //@line 7582
 $15 = HEAP32[$__iob + 4 >> 2] & 176; //@line 7585
 do {
  if (($15 | 0) == 16) {
   $16 = HEAP8[$4] | 0; //@line 7588
   if ($16 << 24 >> 24 == 43 | $16 << 24 >> 24 == 45) {
    $$0$i = $__nar + 1 | 0; //@line 7591
    break;
   }
   if (!(($11 | 0) > 1 & $16 << 24 >> 24 == 48)) {
    label = 10; //@line 7598
    break;
   }
   $21 = HEAP8[$__nar + 1 | 0] | 0; //@line 7602
   if (!($21 << 24 >> 24 == 88 | $21 << 24 >> 24 == 120)) {
    label = 10; //@line 7604
    break;
   }
   $$0$i = $__nar + 2 | 0; //@line 7608
  } else if (($15 | 0) == 32) {
   $$0$i = $12; //@line 7610
  } else {
   label = 10; //@line 7612
  }
 } while (0);
 if ((label | 0) == 10) {
  $$0$i = $4; //@line 7616
 }
 $23 = $__o; //@line 7618
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 7619
 $24 = $1; //@line 7620
 $25 = HEAP32[$24 >> 2] | 0; //@line 7621
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 7627
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 7629
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 7631
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 7632
 }
 $33 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 7635
 $37 = HEAP32[$25 + 8 >> 2] | 0; //@line 7639
 if (!((HEAP32[$25 + 12 >> 2] | 0) - $37 >> 2 >>> 0 > $33 >>> 0)) {
  $46 = ___cxa_allocate_exception(4) | 0; //@line 7646
  $47 = $46; //@line 7647
  __ZNSt8bad_castC2Ev($47); //@line 7648
  ___cxa_throw($46 | 0, 13672, 114); //@line 7649
 }
 $44 = HEAP32[$37 + ($33 << 2) >> 2] | 0; //@line 7653
 if (($44 | 0) == 0) {
  $46 = ___cxa_allocate_exception(4) | 0; //@line 7656
  $47 = $46; //@line 7657
  __ZNSt8bad_castC2Ev($47); //@line 7658
  ___cxa_throw($46 | 0, 13672, 114); //@line 7659
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$24 >> 2] | 0) | 0; //@line 7665
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 32 >> 2] & 15]($44, $4, $12, $23) | 0; //@line 7670
 $55 = $__o + $11 | 0; //@line 7671
 if (($$0$i | 0) == ($12 | 0)) {
  $__op$0 = $55; //@line 7674
  $61 = $__s; //@line 7675
  $62 = HEAP32[$61 >> 2] | 0; //@line 7676
  $63 = $2; //@line 7677
  HEAP32[$63 >> 2] = $62; //@line 7678
  $64 = $$byval_copy; //@line 7679
  $65 = $$byval_copy; //@line 7680
  $66 = $2; //@line 7681
  HEAP32[$65 + 0 >> 2] = HEAP32[$66 + 0 >> 2]; //@line 7682
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $23, $__op$0, $55, $__iob, $__fl); //@line 7683
  $67 = $$byval_copy; //@line 7684
  STACKTOP = sp; //@line 7685
  return;
 }
 $__op$0 = $__o + ($$0$i - $__nar) | 0; //@line 7691
 $61 = $__s; //@line 7692
 $62 = HEAP32[$61 >> 2] | 0; //@line 7693
 $63 = $2; //@line 7694
 HEAP32[$63 >> 2] = $62; //@line 7695
 $64 = $$byval_copy; //@line 7696
 $65 = $$byval_copy; //@line 7697
 $66 = $2; //@line 7698
 HEAP32[$65 + 0 >> 2] = HEAP32[$66 + 0 >> 2]; //@line 7699
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $23, $__op$0, $55, $__iob, $__fl); //@line 7700
 $67 = $$byval_copy; //@line 7701
 STACKTOP = sp; //@line 7702
 return;
}
function __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE($__is, $__str) {
 $__is = $__is | 0;
 $__str = $__str | 0;
 var $$ = 0, $$0$i47 = 0, $$pn$i = 0, $1 = 0, $117 = 0, $128 = 0, $129 = 0, $14 = 0, $18 = 0, $19 = 0, $22 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $41 = 0, $44 = 0, $5 = 0, $54 = 0, $58 = 0, $65 = 0, $67 = 0, $81 = 0, $82 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $__c$0$lcssa = 0, $__c$014 = 0, $__cap$0$i = 0, $__err$0 = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__sen = 0, $__sz$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 738
 STACKTOP = STACKTOP + 16 | 0; //@line 739
 $__sen = sp; //@line 740
 $1 = sp + 8 | 0; //@line 741
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__sen, $__is, 0); //@line 742
 if ((HEAP8[$__sen] | 0) == 0) {
  $128 = HEAP32[(HEAP32[$__is >> 2] | 0) + -12 >> 2] | 0; //@line 751
  $129 = $__is; //@line 752
  __ZNSt3__18ios_base5clearEj($129 + $128 | 0, HEAP32[$129 + ($128 + 16) >> 2] | 4); //@line 760
  STACKTOP = sp; //@line 761
  return $__is | 0; //@line 761
 }
 $5 = $__str; //@line 763
 if ((HEAP8[$5] & 1) == 0) {
  HEAP8[$__str + 1 | 0] = 0; //@line 770
  HEAP8[$5] = 0; //@line 771
 } else {
  HEAP8[HEAP32[$__str + 8 >> 2] | 0] = 0; //@line 775
  HEAP32[$__str + 4 >> 2] = 0; //@line 777
 }
 $14 = $__is; //@line 779
 $18 = HEAP32[(HEAP32[$14 >> 2] | 0) + -12 >> 2] | 0; //@line 783
 $19 = $__is; //@line 784
 $22 = HEAP32[$19 + ($18 + 12) >> 2] | 0; //@line 788
 $$ = ($22 | 0) < 1 ? 2147483647 : $22; //@line 790
 __ZNKSt3__18ios_base6getlocEv($1, $19 + $18 | 0); //@line 793
 $26 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5712) | 0; //@line 794
 __ZNSt3__16localeD2Ev($1); //@line 795
 L9 : do {
  if (($$ | 0) > 0) {
   $29 = $26 + 8 | 0; //@line 800
   $30 = $__str; //@line 801
   $31 = $__str + 4 | 0; //@line 802
   $33 = $__str + 1 | 0; //@line 804
   $34 = $__str + 8 | 0; //@line 805
   $__c$014 = 0; //@line 806
   while (1) {
    $41 = HEAP32[$19 + ((HEAP32[(HEAP32[$14 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 815
    $44 = HEAP32[$41 + 12 >> 2] | 0; //@line 818
    if (($44 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
     $54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($41) | 0; //@line 829
     if (($54 | 0) == -1) {
      $__c$0$lcssa = $__c$014; //@line 832
      $__err$0 = 2; //@line 832
      break L9;
     } else {
      $$0$i47 = $54; //@line 835
     }
    } else {
     $$0$i47 = HEAPU8[$44] | 0; //@line 840
    }
    $58 = $$0$i47 & 255; //@line 842
    if ($58 << 24 >> 24 > -1) {
     if (!((HEAP16[(HEAP32[$29 >> 2] | 0) + ($$0$i47 << 24 >> 24 << 1) >> 1] & 8192) == 0)) {
      $__c$0$lcssa = $__c$014; //@line 853
      $__err$0 = 0; //@line 853
      break L9;
     }
    }
    $65 = HEAP8[$5] | 0; //@line 857
    $67 = ($65 & 1) != 0; //@line 859
    if ($67) {
     $__cap$0$i = (HEAP32[$30 >> 2] & -2) + -1 | 0; //@line 865
     $__sz$0$i = HEAP32[$31 >> 2] | 0; //@line 865
    } else {
     $__cap$0$i = 10; //@line 869
     $__sz$0$i = ($65 & 255) >>> 1; //@line 869
    }
    if (($__sz$0$i | 0) == ($__cap$0$i | 0)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__str, $__cap$0$i, 1, $__cap$0$i, $__cap$0$i, 0, 0); //@line 873
     if ((HEAP8[$5] & 1) == 0) {
      label = 19; //@line 878
     } else {
      label = 20; //@line 880
     }
    } else {
     if ($67) {
      label = 20; //@line 884
     } else {
      label = 19; //@line 886
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 890
     HEAP8[$5] = ($__sz$0$i << 1) + 2; //@line 894
     $$pn$i = $33; //@line 896
     $__p$0$sum$pre$phi$iZZZ2D = $__sz$0$i + 1 | 0; //@line 896
    } else if ((label | 0) == 20) {
     label = 0; //@line 899
     $81 = HEAP32[$34 >> 2] | 0; //@line 900
     $82 = $__sz$0$i + 1 | 0; //@line 901
     HEAP32[$31 >> 2] = $82; //@line 902
     $$pn$i = $81; //@line 903
     $__p$0$sum$pre$phi$iZZZ2D = $82; //@line 903
    }
    HEAP8[$$pn$i + $__sz$0$i | 0] = $58; //@line 906
    HEAP8[$$pn$i + $__p$0$sum$pre$phi$iZZZ2D | 0] = 0; //@line 908
    $90 = HEAP32[$19 + ((HEAP32[(HEAP32[$14 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 916
    $91 = $__c$014 + 1 | 0; //@line 917
    $93 = $90 + 12 | 0; //@line 919
    $94 = HEAP32[$93 >> 2] | 0; //@line 920
    if (($94 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 40 >> 2] & 127]($90) | 0; //@line 931
    } else {
     HEAP32[$93 >> 2] = $94 + 1; //@line 934
    }
    if (($91 | 0) < ($$ | 0)) {
     $__c$014 = $91; //@line 938
    } else {
     $__c$0$lcssa = $91; //@line 940
     $__err$0 = 0; //@line 940
     break;
    }
   }
  } else {
   $__c$0$lcssa = 0; //@line 945
   $__err$0 = 0; //@line 945
  }
 } while (0);
 HEAP32[$19 + ((HEAP32[(HEAP32[$14 >> 2] | 0) + -12 >> 2] | 0) + 12) >> 2] = 0; //@line 955
 $117 = HEAP32[(HEAP32[$14 >> 2] | 0) + -12 >> 2] | 0; //@line 962
 __ZNSt3__18ios_base5clearEj($19 + $117 | 0, HEAP32[$19 + ($117 + 16) >> 2] | (($__c$0$lcssa | 0) == 0 ? $__err$0 | 4 : $__err$0)); //@line 970
 STACKTOP = sp; //@line 971
 return $__is | 0; //@line 971
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $14 = 0, $16 = 0, $21 = 0, $25 = 0, $32 = 0, $36 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $67 = 0, $7 = 0, $76 = 0, $83 = 0, $85 = 0, $90 = 0, $92 = 0, sp = 0;
 sp = STACKTOP; //@line 5051
 if (($__ct | 0) == ($__decimal_point | 0)) {
  if ((HEAP8[$__in_units] | 0) == 0) {
   $$0 = -1; //@line 5057
   STACKTOP = sp; //@line 5058
   return $$0 | 0; //@line 5058
  }
  HEAP8[$__in_units] = 0; //@line 5060
  $4 = HEAP32[$__a_end >> 2] | 0; //@line 5061
  HEAP32[$__a_end >> 2] = $4 + 1; //@line 5063
  HEAP8[$4] = 46; //@line 5064
  $7 = HEAP8[$__grouping] | 0; //@line 5066
  if (($7 & 1) == 0) {
   $14 = ($7 & 255) >>> 1; //@line 5072
  } else {
   $14 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 5076
  }
  if (($14 | 0) == 0) {
   $$0 = 0; //@line 5080
   STACKTOP = sp; //@line 5081
   return $$0 | 0; //@line 5081
  }
  $16 = HEAP32[$__g_end >> 2] | 0; //@line 5083
  if (($16 - $__g | 0) >= 160) {
   $$0 = 0; //@line 5089
   STACKTOP = sp; //@line 5090
   return $$0 | 0; //@line 5090
  }
  $21 = HEAP32[$__dc >> 2] | 0; //@line 5092
  HEAP32[$__g_end >> 2] = $16 + 4; //@line 5094
  HEAP32[$16 >> 2] = $21; //@line 5095
  $$0 = 0; //@line 5096
  STACKTOP = sp; //@line 5097
  return $$0 | 0; //@line 5097
 }
 do {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $25 = HEAP8[$__grouping] | 0; //@line 5103
   if (($25 & 1) == 0) {
    $32 = ($25 & 255) >>> 1; //@line 5109
   } else {
    $32 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 5113
   }
   if (($32 | 0) == 0) {
    break;
   }
   if ((HEAP8[$__in_units] | 0) == 0) {
    $$0 = -1; //@line 5122
    STACKTOP = sp; //@line 5123
    return $$0 | 0; //@line 5123
   }
   $36 = HEAP32[$__g_end >> 2] | 0; //@line 5125
   if (($36 - $__g | 0) >= 160) {
    $$0 = 0; //@line 5131
    STACKTOP = sp; //@line 5132
    return $$0 | 0; //@line 5132
   }
   $41 = HEAP32[$__dc >> 2] | 0; //@line 5134
   HEAP32[$__g_end >> 2] = $36 + 4; //@line 5136
   HEAP32[$36 >> 2] = $41; //@line 5137
   HEAP32[$__dc >> 2] = 0; //@line 5138
   $$0 = 0; //@line 5139
   STACKTOP = sp; //@line 5140
   return $$0 | 0; //@line 5140
  }
 } while (0);
 $43 = $__atoms + 128 | 0; //@line 5143
 $$01$i = $__atoms; //@line 5144
 while (1) {
  $47 = $$01$i + 4 | 0; //@line 5148
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i; //@line 5150
   break;
  }
  if (($47 | 0) == ($43 | 0)) {
   $$0$lcssa$i = $43; //@line 5155
   break;
  } else {
   $$01$i = $47; //@line 5158
  }
 }
 $50 = $$0$lcssa$i - $__atoms | 0; //@line 5163
 $51 = $50 >> 2; //@line 5164
 if (($50 | 0) > 124) {
  $$0 = -1; //@line 5167
  STACKTOP = sp; //@line 5168
  return $$0 | 0; //@line 5168
 }
 $54 = HEAP8[4256 + $51 | 0] | 0; //@line 5171
 do {
  if (($51 | 0) == 24 | ($51 | 0) == 25) {
   $55 = HEAP32[$__a_end >> 2] | 0; //@line 5174
   do {
    if (($55 | 0) != ($__a | 0)) {
     if ((HEAP8[$55 + -1 | 0] & 95 | 0) == (HEAP8[$__exp] & 127 | 0)) {
      break;
     } else {
      $$0 = -1; //@line 5189
     }
     STACKTOP = sp; //@line 5191
     return $$0 | 0; //@line 5191
    }
   } while (0);
   HEAP32[$__a_end >> 2] = $55 + 1; //@line 5195
   HEAP8[$55] = $54; //@line 5196
   $$0 = 0; //@line 5197
   STACKTOP = sp; //@line 5198
   return $$0 | 0; //@line 5198
  } else if (($51 | 0) == 23 | ($51 | 0) == 22) {
   HEAP8[$__exp] = 80; //@line 5200
  } else {
   $67 = $54 & 95; //@line 5203
   if (($67 | 0) != (HEAP8[$__exp] | 0)) {
    break;
   }
   HEAP8[$__exp] = $67 | 128; //@line 5212
   if ((HEAP8[$__in_units] | 0) == 0) {
    break;
   }
   HEAP8[$__in_units] = 0; //@line 5218
   $76 = HEAP8[$__grouping] | 0; //@line 5220
   if (($76 & 1) == 0) {
    $83 = ($76 & 255) >>> 1; //@line 5226
   } else {
    $83 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 5230
   }
   if (($83 | 0) == 0) {
    break;
   }
   $85 = HEAP32[$__g_end >> 2] | 0; //@line 5236
   if (($85 - $__g | 0) >= 160) {
    break;
   }
   $90 = HEAP32[$__dc >> 2] | 0; //@line 5244
   HEAP32[$__g_end >> 2] = $85 + 4; //@line 5246
   HEAP32[$85 >> 2] = $90; //@line 5247
  }
 } while (0);
 $92 = HEAP32[$__a_end >> 2] | 0; //@line 5250
 HEAP32[$__a_end >> 2] = $92 + 1; //@line 5252
 HEAP8[$92] = $54; //@line 5253
 if (($50 | 0) > 84) {
  $$0 = 0; //@line 5256
  STACKTOP = sp; //@line 5257
  return $$0 | 0; //@line 5257
 }
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 5261
 $$0 = 0; //@line 5262
 STACKTOP = sp; //@line 5263
 return $$0 | 0; //@line 5263
}
function __Z26human_string_to_next_colorNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($str) {
 $str = $str | 0;
 var $$04 = 0, $$pre$phiZ2D = 0, $$pre24$pre$phiZZ2D = 0, $1 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $113 = 0, $114 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $37 = 0, $42 = 0, $43 = 0, $45 = 0, $51 = 0, $62 = 0, $64 = 0, $7 = 0, $73 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__p$0$i$i$i = 0, $lowered_string = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 212
 STACKTOP = STACKTOP + 48 | 0; //@line 213
 $lowered_string = sp; //@line 214
 $1 = sp + 16 | 0; //@line 215
 $2 = sp + 32 | 0; //@line 216
 $3 = $str; //@line 217
 if ((HEAP8[$3] & 1) == 0) {
  $7 = $2; //@line 222
  HEAP32[$7 + 0 >> 2] = HEAP32[$3 + 0 >> 2]; //@line 223
  HEAP32[$7 + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 223
  HEAP32[$7 + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 223
  $$pre$phiZ2D = $7; //@line 225
  $29 = HEAP8[$7] | 0; //@line 225
 } else {
  $9 = HEAP32[$str + 8 >> 2] | 0; //@line 228
  $11 = HEAP32[$str + 4 >> 2] | 0; //@line 230
  if ($11 >>> 0 > 4294967279) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 233
  }
  if ($11 >>> 0 < 11) {
   $15 = $11 << 1 & 255; //@line 239
   $16 = $2; //@line 240
   HEAP8[$16] = $15; //@line 241
   $$pre24$pre$phiZZ2D = $16; //@line 244
   $27 = $15; //@line 244
   $__p$0$i$i$i = $2 + 1 | 0; //@line 244
  } else {
   $20 = $11 + 16 & -16; //@line 247
   $21 = __Znwj($20) | 0; //@line 248
   HEAP32[$2 + 8 >> 2] = $21; //@line 250
   $23 = $20 | 1; //@line 251
   HEAP32[$2 >> 2] = $23; //@line 253
   HEAP32[$2 + 4 >> 2] = $11; //@line 255
   $$pre24$pre$phiZZ2D = $2; //@line 258
   $27 = $23 & 255; //@line 258
   $__p$0$i$i$i = $21; //@line 258
  }
  _memcpy($__p$0$i$i$i | 0, $9 | 0, $11 | 0) | 0; //@line 260
  HEAP8[$__p$0$i$i$i + $11 | 0] = 0; //@line 262
  $$pre$phiZ2D = $$pre24$pre$phiZZ2D; //@line 263
  $29 = $27; //@line 263
 }
 if (($29 & 1) == 0) {
  $37 = $2; //@line 268
  $42 = $37 + (($29 & 255) >>> 1) + 1 | 0; //@line 273
  $43 = $37 + 1 | 0; //@line 273
 } else {
  $33 = HEAP32[$2 + 8 >> 2] | 0; //@line 276
  $42 = $33 + (HEAP32[$2 + 4 >> 2] | 0) | 0; //@line 280
  $43 = $33; //@line 280
 }
 if (($43 | 0) != ($42 | 0)) {
  $45 = $43; //@line 284
  do {
   HEAP8[$45] = _tolower(HEAP8[$45] | 0) | 0; //@line 290
   $45 = $45 + 1 | 0; //@line 291
  } while (($45 | 0) != ($42 | 0));
 }
 $51 = $1; //@line 300
 HEAP32[$51 + 0 >> 2] = HEAP32[$$pre$phiZ2D + 0 >> 2]; //@line 301
 HEAP32[$51 + 4 >> 2] = HEAP32[$$pre$phiZ2D + 4 >> 2]; //@line 301
 HEAP32[$51 + 8 >> 2] = HEAP32[$$pre$phiZ2D + 8 >> 2]; //@line 301
 HEAP32[$$pre$phiZ2D + 0 >> 2] = 0; //@line 302
 HEAP32[$$pre$phiZ2D + 4 >> 2] = 0; //@line 302
 HEAP32[$$pre$phiZ2D + 8 >> 2] = 0; //@line 302
 __Z12strip_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($lowered_string, $1); //@line 303
 if (!((HEAP8[$51] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 310
 }
 if (!((HEAP8[$$pre$phiZ2D] & 1) == 0)) {
  __ZdlPv(HEAP32[$2 + 8 >> 2] | 0); //@line 318
 }
 $62 = HEAP8[$3] | 0; //@line 320
 $64 = ($62 & 1) == 0; //@line 322
 if ($64) {
  $73 = ($62 & 255) >>> 1; //@line 328
  $74 = $str + 1 | 0; //@line 328
 } else {
  $73 = HEAP32[$str + 4 >> 2] | 0; //@line 334
  $74 = HEAP32[$str + 8 >> 2] | 0; //@line 334
 }
 $75 = $73 >>> 0 > 4; //@line 336
 if ((_memcmp($74, 8, $75 ? 4 : $73) | 0) == 0) {
  if ($73 >>> 0 > 3 & ($75 ^ 1)) {
   $$04 = 1; //@line 345
  } else {
   label = 23; //@line 347
  }
 } else {
  label = 23; //@line 350
 }
 do {
  if ((label | 0) == 23) {
   if ($64) {
    $89 = ($62 & 255) >>> 1; //@line 359
    $90 = $str + 1 | 0; //@line 359
   } else {
    $89 = HEAP32[$str + 4 >> 2] | 0; //@line 365
    $90 = HEAP32[$str + 8 >> 2] | 0; //@line 365
   }
   $91 = $89 >>> 0 > 3; //@line 367
   if ((_memcmp($90, 16, $91 ? 3 : $89) | 0) == 0) {
    if ($89 >>> 0 > 2 & ($91 ^ 1)) {
     $$04 = 0; //@line 376
     break;
    }
   }
   if ($64) {
    $105 = ($62 & 255) >>> 1; //@line 385
    $106 = $str + 1 | 0; //@line 385
   } else {
    $105 = HEAP32[$str + 4 >> 2] | 0; //@line 391
    $106 = HEAP32[$str + 8 >> 2] | 0; //@line 391
   }
   $107 = $105 >>> 0 > 5; //@line 393
   if ((_memcmp($106, 24, $107 ? 5 : $105) | 0) != 0) {
    $113 = ___cxa_allocate_exception(8) | 0; //@line 398
    $114 = $113; //@line 399
    __ZNSt13runtime_errorC2EPKc($114, 32); //@line 400
    ___cxa_throw($113 | 0, 2720, 32); //@line 401
   }
   if ($105 >>> 0 > 4 & ($107 ^ 1)) {
    $$04 = 2; //@line 408
    break;
   }
   $113 = ___cxa_allocate_exception(8) | 0; //@line 411
   $114 = $113; //@line 412
   __ZNSt13runtime_errorC2EPKc($114, 32); //@line 413
   ___cxa_throw($113 | 0, 2720, 32); //@line 414
  }
 } while (0);
 if ((HEAP8[$lowered_string] & 1) == 0) {
  STACKTOP = sp; //@line 423
  return $$04 | 0; //@line 423
 }
 __ZdlPv(HEAP32[$lowered_string + 8 >> 2] | 0); //@line 427
 STACKTOP = sp; //@line 428
 return $$04 | 0; //@line 428
}
function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $4 = 0, $44 = 0, $45 = 0, $5 = 0, $7 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12793
 STACKTOP = STACKTOP + 8 | 0; //@line 12794
 $buf = sp; //@line 12795
 if (($s | 0) == 0) {
  $3 = HEAP32[$ws >> 2] | 0; //@line 12798
  $4 = $buf; //@line 12799
  $5 = HEAP32[$3 >> 2] | 0; //@line 12800
  if (($5 | 0) == 0) {
   $$0 = 0; //@line 12803
   STACKTOP = sp; //@line 12804
   return $$0 | 0; //@line 12804
  } else {
   $$038 = 0; //@line 12806
   $7 = $5; //@line 12806
   $ws2$09 = $3; //@line 12806
  }
  while (1) {
   if ($7 >>> 0 > 127) {
    $9 = _wcrtomb($4, $7, 0) | 0; //@line 12811
    if (($9 | 0) == -1) {
     $$0 = -1; //@line 12814
     label = 26; //@line 12815
     break;
    } else {
     $$pn = $9; //@line 12818
    }
   } else {
    $$pn = 1; //@line 12821
   }
   $$14 = $$pn + $$038 | 0; //@line 12823
   $11 = $ws2$09 + 4 | 0; //@line 12824
   $12 = HEAP32[$11 >> 2] | 0; //@line 12825
   if (($12 | 0) == 0) {
    $$0 = $$14; //@line 12828
    label = 26; //@line 12829
    break;
   } else {
    $$038 = $$14; //@line 12832
    $7 = $12; //@line 12832
    $ws2$09 = $11; //@line 12832
   }
  }
  if ((label | 0) == 26) {
   STACKTOP = sp; //@line 12836
   return $$0 | 0; //@line 12836
  }
 }
 L14 : do {
  if ($n >>> 0 > 3) {
   $$0226 = $s; //@line 12843
   $$2525 = $n; //@line 12843
   $14 = HEAP32[$ws >> 2] | 0; //@line 12843
   while (1) {
    $15 = HEAP32[$14 >> 2] | 0; //@line 12845
    if (($15 | 0) == 0) {
     $$02$lcssa = $$0226; //@line 12848
     $$25$lcssa = $$2525; //@line 12848
     break L14;
    }
    if ($15 >>> 0 > 127) {
     $20 = _wcrtomb($$0226, $15, 0) | 0; //@line 12853
     if (($20 | 0) == -1) {
      $$0 = -1; //@line 12856
      break;
     }
     $$1 = $$0226 + $20 | 0; //@line 12861
     $$36 = $$2525 - $20 | 0; //@line 12861
     $27 = $14; //@line 12861
    } else {
     HEAP8[$$0226] = $15; //@line 12865
     $$1 = $$0226 + 1 | 0; //@line 12868
     $$36 = $$2525 + -1 | 0; //@line 12868
     $27 = HEAP32[$ws >> 2] | 0; //@line 12868
    }
    $28 = $27 + 4 | 0; //@line 12870
    HEAP32[$ws >> 2] = $28; //@line 12871
    if ($$36 >>> 0 > 3) {
     $$0226 = $$1; //@line 12874
     $$2525 = $$36; //@line 12874
     $14 = $28; //@line 12874
    } else {
     $$02$lcssa = $$1; //@line 12876
     $$25$lcssa = $$36; //@line 12876
     break L14;
    }
   }
   STACKTOP = sp; //@line 12880
   return $$0 | 0; //@line 12880
  } else {
   $$02$lcssa = $s; //@line 12882
   $$25$lcssa = $n; //@line 12882
  }
 } while (0);
 L26 : do {
  if (($$25$lcssa | 0) == 0) {
   $$414 = 0; //@line 12888
  } else {
   $18 = $buf; //@line 12890
   $$219 = $$02$lcssa; //@line 12892
   $$418 = $$25$lcssa; //@line 12892
   $30 = HEAP32[$ws >> 2] | 0; //@line 12892
   while (1) {
    $31 = HEAP32[$30 >> 2] | 0; //@line 12894
    if (($31 | 0) == 0) {
     label = 24; //@line 12897
     break;
    }
    if ($31 >>> 0 > 127) {
     $34 = _wcrtomb($18, $31, 0) | 0; //@line 12902
     if (($34 | 0) == -1) {
      $$0 = -1; //@line 12905
      label = 26; //@line 12906
      break;
     }
     if ($34 >>> 0 > $$418 >>> 0) {
      label = 20; //@line 12911
      break;
     }
     _wcrtomb($$219, HEAP32[$30 >> 2] | 0, 0) | 0; //@line 12915
     $$3 = $$219 + $34 | 0; //@line 12918
     $$5 = $$418 - $34 | 0; //@line 12918
     $44 = $30; //@line 12918
    } else {
     HEAP8[$$219] = $31; //@line 12922
     $$3 = $$219 + 1 | 0; //@line 12925
     $$5 = $$418 + -1 | 0; //@line 12925
     $44 = HEAP32[$ws >> 2] | 0; //@line 12925
    }
    $45 = $44 + 4 | 0; //@line 12927
    HEAP32[$ws >> 2] = $45; //@line 12928
    if (($$5 | 0) == 0) {
     $$414 = 0; //@line 12931
     break L26;
    } else {
     $$219 = $$3; //@line 12934
     $$418 = $$5; //@line 12934
     $30 = $45; //@line 12934
    }
   }
   if ((label | 0) == 20) {
    $$0 = $n - $$418 | 0; //@line 12939
    STACKTOP = sp; //@line 12940
    return $$0 | 0; //@line 12940
   } else if ((label | 0) == 24) {
    HEAP8[$$219] = 0; //@line 12943
    $$414 = $$418; //@line 12944
    break;
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 12948
    return $$0 | 0; //@line 12948
   }
  }
 } while (0);
 HEAP32[$ws >> 2] = 0; //@line 12952
 $$0 = $n - $$414 | 0; //@line 12954
 STACKTOP = sp; //@line 12955
 return $$0 | 0; //@line 12955
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6135
 STACKTOP = STACKTOP + 16 | 0; //@line 6136
 $$byval_copy = sp; //@line 6137
 $vararg_buffer = sp + 8 | 0; //@line 6138
 $__fmt = STACKTOP; //@line 6140
 STACKTOP = STACKTOP + 8 | 0; //@line 6140
 $__nar = STACKTOP; //@line 6141
 STACKTOP = STACKTOP + 16 | 0; //@line 6141
 $__o = STACKTOP; //@line 6142
 STACKTOP = STACKTOP + 24 | 0; //@line 6142
 $__op = STACKTOP; //@line 6143
 STACKTOP = STACKTOP + 8 | 0; //@line 6143
 $__oe = STACKTOP; //@line 6144
 STACKTOP = STACKTOP + 8 | 0; //@line 6144
 $1 = STACKTOP; //@line 6145
 STACKTOP = STACKTOP + 8 | 0; //@line 6145
 $2 = STACKTOP; //@line 6146
 STACKTOP = STACKTOP + 8 | 0; //@line 6146
 $3 = $__fmt; //@line 6147
 HEAP8[$3 + 0 | 0] = HEAP8[4504 | 0] | 0; //@line 6148
 HEAP8[$3 + 1 | 0] = HEAP8[4505 | 0] | 0; //@line 6148
 HEAP8[$3 + 2 | 0] = HEAP8[4506 | 0] | 0; //@line 6148
 HEAP8[$3 + 3 | 0] = HEAP8[4507 | 0] | 0; //@line 6148
 HEAP8[$3 + 4 | 0] = HEAP8[4508 | 0] | 0; //@line 6148
 HEAP8[$3 + 5 | 0] = HEAP8[4509 | 0] | 0; //@line 6148
 $4 = $__fmt + 1 | 0; //@line 6149
 $5 = $__iob + 4 | 0; //@line 6150
 $6 = HEAP32[$5 >> 2] | 0; //@line 6151
 if (($6 & 2048 | 0) == 0) {
  $$0$i = $4; //@line 6155
 } else {
  HEAP8[$4] = 43; //@line 6158
  $$0$i = $__fmt + 2 | 0; //@line 6159
 }
 if (($6 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 6164
 } else {
  HEAP8[$$0$i] = 35; //@line 6167
  $$13$i$ph = $$0$i + 1 | 0; //@line 6168
 }
 HEAP8[$$13$i$ph] = 108; //@line 6170
 $scevgep = $$13$i$ph + 1 | 0; //@line 6171
 $13 = $6 & 74; //@line 6172
 do {
  if (($13 | 0) == 64) {
   HEAP8[$scevgep] = 111; //@line 6175
  } else if (($13 | 0) == 8) {
   if (($6 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120; //@line 6180
    break;
   } else {
    HEAP8[$scevgep] = 88; //@line 6183
    break;
   }
  } else {
   HEAP8[$scevgep] = 117; //@line 6187
  }
 } while (0);
 $16 = $__nar; //@line 6190
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6201
   ___cxa_guard_release(5608); //@line 6202
  }
 } while (0);
 $22 = HEAP32[1400] | 0; //@line 6205
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 6207
 $23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16, 12, $22, $3, $vararg_buffer) | 0; //@line 6208
 $24 = $__nar + $23 | 0; //@line 6209
 $26 = HEAP32[$5 >> 2] & 176; //@line 6211
 do {
  if (($26 | 0) == 32) {
   $$0$i1 = $24; //@line 6214
  } else if (($26 | 0) == 16) {
   $27 = HEAP8[$16] | 0; //@line 6216
   if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 6219
    break;
   }
   if (!(($23 | 0) > 1 & $27 << 24 >> 24 == 48)) {
    label = 20; //@line 6226
    break;
   }
   $32 = HEAP8[$__nar + 1 | 0] | 0; //@line 6230
   if (!($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120)) {
    label = 20; //@line 6232
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 6236
  } else {
   label = 20; //@line 6238
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $16; //@line 6242
 }
 $34 = $__o; //@line 6244
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 6245
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($16, $$0$i1, $24, $34, $__op, $__oe, $1); //@line 6246
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 6250
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2]; //@line 6254
 $41 = HEAP32[$__op >> 2] | 0; //@line 6255
 $42 = HEAP32[$__oe >> 2] | 0; //@line 6256
 $44 = $$byval_copy; //@line 6258
 $45 = $2; //@line 6259
 HEAP32[$44 + 0 >> 2] = HEAP32[$45 + 0 >> 2]; //@line 6260
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $34, $41, $42, $__iob, $__fl); //@line 6261
 STACKTOP = sp; //@line 6263
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5465
 STACKTOP = STACKTOP + 16 | 0; //@line 5466
 $$byval_copy = sp; //@line 5467
 $vararg_buffer = sp + 8 | 0; //@line 5468
 $__fmt = STACKTOP; //@line 5470
 STACKTOP = STACKTOP + 8 | 0; //@line 5470
 $__nar = STACKTOP; //@line 5471
 STACKTOP = STACKTOP + 16 | 0; //@line 5471
 $__o = STACKTOP; //@line 5472
 STACKTOP = STACKTOP + 24 | 0; //@line 5472
 $__op = STACKTOP; //@line 5473
 STACKTOP = STACKTOP + 8 | 0; //@line 5473
 $__oe = STACKTOP; //@line 5474
 STACKTOP = STACKTOP + 8 | 0; //@line 5474
 $1 = STACKTOP; //@line 5475
 STACKTOP = STACKTOP + 8 | 0; //@line 5475
 $2 = STACKTOP; //@line 5476
 STACKTOP = STACKTOP + 8 | 0; //@line 5476
 $3 = $__fmt; //@line 5477
 HEAP8[$3 + 0 | 0] = HEAP8[4504 | 0] | 0; //@line 5478
 HEAP8[$3 + 1 | 0] = HEAP8[4505 | 0] | 0; //@line 5478
 HEAP8[$3 + 2 | 0] = HEAP8[4506 | 0] | 0; //@line 5478
 HEAP8[$3 + 3 | 0] = HEAP8[4507 | 0] | 0; //@line 5478
 HEAP8[$3 + 4 | 0] = HEAP8[4508 | 0] | 0; //@line 5478
 HEAP8[$3 + 5 | 0] = HEAP8[4509 | 0] | 0; //@line 5478
 $4 = $__fmt + 1 | 0; //@line 5479
 $5 = $__iob + 4 | 0; //@line 5480
 $6 = HEAP32[$5 >> 2] | 0; //@line 5481
 if (($6 & 2048 | 0) == 0) {
  $$0$i = $4; //@line 5485
 } else {
  HEAP8[$4] = 43; //@line 5488
  $$0$i = $__fmt + 2 | 0; //@line 5489
 }
 if (($6 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 5494
 } else {
  HEAP8[$$0$i] = 35; //@line 5497
  $$13$i$ph = $$0$i + 1 | 0; //@line 5498
 }
 HEAP8[$$13$i$ph] = 108; //@line 5500
 $scevgep = $$13$i$ph + 1 | 0; //@line 5501
 $13 = $6 & 74; //@line 5502
 do {
  if (($13 | 0) == 64) {
   HEAP8[$scevgep] = 111; //@line 5505
  } else if (($13 | 0) == 8) {
   if (($6 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120; //@line 5510
    break;
   } else {
    HEAP8[$scevgep] = 88; //@line 5513
    break;
   }
  } else {
   HEAP8[$scevgep] = 100; //@line 5517
  }
 } while (0);
 $16 = $__nar; //@line 5520
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 5531
   ___cxa_guard_release(5608); //@line 5532
  }
 } while (0);
 $22 = HEAP32[1400] | 0; //@line 5535
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 5537
 $23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16, 12, $22, $3, $vararg_buffer) | 0; //@line 5538
 $24 = $__nar + $23 | 0; //@line 5539
 $26 = HEAP32[$5 >> 2] & 176; //@line 5541
 do {
  if (($26 | 0) == 16) {
   $27 = HEAP8[$16] | 0; //@line 5544
   if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 5547
    break;
   }
   if (!(($23 | 0) > 1 & $27 << 24 >> 24 == 48)) {
    label = 20; //@line 5554
    break;
   }
   $32 = HEAP8[$__nar + 1 | 0] | 0; //@line 5558
   if (!($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120)) {
    label = 20; //@line 5560
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 5564
  } else if (($26 | 0) == 32) {
   $$0$i1 = $24; //@line 5566
  } else {
   label = 20; //@line 5568
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $16; //@line 5572
 }
 $34 = $__o; //@line 5574
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 5575
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($16, $$0$i1, $24, $34, $__op, $__oe, $1); //@line 5576
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 5580
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2]; //@line 5584
 $41 = HEAP32[$__op >> 2] | 0; //@line 5585
 $42 = HEAP32[$__oe >> 2] | 0; //@line 5586
 $44 = $$byval_copy; //@line 5588
 $45 = $2; //@line 5589
 HEAP32[$44 + 0 >> 2] = HEAP32[$45 + 0 >> 2]; //@line 5590
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $34, $41, $42, $__iob, $__fl); //@line 5591
 STACKTOP = sp; //@line 5593
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8666
 STACKTOP = STACKTOP + 16 | 0; //@line 8667
 $$byval_copy = sp; //@line 8668
 $vararg_buffer = sp + 8 | 0; //@line 8669
 $__fmt = STACKTOP; //@line 8671
 STACKTOP = STACKTOP + 8 | 0; //@line 8671
 $__nar = STACKTOP; //@line 8672
 STACKTOP = STACKTOP + 16 | 0; //@line 8672
 $__o = STACKTOP; //@line 8673
 STACKTOP = STACKTOP + 88 | 0; //@line 8673
 $__op = STACKTOP; //@line 8674
 STACKTOP = STACKTOP + 8 | 0; //@line 8674
 $__oe = STACKTOP; //@line 8675
 STACKTOP = STACKTOP + 8 | 0; //@line 8675
 $1 = STACKTOP; //@line 8676
 STACKTOP = STACKTOP + 8 | 0; //@line 8676
 $2 = STACKTOP; //@line 8677
 STACKTOP = STACKTOP + 8 | 0; //@line 8677
 $3 = $__fmt; //@line 8678
 HEAP8[$3 + 0 | 0] = HEAP8[4504 | 0] | 0; //@line 8679
 HEAP8[$3 + 1 | 0] = HEAP8[4505 | 0] | 0; //@line 8679
 HEAP8[$3 + 2 | 0] = HEAP8[4506 | 0] | 0; //@line 8679
 HEAP8[$3 + 3 | 0] = HEAP8[4507 | 0] | 0; //@line 8679
 HEAP8[$3 + 4 | 0] = HEAP8[4508 | 0] | 0; //@line 8679
 HEAP8[$3 + 5 | 0] = HEAP8[4509 | 0] | 0; //@line 8679
 $4 = $__fmt + 1 | 0; //@line 8680
 $5 = $__iob + 4 | 0; //@line 8681
 $6 = HEAP32[$5 >> 2] | 0; //@line 8682
 if (($6 & 2048 | 0) == 0) {
  $$0$i = $4; //@line 8686
 } else {
  HEAP8[$4] = 43; //@line 8689
  $$0$i = $__fmt + 2 | 0; //@line 8690
 }
 if (($6 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 8695
 } else {
  HEAP8[$$0$i] = 35; //@line 8698
  $$13$i$ph = $$0$i + 1 | 0; //@line 8699
 }
 HEAP8[$$13$i$ph] = 108; //@line 8701
 $scevgep = $$13$i$ph + 1 | 0; //@line 8702
 $13 = $6 & 74; //@line 8703
 do {
  if (($13 | 0) == 64) {
   HEAP8[$scevgep] = 111; //@line 8706
  } else if (($13 | 0) == 8) {
   if (($6 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120; //@line 8711
    break;
   } else {
    HEAP8[$scevgep] = 88; //@line 8714
    break;
   }
  } else {
   HEAP8[$scevgep] = 117; //@line 8718
  }
 } while (0);
 $16 = $__nar; //@line 8721
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 8732
   ___cxa_guard_release(5608); //@line 8733
  }
 } while (0);
 $22 = HEAP32[1400] | 0; //@line 8736
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 8738
 $23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16, 12, $22, $3, $vararg_buffer) | 0; //@line 8739
 $24 = $__nar + $23 | 0; //@line 8740
 $26 = HEAP32[$5 >> 2] & 176; //@line 8742
 do {
  if (($26 | 0) == 16) {
   $27 = HEAP8[$16] | 0; //@line 8745
   if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 8748
    break;
   }
   if (!(($23 | 0) > 1 & $27 << 24 >> 24 == 48)) {
    label = 20; //@line 8755
    break;
   }
   $32 = HEAP8[$__nar + 1 | 0] | 0; //@line 8759
   if (!($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120)) {
    label = 20; //@line 8761
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 8765
  } else if (($26 | 0) == 32) {
   $$0$i1 = $24; //@line 8767
  } else {
   label = 20; //@line 8769
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $16; //@line 8773
 }
 $35 = $__o; //@line 8776
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 8777
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($16, $$0$i1, $24, $35, $__op, $__oe, $1); //@line 8778
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 8782
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2]; //@line 8786
 $42 = HEAP32[$__op >> 2] | 0; //@line 8787
 $43 = HEAP32[$__oe >> 2] | 0; //@line 8788
 $45 = $$byval_copy; //@line 8790
 $46 = $2; //@line 8791
 HEAP32[$45 + 0 >> 2] = HEAP32[$46 + 0 >> 2]; //@line 8792
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $35, $42, $43, $__iob, $__fl); //@line 8793
 STACKTOP = sp; //@line 8795
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7902
 STACKTOP = STACKTOP + 16 | 0; //@line 7903
 $$byval_copy = sp; //@line 7904
 $vararg_buffer = sp + 8 | 0; //@line 7905
 $__fmt = STACKTOP; //@line 7907
 STACKTOP = STACKTOP + 8 | 0; //@line 7907
 $__nar = STACKTOP; //@line 7908
 STACKTOP = STACKTOP + 16 | 0; //@line 7908
 $__o = STACKTOP; //@line 7909
 STACKTOP = STACKTOP + 88 | 0; //@line 7909
 $__op = STACKTOP; //@line 7910
 STACKTOP = STACKTOP + 8 | 0; //@line 7910
 $__oe = STACKTOP; //@line 7911
 STACKTOP = STACKTOP + 8 | 0; //@line 7911
 $1 = STACKTOP; //@line 7912
 STACKTOP = STACKTOP + 8 | 0; //@line 7912
 $2 = STACKTOP; //@line 7913
 STACKTOP = STACKTOP + 8 | 0; //@line 7913
 $3 = $__fmt; //@line 7914
 HEAP8[$3 + 0 | 0] = HEAP8[4504 | 0] | 0; //@line 7915
 HEAP8[$3 + 1 | 0] = HEAP8[4505 | 0] | 0; //@line 7915
 HEAP8[$3 + 2 | 0] = HEAP8[4506 | 0] | 0; //@line 7915
 HEAP8[$3 + 3 | 0] = HEAP8[4507 | 0] | 0; //@line 7915
 HEAP8[$3 + 4 | 0] = HEAP8[4508 | 0] | 0; //@line 7915
 HEAP8[$3 + 5 | 0] = HEAP8[4509 | 0] | 0; //@line 7915
 $4 = $__fmt + 1 | 0; //@line 7916
 $5 = $__iob + 4 | 0; //@line 7917
 $6 = HEAP32[$5 >> 2] | 0; //@line 7918
 if (($6 & 2048 | 0) == 0) {
  $$0$i = $4; //@line 7922
 } else {
  HEAP8[$4] = 43; //@line 7925
  $$0$i = $__fmt + 2 | 0; //@line 7926
 }
 if (($6 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 7931
 } else {
  HEAP8[$$0$i] = 35; //@line 7934
  $$13$i$ph = $$0$i + 1 | 0; //@line 7935
 }
 HEAP8[$$13$i$ph] = 108; //@line 7937
 $scevgep = $$13$i$ph + 1 | 0; //@line 7938
 $13 = $6 & 74; //@line 7939
 do {
  if (($13 | 0) == 8) {
   if (($6 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120; //@line 7945
    break;
   } else {
    HEAP8[$scevgep] = 88; //@line 7948
    break;
   }
  } else if (($13 | 0) == 64) {
   HEAP8[$scevgep] = 111; //@line 7952
  } else {
   HEAP8[$scevgep] = 100; //@line 7954
  }
 } while (0);
 $16 = $__nar; //@line 7957
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 7968
   ___cxa_guard_release(5608); //@line 7969
  }
 } while (0);
 $22 = HEAP32[1400] | 0; //@line 7972
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 7974
 $23 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16, 12, $22, $3, $vararg_buffer) | 0; //@line 7975
 $24 = $__nar + $23 | 0; //@line 7976
 $26 = HEAP32[$5 >> 2] & 176; //@line 7978
 do {
  if (($26 | 0) == 16) {
   $27 = HEAP8[$16] | 0; //@line 7981
   if ($27 << 24 >> 24 == 43 | $27 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 7984
    break;
   }
   if (!(($23 | 0) > 1 & $27 << 24 >> 24 == 48)) {
    label = 20; //@line 7991
    break;
   }
   $32 = HEAP8[$__nar + 1 | 0] | 0; //@line 7995
   if (!($32 << 24 >> 24 == 88 | $32 << 24 >> 24 == 120)) {
    label = 20; //@line 7997
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 8001
  } else if (($26 | 0) == 32) {
   $$0$i1 = $24; //@line 8003
  } else {
   label = 20; //@line 8005
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $16; //@line 8009
 }
 $35 = $__o; //@line 8012
 __ZNKSt3__18ios_base6getlocEv($1, $__iob); //@line 8013
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($16, $$0$i1, $24, $35, $__op, $__oe, $1); //@line 8014
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 8018
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2]; //@line 8022
 $42 = HEAP32[$__op >> 2] | 0; //@line 8023
 $43 = HEAP32[$__oe >> 2] | 0; //@line 8024
 $45 = $$byval_copy; //@line 8026
 $46 = $2; //@line 8027
 HEAP32[$45 + 0 >> 2] = HEAP32[$46 + 0 >> 2]; //@line 8028
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $35, $42, $43, $__iob, $__fl); //@line 8029
 STACKTOP = sp; //@line 8031
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i915 = 0, $1 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $34 = 0, $36 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $65 = 0, $68 = 0, $79 = 0, $82 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15088
 $1 = $__b; //@line 15089
 $2 = HEAP32[$1 >> 2] | 0; //@line 15090
 do {
  if (($2 | 0) == 0) {
   $16 = 1; //@line 15094
  } else {
   $5 = HEAP32[$2 + 12 >> 2] | 0; //@line 15097
   if (($5 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0; //@line 15107
   } else {
    $$0$i$i$i$i = HEAP32[$5 >> 2] | 0; //@line 15110
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 15114
    $16 = 1; //@line 15115
    break;
   } else {
    $16 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15120
    break;
   }
  }
 } while (0);
 $17 = $__e; //@line 15125
 $18 = HEAP32[$17 >> 2] | 0; //@line 15126
 do {
  if (($18 | 0) == 0) {
   label = 14; //@line 15130
  } else {
   $21 = HEAP32[$18 + 12 >> 2] | 0; //@line 15133
   if (($21 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0; //@line 15143
   } else {
    $$0$i$i1$i$i = HEAP32[$21 >> 2] | 0; //@line 15146
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 15150
    label = 14; //@line 15151
    break;
   } else {
    if ($16) {
     $$pre$i3$i$i915 = $18; //@line 15155
     break;
    } else {
     label = 16; //@line 15158
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($16) {
   label = 16; //@line 15166
  } else {
   $$pre$i3$i$i915 = 0; //@line 15168
  }
 }
 if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 15174
  STACKTOP = sp; //@line 15175
  return;
 }
 $34 = HEAP32[$1 >> 2] | 0; //@line 15177
 $36 = HEAP32[$34 + 12 >> 2] | 0; //@line 15179
 if (($36 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 15189
 } else {
  $$0$i$i = HEAP32[$36 >> 2] | 0; //@line 15192
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15203
  STACKTOP = sp; //@line 15204
  return;
 }
 $54 = HEAP32[$1 >> 2] | 0; //@line 15206
 $55 = $54 + 12 | 0; //@line 15207
 $56 = HEAP32[$55 >> 2] | 0; //@line 15208
 if (($56 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] & 127]($54) | 0; //@line 15217
 } else {
  HEAP32[$55 >> 2] = $56 + 4; //@line 15220
 }
 $65 = HEAP32[$1 >> 2] | 0; //@line 15222
 do {
  if (($65 | 0) == 0) {
   $79 = 1; //@line 15226
  } else {
   $68 = HEAP32[$65 + 12 >> 2] | 0; //@line 15229
   if (($68 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 127]($65) | 0; //@line 15239
   } else {
    $$0$i$i$i$i1 = HEAP32[$68 >> 2] | 0; //@line 15242
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 15246
    $79 = 1; //@line 15247
    break;
   } else {
    $79 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15252
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i915 | 0) == 0) {
   label = 38; //@line 15260
  } else {
   $82 = HEAP32[$$pre$i3$i$i915 + 12 >> 2] | 0; //@line 15263
   if (($82 | 0) == (HEAP32[$$pre$i3$i$i915 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i915) | 0; //@line 15273
   } else {
    $$0$i$i1$i$i7 = HEAP32[$82 >> 2] | 0; //@line 15276
   }
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$17 >> 2] = 0; //@line 15280
    label = 38; //@line 15281
    break;
   }
   if (!$79) {
    break;
   }
   STACKTOP = sp; //@line 15287
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 38) {
   if ($79) {
    break;
   }
   STACKTOP = sp; //@line 15295
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 15300
 STACKTOP = sp; //@line 15301
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i9 = 0, $1 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $50 = 0, $51 = 0, $52 = 0, $61 = 0, $64 = 0, $7 = 0, $75 = 0, $78 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14864
 $1 = $__b; //@line 14865
 $2 = $__e; //@line 14866
 $3 = $__ct; //@line 14867
 L1 : while (1) {
  $4 = HEAP32[$1 >> 2] | 0; //@line 14869
  do {
   if (($4 | 0) == 0) {
    $18 = 1; //@line 14873
   } else {
    $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 14876
    if (($7 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; //@line 14886
    } else {
     $$0$i$i$i$i = HEAP32[$7 >> 2] | 0; //@line 14889
    }
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$1 >> 2] = 0; //@line 14893
     $18 = 1; //@line 14894
     break;
    } else {
     $18 = (HEAP32[$1 >> 2] | 0) == 0; //@line 14899
     break;
    }
   }
  } while (0);
  $19 = HEAP32[$2 >> 2] | 0; //@line 14904
  do {
   if (($19 | 0) == 0) {
    label = 15; //@line 14908
   } else {
    $22 = HEAP32[$19 + 12 >> 2] | 0; //@line 14911
    if (($22 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] & 127]($19) | 0; //@line 14921
    } else {
     $$0$i$i1$i$i = HEAP32[$22 >> 2] | 0; //@line 14924
    }
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$2 >> 2] = 0; //@line 14928
     label = 15; //@line 14929
     break;
    } else {
     if ($18) {
      $33 = $19; //@line 14933
      break;
     } else {
      $$pre$i3$i$i9 = $19; //@line 14936
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 14943
   if ($18) {
    $$pre$i3$i$i9 = 0; //@line 14945
    break;
   } else {
    $33 = 0; //@line 14948
   }
  }
  $34 = HEAP32[$1 >> 2] | 0; //@line 14951
  $36 = HEAP32[$34 + 12 >> 2] | 0; //@line 14953
  if (($36 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 127]($34) | 0; //@line 14963
  } else {
   $$0$i$i = HEAP32[$36 >> 2] | 0; //@line 14966
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i3$i$i9 = $33; //@line 14973
   break;
  }
  $50 = HEAP32[$1 >> 2] | 0; //@line 14976
  $51 = $50 + 12 | 0; //@line 14977
  $52 = HEAP32[$51 >> 2] | 0; //@line 14978
  if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 127]($50) | 0; //@line 14987
   continue;
  } else {
   HEAP32[$51 >> 2] = $52 + 4; //@line 14991
   continue;
  }
 }
 $61 = HEAP32[$1 >> 2] | 0; //@line 14995
 do {
  if (($61 | 0) == 0) {
   $75 = 1; //@line 14999
  } else {
   $64 = HEAP32[$61 + 12 >> 2] | 0; //@line 15002
   if (($64 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 36 >> 2] & 127]($61) | 0; //@line 15012
   } else {
    $$0$i$i$i$i1 = HEAP32[$64 >> 2] | 0; //@line 15015
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 15019
    $75 = 1; //@line 15020
    break;
   } else {
    $75 = (HEAP32[$1 >> 2] | 0) == 0; //@line 15025
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i9 | 0) == 0) {
   label = 37; //@line 15033
  } else {
   $78 = HEAP32[$$pre$i3$i$i9 + 12 >> 2] | 0; //@line 15036
   if (($78 | 0) == (HEAP32[$$pre$i3$i$i9 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9 >> 2] | 0) + 36 >> 2] & 127]($$pre$i3$i$i9) | 0; //@line 15046
   } else {
    $$0$i$i1$i$i7 = HEAP32[$78 >> 2] | 0; //@line 15049
   }
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$2 >> 2] = 0; //@line 15053
    label = 37; //@line 15054
    break;
   }
   if (!$75) {
    break;
   }
   STACKTOP = sp; //@line 15060
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 37) {
   if ($75) {
    break;
   }
   STACKTOP = sp; //@line 15068
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 15073
 STACKTOP = sp; //@line 15074
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result, $this, $__s, $__iob, $__fl, $1, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8809
 STACKTOP = STACKTOP + 16 | 0; //@line 8810
 $$byval_copy = sp; //@line 8811
 $vararg_buffer = sp + 8 | 0; //@line 8812
 $__fmt = STACKTOP; //@line 8814
 STACKTOP = STACKTOP + 8 | 0; //@line 8814
 $__nar = STACKTOP; //@line 8815
 STACKTOP = STACKTOP + 24 | 0; //@line 8815
 $__o = STACKTOP; //@line 8816
 STACKTOP = STACKTOP + 176 | 0; //@line 8816
 $__op = STACKTOP; //@line 8817
 STACKTOP = STACKTOP + 8 | 0; //@line 8817
 $__oe = STACKTOP; //@line 8818
 STACKTOP = STACKTOP + 8 | 0; //@line 8818
 $3 = STACKTOP; //@line 8819
 STACKTOP = STACKTOP + 8 | 0; //@line 8819
 $4 = STACKTOP; //@line 8820
 STACKTOP = STACKTOP + 8 | 0; //@line 8820
 $5 = $__fmt; //@line 8821
 HEAP32[$5 >> 2] = 37; //@line 8823
 HEAP32[$5 + 4 >> 2] = 0; //@line 8826
 $9 = $__fmt; //@line 8827
 $10 = $9 + 1 | 0; //@line 8828
 $11 = $__iob + 4 | 0; //@line 8829
 $12 = HEAP32[$11 >> 2] | 0; //@line 8830
 if (($12 & 2048 | 0) == 0) {
  $$0$i = $10; //@line 8834
 } else {
  HEAP8[$10] = 43; //@line 8837
  $$0$i = $9 + 2 | 0; //@line 8838
 }
 if (($12 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 8843
 } else {
  HEAP8[$$0$i] = 35; //@line 8846
  $$13$i$ph = $$0$i + 1 | 0; //@line 8847
 }
 $lftr$limit = $$13$i$ph + 2 | 0; //@line 8849
 HEAP8[$$13$i$ph] = 108; //@line 8851
 HEAP8[$$13$i$ph + 1 | 0] = 108; //@line 8852
 $20 = $12 & 74; //@line 8853
 do {
  if (($20 | 0) == 64) {
   HEAP8[$lftr$limit] = 111; //@line 8856
  } else if (($20 | 0) == 8) {
   if (($12 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit] = 120; //@line 8861
    break;
   } else {
    HEAP8[$lftr$limit] = 88; //@line 8864
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117; //@line 8868
  }
 } while (0);
 $23 = $__nar; //@line 8871
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 8882
   ___cxa_guard_release(5608); //@line 8883
  }
 } while (0);
 $29 = HEAP32[1400] | 0; //@line 8886
 $30 = $vararg_buffer; //@line 8888
 HEAP32[$30 >> 2] = $1; //@line 8890
 HEAP32[$30 + 4 >> 2] = $2; //@line 8893
 $34 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23, 23, $29, $9, $vararg_buffer) | 0; //@line 8894
 $35 = $__nar + $34 | 0; //@line 8895
 $37 = HEAP32[$11 >> 2] & 176; //@line 8897
 do {
  if (($37 | 0) == 16) {
   $38 = HEAP8[$23] | 0; //@line 8900
   if ($38 << 24 >> 24 == 43 | $38 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 8903
    break;
   }
   if (!(($34 | 0) > 1 & $38 << 24 >> 24 == 48)) {
    label = 20; //@line 8910
    break;
   }
   $43 = HEAP8[$__nar + 1 | 0] | 0; //@line 8914
   if (!($43 << 24 >> 24 == 88 | $43 << 24 >> 24 == 120)) {
    label = 20; //@line 8916
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 8920
  } else if (($37 | 0) == 32) {
   $$0$i1 = $35; //@line 8922
  } else {
   label = 20; //@line 8924
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $23; //@line 8928
 }
 $46 = $__o; //@line 8931
 __ZNKSt3__18ios_base6getlocEv($3, $__iob); //@line 8932
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23, $$0$i1, $35, $46, $__op, $__oe, $3); //@line 8933
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 8937
 HEAP32[$4 >> 2] = HEAP32[$__s >> 2]; //@line 8941
 $53 = HEAP32[$__op >> 2] | 0; //@line 8942
 $54 = HEAP32[$__oe >> 2] | 0; //@line 8943
 $56 = $$byval_copy; //@line 8945
 $57 = $4; //@line 8946
 HEAP32[$56 + 0 >> 2] = HEAP32[$57 + 0 >> 2]; //@line 8947
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $46, $53, $54, $__iob, $__fl); //@line 8948
 STACKTOP = sp; //@line 8950
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result, $this, $__s, $__iob, $__fl, $1, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8512
 STACKTOP = STACKTOP + 16 | 0; //@line 8513
 $$byval_copy = sp; //@line 8514
 $vararg_buffer = sp + 8 | 0; //@line 8515
 $__fmt = STACKTOP; //@line 8517
 STACKTOP = STACKTOP + 8 | 0; //@line 8517
 $__nar = STACKTOP; //@line 8518
 STACKTOP = STACKTOP + 24 | 0; //@line 8518
 $__o = STACKTOP; //@line 8519
 STACKTOP = STACKTOP + 168 | 0; //@line 8519
 $__op = STACKTOP; //@line 8520
 STACKTOP = STACKTOP + 8 | 0; //@line 8520
 $__oe = STACKTOP; //@line 8521
 STACKTOP = STACKTOP + 8 | 0; //@line 8521
 $3 = STACKTOP; //@line 8522
 STACKTOP = STACKTOP + 8 | 0; //@line 8522
 $4 = STACKTOP; //@line 8523
 STACKTOP = STACKTOP + 8 | 0; //@line 8523
 $5 = $__fmt; //@line 8524
 HEAP32[$5 >> 2] = 37; //@line 8526
 HEAP32[$5 + 4 >> 2] = 0; //@line 8529
 $9 = $__fmt; //@line 8530
 $10 = $9 + 1 | 0; //@line 8531
 $11 = $__iob + 4 | 0; //@line 8532
 $12 = HEAP32[$11 >> 2] | 0; //@line 8533
 if (($12 & 2048 | 0) == 0) {
  $$0$i = $10; //@line 8537
 } else {
  HEAP8[$10] = 43; //@line 8540
  $$0$i = $9 + 2 | 0; //@line 8541
 }
 if (($12 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 8546
 } else {
  HEAP8[$$0$i] = 35; //@line 8549
  $$13$i$ph = $$0$i + 1 | 0; //@line 8550
 }
 $lftr$limit = $$13$i$ph + 2 | 0; //@line 8552
 HEAP8[$$13$i$ph] = 108; //@line 8554
 HEAP8[$$13$i$ph + 1 | 0] = 108; //@line 8555
 $20 = $12 & 74; //@line 8556
 do {
  if (($20 | 0) == 64) {
   HEAP8[$lftr$limit] = 111; //@line 8559
  } else if (($20 | 0) == 8) {
   if (($12 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit] = 120; //@line 8564
    break;
   } else {
    HEAP8[$lftr$limit] = 88; //@line 8567
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 100; //@line 8571
  }
 } while (0);
 $23 = $__nar; //@line 8574
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 8585
   ___cxa_guard_release(5608); //@line 8586
  }
 } while (0);
 $29 = HEAP32[1400] | 0; //@line 8589
 $30 = $vararg_buffer; //@line 8591
 HEAP32[$30 >> 2] = $1; //@line 8593
 HEAP32[$30 + 4 >> 2] = $2; //@line 8596
 $34 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23, 22, $29, $9, $vararg_buffer) | 0; //@line 8597
 $35 = $__nar + $34 | 0; //@line 8598
 $37 = HEAP32[$11 >> 2] & 176; //@line 8600
 do {
  if (($37 | 0) == 32) {
   $$0$i1 = $35; //@line 8603
  } else if (($37 | 0) == 16) {
   $38 = HEAP8[$23] | 0; //@line 8605
   if ($38 << 24 >> 24 == 43 | $38 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 8608
    break;
   }
   if (!(($34 | 0) > 1 & $38 << 24 >> 24 == 48)) {
    label = 20; //@line 8615
    break;
   }
   $43 = HEAP8[$__nar + 1 | 0] | 0; //@line 8619
   if (!($43 << 24 >> 24 == 88 | $43 << 24 >> 24 == 120)) {
    label = 20; //@line 8621
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 8625
  } else {
   label = 20; //@line 8627
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $23; //@line 8631
 }
 $46 = $__o; //@line 8634
 __ZNKSt3__18ios_base6getlocEv($3, $__iob); //@line 8635
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23, $$0$i1, $35, $46, $__op, $__oe, $3); //@line 8636
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 8640
 HEAP32[$4 >> 2] = HEAP32[$__s >> 2]; //@line 8644
 $53 = HEAP32[$__op >> 2] | 0; //@line 8645
 $54 = HEAP32[$__oe >> 2] | 0; //@line 8646
 $56 = $$byval_copy; //@line 8648
 $57 = $4; //@line 8649
 HEAP32[$56 + 0 >> 2] = HEAP32[$57 + 0 >> 2]; //@line 8650
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $46, $53, $54, $__iob, $__fl); //@line 8651
 STACKTOP = sp; //@line 8653
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result, $this, $__s, $__iob, $__fl, $1, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6277
 STACKTOP = STACKTOP + 16 | 0; //@line 6278
 $$byval_copy = sp; //@line 6279
 $vararg_buffer = sp + 8 | 0; //@line 6280
 $__fmt = STACKTOP; //@line 6282
 STACKTOP = STACKTOP + 8 | 0; //@line 6282
 $__nar = STACKTOP; //@line 6283
 STACKTOP = STACKTOP + 24 | 0; //@line 6283
 $__o = STACKTOP; //@line 6284
 STACKTOP = STACKTOP + 48 | 0; //@line 6284
 $__op = STACKTOP; //@line 6285
 STACKTOP = STACKTOP + 8 | 0; //@line 6285
 $__oe = STACKTOP; //@line 6286
 STACKTOP = STACKTOP + 8 | 0; //@line 6286
 $3 = STACKTOP; //@line 6287
 STACKTOP = STACKTOP + 8 | 0; //@line 6287
 $4 = STACKTOP; //@line 6288
 STACKTOP = STACKTOP + 8 | 0; //@line 6288
 $5 = $__fmt; //@line 6289
 HEAP32[$5 >> 2] = 37; //@line 6291
 HEAP32[$5 + 4 >> 2] = 0; //@line 6294
 $9 = $__fmt; //@line 6295
 $10 = $9 + 1 | 0; //@line 6296
 $11 = $__iob + 4 | 0; //@line 6297
 $12 = HEAP32[$11 >> 2] | 0; //@line 6298
 if (($12 & 2048 | 0) == 0) {
  $$0$i = $10; //@line 6302
 } else {
  HEAP8[$10] = 43; //@line 6305
  $$0$i = $9 + 2 | 0; //@line 6306
 }
 if (($12 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 6311
 } else {
  HEAP8[$$0$i] = 35; //@line 6314
  $$13$i$ph = $$0$i + 1 | 0; //@line 6315
 }
 $lftr$limit = $$13$i$ph + 2 | 0; //@line 6317
 HEAP8[$$13$i$ph] = 108; //@line 6319
 HEAP8[$$13$i$ph + 1 | 0] = 108; //@line 6320
 $20 = $12 & 74; //@line 6321
 do {
  if (($20 | 0) == 64) {
   HEAP8[$lftr$limit] = 111; //@line 6324
  } else if (($20 | 0) == 8) {
   if (($12 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit] = 120; //@line 6329
    break;
   } else {
    HEAP8[$lftr$limit] = 88; //@line 6332
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117; //@line 6336
  }
 } while (0);
 $23 = $__nar; //@line 6339
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6350
   ___cxa_guard_release(5608); //@line 6351
  }
 } while (0);
 $29 = HEAP32[1400] | 0; //@line 6354
 $30 = $vararg_buffer; //@line 6356
 HEAP32[$30 >> 2] = $1; //@line 6358
 HEAP32[$30 + 4 >> 2] = $2; //@line 6361
 $34 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23, 23, $29, $9, $vararg_buffer) | 0; //@line 6362
 $35 = $__nar + $34 | 0; //@line 6363
 $37 = HEAP32[$11 >> 2] & 176; //@line 6365
 do {
  if (($37 | 0) == 16) {
   $38 = HEAP8[$23] | 0; //@line 6368
   if ($38 << 24 >> 24 == 43 | $38 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 6371
    break;
   }
   if (!(($34 | 0) > 1 & $38 << 24 >> 24 == 48)) {
    label = 20; //@line 6378
    break;
   }
   $43 = HEAP8[$__nar + 1 | 0] | 0; //@line 6382
   if (!($43 << 24 >> 24 == 88 | $43 << 24 >> 24 == 120)) {
    label = 20; //@line 6384
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 6388
  } else if (($37 | 0) == 32) {
   $$0$i1 = $35; //@line 6390
  } else {
   label = 20; //@line 6392
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $23; //@line 6396
 }
 $45 = $__o; //@line 6398
 __ZNKSt3__18ios_base6getlocEv($3, $__iob); //@line 6399
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23, $$0$i1, $35, $45, $__op, $__oe, $3); //@line 6400
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 6404
 HEAP32[$4 >> 2] = HEAP32[$__s >> 2]; //@line 6408
 $52 = HEAP32[$__op >> 2] | 0; //@line 6409
 $53 = HEAP32[$__oe >> 2] | 0; //@line 6410
 $55 = $$byval_copy; //@line 6412
 $56 = $4; //@line 6413
 HEAP32[$55 + 0 >> 2] = HEAP32[$56 + 0 >> 2]; //@line 6414
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $45, $52, $53, $__iob, $__fl); //@line 6415
 STACKTOP = sp; //@line 6417
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result, $this, $__s, $__iob, $__fl, $1, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5982
 STACKTOP = STACKTOP + 16 | 0; //@line 5983
 $$byval_copy = sp; //@line 5984
 $vararg_buffer = sp + 8 | 0; //@line 5985
 $__fmt = STACKTOP; //@line 5987
 STACKTOP = STACKTOP + 8 | 0; //@line 5987
 $__nar = STACKTOP; //@line 5988
 STACKTOP = STACKTOP + 24 | 0; //@line 5988
 $__o = STACKTOP; //@line 5989
 STACKTOP = STACKTOP + 48 | 0; //@line 5989
 $__op = STACKTOP; //@line 5990
 STACKTOP = STACKTOP + 8 | 0; //@line 5990
 $__oe = STACKTOP; //@line 5991
 STACKTOP = STACKTOP + 8 | 0; //@line 5991
 $3 = STACKTOP; //@line 5992
 STACKTOP = STACKTOP + 8 | 0; //@line 5992
 $4 = STACKTOP; //@line 5993
 STACKTOP = STACKTOP + 8 | 0; //@line 5993
 $5 = $__fmt; //@line 5994
 HEAP32[$5 >> 2] = 37; //@line 5996
 HEAP32[$5 + 4 >> 2] = 0; //@line 5999
 $9 = $__fmt; //@line 6000
 $10 = $9 + 1 | 0; //@line 6001
 $11 = $__iob + 4 | 0; //@line 6002
 $12 = HEAP32[$11 >> 2] | 0; //@line 6003
 if (($12 & 2048 | 0) == 0) {
  $$0$i = $10; //@line 6007
 } else {
  HEAP8[$10] = 43; //@line 6010
  $$0$i = $9 + 2 | 0; //@line 6011
 }
 if (($12 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i; //@line 6016
 } else {
  HEAP8[$$0$i] = 35; //@line 6019
  $$13$i$ph = $$0$i + 1 | 0; //@line 6020
 }
 $lftr$limit = $$13$i$ph + 2 | 0; //@line 6022
 HEAP8[$$13$i$ph] = 108; //@line 6024
 HEAP8[$$13$i$ph + 1 | 0] = 108; //@line 6025
 $20 = $12 & 74; //@line 6026
 do {
  if (($20 | 0) == 8) {
   if (($12 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit] = 120; //@line 6032
    break;
   } else {
    HEAP8[$lftr$limit] = 88; //@line 6035
    break;
   }
  } else if (($20 | 0) == 64) {
   HEAP8[$lftr$limit] = 111; //@line 6039
  } else {
   HEAP8[$lftr$limit] = 100; //@line 6041
  }
 } while (0);
 $23 = $__nar; //@line 6044
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 6055
   ___cxa_guard_release(5608); //@line 6056
  }
 } while (0);
 $29 = HEAP32[1400] | 0; //@line 6059
 $30 = $vararg_buffer; //@line 6061
 HEAP32[$30 >> 2] = $1; //@line 6063
 HEAP32[$30 + 4 >> 2] = $2; //@line 6066
 $34 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23, 22, $29, $9, $vararg_buffer) | 0; //@line 6067
 $35 = $__nar + $34 | 0; //@line 6068
 $37 = HEAP32[$11 >> 2] & 176; //@line 6070
 do {
  if (($37 | 0) == 16) {
   $38 = HEAP8[$23] | 0; //@line 6073
   if ($38 << 24 >> 24 == 43 | $38 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0; //@line 6076
    break;
   }
   if (!(($34 | 0) > 1 & $38 << 24 >> 24 == 48)) {
    label = 20; //@line 6083
    break;
   }
   $43 = HEAP8[$__nar + 1 | 0] | 0; //@line 6087
   if (!($43 << 24 >> 24 == 88 | $43 << 24 >> 24 == 120)) {
    label = 20; //@line 6089
    break;
   }
   $$0$i1 = $__nar + 2 | 0; //@line 6093
  } else if (($37 | 0) == 32) {
   $$0$i1 = $35; //@line 6095
  } else {
   label = 20; //@line 6097
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $23; //@line 6101
 }
 $45 = $__o; //@line 6103
 __ZNKSt3__18ios_base6getlocEv($3, $__iob); //@line 6104
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23, $$0$i1, $35, $45, $__op, $__oe, $3); //@line 6105
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 6109
 HEAP32[$4 >> 2] = HEAP32[$__s >> 2]; //@line 6113
 $52 = HEAP32[$__op >> 2] | 0; //@line 6114
 $53 = HEAP32[$__oe >> 2] | 0; //@line 6115
 $55 = $$byval_copy; //@line 6117
 $56 = $4; //@line 6118
 HEAP32[$55 + 0 >> 2] = HEAP32[$56 + 0 >> 2]; //@line 6119
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $45, $52, $53, $__iob, $__fl); //@line 6120
 STACKTOP = sp; //@line 6122
 return;
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $13 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $52 = 0, $57 = 0, $59 = 0, $66 = 0, $69 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5315
 STACKTOP = STACKTOP + 32 | 0; //@line 5316
 $__extbuf = sp; //@line 5317
 $__1buf = sp + 8 | 0; //@line 5318
 $__enxt = sp + 16 | 0; //@line 5319
 $__inxt = sp + 24 | 0; //@line 5320
 $1 = $this + 52 | 0; //@line 5321
 if ((HEAP8[$1] | 0) != 0) {
  $4 = $this + 48 | 0; //@line 5325
  $5 = HEAP32[$4 >> 2] | 0; //@line 5326
  if (!$__consume) {
   $$0 = $5; //@line 5328
   STACKTOP = sp; //@line 5329
   return $$0 | 0; //@line 5329
  }
  HEAP32[$4 >> 2] = -1; //@line 5331
  HEAP8[$1] = 0; //@line 5332
  $$0 = $5; //@line 5333
  STACKTOP = sp; //@line 5334
  return $$0 | 0; //@line 5334
 }
 $7 = HEAP32[$this + 44 >> 2] | 0; //@line 5337
 $9 = ($7 | 0) > 1 ? $7 : 1; //@line 5339
 L8 : do {
  if (($9 | 0) > 0) {
   $11 = $this + 32 | 0; //@line 5343
   $__i$09 = 0; //@line 5344
   while (1) {
    $13 = _fgetc(HEAP32[$11 >> 2] | 0) | 0; //@line 5347
    if (($13 | 0) == -1) {
     $$0 = -1; //@line 5350
     break;
    }
    HEAP8[$__extbuf + $__i$09 | 0] = $13; //@line 5355
    $__i$09 = $__i$09 + 1 | 0; //@line 5356
    if (($__i$09 | 0) >= ($9 | 0)) {
     break L8;
    }
   }
   STACKTOP = sp; //@line 5364
   return $$0 | 0; //@line 5364
  }
 } while (0);
 L15 : do {
  if ((HEAP8[$this + 53 | 0] | 0) == 0) {
   $22 = $this + 40 | 0; //@line 5372
   $23 = $this + 36 | 0; //@line 5373
   $24 = $__extbuf; //@line 5374
   $25 = $__1buf + 1 | 0; //@line 5375
   $26 = $this + 32 | 0; //@line 5376
   $__nread$0 = $9; //@line 5377
   while (1) {
    $29 = HEAP32[$22 >> 2] | 0; //@line 5379
    $31 = $29; //@line 5381
    $33 = HEAP32[$31 >> 2] | 0; //@line 5383
    $36 = HEAP32[$31 + 4 >> 2] | 0; //@line 5386
    $37 = HEAP32[$23 >> 2] | 0; //@line 5387
    $38 = $__extbuf + $__nread$0 | 0; //@line 5388
    $43 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$37 >> 2] | 0) + 16 >> 2] & 15]($37, $29, $24, $38, $__enxt, $__1buf, $25, $__inxt) | 0; //@line 5393
    if (($43 | 0) == 3) {
     label = 14; //@line 5395
     break;
    } else if (($43 | 0) == 2) {
     $$0 = -1; //@line 5398
     label = 23; //@line 5399
     break;
    } else if (($43 | 0) != 1) {
     $__nread$2 = $__nread$0; //@line 5402
     break L15;
    }
    $46 = HEAP32[$22 >> 2] | 0; //@line 5407
    HEAP32[$46 >> 2] = $33; //@line 5409
    HEAP32[$46 + 4 >> 2] = $36; //@line 5412
    if (($__nread$0 | 0) == 8) {
     $$0 = -1; //@line 5415
     label = 23; //@line 5416
     break;
    }
    $52 = _fgetc(HEAP32[$26 >> 2] | 0) | 0; //@line 5420
    if (($52 | 0) == -1) {
     $$0 = -1; //@line 5423
     label = 23; //@line 5424
     break;
    }
    HEAP8[$38] = $52; //@line 5428
    $__nread$0 = $__nread$0 + 1 | 0; //@line 5430
   }
   if ((label | 0) == 14) {
    HEAP8[$__1buf] = HEAP8[$24] | 0; //@line 5434
    $__nread$2 = $__nread$0; //@line 5435
    break;
   } else if ((label | 0) == 23) {
    STACKTOP = sp; //@line 5439
    return $$0 | 0; //@line 5439
   }
  } else {
   HEAP8[$__1buf] = HEAP8[$__extbuf] | 0; //@line 5444
   $__nread$2 = $9; //@line 5445
  }
 } while (0);
 do {
  if ($__consume) {
   $66 = HEAP8[$__1buf] | 0; //@line 5450
   HEAP32[$this + 48 >> 2] = $66 & 255; //@line 5453
   $69 = $66; //@line 5454
  } else {
   $57 = $this + 32 | 0; //@line 5456
   $__i2$0 = $__nread$2; //@line 5457
   while (1) {
    if (($__i2$0 | 0) <= 0) {
     label = 21; //@line 5461
     break;
    }
    $59 = $__i2$0 + -1 | 0; //@line 5464
    if ((_ungetc(HEAPU8[$__extbuf + $59 | 0] | 0, HEAP32[$57 >> 2] | 0) | 0) == -1) {
     $$0 = -1; //@line 5472
     label = 23; //@line 5473
     break;
    } else {
     $__i2$0 = $59; //@line 5476
    }
   }
   if ((label | 0) == 21) {
    $69 = HEAP8[$__1buf] | 0; //@line 5481
    break;
   } else if ((label | 0) == 23) {
    STACKTOP = sp; //@line 5485
    return $$0 | 0; //@line 5485
   }
  }
 } while (0);
 $$0 = $69 & 255; //@line 5490
 STACKTOP = sp; //@line 5491
 return $$0 | 0; //@line 5491
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $32 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $__nm = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 7731
 STACKTOP = STACKTOP + 56 | 0; //@line 7732
 $$byval_copy = sp; //@line 7733
 $__p$i$i$i$i = sp + 8 | 0; //@line 7734
 $1 = sp + 24 | 0; //@line 7735
 $2 = sp + 32 | 0; //@line 7736
 $__nm = sp + 40 | 0; //@line 7737
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  $10 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0; //@line 7746
  HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 7750
  $14 = $__v & 1; //@line 7751
  $16 = $$byval_copy; //@line 7753
  $17 = $1; //@line 7754
  HEAP32[$16 + 0 >> 2] = HEAP32[$17 + 0 >> 2]; //@line 7755
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result, $this, $$byval_copy, $__iob, $__fl, $14); //@line 7756
  STACKTOP = sp; //@line 7758
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 7760
 $19 = $2; //@line 7761
 $20 = HEAP32[$19 >> 2] | 0; //@line 7762
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5864; //@line 7768
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 7770
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 7772
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i, 126); //@line 7773
 }
 $28 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 7776
 $32 = HEAP32[$20 + 8 >> 2] | 0; //@line 7780
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $32 >> 2 >>> 0 > $28 >>> 0)) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 7787
  $42 = $41; //@line 7788
  __ZNSt8bad_castC2Ev($42); //@line 7789
  ___cxa_throw($41 | 0, 13672, 114); //@line 7790
 }
 $39 = HEAP32[$32 + ($28 << 2) >> 2] | 0; //@line 7794
 if (($39 | 0) == 0) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 7797
  $42 = $41; //@line 7798
  __ZNSt8bad_castC2Ev($42); //@line 7799
  ___cxa_throw($41 | 0, 13672, 114); //@line 7800
 }
 $43 = $39; //@line 7803
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$19 >> 2] | 0) | 0; //@line 7806
 $47 = HEAP32[$39 >> 2] | 0; //@line 7808
 if ($__v) {
  FUNCTION_TABLE_vii[HEAP32[$47 + 24 >> 2] & 63]($__nm, $43); //@line 7812
 } else {
  FUNCTION_TABLE_vii[HEAP32[$47 + 28 >> 2] & 63]($__nm, $43); //@line 7816
 }
 $52 = $__nm; //@line 7818
 $53 = HEAP8[$52] | 0; //@line 7819
 if (($53 & 1) == 0) {
  $58 = $__nm + 4 | 0; //@line 7823
  $$ph = $58; //@line 7825
  $$pre$phi6Z2D = $__nm + 8 | 0; //@line 7825
  $$pre$phiZ2D = $58; //@line 7825
 } else {
  $56 = $__nm + 8 | 0; //@line 7827
  $$ph = HEAP32[$56 >> 2] | 0; //@line 7830
  $$pre$phi6Z2D = $56; //@line 7830
  $$pre$phiZ2D = $__nm + 4 | 0; //@line 7830
 }
 $59 = $__s; //@line 7832
 $60 = $53; //@line 7833
 $61 = $$ph; //@line 7833
 while (1) {
  if (($60 & 1) == 0) {
   $68 = $$pre$phiZ2D; //@line 7840
   $69 = ($60 & 255) >>> 1; //@line 7840
  } else {
   $68 = HEAP32[$$pre$phi6Z2D >> 2] | 0; //@line 7844
   $69 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 7844
  }
  if (($61 | 0) == ($68 + ($69 << 2) | 0)) {
   break;
  }
  $72 = HEAP32[$61 >> 2] | 0; //@line 7851
  $73 = HEAP32[$59 >> 2] | 0; //@line 7852
  do {
   if (($73 | 0) != 0) {
    $75 = $73 + 24 | 0; //@line 7856
    $76 = HEAP32[$75 >> 2] | 0; //@line 7857
    if (($76 | 0) == (HEAP32[$73 + 28 >> 2] | 0)) {
     $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$73 >> 2] | 0) + 52 >> 2] & 31]($73, $72) | 0; //@line 7867
    } else {
     HEAP32[$75 >> 2] = $76 + 4; //@line 7870
     HEAP32[$76 >> 2] = $72; //@line 7871
     $$0$i$i = $72; //@line 7872
    }
    if (!(($$0$i$i | 0) == -1)) {
     break;
    }
    HEAP32[$59 >> 2] = 0; //@line 7878
   }
  } while (0);
  $60 = HEAP8[$52] | 0; //@line 7883
  $61 = $61 + 4 | 0; //@line 7883
 }
 HEAP32[$agg$result >> 2] = HEAP32[$59 >> 2]; //@line 7887
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm); //@line 7888
 STACKTOP = sp; //@line 7889
 return;
}
function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $3 = 0, $35 = 0, $36 = 0, $47 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $78 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $x$09 = 0, sp = 0;
 sp = STACKTOP; //@line 1692
 $1 = $f + 4 | 0; //@line 1693
 $2 = HEAP32[$1 >> 2] | 0; //@line 1694
 $3 = $f + 100 | 0; //@line 1695
 if ($2 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $2 + 1; //@line 1700
  $10 = HEAPU8[$2] | 0; //@line 1703
 } else {
  $10 = ___shgetc($f) | 0; //@line 1706
 }
 do {
  if (($10 | 0) == 43 | ($10 | 0) == 45) {
   $12 = ($10 | 0) == 45 | 0; //@line 1711
   $13 = HEAP32[$1 >> 2] | 0; //@line 1712
   if ($13 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $13 + 1; //@line 1717
    $20 = HEAPU8[$13] | 0; //@line 1720
   } else {
    $20 = ___shgetc($f) | 0; //@line 1723
   }
   if (($20 + -48 | 0) >>> 0 < 10 | ($pok | 0) == 0) {
    $c$0 = $20; //@line 1730
    $neg$0 = $12; //@line 1730
    break;
   }
   if ((HEAP32[$3 >> 2] | 0) == 0) {
    $c$0 = $20; //@line 1736
    $neg$0 = $12; //@line 1736
    break;
   }
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1741
   $c$0 = $20; //@line 1742
   $neg$0 = $12; //@line 1742
  } else {
   $c$0 = $10; //@line 1744
   $neg$0 = 0; //@line 1744
  }
 } while (0);
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if ((HEAP32[$3 >> 2] | 0) == 0) {
   $96 = 0; //@line 1753
   $97 = -2147483648; //@line 1753
   tempRet0 = $97; //@line 1754
   STACKTOP = sp; //@line 1755
   return $96 | 0; //@line 1755
  }
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1759
  $96 = 0; //@line 1760
  $97 = -2147483648; //@line 1760
  tempRet0 = $97; //@line 1761
  STACKTOP = sp; //@line 1762
  return $96 | 0; //@line 1762
 } else {
  $c$18 = $c$0; //@line 1764
  $x$09 = 0; //@line 1764
 }
 while (1) {
  $35 = $c$18 + -48 + $x$09 | 0; //@line 1768
  $36 = HEAP32[$1 >> 2] | 0; //@line 1769
  if ($36 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $36 + 1; //@line 1774
   $c$1$be = HEAPU8[$36] | 0; //@line 1777
  } else {
   $c$1$be = ___shgetc($f) | 0; //@line 1780
  }
  if (!(($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364)) {
   break;
  }
  $c$18 = $c$1$be; //@line 1790
  $x$09 = $35 * 10 | 0; //@line 1790
 }
 $47 = (($35 | 0) < 0) << 31 >> 31; //@line 1793
 if (($c$1$be + -48 | 0) >>> 0 < 10) {
  $54 = $35; //@line 1797
  $55 = $47; //@line 1797
  $c$23 = $c$1$be; //@line 1797
  while (1) {
   $56 = ___muldi3($54 | 0, $55 | 0, 10, 0) | 0; //@line 1799
   $57 = tempRet0; //@line 1800
   $60 = _i64Add($c$23 | 0, (($c$23 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 1803
   $62 = _i64Add($60 | 0, tempRet0 | 0, $56 | 0, $57 | 0) | 0; //@line 1805
   $63 = tempRet0; //@line 1806
   $64 = HEAP32[$1 >> 2] | 0; //@line 1807
   if ($64 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $64 + 1; //@line 1812
    $c$2$be = HEAPU8[$64] | 0; //@line 1815
   } else {
    $c$2$be = ___shgetc($f) | 0; //@line 1818
   }
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($63 | 0) < 21474836 | ($63 | 0) == 21474836 & $62 >>> 0 < 2061584302)) {
    $c$23 = $c$2$be; //@line 1829
    $55 = $63; //@line 1829
    $54 = $62; //@line 1829
   } else {
    $50 = $62; //@line 1831
    $51 = $63; //@line 1831
    $c$2$lcssa = $c$2$be; //@line 1831
    break;
   }
  }
 } else {
  $50 = $35; //@line 1836
  $51 = $47; //@line 1836
  $c$2$lcssa = $c$1$be; //@line 1836
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) {
  do {
   $78 = HEAP32[$1 >> 2] | 0; //@line 1842
   if ($78 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $78 + 1; //@line 1847
    $c$3$be = HEAPU8[$78] | 0; //@line 1850
   } else {
    $c$3$be = ___shgetc($f) | 0; //@line 1853
   }
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
 }
 if ((HEAP32[$3 >> 2] | 0) != 0) {
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1; //@line 1867
 }
 $91 = ($neg$0 | 0) != 0; //@line 1869
 $92 = _i64Subtract(0, 0, $50 | 0, $51 | 0) | 0; //@line 1870
 $96 = $91 ? $92 : $50; //@line 1874
 $97 = $91 ? tempRet0 : $51; //@line 1874
 tempRet0 = $97; //@line 1875
 STACKTOP = sp; //@line 1876
 return $96 | 0; //@line 1876
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$ph = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $32 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $__nm = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 5292
 STACKTOP = STACKTOP + 56 | 0; //@line 5293
 $$byval_copy = sp; //@line 5294
 $__p$i$i$i$i = sp + 8 | 0; //@line 5295
 $1 = sp + 24 | 0; //@line 5296
 $2 = sp + 32 | 0; //@line 5297
 $__nm = sp + 40 | 0; //@line 5298
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  $10 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0; //@line 5307
  HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 5311
  $14 = $__v & 1; //@line 5312
  $16 = $$byval_copy; //@line 5314
  $17 = $1; //@line 5315
  HEAP32[$16 + 0 >> 2] = HEAP32[$17 + 0 >> 2]; //@line 5316
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result, $this, $$byval_copy, $__iob, $__fl, $14); //@line 5317
  STACKTOP = sp; //@line 5319
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 5321
 $19 = $2; //@line 5322
 $20 = HEAP32[$19 >> 2] | 0; //@line 5323
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5856; //@line 5329
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 5331
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 5333
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i, 126); //@line 5334
 }
 $28 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 5337
 $32 = HEAP32[$20 + 8 >> 2] | 0; //@line 5341
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $32 >> 2 >>> 0 > $28 >>> 0)) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 5348
  $42 = $41; //@line 5349
  __ZNSt8bad_castC2Ev($42); //@line 5350
  ___cxa_throw($41 | 0, 13672, 114); //@line 5351
 }
 $39 = HEAP32[$32 + ($28 << 2) >> 2] | 0; //@line 5355
 if (($39 | 0) == 0) {
  $41 = ___cxa_allocate_exception(4) | 0; //@line 5358
  $42 = $41; //@line 5359
  __ZNSt8bad_castC2Ev($42); //@line 5360
  ___cxa_throw($41 | 0, 13672, 114); //@line 5361
 }
 $43 = $39; //@line 5364
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$19 >> 2] | 0) | 0; //@line 5367
 $47 = HEAP32[$39 >> 2] | 0; //@line 5369
 if ($__v) {
  FUNCTION_TABLE_vii[HEAP32[$47 + 24 >> 2] & 63]($__nm, $43); //@line 5373
 } else {
  FUNCTION_TABLE_vii[HEAP32[$47 + 28 >> 2] & 63]($__nm, $43); //@line 5377
 }
 $52 = $__nm; //@line 5379
 $53 = HEAP8[$52] | 0; //@line 5380
 if (($53 & 1) == 0) {
  $59 = $__nm + 1 | 0; //@line 5385
  $$ph = $59; //@line 5387
  $$pre$phi6Z2D = $59; //@line 5387
  $$pre$phi8Z2D = $__nm + 8 | 0; //@line 5387
 } else {
  $56 = $__nm + 8 | 0; //@line 5389
  $$ph = HEAP32[$56 >> 2] | 0; //@line 5393
  $$pre$phi6Z2D = $__nm + 1 | 0; //@line 5393
  $$pre$phi8Z2D = $56; //@line 5393
 }
 $60 = $__s; //@line 5395
 $61 = $__nm + 4 | 0; //@line 5396
 $62 = $53; //@line 5397
 $63 = $$ph; //@line 5397
 while (1) {
  if (($62 & 1) == 0) {
   $70 = $$pre$phi6Z2D; //@line 5404
   $71 = ($62 & 255) >>> 1; //@line 5404
  } else {
   $70 = HEAP32[$$pre$phi8Z2D >> 2] | 0; //@line 5408
   $71 = HEAP32[$61 >> 2] | 0; //@line 5408
  }
  if (($63 | 0) == ($70 + $71 | 0)) {
   break;
  }
  $74 = HEAP8[$63] | 0; //@line 5415
  $75 = HEAP32[$60 >> 2] | 0; //@line 5416
  do {
   if (($75 | 0) != 0) {
    $77 = $75 + 24 | 0; //@line 5420
    $78 = HEAP32[$77 >> 2] | 0; //@line 5421
    if (($78 | 0) != (HEAP32[$75 + 28 >> 2] | 0)) {
     HEAP32[$77 >> 2] = $78 + 1; //@line 5427
     HEAP8[$78] = $74; //@line 5428
     break;
    }
    if (!((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$75 >> 2] | 0) + 52 >> 2] & 31]($75, $74 & 255) | 0) == -1)) {
     break;
    }
    HEAP32[$60 >> 2] = 0; //@line 5441
   }
  } while (0);
  $62 = HEAP8[$52] | 0; //@line 5446
  $63 = $63 + 1 | 0; //@line 5446
 }
 HEAP32[$agg$result >> 2] = HEAP32[$60 >> 2]; //@line 5450
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm); //@line 5451
 STACKTOP = sp; //@line 5452
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $11 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $53 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $83 = 0, $84 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, sp = 0;
 sp = STACKTOP; //@line 14236
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $35 = $info + 52 | 0; //@line 14243
  $36 = HEAP8[$35] | 0; //@line 14244
  $37 = $info + 53 | 0; //@line 14245
  $38 = HEAP8[$37] | 0; //@line 14246
  $40 = HEAP32[$this + 12 >> 2] | 0; //@line 14248
  $41 = $this + ($40 << 3) + 16 | 0; //@line 14249
  HEAP8[$35] = 0; //@line 14250
  HEAP8[$37] = 0; //@line 14251
  $43 = HEAP32[$this + 20 >> 2] | 0; //@line 14253
  $44 = $43 >> 8; //@line 14254
  if (($43 & 1 | 0) == 0) {
   $offset_to_base$0$i1 = $44; //@line 14258
  } else {
   $offset_to_base$0$i1 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $44 >> 2] | 0; //@line 14265
  }
  $53 = HEAP32[$this + 16 >> 2] | 0; //@line 14268
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$53 >> 2] | 0) + 20 >> 2] & 31]($53, $info, $dst_ptr, $current_ptr + $offset_to_base$0$i1 | 0, ($43 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 14277
  L6 : do {
   if (($40 | 0) > 1) {
    $64 = $info + 24 | 0; //@line 14282
    $65 = $this + 8 | 0; //@line 14283
    $66 = $info + 54 | 0; //@line 14284
    $67 = $current_ptr; //@line 14285
    $p$0 = $this + 24 | 0; //@line 14286
    do {
     if ((HEAP8[$66] | 0) != 0) {
      break L6;
     }
     do {
      if ((HEAP8[$35] | 0) == 0) {
       if ((HEAP8[$37] | 0) == 0) {
        break;
       }
       if ((HEAP32[$65 >> 2] & 1 | 0) == 0) {
        break L6;
       }
      } else {
       if ((HEAP32[$64 >> 2] | 0) == 1) {
        break L6;
       }
       if ((HEAP32[$65 >> 2] & 2 | 0) == 0) {
        break L6;
       }
      }
     } while (0);
     HEAP8[$35] = 0; //@line 14322
     HEAP8[$37] = 0; //@line 14323
     $83 = HEAP32[$p$0 + 4 >> 2] | 0; //@line 14325
     $84 = $83 >> 8; //@line 14326
     if (($83 & 1 | 0) == 0) {
      $offset_to_base$0$i = $84; //@line 14330
     } else {
      $offset_to_base$0$i = HEAP32[(HEAP32[$67 >> 2] | 0) + $84 >> 2] | 0; //@line 14336
     }
     $92 = HEAP32[$p$0 >> 2] | 0; //@line 14339
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$92 >> 2] | 0) + 20 >> 2] & 31]($92, $info, $dst_ptr, $current_ptr + $offset_to_base$0$i | 0, ($83 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 14348
     $p$0 = $p$0 + 8 | 0; //@line 14349
    } while ($p$0 >>> 0 < $41 >>> 0);
   }
  } while (0);
  HEAP8[$35] = $36; //@line 14359
  HEAP8[$37] = $38; //@line 14360
  STACKTOP = sp; //@line 14361
  return;
 }
 HEAP8[$info + 53 | 0] = 1; //@line 14364
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp; //@line 14369
  return;
 }
 HEAP8[$info + 52 | 0] = 1; //@line 14372
 $11 = $info + 16 | 0; //@line 14373
 $12 = HEAP32[$11 >> 2] | 0; //@line 14374
 if (($12 | 0) == 0) {
  HEAP32[$11 >> 2] = $dst_ptr; //@line 14377
  HEAP32[$info + 24 >> 2] = $path_below; //@line 14379
  HEAP32[$info + 36 >> 2] = 1; //@line 14381
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   STACKTOP = sp; //@line 14388
   return;
  }
  HEAP8[$info + 54 | 0] = 1; //@line 14391
  STACKTOP = sp; //@line 14392
  return;
 }
 if (($12 | 0) != ($dst_ptr | 0)) {
  $31 = $info + 36 | 0; //@line 14396
  HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1; //@line 14399
  HEAP8[$info + 54 | 0] = 1; //@line 14401
  STACKTOP = sp; //@line 14402
  return;
 }
 $22 = $info + 24 | 0; //@line 14404
 $23 = HEAP32[$22 >> 2] | 0; //@line 14405
 if (($23 | 0) == 2) {
  HEAP32[$22 >> 2] = $path_below; //@line 14408
  $25 = $path_below; //@line 14409
 } else {
  $25 = $23; //@line 14411
 }
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($25 | 0) == 1)) {
  STACKTOP = sp; //@line 14419
  return;
 }
 HEAP8[$info + 54 | 0] = 1; //@line 14422
 STACKTOP = sp; //@line 14423
 return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $13 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $61 = 0, $68 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4663
 STACKTOP = STACKTOP + 32 | 0; //@line 4664
 $__extbuf = sp; //@line 4665
 $__1buf = sp + 8 | 0; //@line 4666
 $__enxt = sp + 16 | 0; //@line 4667
 $__inxt = sp + 24 | 0; //@line 4668
 $1 = $this + 52 | 0; //@line 4669
 if ((HEAP8[$1] | 0) != 0) {
  $4 = $this + 48 | 0; //@line 4673
  $5 = HEAP32[$4 >> 2] | 0; //@line 4674
  if (!$__consume) {
   $$0 = $5; //@line 4676
   STACKTOP = sp; //@line 4677
   return $$0 | 0; //@line 4677
  }
  HEAP32[$4 >> 2] = -1; //@line 4679
  HEAP8[$1] = 0; //@line 4680
  $$0 = $5; //@line 4681
  STACKTOP = sp; //@line 4682
  return $$0 | 0; //@line 4682
 }
 $7 = HEAP32[$this + 44 >> 2] | 0; //@line 4685
 $9 = ($7 | 0) > 1 ? $7 : 1; //@line 4687
 L8 : do {
  if (($9 | 0) > 0) {
   $11 = $this + 32 | 0; //@line 4691
   $__i$09 = 0; //@line 4692
   while (1) {
    $13 = _fgetc(HEAP32[$11 >> 2] | 0) | 0; //@line 4695
    if (($13 | 0) == -1) {
     $$0 = -1; //@line 4698
     break;
    }
    HEAP8[$__extbuf + $__i$09 | 0] = $13; //@line 4703
    $__i$09 = $__i$09 + 1 | 0; //@line 4704
    if (($__i$09 | 0) >= ($9 | 0)) {
     break L8;
    }
   }
   STACKTOP = sp; //@line 4712
   return $$0 | 0; //@line 4712
  }
 } while (0);
 L15 : do {
  if ((HEAP8[$this + 53 | 0] | 0) == 0) {
   $22 = $this + 40 | 0; //@line 4720
   $23 = $this + 36 | 0; //@line 4721
   $24 = $__extbuf; //@line 4722
   $25 = $__1buf + 4 | 0; //@line 4723
   $26 = $this + 32 | 0; //@line 4724
   $__nread$0 = $9; //@line 4725
   while (1) {
    $30 = HEAP32[$22 >> 2] | 0; //@line 4727
    $32 = $30; //@line 4729
    $34 = HEAP32[$32 >> 2] | 0; //@line 4731
    $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 4734
    $38 = HEAP32[$23 >> 2] | 0; //@line 4735
    $39 = $__extbuf + $__nread$0 | 0; //@line 4736
    $44 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] & 15]($38, $30, $24, $39, $__enxt, $__1buf, $25, $__inxt) | 0; //@line 4741
    if (($44 | 0) == 3) {
     label = 14; //@line 4743
     break;
    } else if (($44 | 0) == 2) {
     $$0 = -1; //@line 4746
     label = 22; //@line 4747
     break;
    } else if (($44 | 0) != 1) {
     $__nread$2 = $__nread$0; //@line 4750
     break L15;
    }
    $47 = HEAP32[$22 >> 2] | 0; //@line 4755
    HEAP32[$47 >> 2] = $34; //@line 4757
    HEAP32[$47 + 4 >> 2] = $37; //@line 4760
    if (($__nread$0 | 0) == 8) {
     $$0 = -1; //@line 4763
     label = 22; //@line 4764
     break;
    }
    $53 = _fgetc(HEAP32[$26 >> 2] | 0) | 0; //@line 4768
    if (($53 | 0) == -1) {
     $$0 = -1; //@line 4771
     label = 22; //@line 4772
     break;
    }
    HEAP8[$39] = $53; //@line 4776
    $__nread$0 = $__nread$0 + 1 | 0; //@line 4778
   }
   if ((label | 0) == 14) {
    HEAP32[$__1buf >> 2] = HEAP8[$24] | 0; //@line 4783
    $__nread$2 = $__nread$0; //@line 4784
    break;
   } else if ((label | 0) == 22) {
    STACKTOP = sp; //@line 4788
    return $$0 | 0; //@line 4788
   }
  } else {
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf] | 0; //@line 4794
   $__nread$2 = $9; //@line 4795
  }
 } while (0);
 if ($__consume) {
  $68 = HEAP32[$__1buf >> 2] | 0; //@line 4799
  HEAP32[$this + 48 >> 2] = $68; //@line 4801
  $$0 = $68; //@line 4802
  STACKTOP = sp; //@line 4803
  return $$0 | 0; //@line 4803
 }
 $59 = $this + 32 | 0; //@line 4805
 $__i2$0 = $__nread$2; //@line 4806
 while (1) {
  if (($__i2$0 | 0) <= 0) {
   break;
  }
  $61 = $__i2$0 + -1 | 0; //@line 4812
  if ((_ungetc(HEAP8[$__extbuf + $61 | 0] | 0, HEAP32[$59 >> 2] | 0) | 0) == -1) {
   $$0 = -1; //@line 4820
   label = 22; //@line 4821
   break;
  } else {
   $__i2$0 = $61; //@line 4824
  }
 }
 if ((label | 0) == 22) {
  STACKTOP = sp; //@line 4828
  return $$0 | 0; //@line 4828
 }
 $$0 = HEAP32[$__1buf >> 2] | 0; //@line 4831
 STACKTOP = sp; //@line 4832
 return $$0 | 0; //@line 4832
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i6 = 0, $1 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $4 = 0, $53 = 0, $54 = 0, $55 = 0, $64 = 0, $77 = 0, $78 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12146
 $1 = $__b; //@line 12147
 $2 = $__e; //@line 12148
 $3 = $__ct + 8 | 0; //@line 12149
 L1 : while (1) {
  $4 = HEAP32[$1 >> 2] | 0; //@line 12151
  do {
   if (($4 | 0) == 0) {
    $17 = 0; //@line 12155
   } else {
    if ((HEAP32[$4 + 12 >> 2] | 0) != (HEAP32[$4 + 16 >> 2] | 0)) {
     $17 = $4; //@line 12163
     break;
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0) == -1) {
     HEAP32[$1 >> 2] = 0; //@line 12173
     $17 = 0; //@line 12174
     break;
    } else {
     $17 = HEAP32[$1 >> 2] | 0; //@line 12178
     break;
    }
   }
  } while (0);
  $18 = ($17 | 0) == 0; //@line 12183
  $19 = HEAP32[$2 >> 2] | 0; //@line 12184
  do {
   if (($19 | 0) == 0) {
    label = 12; //@line 12188
   } else {
    if ((HEAP32[$19 + 12 >> 2] | 0) != (HEAP32[$19 + 16 >> 2] | 0)) {
     if ($18) {
      $32 = $19; //@line 12197
      break;
     } else {
      $$pre$i2$i$i6 = $19; //@line 12200
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] & 127]($19) | 0) == -1) {
     HEAP32[$2 >> 2] = 0; //@line 12211
     label = 12; //@line 12212
     break;
    } else {
     if ($18) {
      $32 = $19; //@line 12216
      break;
     } else {
      $$pre$i2$i$i6 = $19; //@line 12219
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0; //@line 12226
   if ($18) {
    $$pre$i2$i$i6 = 0; //@line 12228
    break;
   } else {
    $32 = 0; //@line 12231
   }
  }
  $33 = HEAP32[$1 >> 2] | 0; //@line 12234
  $35 = HEAP32[$33 + 12 >> 2] | 0; //@line 12236
  if (($35 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; //@line 12246
  } else {
   $$0$i$i = HEAPU8[$35] | 0; //@line 12250
  }
  if (!(($$0$i$i & 255) << 24 >> 24 > -1)) {
   $$pre$i2$i$i6 = $32; //@line 12255
   break;
  }
  if ((HEAP16[(HEAP32[$3 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192) == 0) {
   $$pre$i2$i$i6 = $32; //@line 12266
   break;
  }
  $53 = HEAP32[$1 >> 2] | 0; //@line 12269
  $54 = $53 + 12 | 0; //@line 12270
  $55 = HEAP32[$54 >> 2] | 0; //@line 12271
  if (($55 | 0) == (HEAP32[$53 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 40 >> 2] & 127]($53) | 0; //@line 12280
   continue;
  } else {
   HEAP32[$54 >> 2] = $55 + 1; //@line 12284
   continue;
  }
 }
 $64 = HEAP32[$1 >> 2] | 0; //@line 12288
 do {
  if (($64 | 0) == 0) {
   $77 = 0; //@line 12292
  } else {
   if ((HEAP32[$64 + 12 >> 2] | 0) != (HEAP32[$64 + 16 >> 2] | 0)) {
    $77 = $64; //@line 12300
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 12310
    $77 = 0; //@line 12311
    break;
   } else {
    $77 = HEAP32[$1 >> 2] | 0; //@line 12315
    break;
   }
  }
 } while (0);
 $78 = ($77 | 0) == 0; //@line 12320
 L38 : do {
  if (($$pre$i2$i$i6 | 0) == 0) {
   label = 32; //@line 12324
  } else {
   do {
    if ((HEAP32[$$pre$i2$i$i6 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6 + 16 >> 2] | 0)) {
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i6) | 0) == -1)) {
      break;
     }
     HEAP32[$2 >> 2] = 0; //@line 12342
     label = 32; //@line 12343
     break L38;
    }
   } while (0);
   if (!$78) {
    break;
   }
   STACKTOP = sp; //@line 12350
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 32) {
   if ($78) {
    break;
   }
   STACKTOP = sp; //@line 12358
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12363
 STACKTOP = sp; //@line 12364
 return;
}
function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr41 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $8 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $s = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0, $ws$213 = 0, sp = 0;
 sp = STACKTOP; //@line 11916
 STACKTOP = STACKTOP + 1032 | 0; //@line 11917
 $s = sp + 1024 | 0; //@line 11919
 $2 = HEAP32[$src >> 2] | 0; //@line 11921
 HEAP32[$s >> 2] = $2; //@line 11922
 $3 = ($wcs | 0) != 0; //@line 11923
 $4 = sp; //@line 11924
 $wn$ = $3 ? $wn : 256; //@line 11925
 $wcs$ = $3 ? $wcs : $4; //@line 11926
 L1 : do {
  if (($2 | 0) == 0 | ($wn$ | 0) == 0) {
   $$1 = $n; //@line 11932
   $$26 = $wn$; //@line 11932
   $20 = $2; //@line 11932
   $cnt$1 = 0; //@line 11932
   $ws$018 = $wcs$; //@line 11932
  } else {
   $$026 = $n; //@line 11934
   $$0423 = $wn$; //@line 11934
   $$pr41 = $2; //@line 11934
   $cnt$024 = 0; //@line 11934
   $ws$025 = $wcs$; //@line 11934
   while (1) {
    $7 = $$026 >>> 2; //@line 11936
    $8 = $7 >>> 0 >= $$0423 >>> 0; //@line 11937
    if (!($8 | $$026 >>> 0 > 131)) {
     $$1 = $$026; //@line 11941
     $$26 = $$0423; //@line 11941
     $20 = $$pr41; //@line 11941
     $cnt$1 = $cnt$024; //@line 11941
     $ws$018 = $ws$025; //@line 11941
     break L1;
    }
    $$04$ = $8 ? $$0423 : $7; //@line 11944
    $10 = $$026 - $$04$ | 0; //@line 11945
    $11 = _mbsrtowcs($ws$025, $s, $$04$, $st) | 0; //@line 11946
    if (($11 | 0) == -1) {
     break;
    }
    if (($ws$025 | 0) == ($4 | 0)) {
     $$15 = $$0423; //@line 11953
     $ws$1 = $4; //@line 11953
    } else {
     $$15 = $$0423 - $11 | 0; //@line 11957
     $ws$1 = $ws$025 + ($11 << 2) | 0; //@line 11957
    }
    $16 = $11 + $cnt$024 | 0; //@line 11959
    $17 = HEAP32[$s >> 2] | 0; //@line 11960
    if (($17 | 0) == 0 | ($$15 | 0) == 0) {
     $$1 = $10; //@line 11965
     $$26 = $$15; //@line 11965
     $20 = $17; //@line 11965
     $cnt$1 = $16; //@line 11965
     $ws$018 = $ws$1; //@line 11965
     break L1;
    } else {
     $$026 = $10; //@line 11968
     $$0423 = $$15; //@line 11968
     $$pr41 = $17; //@line 11968
     $cnt$024 = $16; //@line 11968
     $ws$025 = $ws$1; //@line 11968
    }
   }
   $$1 = $10; //@line 11972
   $$26 = 0; //@line 11972
   $20 = HEAP32[$s >> 2] | 0; //@line 11972
   $cnt$1 = -1; //@line 11972
   $ws$018 = $ws$025; //@line 11972
  }
 } while (0);
 L11 : do {
  if (($20 | 0) == 0) {
   $cnt$3 = $cnt$1; //@line 11978
  } else {
   if (($$26 | 0) == 0 | ($$1 | 0) == 0) {
    $cnt$3 = $cnt$1; //@line 11984
    break;
   } else {
    $$214 = $$1; //@line 11987
    $$311 = $$26; //@line 11987
    $24 = $20; //@line 11987
    $cnt$212 = $cnt$1; //@line 11987
    $ws$213 = $ws$018; //@line 11987
   }
   while (1) {
    $25 = _mbrtowc($ws$213, $24, $$214, $st) | 0; //@line 11990
    if (($25 + 2 | 0) >>> 0 < 3) {
     break;
    }
    $30 = (HEAP32[$s >> 2] | 0) + $25 | 0; //@line 11997
    HEAP32[$s >> 2] = $30; //@line 11998
    $33 = $$311 + -1 | 0; //@line 12001
    $34 = $cnt$212 + 1 | 0; //@line 12002
    if (($33 | 0) == 0 | ($$214 | 0) == ($25 | 0)) {
     $cnt$3 = $34; //@line 12007
     break L11;
    } else {
     $$214 = $$214 - $25 | 0; //@line 12010
     $$311 = $33; //@line 12010
     $24 = $30; //@line 12010
     $cnt$212 = $34; //@line 12010
     $ws$213 = $ws$213 + 4 | 0; //@line 12010
    }
   }
   if (($25 | 0) == -1) {
    $cnt$3 = -1; //@line 12014
    break;
   } else if (($25 | 0) == 0) {
    HEAP32[$s >> 2] = 0; //@line 12017
    $cnt$3 = $cnt$212; //@line 12018
    break;
   } else {
    HEAP32[$st >> 2] = 0; //@line 12022
    $cnt$3 = $cnt$212; //@line 12023
    break;
   }
  }
 } while (0);
 if (!$3) {
  STACKTOP = sp; //@line 12029
  return $cnt$3 | 0; //@line 12029
 }
 HEAP32[$src >> 2] = HEAP32[$s >> 2]; //@line 12032
 STACKTOP = sp; //@line 12033
 return $cnt$3 | 0; //@line 12033
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $28 = 0, $39 = 0, $42 = 0, $44 = 0, $54 = 0, $59 = 0, $70 = 0, $76 = 0, $8 = 0, $81 = 0, $84 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9401
 HEAP32[$frm_nxt >> 2] = $frm; //@line 9402
 HEAP32[$to_nxt >> 2] = $to; //@line 9403
 do {
  if (($mode & 2 | 0) != 0) {
   if (($to_end - $to | 0) < 3) {
    $$0 = 1; //@line 9413
    STACKTOP = sp; //@line 9414
    return $$0 | 0; //@line 9414
   } else {
    HEAP32[$to_nxt >> 2] = $to + 1; //@line 9417
    HEAP8[$to] = -17; //@line 9418
    $8 = HEAP32[$to_nxt >> 2] | 0; //@line 9419
    HEAP32[$to_nxt >> 2] = $8 + 1; //@line 9421
    HEAP8[$8] = -69; //@line 9422
    $10 = HEAP32[$to_nxt >> 2] | 0; //@line 9423
    HEAP32[$to_nxt >> 2] = $10 + 1; //@line 9425
    HEAP8[$10] = -65; //@line 9426
    break;
   }
  }
 } while (0);
 $12 = HEAP32[$frm_nxt >> 2] | 0; //@line 9431
 if (!($12 >>> 0 < $frm_end >>> 0)) {
  $$0 = 0; //@line 9434
  STACKTOP = sp; //@line 9435
  return $$0 | 0; //@line 9435
 }
 $14 = $to_end; //@line 9437
 $15 = $12; //@line 9438
 L10 : while (1) {
  $16 = HEAP32[$15 >> 2] | 0; //@line 9440
  if (($16 & -2048 | 0) == 55296 | $16 >>> 0 > $Maxcode >>> 0) {
   $$0 = 2; //@line 9446
   label = 19; //@line 9447
   break;
  }
  do {
   if ($16 >>> 0 < 128) {
    $21 = HEAP32[$to_nxt >> 2] | 0; //@line 9453
    if (($14 - $21 | 0) < 1) {
     $$0 = 1; //@line 9458
     label = 19; //@line 9459
     break L10;
    }
    HEAP32[$to_nxt >> 2] = $21 + 1; //@line 9464
    HEAP8[$21] = $16; //@line 9465
   } else {
    if ($16 >>> 0 < 2048) {
     $28 = HEAP32[$to_nxt >> 2] | 0; //@line 9469
     if (($14 - $28 | 0) < 2) {
      $$0 = 1; //@line 9474
      label = 19; //@line 9475
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $28 + 1; //@line 9482
     HEAP8[$28] = $16 >>> 6 | 192; //@line 9483
     $39 = HEAP32[$to_nxt >> 2] | 0; //@line 9487
     HEAP32[$to_nxt >> 2] = $39 + 1; //@line 9489
     HEAP8[$39] = $16 & 63 | 128; //@line 9490
     break;
    }
    $42 = HEAP32[$to_nxt >> 2] | 0; //@line 9494
    $44 = $14 - $42 | 0; //@line 9496
    if ($16 >>> 0 < 65536) {
     if (($44 | 0) < 3) {
      $$0 = 1; //@line 9500
      label = 19; //@line 9501
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $42 + 1; //@line 9508
     HEAP8[$42] = $16 >>> 12 | 224; //@line 9509
     $54 = HEAP32[$to_nxt >> 2] | 0; //@line 9514
     HEAP32[$to_nxt >> 2] = $54 + 1; //@line 9516
     HEAP8[$54] = $16 >>> 6 & 63 | 128; //@line 9517
     $59 = HEAP32[$to_nxt >> 2] | 0; //@line 9521
     HEAP32[$to_nxt >> 2] = $59 + 1; //@line 9523
     HEAP8[$59] = $16 & 63 | 128; //@line 9524
     break;
    } else {
     if (($44 | 0) < 4) {
      $$0 = 1; //@line 9529
      label = 19; //@line 9530
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $42 + 1; //@line 9537
     HEAP8[$42] = $16 >>> 18 | 240; //@line 9538
     $70 = HEAP32[$to_nxt >> 2] | 0; //@line 9543
     HEAP32[$to_nxt >> 2] = $70 + 1; //@line 9545
     HEAP8[$70] = $16 >>> 12 & 63 | 128; //@line 9546
     $76 = HEAP32[$to_nxt >> 2] | 0; //@line 9551
     HEAP32[$to_nxt >> 2] = $76 + 1; //@line 9553
     HEAP8[$76] = $16 >>> 6 & 63 | 128; //@line 9554
     $81 = HEAP32[$to_nxt >> 2] | 0; //@line 9558
     HEAP32[$to_nxt >> 2] = $81 + 1; //@line 9560
     HEAP8[$81] = $16 & 63 | 128; //@line 9561
     break;
    }
   }
  } while (0);
  $84 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0; //@line 9567
  HEAP32[$frm_nxt >> 2] = $84; //@line 9568
  if ($84 >>> 0 < $frm_end >>> 0) {
   $15 = $84; //@line 9571
  } else {
   $$0 = 0; //@line 9573
   label = 19; //@line 9574
   break;
  }
 }
 if ((label | 0) == 19) {
  STACKTOP = sp; //@line 9579
  return $$0 | 0; //@line 9579
 }
 return 0; //@line 9581
}
function _make_computers_move($board, $players_move, $card_value, $card_position_x, $card_position_y, $human_readable_next_color) {
 $board = $board | 0;
 $players_move = $players_move | 0;
 $card_value = $card_value | 0;
 $card_position_x = $card_position_x | 0;
 $card_position_y = $card_position_y | 0;
 $human_readable_next_color = $human_readable_next_color | 0;
 var $1 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $55 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $__p$0$i$i$i = 0, $__p$0$i$i$i4 = 0, $pm = 0, sp = 0;
 sp = STACKTOP; //@line 1900
 STACKTOP = STACKTOP + 56 | 0; //@line 1901
 $pm = sp; //@line 1902
 $1 = sp + 8 | 0; //@line 1903
 $2 = sp + 24 | 0; //@line 1904
 $3 = sp + 40 | 0; //@line 1905
 $4 = $board; //@line 1906
 $5 = _strlen($players_move | 0) | 0; //@line 1907
 if ($5 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 1910
 }
 if ($5 >>> 0 < 11) {
  HEAP8[$1] = $5 << 1; //@line 1918
  $__p$0$i$i$i = $1 + 1 | 0; //@line 1921
 } else {
  $14 = $5 + 16 & -16; //@line 1924
  $15 = __Znwj($14) | 0; //@line 1925
  HEAP32[$1 + 8 >> 2] = $15; //@line 1927
  HEAP32[$1 >> 2] = $14 | 1; //@line 1930
  HEAP32[$1 + 4 >> 2] = $5; //@line 1932
  $__p$0$i$i$i = $15; //@line 1933
 }
 _memcpy($__p$0$i$i$i | 0, $players_move | 0, $5 | 0) | 0; //@line 1935
 HEAP8[$__p$0$i$i$i + $5 | 0] = 0; //@line 1937
 $21 = _player_move_from_string($1) | 0; //@line 1938
 if (!((HEAP8[$1] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 1946
 }
 HEAP32[$pm >> 2] = $21; //@line 1948
 $28 = _strlen($human_readable_next_color | 0) | 0; //@line 1949
 if ($28 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 1952
 }
 if ($28 >>> 0 < 11) {
  HEAP8[$2] = $28 << 1; //@line 1960
  $__p$0$i$i$i4 = $2 + 1 | 0; //@line 1963
 } else {
  $37 = $28 + 16 & -16; //@line 1966
  $38 = __Znwj($37) | 0; //@line 1967
  HEAP32[$2 + 8 >> 2] = $38; //@line 1969
  HEAP32[$2 >> 2] = $37 | 1; //@line 1972
  HEAP32[$2 + 4 >> 2] = $28; //@line 1974
  $__p$0$i$i$i4 = $38; //@line 1975
 }
 _memcpy($__p$0$i$i$i4 | 0, $human_readable_next_color | 0, $28 | 0) | 0; //@line 1977
 HEAP8[$__p$0$i$i$i4 + $28 | 0] = 0; //@line 1979
 $44 = __Z26human_string_to_next_colorNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($2) | 0; //@line 1980
 if (!((HEAP8[$2] & 1) == 0)) {
  __ZdlPv(HEAP32[$2 + 8 >> 2] | 0); //@line 1988
 }
 HEAP32[$3 >> 2] = $card_value; //@line 1991
 if (($card_value + -1 | 0) >>> 0 < 2) {
  $62 = $3 + 4 | 0; //@line 1995
  HEAP32[$62 >> 2] = $card_position_x; //@line 1996
  $63 = $3 + 8 | 0; //@line 1997
  HEAP32[$63 >> 2] = $card_position_y; //@line 1998
  __ZN5Board14computers_moveERK10PlayerMoveRK13CardPlacement9NextColor($4, $pm, $3, $44); //@line 1999
  STACKTOP = sp; //@line 2000
  return 1; //@line 2000
 }
 if ((($card_value >>> 0) % 3 | 0 | 0) != 0) {
  $60 = ___cxa_allocate_exception(8) | 0; //@line 2005
  $61 = $60; //@line 2006
  __ZNSt13runtime_errorC2EPKc($61, 960); //@line 2007
  ___cxa_throw($60 | 0, 2720, 32); //@line 2008
 }
 $55 = ($card_value >>> 0) / 3 | 0; //@line 2011
 if ($card_value >>> 0 < 3) {
  $60 = ___cxa_allocate_exception(8) | 0; //@line 2014
  $61 = $60; //@line 2015
  __ZNSt13runtime_errorC2EPKc($61, 960); //@line 2016
  ___cxa_throw($60 | 0, 2720, 32); //@line 2017
 }
 if (($55 + 2147483647 & $55 | 0) == 0) {
  $62 = $3 + 4 | 0; //@line 2024
  HEAP32[$62 >> 2] = $card_position_x; //@line 2025
  $63 = $3 + 8 | 0; //@line 2026
  HEAP32[$63 >> 2] = $card_position_y; //@line 2027
  __ZN5Board14computers_moveERK10PlayerMoveRK13CardPlacement9NextColor($4, $pm, $3, $44); //@line 2028
  STACKTOP = sp; //@line 2029
  return 1; //@line 2029
 } else {
  $60 = ___cxa_allocate_exception(8) | 0; //@line 2031
  $61 = $60; //@line 2032
  __ZNSt13runtime_errorC2EPKc($61, 960); //@line 2033
  ___cxa_throw($60 | 0, 2720, 32); //@line 2034
 }
 return 0; //@line 2037
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i611 = 0, $1 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $33 = 0, $35 = 0, $55 = 0, $56 = 0, $57 = 0, $66 = 0, $79 = 0, $80 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12377
 $1 = $__b; //@line 12378
 $2 = HEAP32[$1 >> 2] | 0; //@line 12379
 do {
  if (($2 | 0) == 0) {
   $15 = 0; //@line 12383
  } else {
   if ((HEAP32[$2 + 12 >> 2] | 0) != (HEAP32[$2 + 16 >> 2] | 0)) {
    $15 = $2; //@line 12391
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 12401
    $15 = 0; //@line 12402
    break;
   } else {
    $15 = HEAP32[$1 >> 2] | 0; //@line 12406
    break;
   }
  }
 } while (0);
 $16 = ($15 | 0) == 0; //@line 12411
 $17 = $__e; //@line 12412
 $18 = HEAP32[$17 >> 2] | 0; //@line 12413
 L8 : do {
  if (($18 | 0) == 0) {
   label = 11; //@line 12417
  } else {
   do {
    if ((HEAP32[$18 + 12 >> 2] | 0) == (HEAP32[$18 + 16 >> 2] | 0)) {
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0) == -1)) {
      break;
     }
     HEAP32[$17 >> 2] = 0; //@line 12435
     label = 11; //@line 12436
     break L8;
    }
   } while (0);
   if ($16) {
    $$pre$i2$i$i611 = $18; //@line 12441
   } else {
    label = 12; //@line 12443
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($16) {
   label = 12; //@line 12449
  } else {
   $$pre$i2$i$i611 = 0; //@line 12451
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 12457
  STACKTOP = sp; //@line 12458
  return;
 }
 $33 = HEAP32[$1 >> 2] | 0; //@line 12460
 $35 = HEAP32[$33 + 12 >> 2] | 0; //@line 12462
 if (($35 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; //@line 12472
 } else {
  $$0$i$i = HEAPU8[$35] | 0; //@line 12476
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 12488
  STACKTOP = sp; //@line 12489
  return;
 }
 $55 = HEAP32[$1 >> 2] | 0; //@line 12491
 $56 = $55 + 12 | 0; //@line 12492
 $57 = HEAP32[$56 >> 2] | 0; //@line 12493
 if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 127]($55) | 0; //@line 12502
 } else {
  HEAP32[$56 >> 2] = $57 + 1; //@line 12505
 }
 $66 = HEAP32[$1 >> 2] | 0; //@line 12507
 do {
  if (($66 | 0) == 0) {
   $79 = 0; //@line 12511
  } else {
   if ((HEAP32[$66 + 12 >> 2] | 0) != (HEAP32[$66 + 16 >> 2] | 0)) {
    $79 = $66; //@line 12519
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0) == -1) {
    HEAP32[$1 >> 2] = 0; //@line 12529
    $79 = 0; //@line 12530
    break;
   } else {
    $79 = HEAP32[$1 >> 2] | 0; //@line 12534
    break;
   }
  }
 } while (0);
 $80 = ($79 | 0) == 0; //@line 12539
 L39 : do {
  if (($$pre$i2$i$i611 | 0) == 0) {
   label = 31; //@line 12543
  } else {
   do {
    if ((HEAP32[$$pre$i2$i$i611 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611 + 16 >> 2] | 0)) {
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611 >> 2] | 0) + 36 >> 2] & 127]($$pre$i2$i$i611) | 0) == -1)) {
      break;
     }
     HEAP32[$17 >> 2] = 0; //@line 12561
     label = 31; //@line 12562
     break L39;
    }
   } while (0);
   if (!$80) {
    break;
   }
   STACKTOP = sp; //@line 12569
   return;
  }
 } while (0);
 do {
  if ((label | 0) == 31) {
   if ($80) {
    break;
   }
   STACKTOP = sp; //@line 12577
   return;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12582
 STACKTOP = sp; //@line 12583
 return;
}
function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr41 = 0, $1 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $6 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0, $s$213 = 0, $ws = 0, sp = 0;
 sp = STACKTOP; //@line 12672
 STACKTOP = STACKTOP + 264 | 0; //@line 12673
 $ws = sp + 256 | 0; //@line 12675
 $1 = sp; //@line 12676
 $2 = HEAP32[$wcs >> 2] | 0; //@line 12677
 HEAP32[$ws >> 2] = $2; //@line 12678
 $3 = ($dst | 0) != 0; //@line 12679
 $n$ = $3 ? $n : 256; //@line 12680
 $dst$ = $3 ? $dst : $1; //@line 12681
 L1 : do {
  if (($2 | 0) == 0 | ($n$ | 0) == 0) {
   $$1 = $wn; //@line 12687
   $$26 = $n$; //@line 12687
   $18 = $2; //@line 12687
   $cnt$1 = 0; //@line 12687
   $s$018 = $dst$; //@line 12687
  } else {
   $$026 = $wn; //@line 12689
   $$0423 = $n$; //@line 12689
   $$pr41 = $2; //@line 12689
   $cnt$024 = 0; //@line 12689
   $s$025 = $dst$; //@line 12689
   while (1) {
    $6 = $$026 >>> 0 >= $$0423 >>> 0; //@line 12691
    if (!($6 | $$026 >>> 0 > 32)) {
     $$1 = $$026; //@line 12695
     $$26 = $$0423; //@line 12695
     $18 = $$pr41; //@line 12695
     $cnt$1 = $cnt$024; //@line 12695
     $s$018 = $s$025; //@line 12695
     break L1;
    }
    $$04$$0 = $6 ? $$0423 : $$026; //@line 12698
    $8 = $$026 - $$04$$0 | 0; //@line 12699
    $9 = _wcsrtombs($s$025, $ws, $$04$$0, 0) | 0; //@line 12700
    if (($9 | 0) == -1) {
     break;
    }
    if (($s$025 | 0) == ($1 | 0)) {
     $$15 = $$0423; //@line 12707
     $s$1 = $1; //@line 12707
    } else {
     $$15 = $$0423 - $9 | 0; //@line 12711
     $s$1 = $s$025 + $9 | 0; //@line 12711
    }
    $14 = $9 + $cnt$024 | 0; //@line 12713
    $15 = HEAP32[$ws >> 2] | 0; //@line 12714
    if (($15 | 0) == 0 | ($$15 | 0) == 0) {
     $$1 = $8; //@line 12719
     $$26 = $$15; //@line 12719
     $18 = $15; //@line 12719
     $cnt$1 = $14; //@line 12719
     $s$018 = $s$1; //@line 12719
     break L1;
    } else {
     $$026 = $8; //@line 12722
     $$0423 = $$15; //@line 12722
     $$pr41 = $15; //@line 12722
     $cnt$024 = $14; //@line 12722
     $s$025 = $s$1; //@line 12722
    }
   }
   $$1 = $8; //@line 12726
   $$26 = 0; //@line 12726
   $18 = HEAP32[$ws >> 2] | 0; //@line 12726
   $cnt$1 = -1; //@line 12726
   $s$018 = $s$025; //@line 12726
  }
 } while (0);
 L11 : do {
  if (($18 | 0) == 0) {
   $cnt$3 = $cnt$1; //@line 12732
  } else {
   if (($$26 | 0) == 0 | ($$1 | 0) == 0) {
    $cnt$3 = $cnt$1; //@line 12738
    break;
   } else {
    $$214 = $$1; //@line 12741
    $$311 = $$26; //@line 12741
    $22 = $18; //@line 12741
    $cnt$212 = $cnt$1; //@line 12741
    $s$213 = $s$018; //@line 12741
   }
   while (1) {
    $24 = _wcrtomb($s$213, HEAP32[$22 >> 2] | 0, 0) | 0; //@line 12745
    if (($24 + 1 | 0) >>> 0 < 2) {
     break;
    }
    $29 = (HEAP32[$ws >> 2] | 0) + 4 | 0; //@line 12752
    HEAP32[$ws >> 2] = $29; //@line 12753
    $30 = $$214 + -1 | 0; //@line 12754
    $33 = $cnt$212 + 1 | 0; //@line 12757
    if (($$311 | 0) == ($24 | 0) | ($30 | 0) == 0) {
     $cnt$3 = $33; //@line 12762
     break L11;
    } else {
     $$214 = $30; //@line 12765
     $$311 = $$311 - $24 | 0; //@line 12765
     $22 = $29; //@line 12765
     $cnt$212 = $33; //@line 12765
     $s$213 = $s$213 + $24 | 0; //@line 12765
    }
   }
   if (($24 | 0) != 0) {
    $cnt$3 = -1; //@line 12770
    break;
   }
   HEAP32[$ws >> 2] = 0; //@line 12773
   $cnt$3 = $cnt$212; //@line 12774
  }
 } while (0);
 if (!$3) {
  STACKTOP = sp; //@line 12778
  return $cnt$3 | 0; //@line 12778
 }
 HEAP32[$wcs >> 2] = HEAP32[$ws >> 2]; //@line 12781
 STACKTOP = sp; //@line 12782
 return $cnt$3 | 0; //@line 12782
}
function _callback_js($data, $size, $a) {
 $data = $data | 0;
 $size = $size | 0;
 $a = $a | 0;
 var $$pre$phi$phZ2D = 0, $$pre$phi2Z2D = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $7 = 0, $8 = 0, $pm = 0, $str_pm = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1627
 STACKTOP = STACKTOP + 24 | 0; //@line 1628
 $pm = sp; //@line 1629
 $str_pm = sp + 8 | 0; //@line 1630
 _memcpy($pm | 0, $data | 0, $size | 0) | 0; //@line 1632
 switch (HEAP32[$pm >> 2] | 0) {
 case 0:
  {
   $20 = $str_pm; //@line 1636
   HEAP8[$20] = 14; //@line 1637
   $22 = $str_pm + 1 | 0; //@line 1639
   HEAP8[$22 + 0 | 0] = HEAP8[176 | 0] | 0; //@line 1640
   HEAP8[$22 + 1 | 0] = HEAP8[177 | 0] | 0; //@line 1640
   HEAP8[$22 + 2 | 0] = HEAP8[178 | 0] | 0; //@line 1640
   HEAP8[$22 + 3 | 0] = HEAP8[179 | 0] | 0; //@line 1640
   HEAP8[$22 + 4 | 0] = HEAP8[180 | 0] | 0; //@line 1640
   HEAP8[$22 + 5 | 0] = HEAP8[181 | 0] | 0; //@line 1640
   HEAP8[$22 + 6 | 0] = HEAP8[182 | 0] | 0; //@line 1640
   HEAP8[$str_pm + 8 | 0] = 0; //@line 1643
   $$pre$phi$phZ2D = $20; //@line 1644
   label = 8; //@line 1645
   break;
  }
 case 1:
  {
   $3 = $str_pm; //@line 1649
   HEAP8[$3] = 16; //@line 1650
   $4 = $str_pm; //@line 1651
   $7 = $4 + 1 | 0; //@line 1654
   $8 = $7; //@line 1655
   HEAP8[$8] = 1346983763; //@line 1656
   HEAP8[$8 + 1 | 0] = 5261655; //@line 1656
   HEAP8[$8 + 2 | 0] = 20553; //@line 1656
   HEAP8[$8 + 3 | 0] = 80; //@line 1656
   $10 = $7 + 4 | 0; //@line 1658
   HEAP8[$10] = 1347772229; //@line 1659
   HEAP8[$10 + 1 | 0] = 5264735; //@line 1659
   HEAP8[$10 + 2 | 0] = 20565; //@line 1659
   HEAP8[$10 + 3 | 0] = 80; //@line 1659
   HEAP8[$4 + 9 | 0] = 0; //@line 1661
   $$pre$phi$phZ2D = $3; //@line 1662
   label = 8; //@line 1663
   break;
  }
 case 3:
  {
   $16 = $str_pm; //@line 1667
   HEAP8[$16] = 20; //@line 1668
   $17 = $str_pm; //@line 1669
   dest = $17 + 1 | 0; //@line 1671
   src = 144 | 0; //@line 1671
   stop = dest + 10 | 0; //@line 1671
   do {
    HEAP8[dest] = HEAP8[src] | 0; //@line 1671
    dest = dest + 1 | 0; //@line 1671
    src = src + 1 | 0; //@line 1671
   } while ((dest | 0) < (stop | 0));
   HEAP8[$17 + 11 | 0] = 0; //@line 1673
   $$pre$phi$phZ2D = $16; //@line 1674
   label = 8; //@line 1675
   break;
  }
 case 2:
  {
   $12 = $str_pm; //@line 1679
   HEAP8[$12] = 20; //@line 1680
   $13 = $str_pm; //@line 1681
   dest = $13 + 1 | 0; //@line 1683
   src = 128 | 0; //@line 1683
   stop = dest + 10 | 0; //@line 1683
   do {
    HEAP8[dest] = HEAP8[src] | 0; //@line 1683
    dest = dest + 1 | 0; //@line 1683
    src = src + 1 | 0; //@line 1683
   } while ((dest | 0) < (stop | 0));
   HEAP8[$13 + 11 | 0] = 0; //@line 1685
   $$pre$phi$phZ2D = $12; //@line 1686
   label = 8; //@line 1687
   break;
  }
 case 4:
  {
   $25 = __Znwj(16) | 0; //@line 1691
   HEAP32[$str_pm + 8 >> 2] = $25; //@line 1693
   HEAP32[$str_pm >> 2] = 17; //@line 1695
   HEAP32[$str_pm + 4 >> 2] = 11; //@line 1697
   dest = $25 + 0 | 0; //@line 1698
   src = 160 | 0; //@line 1698
   stop = dest + 11 | 0; //@line 1698
   do {
    HEAP8[dest] = HEAP8[src] | 0; //@line 1698
    dest = dest + 1 | 0; //@line 1698
    src = src + 1 | 0; //@line 1698
   } while ((dest | 0) < (stop | 0));
   HEAP8[$25 + 11 | 0] = 0; //@line 1700
   $$pre$phi2Z2D = $str_pm; //@line 1704
   $34 = HEAP32[$str_pm + 8 >> 2] | 0; //@line 1704
   break;
  }
 default:
  {
   ___assert_fail(48, 56, 406, 184); //@line 1708
  }
 }
 if ((label | 0) == 8) {
  $$pre$phi2Z2D = $$pre$phi$phZ2D; //@line 1715
  $34 = $str_pm + 1 | 0; //@line 1715
 }
 FUNCTION_TABLE_vi[$a & 255]($34); //@line 1718
 if ((HEAP8[$$pre$phi2Z2D] & 1) == 0) {
  STACKTOP = sp; //@line 1723
  return;
 }
 __ZdlPv(HEAP32[$str_pm + 8 >> 2] | 0); //@line 1727
 STACKTOP = sp; //@line 1728
 return;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $28 = 0, $3 = 0, $32 = 0, $4 = 0, $46 = 0, $54 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $95 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 1421
 STACKTOP = STACKTOP + 40 | 0; //@line 1422
 $$byval_copy = sp; //@line 1423
 $1 = sp + 8 | 0; //@line 1424
 $__s = sp + 16 | 0; //@line 1425
 $2 = sp + 24 | 0; //@line 1426
 $3 = sp + 32 | 0; //@line 1427
 $4 = $__s; //@line 1428
 HEAP8[$4] = 0; //@line 1429
 HEAP32[$__s + 4 >> 2] = $__os; //@line 1431
 $6 = $__os; //@line 1432
 $10 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1436
 $11 = $__os; //@line 1437
 if ((HEAP32[$11 + ($10 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1444
  STACKTOP = sp; //@line 1445
  return $__os | 0; //@line 1445
 }
 $18 = HEAP32[$11 + ($10 + 72) >> 2] | 0; //@line 1450
 if (($18 | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($18) | 0; //@line 1453
 }
 HEAP8[$4] = 1; //@line 1455
 $21 = HEAP8[$__str] | 0; //@line 1457
 $23 = ($21 & 1) == 0; //@line 1459
 if ($23) {
  $28 = ($21 & 255) >>> 1; //@line 1463
 } else {
  $28 = HEAP32[$__str + 4 >> 2] | 0; //@line 1467
 }
 $32 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1472
 HEAP32[$2 >> 2] = HEAP32[$11 + ($32 + 24) >> 2]; //@line 1479
 if ($23) {
  $54 = $__str; //@line 1489
  if ((HEAP32[$11 + ($32 + 4) >> 2] & 176 | 0) == 32) {
   $61 = $54 + $28 + 1 | 0; //@line 1493
  } else {
   $61 = $54 + 1 | 0; //@line 1495
  }
  $64 = $61; //@line 1499
  $65 = $__str + 1 | 0; //@line 1499
  $66 = $__str + 1 | 0; //@line 1499
 } else {
  $46 = HEAP32[$__str + 8 >> 2] | 0; //@line 1510
  if ((HEAP32[$11 + ($32 + 4) >> 2] & 176 | 0) == 32) {
   $58 = $46 + $28 | 0; //@line 1513
  } else {
   $58 = $46; //@line 1515
  }
  $64 = $58; //@line 1519
  $65 = HEAP32[$__str + 8 >> 2] | 0; //@line 1519
  $66 = HEAP32[$__str + 8 >> 2] | 0; //@line 1519
 }
 $67 = $11 + $32 | 0; //@line 1521
 $69 = $11 + ($32 + 76) | 0; //@line 1524
 $70 = HEAP32[$69 >> 2] | 0; //@line 1525
 if (($70 | 0) == -1) {
  $73 = $67; //@line 1529
  __ZNKSt3__18ios_base6getlocEv($1, $73); //@line 1530
  $74 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5712) | 0; //@line 1531
  $80 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$74 >> 2] | 0) + 28 >> 2] & 31]($74, 32) | 0; //@line 1537
  __ZNSt3__16localeD2Ev($1); //@line 1538
  $81 = $80 << 24 >> 24; //@line 1539
  HEAP32[$69 >> 2] = $81; //@line 1540
  $$pre$phiZ2D = $73; //@line 1541
  $82 = $81; //@line 1541
 } else {
  $$pre$phiZ2D = $67; //@line 1544
  $82 = $70; //@line 1544
 }
 $83 = $82 & 255; //@line 1546
 $84 = $66 + $28 | 0; //@line 1547
 $86 = $$byval_copy; //@line 1549
 $87 = $2; //@line 1550
 HEAP32[$86 + 0 >> 2] = HEAP32[$87 + 0 >> 2]; //@line 1551
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($3, $$byval_copy, $65, $64, $84, $$pre$phiZ2D, $83); //@line 1552
 if ((HEAP32[$3 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1558
  STACKTOP = sp; //@line 1559
  return $__os | 0; //@line 1559
 }
 $95 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1564
 __ZNSt3__18ios_base5clearEj($11 + $95 | 0, HEAP32[$11 + ($95 + 16) >> 2] | 5); //@line 1572
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1573
 STACKTOP = sp; //@line 1574
 return $__os | 0; //@line 1574
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $$02$i$i$i = 0, $$02$i$i$i5 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $24 = 0, $25 = 0, $32 = 0, $39 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $53 = 0, $54 = 0, $6 = 0, $61 = 0, $8 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$lcssa$i$i$i11 = 0, $__p$0$ph$i$i$i = 0, $__p$0$ph$i$i$i2 = 0, $__p$01$i$i$i = 0, $__p$01$i$i$i6 = 0, $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 2199
 $2 = HEAP32[$this + 48 >> 2] | 0; //@line 2201
 if (($2 & 16 | 0) != 0) {
  $5 = $this + 44 | 0; //@line 2205
  $6 = HEAP32[$5 >> 2] | 0; //@line 2206
  $8 = HEAP32[$this + 24 >> 2] | 0; //@line 2208
  if ($6 >>> 0 < $8 >>> 0) {
   HEAP32[$5 >> 2] = $8; //@line 2211
   $10 = $8; //@line 2212
  } else {
   $10 = $6; //@line 2214
  }
  $12 = HEAP32[$this + 20 >> 2] | 0; //@line 2217
  $13 = $12; //@line 2218
  $15 = $10 - $13 | 0; //@line 2220
  if ($15 >>> 0 > 4294967279) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 2223
  }
  if ($15 >>> 0 < 11) {
   HEAP8[$agg$result] = $15 << 1; //@line 2231
   $__p$0$ph$i$i$i2 = $agg$result + 1 | 0; //@line 2234
  } else {
   $24 = $15 + 16 & -16; //@line 2237
   $25 = __Znwj($24) | 0; //@line 2238
   HEAP32[$agg$result + 8 >> 2] = $25; //@line 2240
   HEAP32[$agg$result >> 2] = $24 | 1; //@line 2243
   HEAP32[$agg$result + 4 >> 2] = $15; //@line 2245
   $__p$0$ph$i$i$i2 = $25; //@line 2246
  }
  if (($12 | 0) == ($10 | 0)) {
   $__p$0$lcssa$i$i$i11 = $__p$0$ph$i$i$i2; //@line 2250
  } else {
   $$02$i$i$i5 = $12; //@line 2252
   $__p$01$i$i$i6 = $__p$0$ph$i$i$i2; //@line 2252
   while (1) {
    HEAP8[$__p$01$i$i$i6] = HEAP8[$$02$i$i$i5] | 0; //@line 2255
    $32 = $$02$i$i$i5 + 1 | 0; //@line 2256
    if (($32 | 0) == ($10 | 0)) {
     break;
    } else {
     $__p$01$i$i$i6 = $__p$01$i$i$i6 + 1 | 0; //@line 2262
     $$02$i$i$i5 = $32; //@line 2262
    }
   }
   $__p$0$lcssa$i$i$i11 = $__p$0$ph$i$i$i2 + ($10 + (0 - $13)) | 0; //@line 2269
  }
  HEAP8[$__p$0$lcssa$i$i$i11] = 0; //@line 2271
  STACKTOP = sp; //@line 2272
  return;
 }
 if (($2 & 8 | 0) == 0) {
  $this2$i$i$i = $agg$result; //@line 2277
  HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 2278
  HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 2278
  HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 2278
  STACKTOP = sp; //@line 2279
  return;
 }
 $39 = HEAP32[$this + 8 >> 2] | 0; //@line 2282
 $41 = HEAP32[$this + 16 >> 2] | 0; //@line 2284
 $42 = $39; //@line 2285
 $44 = $41 - $42 | 0; //@line 2287
 if ($44 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 2290
 }
 if ($44 >>> 0 < 11) {
  HEAP8[$agg$result] = $44 << 1; //@line 2298
  $__p$0$ph$i$i$i = $agg$result + 1 | 0; //@line 2301
 } else {
  $53 = $44 + 16 & -16; //@line 2304
  $54 = __Znwj($53) | 0; //@line 2305
  HEAP32[$agg$result + 8 >> 2] = $54; //@line 2307
  HEAP32[$agg$result >> 2] = $53 | 1; //@line 2310
  HEAP32[$agg$result + 4 >> 2] = $44; //@line 2312
  $__p$0$ph$i$i$i = $54; //@line 2313
 }
 if (($39 | 0) == ($41 | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i; //@line 2317
 } else {
  $$02$i$i$i = $39; //@line 2319
  $__p$01$i$i$i = $__p$0$ph$i$i$i; //@line 2319
  while (1) {
   HEAP8[$__p$01$i$i$i] = HEAP8[$$02$i$i$i] | 0; //@line 2322
   $61 = $$02$i$i$i + 1 | 0; //@line 2323
   if (($61 | 0) == ($41 | 0)) {
    break;
   } else {
    $__p$01$i$i$i = $__p$01$i$i$i + 1 | 0; //@line 2329
    $$02$i$i$i = $61; //@line 2329
   }
  }
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + ($41 + (0 - $42)) | 0; //@line 2336
 }
 HEAP8[$__p$0$lcssa$i$i$i] = 0; //@line 2338
 STACKTOP = sp; //@line 2339
 return;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $29 = 0, $33 = 0, $36 = 0, $48 = 0, $5 = 0, $51 = 0, sp = 0;
 sp = STACKTOP; //@line 14519
 $1 = HEAP32[$__a_end >> 2] | 0; //@line 14520
 $2 = ($1 | 0) == ($__a | 0); //@line 14521
 do {
  if ($2) {
   $5 = (HEAP8[$__atoms + 24 | 0] | 0) == $__ct << 24 >> 24; //@line 14526
   if (!$5) {
    if (!((HEAP8[$__atoms + 25 | 0] | 0) == $__ct << 24 >> 24)) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1; //@line 14537
   HEAP8[$__a] = $5 ? 43 : 45; //@line 14538
   HEAP32[$__dc >> 2] = 0; //@line 14539
   $$0 = 0; //@line 14540
   STACKTOP = sp; //@line 14541
   return $$0 | 0; //@line 14541
  }
 } while (0);
 $12 = HEAP8[$__grouping] | 0; //@line 14545
 if (($12 & 1) == 0) {
  $19 = ($12 & 255) >>> 1; //@line 14551
 } else {
  $19 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 14555
 }
 if (($19 | 0) != 0 & $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
  $22 = HEAP32[$__g_end >> 2] | 0; //@line 14561
  if (($22 - $__g | 0) >= 160) {
   $$0 = 0; //@line 14567
   STACKTOP = sp; //@line 14568
   return $$0 | 0; //@line 14568
  }
  $27 = HEAP32[$__dc >> 2] | 0; //@line 14570
  HEAP32[$__g_end >> 2] = $22 + 4; //@line 14572
  HEAP32[$22 >> 2] = $27; //@line 14573
  HEAP32[$__dc >> 2] = 0; //@line 14574
  $$0 = 0; //@line 14575
  STACKTOP = sp; //@line 14576
  return $$0 | 0; //@line 14576
 }
 $29 = $__atoms + 26 | 0; //@line 14578
 $$01$i = $__atoms; //@line 14579
 while (1) {
  $33 = $$01$i + 1 | 0; //@line 14583
  if ((HEAP8[$$01$i] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i; //@line 14585
   break;
  }
  if (($33 | 0) == ($29 | 0)) {
   $$0$lcssa$i = $29; //@line 14590
   break;
  } else {
   $$01$i = $33; //@line 14593
  }
 }
 $36 = $$0$lcssa$i - $__atoms | 0; //@line 14598
 if (($36 | 0) > 23) {
  $$0 = -1; //@line 14601
  STACKTOP = sp; //@line 14602
  return $$0 | 0; //@line 14602
 }
 do {
  if (($__base | 0) == 10 | ($__base | 0) == 8) {
   if (($36 | 0) < ($__base | 0)) {
    break;
   } else {
    $$0 = -1; //@line 14610
   }
   STACKTOP = sp; //@line 14612
   return $$0 | 0; //@line 14612
  } else if (($__base | 0) == 16) {
   if (($36 | 0) < 22) {
    break;
   }
   if ($2) {
    $$0 = -1; //@line 14619
    STACKTOP = sp; //@line 14620
    return $$0 | 0; //@line 14620
   }
   if (($1 - $__a | 0) >= 3) {
    $$0 = -1; //@line 14627
    STACKTOP = sp; //@line 14628
    return $$0 | 0; //@line 14628
   }
   if ((HEAP8[$1 + -1 | 0] | 0) != 48) {
    $$0 = -1; //@line 14634
    STACKTOP = sp; //@line 14635
    return $$0 | 0; //@line 14635
   }
   HEAP32[$__dc >> 2] = 0; //@line 14637
   $48 = HEAP8[4256 + $36 | 0] | 0; //@line 14639
   HEAP32[$__a_end >> 2] = $1 + 1; //@line 14641
   HEAP8[$1] = $48; //@line 14642
   $$0 = 0; //@line 14643
   STACKTOP = sp; //@line 14644
   return $$0 | 0; //@line 14644
  }
 } while (0);
 $51 = HEAP8[4256 + $36 | 0] | 0; //@line 14648
 HEAP32[$__a_end >> 2] = $1 + 1; //@line 14650
 HEAP8[$1] = $51; //@line 14651
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 14654
 $$0 = 0; //@line 14655
 STACKTOP = sp; //@line 14656
 return $$0 | 0; //@line 14656
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $29 = 0, $33 = 0, $36 = 0, $37 = 0, $49 = 0, $5 = 0, $52 = 0, sp = 0;
 sp = STACKTOP; //@line 4154
 $1 = HEAP32[$__a_end >> 2] | 0; //@line 4155
 $2 = ($1 | 0) == ($__a | 0); //@line 4156
 do {
  if ($2) {
   $5 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0); //@line 4161
   if (!$5) {
    if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1; //@line 4172
   HEAP8[$__a] = $5 ? 43 : 45; //@line 4173
   HEAP32[$__dc >> 2] = 0; //@line 4174
   $$0 = 0; //@line 4175
   STACKTOP = sp; //@line 4176
   return $$0 | 0; //@line 4176
  }
 } while (0);
 $12 = HEAP8[$__grouping] | 0; //@line 4180
 if (($12 & 1) == 0) {
  $19 = ($12 & 255) >>> 1; //@line 4186
 } else {
  $19 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 4190
 }
 if (($19 | 0) != 0 & ($__ct | 0) == ($__thousands_sep | 0)) {
  $22 = HEAP32[$__g_end >> 2] | 0; //@line 4196
  if (($22 - $__g | 0) >= 160) {
   $$0 = 0; //@line 4202
   STACKTOP = sp; //@line 4203
   return $$0 | 0; //@line 4203
  }
  $27 = HEAP32[$__dc >> 2] | 0; //@line 4205
  HEAP32[$__g_end >> 2] = $22 + 4; //@line 4207
  HEAP32[$22 >> 2] = $27; //@line 4208
  HEAP32[$__dc >> 2] = 0; //@line 4209
  $$0 = 0; //@line 4210
  STACKTOP = sp; //@line 4211
  return $$0 | 0; //@line 4211
 }
 $29 = $__atoms + 104 | 0; //@line 4213
 $$01$i = $__atoms; //@line 4214
 while (1) {
  $33 = $$01$i + 4 | 0; //@line 4218
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i; //@line 4220
   break;
  }
  if (($33 | 0) == ($29 | 0)) {
   $$0$lcssa$i = $29; //@line 4225
   break;
  } else {
   $$01$i = $33; //@line 4228
  }
 }
 $36 = $$0$lcssa$i - $__atoms | 0; //@line 4233
 $37 = $36 >> 2; //@line 4234
 if (($36 | 0) > 92) {
  $$0 = -1; //@line 4237
  STACKTOP = sp; //@line 4238
  return $$0 | 0; //@line 4238
 }
 do {
  if (($__base | 0) == 10 | ($__base | 0) == 8) {
   if (($37 | 0) < ($__base | 0)) {
    break;
   } else {
    $$0 = -1; //@line 4246
   }
   STACKTOP = sp; //@line 4248
   return $$0 | 0; //@line 4248
  } else if (($__base | 0) == 16) {
   if (($36 | 0) < 88) {
    break;
   }
   if ($2) {
    $$0 = -1; //@line 4255
    STACKTOP = sp; //@line 4256
    return $$0 | 0; //@line 4256
   }
   if (($1 - $__a | 0) >= 3) {
    $$0 = -1; //@line 4263
    STACKTOP = sp; //@line 4264
    return $$0 | 0; //@line 4264
   }
   if ((HEAP8[$1 + -1 | 0] | 0) != 48) {
    $$0 = -1; //@line 4270
    STACKTOP = sp; //@line 4271
    return $$0 | 0; //@line 4271
   }
   HEAP32[$__dc >> 2] = 0; //@line 4273
   $49 = HEAP8[4256 + $37 | 0] | 0; //@line 4275
   HEAP32[$__a_end >> 2] = $1 + 1; //@line 4277
   HEAP8[$1] = $49; //@line 4278
   $$0 = 0; //@line 4279
   STACKTOP = sp; //@line 4280
   return $$0 | 0; //@line 4280
  }
 } while (0);
 $52 = HEAP8[4256 + $37 | 0] | 0; //@line 4284
 HEAP32[$__a_end >> 2] = $1 + 1; //@line 4286
 HEAP8[$1] = $52; //@line 4287
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 4290
 $$0 = 0; //@line 4291
 STACKTOP = sp; //@line 4292
 return $$0 | 0; //@line 4292
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10536
 if ((HEAP8[6072] | 0) != 0) {
  $9 = HEAP32[1516] | 0; //@line 10540
  STACKTOP = sp; //@line 10541
  return $9 | 0; //@line 10541
 }
 if ((___cxa_guard_acquire(6072) | 0) == 0) {
  $9 = HEAP32[1516] | 0; //@line 10546
  STACKTOP = sp; //@line 10547
  return $9 | 0; //@line 10547
 }
 do {
  if ((HEAP8[11456] | 0) == 0) {
   if ((___cxa_guard_acquire(11456) | 0) == 0) {
    break;
   }
   _memset(11168, 0, 288) | 0; //@line 10558
   _atexit(132, 0, ___dso_handle | 0) | 0; //@line 10559
   ___cxa_guard_release(11456); //@line 10560
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11168, 11464) | 0; //@line 10563
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11180 | 0, 11496) | 0; //@line 10564
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11192 | 0, 11536) | 0; //@line 10565
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11204 | 0, 11560) | 0; //@line 10566
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11216 | 0, 11880) | 0; //@line 10567
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11228 | 0, 11584) | 0; //@line 10568
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11240 | 0, 11608) | 0; //@line 10569
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11252 | 0, 11632) | 0; //@line 10570
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11264 | 0, 11664) | 0; //@line 10571
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11276 | 0, 11704) | 0; //@line 10572
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11288 | 0, 11736) | 0; //@line 10573
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11300 | 0, 11776) | 0; //@line 10574
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11312 | 0, 11816) | 0; //@line 10575
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11324 | 0, 11832) | 0; //@line 10576
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11336 | 0, 11848) | 0; //@line 10577
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11348 | 0, 11864) | 0; //@line 10578
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11360 | 0, 11880) | 0; //@line 10579
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11372 | 0, 11896) | 0; //@line 10580
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11384 | 0, 11912) | 0; //@line 10581
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11396 | 0, 11928) | 0; //@line 10582
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11408 | 0, 11944) | 0; //@line 10583
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11420 | 0, 11960) | 0; //@line 10584
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11432 | 0, 11976) | 0; //@line 10585
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11444 | 0, 11992) | 0; //@line 10586
 HEAP32[1516] = 11168; //@line 10587
 ___cxa_guard_release(6072); //@line 10588
 $9 = HEAP32[1516] | 0; //@line 10589
 STACKTOP = sp; //@line 10590
 return $9 | 0; //@line 10590
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10477
 if ((HEAP8[6056] | 0) != 0) {
  $9 = HEAP32[1512] | 0; //@line 10481
  STACKTOP = sp; //@line 10482
  return $9 | 0; //@line 10482
 }
 if ((___cxa_guard_acquire(6056) | 0) == 0) {
  $9 = HEAP32[1512] | 0; //@line 10487
  STACKTOP = sp; //@line 10488
  return $9 | 0; //@line 10488
 }
 do {
  if ((HEAP8[12296] | 0) == 0) {
   if ((___cxa_guard_acquire(12296) | 0) == 0) {
    break;
   }
   _memset(12008, 0, 288) | 0; //@line 10499
   _atexit(131, 0, ___dso_handle | 0) | 0; //@line 10500
   ___cxa_guard_release(12296); //@line 10501
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12008, 12304) | 0; //@line 10504
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12020 | 0, 12312) | 0; //@line 10505
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12032 | 0, 12328) | 0; //@line 10506
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12044 | 0, 12336) | 0; //@line 10507
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12056 | 0, 12344) | 0; //@line 10508
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12068 | 0, 12352) | 0; //@line 10509
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12080 | 0, 12360) | 0; //@line 10510
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12092 | 0, 12368) | 0; //@line 10511
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12104 | 0, 12376) | 0; //@line 10512
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12116 | 0, 12392) | 0; //@line 10513
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12128 | 0, 12400) | 0; //@line 10514
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12140 | 0, 12416) | 0; //@line 10515
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12152 | 0, 12432) | 0; //@line 10516
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12164 | 0, 12440) | 0; //@line 10517
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12176 | 0, 12448) | 0; //@line 10518
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12188 | 0, 12456) | 0; //@line 10519
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12200 | 0, 12344) | 0; //@line 10520
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12212 | 0, 12464) | 0; //@line 10521
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12224 | 0, 12472) | 0; //@line 10522
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12236 | 0, 12480) | 0; //@line 10523
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12248 | 0, 12488) | 0; //@line 10524
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12260 | 0, 12496) | 0; //@line 10525
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12272 | 0, 12504) | 0; //@line 10526
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12284 | 0, 12512) | 0; //@line 10527
 HEAP32[1512] = 12008; //@line 10528
 ___cxa_guard_release(6056); //@line 10529
 $9 = HEAP32[1512] | 0; //@line 10530
 STACKTOP = sp; //@line 10531
 return $9 | 0; //@line 10531
}
function _create_board($textual_representation) {
 $textual_representation = $textual_representation | 0;
 var $1 = 0, $12 = 0, $13 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $44 = 0, $45 = 0, $__p$0$i$i$i = 0, $board = 0, $is = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1005
 STACKTOP = STACKTOP + 232 | 0; //@line 1006
 $is = sp; //@line 1007
 $1 = sp + 144 | 0; //@line 1008
 $board = sp + 160 | 0; //@line 1009
 $3 = _strlen($textual_representation | 0) | 0; //@line 1011
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 1014
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$1] = $3 << 1; //@line 1022
  $__p$0$i$i$i = $1 + 1 | 0; //@line 1025
 } else {
  $12 = $3 + 16 & -16; //@line 1028
  $13 = __Znwj($12) | 0; //@line 1029
  HEAP32[$1 + 8 >> 2] = $13; //@line 1031
  HEAP32[$1 >> 2] = $12 | 1; //@line 1034
  HEAP32[$1 + 4 >> 2] = $3; //@line 1036
  $__p$0$i$i$i = $13; //@line 1037
 }
 _memcpy($__p$0$i$i$i | 0, $textual_representation | 0, $3 | 0) | 0; //@line 1039
 HEAP8[$__p$0$i$i$i + $3 | 0] = 0; //@line 1041
 $20 = $is; //@line 1043
 $21 = $is + 8 | 0; //@line 1044
 HEAP32[$20 >> 2] = 828; //@line 1045
 $22 = $is + 60 | 0; //@line 1046
 HEAP32[$22 >> 2] = 848; //@line 1047
 HEAP32[$is + 4 >> 2] = 0; //@line 1049
 $24 = $is + 60 | 0; //@line 1050
 __ZNSt3__18ios_base4initEPv($24, $21); //@line 1052
 HEAP32[$is + 132 >> 2] = 0; //@line 1055
 HEAP32[$is + 136 >> 2] = -1; //@line 1057
 HEAP32[$20 >> 2] = 700; //@line 1058
 HEAP32[$is + 60 >> 2] = 720; //@line 1059
 $29 = $21; //@line 1060
 HEAP32[$29 >> 2] = 2984; //@line 1061
 $30 = $is + 12 | 0; //@line 1062
 __ZNSt3__16localeC2Ev($30); //@line 1063
 $32 = $is + 16 | 0; //@line 1065
 HEAP32[$32 + 0 >> 2] = 0; //@line 1066
 HEAP32[$32 + 4 >> 2] = 0; //@line 1066
 HEAP32[$32 + 8 >> 2] = 0; //@line 1066
 HEAP32[$32 + 12 >> 2] = 0; //@line 1066
 HEAP32[$32 + 16 >> 2] = 0; //@line 1066
 HEAP32[$32 + 20 >> 2] = 0; //@line 1066
 HEAP32[$29 >> 2] = 456; //@line 1067
 $34 = $is + 56 | 0; //@line 1069
 $35 = $is + 40 | 0; //@line 1070
 HEAP32[$35 + 0 >> 2] = 0; //@line 1071
 HEAP32[$35 + 4 >> 2] = 0; //@line 1071
 HEAP32[$35 + 8 >> 2] = 0; //@line 1071
 HEAP32[$35 + 12 >> 2] = 0; //@line 1071
 HEAP32[$34 >> 2] = 8; //@line 1072
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($21, $1); //@line 1073
 if (!((HEAP8[$1] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 1081
 }
 __Z27read_board_from_human_inputRNSt3__113basic_istreamIcNS_11char_traitsIcEEEE($board, $is); //@line 1085
 $44 = __Znwj(68) | 0; //@line 1086
 dest = $44 + 0 | 0; //@line 1087
 src = $board + 0 | 0; //@line 1087
 stop = dest + 68 | 0; //@line 1087
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1087
  dest = dest + 4 | 0; //@line 1087
  src = src + 4 | 0; //@line 1087
 } while ((dest | 0) < (stop | 0));
 HEAP32[$20 >> 2] = 700; //@line 1088
 HEAP32[$22 >> 2] = 720; //@line 1089
 $45 = $is + 8 | 0; //@line 1090
 HEAP32[$45 >> 2] = 456; //@line 1091
 if ((HEAP8[$35] & 1) == 0) {
  HEAP32[$45 >> 2] = 2984; //@line 1096
  __ZNSt3__16localeD2Ev($30); //@line 1097
  __ZNSt3__18ios_baseD2Ev($24); //@line 1098
  STACKTOP = sp; //@line 1099
  return $44 | 0; //@line 1099
 }
 __ZdlPv(HEAP32[$is + 48 >> 2] | 0); //@line 1103
 HEAP32[$45 >> 2] = 2984; //@line 1104
 __ZNSt3__16localeD2Ev($30); //@line 1105
 __ZNSt3__18ios_baseD2Ev($24); //@line 1106
 STACKTOP = sp; //@line 1107
 return $44 | 0; //@line 1107
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this, $__is, $__noskipws) {
 $this = $this | 0;
 $__is = $__is | 0;
 $__noskipws = $__noskipws | 0;
 var $$ = 0, $$0$i$i = 0, $1 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $38 = 0, $39 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $7 = 0, $73 = 0, $8 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8211
 STACKTOP = STACKTOP + 8 | 0; //@line 8212
 $1 = sp; //@line 8213
 $2 = $this; //@line 8214
 HEAP8[$2] = 0; //@line 8215
 $3 = $__is; //@line 8216
 $7 = HEAP32[(HEAP32[$3 >> 2] | 0) + -12 >> 2] | 0; //@line 8220
 $8 = $__is; //@line 8221
 $11 = HEAP32[$8 + ($7 + 16) >> 2] | 0; //@line 8225
 if (($11 | 0) != 0) {
  __ZNSt3__18ios_base5clearEj($8 + $7 | 0, $11 | 4); //@line 8231
  STACKTOP = sp; //@line 8232
  return;
 }
 $15 = HEAP32[$8 + ($7 + 72) >> 2] | 0; //@line 8237
 if (($15 | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15) | 0; //@line 8240
 }
 L8 : do {
  if (!$__noskipws) {
   $20 = HEAP32[(HEAP32[$3 >> 2] | 0) + -12 >> 2] | 0; //@line 8247
   if ((HEAP32[$8 + ($20 + 4) >> 2] & 4096 | 0) == 0) {
    break;
   }
   __ZNSt3__16localeC2ERKS0_($1, $8 + ($20 + 28) | 0); //@line 8260
   $28 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5712) | 0; //@line 8261
   __ZNSt3__16localeD2Ev($1); //@line 8262
   $38 = $28 + 8 | 0; //@line 8273
   $39 = HEAP32[$8 + ((HEAP32[(HEAP32[$3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 8274
   while (1) {
    if (($39 | 0) == 0) {
     break;
    }
    if ((HEAP32[$39 + 12 >> 2] | 0) == (HEAP32[$39 + 16 >> 2] | 0)) {
     $51 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0) == -1; //@line 8291
     $$ = $51 ? 0 : $39; //@line 8292
     if (($$ | 0) == 0) {
      break;
     } else {
      $53 = $$; //@line 8297
     }
    } else {
     $53 = $39; //@line 8300
    }
    $54 = $53 + 12 | 0; //@line 8302
    $55 = HEAP32[$54 >> 2] | 0; //@line 8303
    $56 = $53 + 16 | 0; //@line 8304
    if (($55 | 0) == (HEAP32[$56 >> 2] | 0)) {
     $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0; //@line 8313
    } else {
     $$0$i$i = HEAPU8[$55] | 0; //@line 8317
    }
    if (!(($$0$i$i & 255) << 24 >> 24 > -1)) {
     label = 18; //@line 8322
     break;
    }
    if ((HEAP16[(HEAP32[$38 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192) == 0) {
     label = 18; //@line 8333
     break;
    }
    $73 = HEAP32[$54 >> 2] | 0; //@line 8336
    if (($73 | 0) == (HEAP32[$56 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 40 >> 2] & 127]($53) | 0; //@line 8344
     $39 = $53; //@line 8345
     continue;
    } else {
     HEAP32[$54 >> 2] = $73 + 1; //@line 8349
     $39 = $53; //@line 8350
     continue;
    }
   }
   do {
    if ((label | 0) == 18) {
     if (($53 | 0) == 0) {
      break;
     }
     if ((HEAP32[$53 + 12 >> 2] | 0) != (HEAP32[$53 + 16 >> 2] | 0)) {
      break L8;
     }
     if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0) == -1 | ($53 | 0) == 0)) {
      break L8;
     }
    }
   } while (0);
   $98 = HEAP32[(HEAP32[$3 >> 2] | 0) + -12 >> 2] | 0; //@line 8384
   __ZNSt3__18ios_base5clearEj($8 + $98 | 0, HEAP32[$8 + ($98 + 16) >> 2] | 6); //@line 8392
  }
 } while (0);
 HEAP8[$2] = (HEAP32[$8 + ((HEAP32[(HEAP32[$3 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] | 0) == 0 | 0; //@line 8405
 STACKTOP = sp; //@line 8406
 return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $45 = 0, $5 = 0, $6 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__p$0$i$i$i = 0, $__sp = 0, sp = 0;
 sp = STACKTOP; //@line 2361
 STACKTOP = STACKTOP + 16 | 0; //@line 2362
 $__sp = sp; //@line 2363
 $1 = $__s; //@line 2364
 $2 = HEAP32[$1 >> 2] | 0; //@line 2365
 if (($2 | 0) == 0) {
  HEAP32[$agg$result >> 2] = 0; //@line 2369
  STACKTOP = sp; //@line 2370
  return;
 }
 $5 = $__oe; //@line 2372
 $6 = $__ob; //@line 2373
 $7 = $5 - $6 | 0; //@line 2374
 $8 = $__iob + 12 | 0; //@line 2375
 $9 = HEAP32[$8 >> 2] | 0; //@line 2376
 $__ns$0 = ($9 | 0) > ($7 | 0) ? $9 - $7 | 0 : 0; //@line 2379
 $12 = $__op; //@line 2380
 $13 = $12 - $6 | 0; //@line 2381
 do {
  if (($13 | 0) > 0) {
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $__ob, $13) | 0) == ($13 | 0)) {
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 2394
   HEAP32[$agg$result >> 2] = 0; //@line 2396
   STACKTOP = sp; //@line 2397
   return;
  }
 } while (0);
 do {
  if (($__ns$0 | 0) > 0) {
   if ($__ns$0 >>> 0 < 11) {
    $25 = $__ns$0 << 1 & 255; //@line 2406
    $26 = $__sp; //@line 2407
    HEAP8[$26] = $25; //@line 2408
    $$pre$phiZ2D = $26; //@line 2411
    $37 = $25; //@line 2411
    $__p$0$i$i$i = $__sp + 1 | 0; //@line 2411
   } else {
    $30 = $__ns$0 + 16 & -16; //@line 2414
    $31 = __Znwj($30) | 0; //@line 2415
    HEAP32[$__sp + 8 >> 2] = $31; //@line 2417
    $33 = $30 | 1; //@line 2418
    HEAP32[$__sp >> 2] = $33; //@line 2420
    HEAP32[$__sp + 4 >> 2] = $__ns$0; //@line 2422
    $$pre$phiZ2D = $__sp; //@line 2425
    $37 = $33 & 255; //@line 2425
    $__p$0$i$i$i = $31; //@line 2425
   }
   _memset($__p$0$i$i$i | 0, $__fl | 0, $__ns$0 | 0) | 0; //@line 2427
   HEAP8[$__p$0$i$i$i + $__ns$0 | 0] = 0; //@line 2429
   if (($37 & 1) == 0) {
    $45 = $__sp + 1 | 0; //@line 2435
   } else {
    $45 = HEAP32[$__sp + 8 >> 2] | 0; //@line 2439
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $45, $__ns$0) | 0) == ($__ns$0 | 0)) {
    if ((HEAP8[$$pre$phiZ2D] & 1) == 0) {
     break;
    }
    __ZdlPv(HEAP32[$__sp + 8 >> 2] | 0); //@line 2456
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 2459
   HEAP32[$agg$result >> 2] = 0; //@line 2461
   if ((HEAP8[$$pre$phiZ2D] & 1) == 0) {
    STACKTOP = sp; //@line 2466
    return;
   }
   __ZdlPv(HEAP32[$__sp + 8 >> 2] | 0); //@line 2470
   STACKTOP = sp; //@line 2471
   return;
  }
 } while (0);
 $63 = $5 - $12 | 0; //@line 2474
 do {
  if (($63 | 0) > 0) {
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $__op, $63) | 0) == ($63 | 0)) {
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 2487
   HEAP32[$agg$result >> 2] = 0; //@line 2489
   STACKTOP = sp; //@line 2490
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = 0; //@line 2493
 HEAP32[$agg$result >> 2] = $2; //@line 2495
 STACKTOP = sp; //@line 2496
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $1 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $43 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $60 = 0, $71 = 0, $75 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, sp = 0;
 sp = STACKTOP; //@line 3326
 $1 = $this + 32 | 0; //@line 3327
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($1, $__s) | 0; //@line 3328
 $2 = $this + 44 | 0; //@line 3329
 HEAP32[$2 >> 2] = 0; //@line 3330
 $3 = $this + 48 | 0; //@line 3331
 $4 = HEAP32[$3 >> 2] | 0; //@line 3332
 if (($4 & 8 | 0) != 0) {
  $8 = HEAP8[$1] | 0; //@line 3337
  if (($8 & 1) == 0) {
   $21 = $1 + (($8 & 255) >>> 1) + 1 | 0; //@line 3344
   HEAP32[$2 >> 2] = $21; //@line 3345
   $26 = $1 + 1 | 0; //@line 3350
   $27 = $21; //@line 3350
   $28 = $1 + 1 | 0; //@line 3350
  } else {
   $15 = (HEAP32[$this + 40 >> 2] | 0) + (HEAP32[$this + 36 >> 2] | 0) | 0; //@line 3356
   HEAP32[$2 >> 2] = $15; //@line 3357
   $17 = HEAP32[$this + 40 >> 2] | 0; //@line 3359
   $26 = $17; //@line 3360
   $27 = $15; //@line 3360
   $28 = $17; //@line 3360
  }
  HEAP32[$this + 8 >> 2] = $26; //@line 3363
  HEAP32[$this + 12 >> 2] = $28; //@line 3365
  HEAP32[$this + 16 >> 2] = $27; //@line 3367
 }
 if (($4 & 16 | 0) == 0) {
  STACKTOP = sp; //@line 3372
  return;
 }
 $34 = $1; //@line 3374
 $35 = HEAP8[$34] | 0; //@line 3375
 if (($35 & 1) == 0) {
  $39 = ($35 & 255) >>> 1; //@line 3380
  HEAP32[$2 >> 2] = $1 + $39 + 1; //@line 3383
  $51 = $39; //@line 3384
  $52 = $35; //@line 3384
  $53 = 10; //@line 3384
 } else {
  $43 = HEAP32[$this + 36 >> 2] | 0; //@line 3387
  HEAP32[$2 >> 2] = (HEAP32[$this + 40 >> 2] | 0) + $43; //@line 3391
  $48 = HEAP32[$1 >> 2] | 0; //@line 3393
  $51 = $43; //@line 3397
  $52 = $48 & 255; //@line 3397
  $53 = ($48 & -2) + -1 | 0; //@line 3397
 }
 $55 = ($52 & 1) == 0; //@line 3400
 if ($55) {
  $60 = ($52 & 255) >>> 1; //@line 3404
 } else {
  $60 = HEAP32[$this + 36 >> 2] | 0; //@line 3408
 }
 do {
  if ($60 >>> 0 < $53 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($1, $53 - $60 | 0, 0) | 0; //@line 3414
  } else {
   if ($55) {
    HEAP8[$1 + $53 + 1 | 0] = 0; //@line 3419
    HEAP8[$34] = $53 << 1; //@line 3422
    break;
   } else {
    HEAP8[(HEAP32[$this + 40 >> 2] | 0) + $53 | 0] = 0; //@line 3428
    HEAP32[$this + 36 >> 2] = $53; //@line 3430
    break;
   }
  }
 } while (0);
 $71 = HEAP8[$34] | 0; //@line 3435
 if (($71 & 1) == 0) {
  $84 = $1 + 1 | 0; //@line 3445
  $85 = $1 + 1 | 0; //@line 3445
  $86 = ($71 & 255) >>> 1; //@line 3445
 } else {
  $75 = HEAP32[$this + 40 >> 2] | 0; //@line 3448
  $84 = $75; //@line 3451
  $85 = $75; //@line 3451
  $86 = HEAP32[$this + 36 >> 2] | 0; //@line 3451
 }
 $88 = $this + 24 | 0; //@line 3454
 HEAP32[$88 >> 2] = $85; //@line 3455
 HEAP32[$this + 20 >> 2] = $85; //@line 3457
 HEAP32[$this + 28 >> 2] = $84 + $86; //@line 3459
 if ((HEAP32[$3 >> 2] & 3 | 0) == 0) {
  STACKTOP = sp; //@line 3464
  return;
 }
 HEAP32[$88 >> 2] = $85 + $51; //@line 3467
 STACKTOP = sp; //@line 3468
 return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $47 = 0, $49 = 0, $52 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, sp = 0;
 sp = STACKTOP; //@line 19372
 $1 = $__grouping; //@line 19373
 $2 = HEAP8[$1] | 0; //@line 19374
 if (($2 & 1) == 0) {
  $9 = ($2 & 255) >>> 1; //@line 19380
 } else {
  $9 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 19384
 }
 if (($9 | 0) == 0) {
  STACKTOP = sp; //@line 19388
  return;
 }
 do {
  if (($__g | 0) == ($__g_end | 0)) {
   $20 = $2; //@line 19393
  } else {
   $12 = $__g_end + -4 | 0; //@line 19395
   if ($12 >>> 0 > $__g >>> 0) {
    $$012$i$i = $__g; //@line 19398
    $14 = $12; //@line 19398
   } else {
    $20 = $2; //@line 19400
    break;
   }
   do {
    $15 = HEAP32[$$012$i$i >> 2] | 0; //@line 19404
    HEAP32[$$012$i$i >> 2] = HEAP32[$14 >> 2]; //@line 19406
    HEAP32[$14 >> 2] = $15; //@line 19407
    $$012$i$i = $$012$i$i + 4 | 0; //@line 19408
    $14 = $14 + -4 | 0; //@line 19409
   } while ($$012$i$i >>> 0 < $14 >>> 0);
   $20 = HEAP8[$1] | 0; //@line 19418
  }
 } while (0);
 if (($20 & 1) == 0) {
  $31 = $__grouping + 1 | 0; //@line 19428
  $32 = ($20 & 255) >>> 1; //@line 19428
 } else {
  $31 = HEAP32[$__grouping + 8 >> 2] | 0; //@line 19434
  $32 = HEAP32[$__grouping + 4 >> 2] | 0; //@line 19434
 }
 $33 = $__g_end + -4 | 0; //@line 19436
 $35 = HEAP8[$31] | 0; //@line 19438
 $or$cond210 = $35 << 24 >> 24 < 1 | $35 << 24 >> 24 == 127; //@line 19441
 L18 : do {
  if ($33 >>> 0 > $__g >>> 0) {
   $38 = $31 + $32 | 0; //@line 19445
   $39 = $35; //@line 19446
   $__ig$011 = $31; //@line 19446
   $__r$012 = $__g; //@line 19446
   $or$cond213 = $or$cond210; //@line 19446
   while (1) {
    if (!$or$cond213) {
     if (($39 << 24 >> 24 | 0) != (HEAP32[$__r$012 >> 2] | 0)) {
      break;
     }
    }
    $$__ig$0 = ($38 - $__ig$011 | 0) > 1 ? $__ig$011 + 1 | 0 : $__ig$011; //@line 19460
    $47 = $__r$012 + 4 | 0; //@line 19461
    $49 = HEAP8[$$__ig$0] | 0; //@line 19463
    $or$cond2 = $49 << 24 >> 24 < 1 | $49 << 24 >> 24 == 127; //@line 19466
    if ($47 >>> 0 < $33 >>> 0) {
     $39 = $49; //@line 19468
     $__ig$011 = $$__ig$0; //@line 19468
     $__r$012 = $47; //@line 19468
     $or$cond213 = $or$cond2; //@line 19468
    } else {
     $$lcssa6 = $49; //@line 19470
     $or$cond2$lcssa = $or$cond2; //@line 19470
     break L18;
    }
   }
   HEAP32[$__err >> 2] = 4; //@line 19474
   STACKTOP = sp; //@line 19475
   return;
  } else {
   $$lcssa6 = $35; //@line 19477
   $or$cond2$lcssa = $or$cond210; //@line 19477
  }
 } while (0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp; //@line 19481
  return;
 }
 $52 = HEAP32[$33 >> 2] | 0; //@line 19484
 if (!($$lcssa6 << 24 >> 24 >>> 0 < $52 >>> 0 | ($52 | 0) == 0)) {
  STACKTOP = sp; //@line 19489
  return;
 }
 HEAP32[$__err >> 2] = 4; //@line 19491
 STACKTOP = sp; //@line 19492
 return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $1 = 0, $10 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $38 = 0, $42 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP; //@line 4914
 STACKTOP = STACKTOP + 40 | 0; //@line 4915
 $__p$i$i$i$i3 = sp; //@line 4916
 $__p$i$i$i$i = sp + 16 | 0; //@line 4917
 $__loc = sp + 32 | 0; //@line 4918
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 4919
 $1 = $__loc; //@line 4920
 $2 = HEAP32[$1 >> 2] | 0; //@line 4921
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 4927
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4929
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4931
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 4932
 }
 $10 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 4935
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 4939
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4946
  $24 = $23; //@line 4947
  __ZNSt8bad_castC2Ev($24); //@line 4948
  ___cxa_throw($23 | 0, 13672, 114); //@line 4949
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 4953
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4956
  $24 = $23; //@line 4957
  __ZNSt8bad_castC2Ev($24); //@line 4958
  ___cxa_throw($23 | 0, 13672, 114); //@line 4959
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 48 >> 2] & 15]($21, 4256, 4288 | 0, $__atoms) | 0; //@line 4967
 $30 = HEAP32[$1 >> 2] | 0; //@line 4968
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5864; //@line 4974
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 125; //@line 4976
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0; //@line 4978
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i3, 126); //@line 4979
 }
 $38 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 4982
 $42 = HEAP32[$30 + 8 >> 2] | 0; //@line 4986
 if (!((HEAP32[$30 + 12 >> 2] | 0) - $42 >> 2 >>> 0 > $38 >>> 0)) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4993
  $52 = $51; //@line 4994
  __ZNSt8bad_castC2Ev($52); //@line 4995
  ___cxa_throw($51 | 0, 13672, 114); //@line 4996
 }
 $49 = HEAP32[$42 + ($38 << 2) >> 2] | 0; //@line 5000
 if (($49 | 0) == 0) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 5003
  $52 = $51; //@line 5004
  __ZNSt8bad_castC2Ev($52); //@line 5005
  ___cxa_throw($51 | 0, 13672, 114); //@line 5006
 } else {
  $53 = $49; //@line 5009
  $54 = $49; //@line 5010
  HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 12 >> 2] & 127]($53) | 0; //@line 5015
  HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 16 >> 2] & 127]($53) | 0; //@line 5020
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $53); //@line 5025
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 5028
  STACKTOP = sp; //@line 5029
  return;
 }
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $37 = 0, $6 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13461
 STACKTOP = STACKTOP + 56 | 0; //@line 13462
 $info = sp; //@line 13463
 $2 = HEAP32[$static_ptr >> 2] | 0; //@line 13465
 $6 = $static_ptr + (HEAP32[$2 + -8 >> 2] | 0) | 0; //@line 13469
 $8 = HEAP32[$2 + -4 >> 2] | 0; //@line 13471
 $9 = $8; //@line 13472
 HEAP32[$info >> 2] = $dst_type; //@line 13475
 HEAP32[$info + 4 >> 2] = $static_ptr; //@line 13477
 HEAP32[$info + 8 >> 2] = $static_type; //@line 13479
 HEAP32[$info + 12 >> 2] = $src2dst_offset; //@line 13481
 $15 = $info + 16 | 0; //@line 13482
 $16 = $info + 20 | 0; //@line 13483
 $17 = $info + 24 | 0; //@line 13484
 $18 = $info + 28 | 0; //@line 13485
 $19 = $info + 32 | 0; //@line 13486
 $20 = $info + 40 | 0; //@line 13487
 $23 = ($8 | 0) == ($dst_type | 0); //@line 13490
 $24 = $15; //@line 13491
 dest = $24 + 0 | 0; //@line 13492
 stop = dest + 36 | 0; //@line 13492
 do {
  HEAP32[dest >> 2] = 0; //@line 13492
  dest = dest + 4 | 0; //@line 13492
 } while ((dest | 0) < (stop | 0));
 HEAP16[$24 + 36 >> 1] = 0; //@line 13492
 HEAP8[$24 + 38 | 0] = 0; //@line 13492
 if ($23) {
  HEAP32[$info + 48 >> 2] = 1; //@line 13495
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($9, $info, $6, $6, 1, 0); //@line 13500
  $dst_ptr$0 = (HEAP32[$17 >> 2] | 0) == 1 ? $6 : 0; //@line 13504
  STACKTOP = sp; //@line 13505
  return $dst_ptr$0 | 0; //@line 13505
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 7]($9, $info, $6, 1, 0); //@line 13512
 $37 = HEAP32[$info + 36 >> 2] | 0; //@line 13513
 if (($37 | 0) == 0) {
  if ((HEAP32[$20 >> 2] | 0) != 1) {
   $dst_ptr$0 = 0; //@line 13518
   STACKTOP = sp; //@line 13519
   return $dst_ptr$0 | 0; //@line 13519
  }
  if ((HEAP32[$18 >> 2] | 0) != 1) {
   $dst_ptr$0 = 0; //@line 13524
   STACKTOP = sp; //@line 13525
   return $dst_ptr$0 | 0; //@line 13525
  }
  $dst_ptr$0 = (HEAP32[$19 >> 2] | 0) == 1 ? HEAP32[$16 >> 2] | 0 : 0; //@line 13531
  STACKTOP = sp; //@line 13532
  return $dst_ptr$0 | 0; //@line 13532
 } else if (($37 | 0) == 1) {
  do {
   if ((HEAP32[$17 >> 2] | 0) != 1) {
    if ((HEAP32[$20 >> 2] | 0) != 0) {
     $dst_ptr$0 = 0; //@line 13541
     STACKTOP = sp; //@line 13542
     return $dst_ptr$0 | 0; //@line 13542
    }
    if ((HEAP32[$18 >> 2] | 0) != 1) {
     $dst_ptr$0 = 0; //@line 13547
     STACKTOP = sp; //@line 13548
     return $dst_ptr$0 | 0; //@line 13548
    }
    if ((HEAP32[$19 >> 2] | 0) == 1) {
     break;
    } else {
     $dst_ptr$0 = 0; //@line 13555
    }
    STACKTOP = sp; //@line 13557
    return $dst_ptr$0 | 0; //@line 13557
   }
  } while (0);
  $dst_ptr$0 = HEAP32[$15 >> 2] | 0; //@line 13561
  STACKTOP = sp; //@line 13562
  return $dst_ptr$0 | 0; //@line 13562
 } else {
  $dst_ptr$0 = 0; //@line 13564
  STACKTOP = sp; //@line 13565
  return $dst_ptr$0 | 0; //@line 13565
 }
 return 0; //@line 13567
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $1 = 0, $10 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $38 = 0, $42 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP; //@line 4426
 STACKTOP = STACKTOP + 40 | 0; //@line 4427
 $__p$i$i$i$i3 = sp; //@line 4428
 $__p$i$i$i$i = sp + 16 | 0; //@line 4429
 $__loc = sp + 32 | 0; //@line 4430
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 4431
 $1 = $__loc; //@line 4432
 $2 = HEAP32[$1 >> 2] | 0; //@line 4433
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 4439
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4441
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4443
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 4444
 }
 $10 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 4447
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 4451
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4458
  $24 = $23; //@line 4459
  __ZNSt8bad_castC2Ev($24); //@line 4460
  ___cxa_throw($23 | 0, 13672, 114); //@line 4461
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 4465
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4468
  $24 = $23; //@line 4469
  __ZNSt8bad_castC2Ev($24); //@line 4470
  ___cxa_throw($23 | 0, 13672, 114); //@line 4471
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 15]($21, 4256, 4288 | 0, $__atoms) | 0; //@line 4479
 $30 = HEAP32[$1 >> 2] | 0; //@line 4480
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5856; //@line 4486
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 125; //@line 4488
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0; //@line 4490
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i3, 126); //@line 4491
 }
 $38 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 4494
 $42 = HEAP32[$30 + 8 >> 2] | 0; //@line 4498
 if (!((HEAP32[$30 + 12 >> 2] | 0) - $42 >> 2 >>> 0 > $38 >>> 0)) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4505
  $52 = $51; //@line 4506
  __ZNSt8bad_castC2Ev($52); //@line 4507
  ___cxa_throw($51 | 0, 13672, 114); //@line 4508
 }
 $49 = HEAP32[$42 + ($38 << 2) >> 2] | 0; //@line 4512
 if (($49 | 0) == 0) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4515
  $52 = $51; //@line 4516
  __ZNSt8bad_castC2Ev($52); //@line 4517
  ___cxa_throw($51 | 0, 13672, 114); //@line 4518
 } else {
  $53 = $49; //@line 4521
  $54 = $49; //@line 4522
  HEAP8[$__decimal_point] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 12 >> 2] & 127]($53) | 0; //@line 4527
  HEAP8[$__thousands_sep] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 16 >> 2] & 127]($53) | 0; //@line 4532
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $53); //@line 4537
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 4540
  STACKTOP = sp; //@line 4541
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $19 = 0, $25 = 0, $28 = 0, $29 = 0, $31 = 0, $39 = 0, $50 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14015
 $1 = $this; //@line 14016
 if (($1 | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp; //@line 14026
   return;
  }
  $9 = $info + 28 | 0; //@line 14028
  if ((HEAP32[$9 >> 2] | 0) == 1) {
   STACKTOP = sp; //@line 14032
   return;
  }
  HEAP32[$9 >> 2] = $path_below; //@line 14034
  STACKTOP = sp; //@line 14035
  return;
 }
 if (($1 | 0) != (HEAP32[$info >> 2] | 0)) {
  $50 = HEAP32[$this + 8 >> 2] | 0; //@line 14043
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] & 7]($50, $info, $current_ptr, $path_below, $use_strcmp); //@line 14048
  STACKTOP = sp; //@line 14049
  return;
 }
 do {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $19 = $info + 20 | 0; //@line 14056
   if ((HEAP32[$19 >> 2] | 0) == ($current_ptr | 0)) {
    break;
   }
   HEAP32[$info + 32 >> 2] = $path_below; //@line 14063
   $25 = $info + 44 | 0; //@line 14064
   if ((HEAP32[$25 >> 2] | 0) == 4) {
    STACKTOP = sp; //@line 14068
    return;
   }
   $28 = $info + 52 | 0; //@line 14070
   HEAP8[$28] = 0; //@line 14071
   $29 = $info + 53 | 0; //@line 14072
   HEAP8[$29] = 0; //@line 14073
   $31 = HEAP32[$this + 8 >> 2] | 0; //@line 14075
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$31 >> 2] | 0) + 20 >> 2] & 31]($31, $info, $current_ptr, $current_ptr, 1, $use_strcmp); //@line 14080
   if ((HEAP8[$29] | 0) == 0) {
    $is_dst_type_derived_from_static_type$0$off01 = 0; //@line 14084
    label = 13; //@line 14085
   } else {
    if ((HEAP8[$28] | 0) == 0) {
     $is_dst_type_derived_from_static_type$0$off01 = 1; //@line 14090
     label = 13; //@line 14091
    }
   }
   L23 : do {
    if ((label | 0) == 13) {
     HEAP32[$19 >> 2] = $current_ptr; //@line 14096
     $39 = $info + 40 | 0; //@line 14097
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14100
     do {
      if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
        label = 16; //@line 14110
        break;
       }
       HEAP8[$info + 54 | 0] = 1; //@line 14114
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break L23;
       }
      } else {
       label = 16; //@line 14119
      }
     } while (0);
     if ((label | 0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$25 >> 2] = 4; //@line 14127
     STACKTOP = sp; //@line 14128
     return;
    }
   } while (0);
   HEAP32[$25 >> 2] = 3; //@line 14131
   STACKTOP = sp; //@line 14132
   return;
  }
 } while (0);
 if (($path_below | 0) != 1) {
  STACKTOP = sp; //@line 14137
  return;
 }
 HEAP32[$info + 32 >> 2] = 1; //@line 14140
 STACKTOP = sp; //@line 14141
 return;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $61 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 1295
 STACKTOP = STACKTOP + 40 | 0; //@line 1296
 $$byval_copy = sp; //@line 1297
 $1 = sp + 8 | 0; //@line 1298
 $__s = sp + 16 | 0; //@line 1299
 $2 = sp + 24 | 0; //@line 1300
 $3 = sp + 32 | 0; //@line 1301
 $4 = $__s; //@line 1302
 HEAP8[$4] = 0; //@line 1303
 HEAP32[$__s + 4 >> 2] = $__os; //@line 1305
 $6 = $__os; //@line 1306
 $10 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1310
 $11 = $__os; //@line 1311
 if ((HEAP32[$11 + ($10 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1318
  STACKTOP = sp; //@line 1319
  return $__os | 0; //@line 1319
 }
 $18 = HEAP32[$11 + ($10 + 72) >> 2] | 0; //@line 1324
 if (($18 | 0) == 0) {
  $$pre6 = $10; //@line 1327
 } else {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($18) | 0; //@line 1329
  $$pre6 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1334
 }
 HEAP8[$4] = 1; //@line 1336
 $20 = _strlen($__str | 0) | 0; //@line 1337
 HEAP32[$2 >> 2] = HEAP32[$11 + ($$pre6 + 24) >> 2]; //@line 1344
 if ((HEAP32[$11 + ($$pre6 + 4) >> 2] & 176 | 0) == 32) {
  $32 = $__str + $20 | 0; //@line 1353
 } else {
  $32 = $__str; //@line 1355
 }
 $33 = $11 + $$pre6 | 0; //@line 1357
 $35 = $11 + ($$pre6 + 76) | 0; //@line 1360
 $36 = HEAP32[$35 >> 2] | 0; //@line 1361
 if (($36 | 0) == -1) {
  $39 = $33; //@line 1365
  __ZNKSt3__18ios_base6getlocEv($1, $39); //@line 1366
  $40 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5712) | 0; //@line 1367
  $46 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$40 >> 2] | 0) + 28 >> 2] & 31]($40, 32) | 0; //@line 1373
  __ZNSt3__16localeD2Ev($1); //@line 1374
  $47 = $46 << 24 >> 24; //@line 1375
  HEAP32[$35 >> 2] = $47; //@line 1376
  $$pre$phiZ2D = $39; //@line 1377
  $48 = $47; //@line 1377
 } else {
  $$pre$phiZ2D = $33; //@line 1380
  $48 = $36; //@line 1380
 }
 $49 = $48 & 255; //@line 1382
 $50 = $__str + $20 | 0; //@line 1383
 $52 = $$byval_copy; //@line 1385
 $53 = $2; //@line 1386
 HEAP32[$52 + 0 >> 2] = HEAP32[$53 + 0 >> 2]; //@line 1387
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($3, $$byval_copy, $__str, $32, $50, $$pre$phiZ2D, $49); //@line 1388
 if ((HEAP32[$3 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1394
  STACKTOP = sp; //@line 1395
  return $__os | 0; //@line 1395
 }
 $61 = HEAP32[(HEAP32[$6 >> 2] | 0) + -12 >> 2] | 0; //@line 1400
 __ZNSt3__18ios_base5clearEj($11 + $61 | 0, HEAP32[$11 + ($61 + 16) >> 2] | 5); //@line 1408
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 1409
 STACKTOP = sp; //@line 1410
 return $__os | 0; //@line 1410
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$byval_copy = 0, $$pre13 = 0, $1 = 0, $11 = 0, $12 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $59 = 0, $60 = 0, $68 = 0, $7 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 8865
 STACKTOP = STACKTOP + 48 | 0; //@line 8866
 $$byval_copy = sp; //@line 8867
 $1 = sp + 8 | 0; //@line 8868
 $2 = sp + 16 | 0; //@line 8869
 $__s = sp + 24 | 0; //@line 8870
 $3 = sp + 32 | 0; //@line 8871
 $4 = sp + 40 | 0; //@line 8872
 $5 = $__s; //@line 8873
 HEAP8[$5] = 0; //@line 8874
 HEAP32[$__s + 4 >> 2] = $this; //@line 8876
 $7 = $this; //@line 8877
 $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + -12 >> 2] | 0; //@line 8881
 $12 = $this; //@line 8882
 if ((HEAP32[$12 + ($11 + 16) >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 8889
  STACKTOP = sp; //@line 8890
  return $this | 0; //@line 8890
 }
 $19 = HEAP32[$12 + ($11 + 72) >> 2] | 0; //@line 8895
 if (($19 | 0) == 0) {
  $$pre13 = $11; //@line 8898
 } else {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($19) | 0; //@line 8900
  $$pre13 = HEAP32[(HEAP32[$7 >> 2] | 0) + -12 >> 2] | 0; //@line 8905
 }
 HEAP8[$5] = 1; //@line 8907
 __ZNSt3__16localeC2ERKS0_($3, $12 + ($$pre13 + 28) | 0); //@line 8911
 $23 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 4432) | 0; //@line 8912
 $24 = $23; //@line 8913
 __ZNSt3__16localeD2Ev($3); //@line 8914
 $28 = HEAP32[(HEAP32[$7 >> 2] | 0) + -12 >> 2] | 0; //@line 8918
 $32 = HEAP32[$12 + ($28 + 24) >> 2] | 0; //@line 8923
 $35 = $12 + ($28 + 76) | 0; //@line 8927
 $36 = HEAP32[$35 >> 2] | 0; //@line 8928
 if (($36 | 0) == -1) {
  __ZNSt3__16localeC2ERKS0_($2, $12 + ($28 + 28) | 0); //@line 8935
  $41 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 5712) | 0; //@line 8936
  $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$41 >> 2] | 0) + 28 >> 2] & 31]($41, 32) | 0; //@line 8942
  __ZNSt3__16localeD2Ev($2); //@line 8943
  $48 = $47 << 24 >> 24; //@line 8944
  HEAP32[$35 >> 2] = $48; //@line 8945
  $49 = $48; //@line 8946
 } else {
  $49 = $36; //@line 8948
 }
 $50 = $49 & 255; //@line 8950
 $51 = $12 + $28 | 0; //@line 8951
 $56 = HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] | 0; //@line 8956
 HEAP32[$1 >> 2] = $32; //@line 8958
 $59 = $$byval_copy; //@line 8960
 $60 = $1; //@line 8961
 HEAP32[$59 + 0 >> 2] = HEAP32[$60 + 0 >> 2]; //@line 8962
 FUNCTION_TABLE_viiiiii[$56 & 31]($4, $24, $$byval_copy, $51, $50, $__n); //@line 8963
 if ((HEAP32[$4 >> 2] | 0) != 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 8969
  STACKTOP = sp; //@line 8970
  return $this | 0; //@line 8970
 }
 $68 = HEAP32[(HEAP32[$7 >> 2] | 0) + -12 >> 2] | 0; //@line 8975
 __ZNSt3__18ios_base5clearEj($12 + $68 | 0, HEAP32[$12 + ($68 + 16) >> 2] | 5); //@line 8983
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 8984
 STACKTOP = sp; //@line 8985
 return $this | 0; //@line 8985
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $1 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11473
 $1 = $this + 8 | 0; //@line 11474
 $3 = $this + 4 | 0; //@line 11476
 $4 = HEAP32[$3 >> 2] | 0; //@line 11477
 $5 = HEAP32[$1 >> 2] | 0; //@line 11478
 $6 = $4; //@line 11479
 if (!($5 - $6 >> 2 >>> 0 < $__n >>> 0)) {
  $$0$i = $__n; //@line 11484
  $10 = $4; //@line 11484
  do {
   if (($10 | 0) == 0) {
    $12 = 0; //@line 11488
   } else {
    HEAP32[$10 >> 2] = 0; //@line 11490
    $12 = HEAP32[$3 >> 2] | 0; //@line 11492
   }
   $10 = $12 + 4 | 0; //@line 11494
   HEAP32[$3 >> 2] = $10; //@line 11495
   $$0$i = $$0$i + -1 | 0; //@line 11496
  } while (($$0$i | 0) != 0);
  STACKTOP = sp; //@line 11504
  return;
 }
 $16 = $this + 16 | 0; //@line 11506
 $17 = $this; //@line 11507
 $19 = HEAP32[$17 >> 2] | 0; //@line 11509
 $21 = $6 - $19 >> 2; //@line 11511
 $22 = $21 + $__n | 0; //@line 11512
 if ($22 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0); //@line 11515
 }
 $24 = $5 - $19 | 0; //@line 11518
 do {
  if ($24 >> 2 >>> 0 < 536870911) {
   $27 = $24 >> 1; //@line 11523
   $29 = $27 >>> 0 < $22 >>> 0 ? $22 : $27; //@line 11525
   if (($29 | 0) == 0) {
    $$0$i57 = 0; //@line 11528
    $39 = 0; //@line 11528
    break;
   }
   $31 = $this + 128 | 0; //@line 11531
   if (!((HEAP8[$31] | 0) == 0 & $29 >>> 0 < 29)) {
    $$0$i569 = $29; //@line 11537
    label = 11; //@line 11538
    break;
   }
   HEAP8[$31] = 1; //@line 11541
   $$0$i57 = $29; //@line 11543
   $39 = $16; //@line 11543
  } else {
   $$0$i569 = 1073741823; //@line 11545
   label = 11; //@line 11546
  }
 } while (0);
 if ((label | 0) == 11) {
  $$0$i57 = $$0$i569; //@line 11553
  $39 = __Znwj($$0$i569 << 2) | 0; //@line 11553
 }
 $$0$i2 = $__n; //@line 11556
 $41 = $39 + ($21 << 2) | 0; //@line 11556
 do {
  if (($41 | 0) == 0) {
   $43 = 0; //@line 11560
  } else {
   HEAP32[$41 >> 2] = 0; //@line 11562
   $43 = $41; //@line 11563
  }
  $41 = $43 + 4 | 0; //@line 11565
  $$0$i2 = $$0$i2 + -1 | 0; //@line 11566
 } while (($$0$i2 | 0) != 0);
 $48 = HEAP32[$17 >> 2] | 0; //@line 11575
 $52 = (HEAP32[$3 >> 2] | 0) - $48 | 0; //@line 11579
 $54 = $39 + ($21 - ($52 >> 2) << 2) | 0; //@line 11582
 $56 = $48; //@line 11584
 _memcpy($54 | 0, $56 | 0, $52 | 0) | 0; //@line 11585
 HEAP32[$17 >> 2] = $54; //@line 11586
 HEAP32[$3 >> 2] = $41; //@line 11587
 HEAP32[$1 >> 2] = $39 + ($$0$i57 << 2); //@line 11588
 if (($48 | 0) == 0) {
  STACKTOP = sp; //@line 11591
  return;
 }
 if (($16 | 0) == ($48 | 0)) {
  HEAP8[$this + 128 | 0] = 0; //@line 11597
  STACKTOP = sp; //@line 11598
  return;
 } else {
  __ZdlPv($56); //@line 11600
  STACKTOP = sp; //@line 11601
  return;
 }
}
function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $1 = 0, $12 = 0, $13 = 0, $17 = 0, $24 = 0, $26 = 0, $3 = 0, $32 = 0, $4 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, sp = 0;
 sp = STACKTOP; //@line 11783
 STACKTOP = STACKTOP + 8 | 0; //@line 11784
 $1 = sp; //@line 11785
 HEAP32[$1 >> 2] = $wc; //@line 11786
 $3 = ($st | 0) == 0 ? 13584 : $st; //@line 11789
 $4 = HEAP32[$3 >> 2] | 0; //@line 11790
 L1 : do {
  if (($src | 0) == 0) {
   if (($4 | 0) == 0) {
    $$0 = 0; //@line 11796
   } else {
    break;
   }
   STACKTOP = sp; //@line 11800
   return $$0 | 0; //@line 11800
  } else {
   if (($wc | 0) == 0) {
    $8 = $1; //@line 11804
    HEAP32[$1 >> 2] = $8; //@line 11805
    $9 = $8; //@line 11806
   } else {
    $9 = $wc; //@line 11808
   }
   if (($n | 0) == 0) {
    $$0 = -2; //@line 11812
    STACKTOP = sp; //@line 11813
    return $$0 | 0; //@line 11813
   }
   do {
    if (($4 | 0) == 0) {
     $12 = HEAP8[$src] | 0; //@line 11818
     $13 = $12 & 255; //@line 11819
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$9 >> 2] = $13; //@line 11822
      $$0 = $12 << 24 >> 24 != 0 | 0; //@line 11825
      STACKTOP = sp; //@line 11826
      return $$0 | 0; //@line 11826
     } else {
      $17 = $13 + -194 | 0; //@line 11828
      if ($17 >>> 0 > 50) {
       break L1;
      }
      $$02 = $n + -1 | 0; //@line 11837
      $c$0 = HEAP32[13368 + ($17 << 2) >> 2] | 0; //@line 11837
      $s$0 = $src + 1 | 0; //@line 11837
      break;
     }
    } else {
     $$02 = $n; //@line 11841
     $c$0 = $4; //@line 11841
     $s$0 = $src; //@line 11841
    }
   } while (0);
   L19 : do {
    if (($$02 | 0) == 0) {
     $c$2 = $c$0; //@line 11847
    } else {
     $24 = HEAP8[$s$0] | 0; //@line 11849
     $26 = ($24 & 255) >>> 3; //@line 11851
     if (($26 + -16 | $26 + ($c$0 >> 26)) >>> 0 > 7) {
      break L1;
     } else {
      $$1 = $$02; //@line 11860
      $32 = $24; //@line 11860
      $c$1 = $c$0; //@line 11860
      $s$1 = $s$0; //@line 11860
     }
     while (1) {
      $s$1 = $s$1 + 1 | 0; //@line 11864
      $c$1 = ($32 & 255) + -128 | $c$1 << 6; //@line 11867
      $$1 = $$1 + -1 | 0; //@line 11868
      if (($c$1 | 0) >= 0) {
       break;
      }
      if (($$1 | 0) == 0) {
       $c$2 = $c$1; //@line 11875
       break L19;
      }
      $32 = HEAP8[$s$1] | 0; //@line 11878
      if ((($32 & 255) + -128 | 0) >>> 0 > 63) {
       break L1;
      }
     }
     HEAP32[$3 >> 2] = 0; //@line 11888
     HEAP32[$9 >> 2] = $c$1; //@line 11889
     $$0 = $n - $$1 | 0; //@line 11891
     STACKTOP = sp; //@line 11892
     return $$0 | 0; //@line 11892
    }
   } while (0);
   HEAP32[$3 >> 2] = $c$2; //@line 11895
   $$0 = -2; //@line 11896
   STACKTOP = sp; //@line 11897
   return $$0 | 0; //@line 11897
  }
 } while (0);
 HEAP32[$3 >> 2] = 0; //@line 11900
 HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 11902
 $$0 = -1; //@line 11903
 STACKTOP = sp; //@line 11904
 return $$0 | 0; //@line 11904
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $1 = 0, $10 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $38 = 0, $42 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP; //@line 4791
 STACKTOP = STACKTOP + 40 | 0; //@line 4792
 $__p$i$i$i$i3 = sp; //@line 4793
 $__p$i$i$i$i = sp + 16 | 0; //@line 4794
 $__loc = sp + 32 | 0; //@line 4795
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 4796
 $1 = $__loc; //@line 4797
 $2 = HEAP32[$1 >> 2] | 0; //@line 4798
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 4804
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4806
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4808
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 4809
 }
 $10 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 4812
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 4816
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4823
  $24 = $23; //@line 4824
  __ZNSt8bad_castC2Ev($24); //@line 4825
  ___cxa_throw($23 | 0, 13672, 114); //@line 4826
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 4830
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4833
  $24 = $23; //@line 4834
  __ZNSt8bad_castC2Ev($24); //@line 4835
  ___cxa_throw($23 | 0, 13672, 114); //@line 4836
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 48 >> 2] & 15]($21, 4256, 4282 | 0, $__atoms) | 0; //@line 4844
 $30 = HEAP32[$1 >> 2] | 0; //@line 4845
 if (!((HEAP32[1466] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5864; //@line 4851
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 125; //@line 4853
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0; //@line 4855
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5864, $__p$i$i$i$i3, 126); //@line 4856
 }
 $38 = (HEAP32[5868 >> 2] | 0) + -1 | 0; //@line 4859
 $42 = HEAP32[$30 + 8 >> 2] | 0; //@line 4863
 if (!((HEAP32[$30 + 12 >> 2] | 0) - $42 >> 2 >>> 0 > $38 >>> 0)) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4870
  $52 = $51; //@line 4871
  __ZNSt8bad_castC2Ev($52); //@line 4872
  ___cxa_throw($51 | 0, 13672, 114); //@line 4873
 }
 $49 = HEAP32[$42 + ($38 << 2) >> 2] | 0; //@line 4877
 if (($49 | 0) == 0) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4880
  $52 = $51; //@line 4881
  __ZNSt8bad_castC2Ev($52); //@line 4882
  ___cxa_throw($51 | 0, 13672, 114); //@line 4883
 } else {
  $53 = $49; //@line 4886
  HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 16 >> 2] & 127]($53) | 0; //@line 4892
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $53); //@line 4897
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 4900
  STACKTOP = sp; //@line 4901
  return;
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $1 = 0, $10 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $38 = 0, $42 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP; //@line 4303
 STACKTOP = STACKTOP + 40 | 0; //@line 4304
 $__p$i$i$i$i3 = sp; //@line 4305
 $__p$i$i$i$i = sp + 16 | 0; //@line 4306
 $__loc = sp + 32 | 0; //@line 4307
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob); //@line 4308
 $1 = $__loc; //@line 4309
 $2 = HEAP32[$1 >> 2] | 0; //@line 4310
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 4316
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 4318
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 4320
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 4321
 }
 $10 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 4324
 $14 = HEAP32[$2 + 8 >> 2] | 0; //@line 4328
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4335
  $24 = $23; //@line 4336
  __ZNSt8bad_castC2Ev($24); //@line 4337
  ___cxa_throw($23 | 0, 13672, 114); //@line 4338
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0; //@line 4342
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0; //@line 4345
  $24 = $23; //@line 4346
  __ZNSt8bad_castC2Ev($24); //@line 4347
  ___cxa_throw($23 | 0, 13672, 114); //@line 4348
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 15]($21, 4256, 4282 | 0, $__atoms) | 0; //@line 4356
 $30 = HEAP32[$1 >> 2] | 0; //@line 4357
 if (!((HEAP32[1464] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5856; //@line 4363
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 125; //@line 4365
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0; //@line 4367
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5856, $__p$i$i$i$i3, 126); //@line 4368
 }
 $38 = (HEAP32[5860 >> 2] | 0) + -1 | 0; //@line 4371
 $42 = HEAP32[$30 + 8 >> 2] | 0; //@line 4375
 if (!((HEAP32[$30 + 12 >> 2] | 0) - $42 >> 2 >>> 0 > $38 >>> 0)) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4382
  $52 = $51; //@line 4383
  __ZNSt8bad_castC2Ev($52); //@line 4384
  ___cxa_throw($51 | 0, 13672, 114); //@line 4385
 }
 $49 = HEAP32[$42 + ($38 << 2) >> 2] | 0; //@line 4389
 if (($49 | 0) == 0) {
  $51 = ___cxa_allocate_exception(4) | 0; //@line 4392
  $52 = $51; //@line 4393
  __ZNSt8bad_castC2Ev($52); //@line 4394
  ___cxa_throw($51 | 0, 13672, 114); //@line 4395
 } else {
  $53 = $49; //@line 4398
  HEAP8[$__thousands_sep] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 16 >> 2] & 127]($53) | 0; //@line 4404
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $53); //@line 4409
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0; //@line 4412
  STACKTOP = sp; //@line 4413
  return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 13770
 STACKTOP = STACKTOP + 40 | 0; //@line 13771
 $$byval_copy = sp; //@line 13772
 $1 = sp + 8 | 0; //@line 13773
 $__p$i$i$i$i = sp + 16 | 0; //@line 13774
 $2 = sp + 32 | 0; //@line 13775
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 13776
 $3 = $2; //@line 13777
 $4 = HEAP32[$3 >> 2] | 0; //@line 13778
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 13784
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 13786
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 13788
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 13789
 }
 $12 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 13792
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 13796
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13803
  $26 = $25; //@line 13804
  __ZNSt8bad_castC2Ev($26); //@line 13805
  ___cxa_throw($25 | 0, 13672, 114); //@line 13806
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 13810
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13813
  $26 = $25; //@line 13814
  __ZNSt8bad_castC2Ev($26); //@line 13815
  ___cxa_throw($25 | 0, 13672, 114); //@line 13816
 }
 $27 = $23; //@line 13819
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 13822
 $31 = HEAP32[$__e >> 2] | 0; //@line 13824
 $33 = $this + 8 | 0; //@line 13826
 $38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 4 >> 2] & 127]($33) | 0; //@line 13831
 HEAP32[$1 >> 2] = $31; //@line 13833
 $40 = $38 + 288 | 0; //@line 13834
 $42 = $$byval_copy; //@line 13836
 $43 = $1; //@line 13837
 HEAP32[$42 + 0 >> 2] = HEAP32[$43 + 0 >> 2]; //@line 13838
 $44 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $38, $40, $27, $__err, 0) | 0; //@line 13839
 $48 = $44 - $38 | 0; //@line 13843
 if (($48 | 0) >= 288) {
  $53 = $__b; //@line 13846
  $54 = HEAP32[$53 >> 2] | 0; //@line 13847
  $55 = $agg$result; //@line 13848
  HEAP32[$55 >> 2] = $54; //@line 13849
  STACKTOP = sp; //@line 13850
  return;
 }
 HEAP32[$__tm + 16 >> 2] = (($48 | 0) / 12 | 0 | 0) % 12 | 0; //@line 13855
 $53 = $__b; //@line 13856
 $54 = HEAP32[$53 >> 2] | 0; //@line 13857
 $55 = $agg$result; //@line 13858
 HEAP32[$55 >> 2] = $54; //@line 13859
 STACKTOP = sp; //@line 13860
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 11049
 STACKTOP = STACKTOP + 40 | 0; //@line 11050
 $$byval_copy = sp; //@line 11051
 $1 = sp + 8 | 0; //@line 11052
 $__p$i$i$i$i = sp + 16 | 0; //@line 11053
 $2 = sp + 32 | 0; //@line 11054
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 11055
 $3 = $2; //@line 11056
 $4 = HEAP32[$3 >> 2] | 0; //@line 11057
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 11063
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 11065
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 11067
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 11068
 }
 $12 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 11071
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 11075
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 11082
  $26 = $25; //@line 11083
  __ZNSt8bad_castC2Ev($26); //@line 11084
  ___cxa_throw($25 | 0, 13672, 114); //@line 11085
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 11089
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 11092
  $26 = $25; //@line 11093
  __ZNSt8bad_castC2Ev($26); //@line 11094
  ___cxa_throw($25 | 0, 13672, 114); //@line 11095
 }
 $27 = $23; //@line 11098
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 11101
 $31 = HEAP32[$__e >> 2] | 0; //@line 11103
 $33 = $this + 8 | 0; //@line 11105
 $38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 4 >> 2] & 127]($33) | 0; //@line 11110
 HEAP32[$1 >> 2] = $31; //@line 11112
 $40 = $38 + 288 | 0; //@line 11113
 $42 = $$byval_copy; //@line 11115
 $43 = $1; //@line 11116
 HEAP32[$42 + 0 >> 2] = HEAP32[$43 + 0 >> 2]; //@line 11117
 $44 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $38, $40, $27, $__err, 0) | 0; //@line 11118
 $48 = $44 - $38 | 0; //@line 11122
 if (($48 | 0) >= 288) {
  $53 = $__b; //@line 11125
  $54 = HEAP32[$53 >> 2] | 0; //@line 11126
  $55 = $agg$result; //@line 11127
  HEAP32[$55 >> 2] = $54; //@line 11128
  STACKTOP = sp; //@line 11129
  return;
 }
 HEAP32[$__tm + 16 >> 2] = (($48 | 0) / 12 | 0 | 0) % 12 | 0; //@line 11134
 $53 = $__b; //@line 11135
 $54 = HEAP32[$53 >> 2] | 0; //@line 11136
 $55 = $agg$result; //@line 11137
 HEAP32[$55 >> 2] = $54; //@line 11138
 STACKTOP = sp; //@line 11139
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 13668
 STACKTOP = STACKTOP + 40 | 0; //@line 13669
 $$byval_copy = sp; //@line 13670
 $1 = sp + 8 | 0; //@line 13671
 $__p$i$i$i$i = sp + 16 | 0; //@line 13672
 $2 = sp + 32 | 0; //@line 13673
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 13674
 $3 = $2; //@line 13675
 $4 = HEAP32[$3 >> 2] | 0; //@line 13676
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 13682
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 13684
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 13686
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 13687
 }
 $12 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 13690
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 13694
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13701
  $26 = $25; //@line 13702
  __ZNSt8bad_castC2Ev($26); //@line 13703
  ___cxa_throw($25 | 0, 13672, 114); //@line 13704
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 13708
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13711
  $26 = $25; //@line 13712
  __ZNSt8bad_castC2Ev($26); //@line 13713
  ___cxa_throw($25 | 0, 13672, 114); //@line 13714
 }
 $27 = $23; //@line 13717
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 13720
 $31 = HEAP32[$__e >> 2] | 0; //@line 13722
 $33 = $this + 8 | 0; //@line 13724
 $37 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$33 >> 2] >> 2] & 127]($33) | 0; //@line 13728
 HEAP32[$1 >> 2] = $31; //@line 13730
 $39 = $37 + 168 | 0; //@line 13731
 $41 = $$byval_copy; //@line 13733
 $42 = $1; //@line 13734
 HEAP32[$41 + 0 >> 2] = HEAP32[$42 + 0 >> 2]; //@line 13735
 $43 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $37, $39, $27, $__err, 0) | 0; //@line 13736
 $47 = $43 - $37 | 0; //@line 13740
 if (($47 | 0) >= 168) {
  $52 = $__b; //@line 13743
  $53 = HEAP32[$52 >> 2] | 0; //@line 13744
  $54 = $agg$result; //@line 13745
  HEAP32[$54 >> 2] = $53; //@line 13746
  STACKTOP = sp; //@line 13747
  return;
 }
 HEAP32[$__tm + 24 >> 2] = (($47 | 0) / 12 | 0 | 0) % 7 | 0; //@line 13752
 $52 = $__b; //@line 13753
 $53 = HEAP32[$52 >> 2] | 0; //@line 13754
 $54 = $agg$result; //@line 13755
 HEAP32[$54 >> 2] = $53; //@line 13756
 STACKTOP = sp; //@line 13757
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $__p$i$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 10947
 STACKTOP = STACKTOP + 40 | 0; //@line 10948
 $$byval_copy = sp; //@line 10949
 $1 = sp + 8 | 0; //@line 10950
 $__p$i$i$i$i = sp + 16 | 0; //@line 10951
 $2 = sp + 32 | 0; //@line 10952
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 10953
 $3 = $2; //@line 10954
 $4 = HEAP32[$3 >> 2] | 0; //@line 10955
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 10961
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 10963
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 10965
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 10966
 }
 $12 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 10969
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 10973
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 10980
  $26 = $25; //@line 10981
  __ZNSt8bad_castC2Ev($26); //@line 10982
  ___cxa_throw($25 | 0, 13672, 114); //@line 10983
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 10987
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 10990
  $26 = $25; //@line 10991
  __ZNSt8bad_castC2Ev($26); //@line 10992
  ___cxa_throw($25 | 0, 13672, 114); //@line 10993
 }
 $27 = $23; //@line 10996
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 10999
 $31 = HEAP32[$__e >> 2] | 0; //@line 11001
 $33 = $this + 8 | 0; //@line 11003
 $37 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$33 >> 2] >> 2] & 127]($33) | 0; //@line 11007
 HEAP32[$1 >> 2] = $31; //@line 11009
 $39 = $37 + 168 | 0; //@line 11010
 $41 = $$byval_copy; //@line 11012
 $42 = $1; //@line 11013
 HEAP32[$41 + 0 >> 2] = HEAP32[$42 + 0 >> 2]; //@line 11014
 $43 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $37, $39, $27, $__err, 0) | 0; //@line 11015
 $47 = $43 - $37 | 0; //@line 11019
 if (($47 | 0) >= 168) {
  $52 = $__b; //@line 11022
  $53 = HEAP32[$52 >> 2] | 0; //@line 11023
  $54 = $agg$result; //@line 11024
  HEAP32[$54 >> 2] = $53; //@line 11025
  STACKTOP = sp; //@line 11026
  return;
 }
 HEAP32[$__tm + 24 >> 2] = (($47 | 0) / 12 | 0 | 0) % 7 | 0; //@line 11031
 $52 = $__b; //@line 11032
 $53 = HEAP32[$52 >> 2] | 0; //@line 11033
 $54 = $agg$result; //@line 11034
 HEAP32[$54 >> 2] = $53; //@line 11035
 STACKTOP = sp; //@line 11036
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $68 = 0, $7 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13331
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  $6 = $info + 16 | 0; //@line 13338
  $7 = HEAP32[$6 >> 2] | 0; //@line 13339
  if (($7 | 0) == 0) {
   HEAP32[$6 >> 2] = $adjustedPtr; //@line 13342
   HEAP32[$info + 24 >> 2] = $path_below; //@line 13344
   HEAP32[$info + 36 >> 2] = 1; //@line 13346
   STACKTOP = sp; //@line 13347
   return;
  }
  if (($7 | 0) != ($adjustedPtr | 0)) {
   $15 = $info + 36 | 0; //@line 13351
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1; //@line 13354
   HEAP32[$info + 24 >> 2] = 2; //@line 13356
   HEAP8[$info + 54 | 0] = 1; //@line 13358
   STACKTOP = sp; //@line 13359
   return;
  }
  $12 = $info + 24 | 0; //@line 13361
  if ((HEAP32[$12 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 13365
   return;
  }
  HEAP32[$12 >> 2] = $path_below; //@line 13367
  STACKTOP = sp; //@line 13368
  return;
 }
 $21 = HEAP32[$this + 12 >> 2] | 0; //@line 13371
 $22 = $this + ($21 << 3) + 16 | 0; //@line 13372
 $24 = HEAP32[$this + 20 >> 2] | 0; //@line 13374
 $25 = $24 >> 8; //@line 13375
 if (($24 & 1 | 0) == 0) {
  $offset_to_base$0$i1 = $25; //@line 13379
 } else {
  $offset_to_base$0$i1 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $25 >> 2] | 0; //@line 13386
 }
 $34 = HEAP32[$this + 16 >> 2] | 0; //@line 13389
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 28 >> 2] & 15]($34, $info, $adjustedPtr + $offset_to_base$0$i1 | 0, ($24 & 2 | 0) != 0 ? $path_below : 2); //@line 13398
 if (($21 | 0) <= 1) {
  STACKTOP = sp; //@line 13401
  return;
 }
 $45 = $info + 54 | 0; //@line 13404
 $46 = $adjustedPtr; //@line 13405
 $p$0 = $this + 24 | 0; //@line 13406
 while (1) {
  $48 = HEAP32[$p$0 + 4 >> 2] | 0; //@line 13409
  $49 = $48 >> 8; //@line 13410
  if (($48 & 1 | 0) == 0) {
   $offset_to_base$0$i = $49; //@line 13414
  } else {
   $offset_to_base$0$i = HEAP32[(HEAP32[$46 >> 2] | 0) + $49 >> 2] | 0; //@line 13420
  }
  $57 = HEAP32[$p$0 >> 2] | 0; //@line 13423
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$57 >> 2] | 0) + 28 >> 2] & 15]($57, $info, $adjustedPtr + $offset_to_base$0$i | 0, ($48 & 2 | 0) != 0 ? $path_below : 2); //@line 13432
  if ((HEAP8[$45] | 0) != 0) {
   label = 16; //@line 13436
   break;
  }
  $68 = $p$0 + 8 | 0; //@line 13439
  if ($68 >>> 0 < $22 >>> 0) {
   $p$0 = $68; //@line 13442
  } else {
   label = 16; //@line 13444
   break;
  }
 }
 if ((label | 0) == 16) {
  STACKTOP = sp; //@line 13449
  return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP; //@line 13873
 STACKTOP = STACKTOP + 40 | 0; //@line 13874
 $$byval_copy = sp; //@line 13875
 $1 = sp + 8 | 0; //@line 13876
 $__p$i$i$i$i = sp + 16 | 0; //@line 13877
 $2 = sp + 32 | 0; //@line 13878
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 13879
 $3 = $2; //@line 13880
 $4 = HEAP32[$3 >> 2] | 0; //@line 13881
 if (!((HEAP32[1426] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5704; //@line 13887
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 13889
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 13891
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5704, $__p$i$i$i$i, 126); //@line 13892
 }
 $12 = (HEAP32[5708 >> 2] | 0) + -1 | 0; //@line 13895
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 13899
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13906
  $26 = $25; //@line 13907
  __ZNSt8bad_castC2Ev($26); //@line 13908
  ___cxa_throw($25 | 0, 13672, 114); //@line 13909
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 13913
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 13916
  $26 = $25; //@line 13917
  __ZNSt8bad_castC2Ev($26); //@line 13918
  ___cxa_throw($25 | 0, 13672, 114); //@line 13919
 }
 $27 = $23; //@line 13922
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 13925
 $30 = $__tm + 20 | 0; //@line 13926
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 13931
 $36 = $$byval_copy; //@line 13933
 $37 = $1; //@line 13934
 HEAP32[$36 + 0 >> 2] = HEAP32[$37 + 0 >> 2]; //@line 13935
 $38 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $27, 4) | 0; //@line 13936
 if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
  $48 = $__b; //@line 13942
  $49 = HEAP32[$48 >> 2] | 0; //@line 13943
  $50 = $agg$result; //@line 13944
  HEAP32[$50 >> 2] = $49; //@line 13945
  STACKTOP = sp; //@line 13946
  return;
 }
 if (($38 | 0) < 69) {
  $__t$0$i = $38 + 2e3 | 0; //@line 13951
 } else {
  $__t$0$i = ($38 + -69 | 0) >>> 0 < 31 ? $38 + 1900 | 0 : $38; //@line 13957
 }
 HEAP32[$30 >> 2] = $__t$0$i + -1900; //@line 13960
 $48 = $__b; //@line 13961
 $49 = HEAP32[$48 >> 2] | 0; //@line 13962
 $50 = $agg$result; //@line 13963
 HEAP32[$50 >> 2] = $49; //@line 13964
 STACKTOP = sp; //@line 13965
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP; //@line 11152
 STACKTOP = STACKTOP + 40 | 0; //@line 11153
 $$byval_copy = sp; //@line 11154
 $1 = sp + 8 | 0; //@line 11155
 $__p$i$i$i$i = sp + 16 | 0; //@line 11156
 $2 = sp + 32 | 0; //@line 11157
 __ZNKSt3__18ios_base6getlocEv($2, $__iob); //@line 11158
 $3 = $2; //@line 11159
 $4 = HEAP32[$3 >> 2] | 0; //@line 11160
 if (!((HEAP32[1428] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i >> 2] = 5712; //@line 11166
  HEAP32[$__p$i$i$i$i + 4 >> 2] = 125; //@line 11168
  HEAP32[$__p$i$i$i$i + 8 >> 2] = 0; //@line 11170
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5712, $__p$i$i$i$i, 126); //@line 11171
 }
 $12 = (HEAP32[5716 >> 2] | 0) + -1 | 0; //@line 11174
 $16 = HEAP32[$4 + 8 >> 2] | 0; //@line 11178
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 11185
  $26 = $25; //@line 11186
  __ZNSt8bad_castC2Ev($26); //@line 11187
  ___cxa_throw($25 | 0, 13672, 114); //@line 11188
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 11192
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 11195
  $26 = $25; //@line 11196
  __ZNSt8bad_castC2Ev($26); //@line 11197
  ___cxa_throw($25 | 0, 13672, 114); //@line 11198
 }
 $27 = $23; //@line 11201
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0; //@line 11204
 $30 = $__tm + 20 | 0; //@line 11205
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 11210
 $36 = $$byval_copy; //@line 11212
 $37 = $1; //@line 11213
 HEAP32[$36 + 0 >> 2] = HEAP32[$37 + 0 >> 2]; //@line 11214
 $38 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $27, 4) | 0; //@line 11215
 if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
  $48 = $__b; //@line 11221
  $49 = HEAP32[$48 >> 2] | 0; //@line 11222
  $50 = $agg$result; //@line 11223
  HEAP32[$50 >> 2] = $49; //@line 11224
  STACKTOP = sp; //@line 11225
  return;
 }
 if (($38 | 0) < 69) {
  $__t$0$i = $38 + 2e3 | 0; //@line 11230
 } else {
  $__t$0$i = ($38 + -69 | 0) >>> 0 < 31 ? $38 + 1900 | 0 : $38; //@line 11236
 }
 HEAP32[$30 >> 2] = $__t$0$i + -1900; //@line 11239
 $48 = $__b; //@line 11240
 $49 = HEAP32[$48 >> 2] | 0; //@line 11241
 $50 = $agg$result; //@line 11242
 HEAP32[$50 >> 2] = $49; //@line 11243
 STACKTOP = sp; //@line 11244
 return;
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$01$i = 0, $$01$i7 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $__ndflt = 0, $this2$i$i$i = 0, $this2$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5590
 STACKTOP = STACKTOP + 16 | 0; //@line 5591
 $__ndflt = sp; //@line 5592
 $this2$i$i$i = $__ndflt; //@line 5593
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 5594
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 5594
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 5594
 $2 = HEAP8[$__dflt] | 0; //@line 5596
 if (($2 & 1) == 0) {
  $15 = $__dflt + 1 | 0; //@line 5606
  $16 = $__dflt + 1 | 0; //@line 5606
  $17 = ($2 & 255) >>> 1; //@line 5606
 } else {
  $6 = HEAP32[$__dflt + 8 >> 2] | 0; //@line 5609
  $15 = $6; //@line 5612
  $16 = $6; //@line 5612
  $17 = HEAP32[$__dflt + 4 >> 2] | 0; //@line 5612
 }
 $18 = $15 + $17 | 0; //@line 5614
 do {
  if ($16 >>> 0 < $18 >>> 0) {
   $$01$i7 = $16; //@line 5618
   do {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$01$i7] | 0); //@line 5621
    $$01$i7 = $$01$i7 + 1 | 0; //@line 5622
   } while (($$01$i7 | 0) != ($18 | 0));
   $29 = ($__c | 0) == -1 ? -1 : $__c << 1; //@line 5636
   if ((HEAP8[$this2$i$i$i] & 1) == 0) {
    $32 = $29; //@line 5638
    label = 9; //@line 5639
    break;
   }
   $35 = $29; //@line 5644
   $36 = HEAP32[$__ndflt + 8 >> 2] | 0; //@line 5644
  } else {
   $32 = ($__c | 0) == -1 ? -1 : $__c << 1; //@line 5650
   label = 9; //@line 5651
  }
 } while (0);
 if ((label | 0) == 9) {
  $35 = $32; //@line 5657
  $36 = $__ndflt + 1 | 0; //@line 5657
 }
 $37 = _catgets($35 | 0, $__set | 0, $__msgid | 0, $36 | 0) | 0; //@line 5659
 $this2$i$i$i4 = $agg$result; //@line 5660
 HEAP32[$this2$i$i$i4 + 0 >> 2] = 0; //@line 5661
 HEAP32[$this2$i$i$i4 + 4 >> 2] = 0; //@line 5661
 HEAP32[$this2$i$i$i4 + 8 >> 2] = 0; //@line 5661
 $38 = _strlen($37 | 0) | 0; //@line 5662
 $39 = $37 + $38 | 0; //@line 5663
 if (($38 | 0) > 0) {
  $$01$i = $37; //@line 5666
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt); //@line 5668
  STACKTOP = sp; //@line 5669
  return;
 }
 do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$01$i] | 0); //@line 5673
  $$01$i = $$01$i + 1 | 0; //@line 5674
 } while (($$01$i | 0) != ($39 | 0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt); //@line 5682
 STACKTOP = sp; //@line 5683
 return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $32 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP; //@line 8401
 STACKTOP = STACKTOP + 16 | 0; //@line 8402
 $__sp = sp; //@line 8403
 $1 = $__s; //@line 8404
 $2 = HEAP32[$1 >> 2] | 0; //@line 8405
 if (($2 | 0) == 0) {
  HEAP32[$agg$result >> 2] = 0; //@line 8409
  STACKTOP = sp; //@line 8410
  return;
 }
 $5 = $__oe; //@line 8412
 $6 = $__ob; //@line 8413
 $8 = $5 - $6 >> 2; //@line 8415
 $9 = $__iob + 12 | 0; //@line 8416
 $10 = HEAP32[$9 >> 2] | 0; //@line 8417
 $__ns$0 = ($10 | 0) > ($8 | 0) ? $10 - $8 | 0 : 0; //@line 8420
 $13 = $__op; //@line 8421
 $14 = $13 - $6 | 0; //@line 8422
 $15 = $14 >> 2; //@line 8423
 do {
  if (($14 | 0) > 0) {
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $__ob, $15) | 0) == ($15 | 0)) {
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 8436
   HEAP32[$agg$result >> 2] = 0; //@line 8438
   STACKTOP = sp; //@line 8439
   return;
  }
 } while (0);
 do {
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl); //@line 8445
   if ((HEAP8[$__sp] & 1) == 0) {
    $32 = $__sp + 4 | 0; //@line 8452
   } else {
    $32 = HEAP32[$__sp + 8 >> 2] | 0; //@line 8456
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $32, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp); //@line 8465
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 8468
   HEAP32[$agg$result >> 2] = 0; //@line 8470
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp); //@line 8471
   STACKTOP = sp; //@line 8472
   return;
  }
 } while (0);
 $40 = $5 - $13 | 0; //@line 8475
 $41 = $40 >> 2; //@line 8476
 do {
  if (($40 | 0) > 0) {
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] & 31]($2, $__op, $41) | 0) == ($41 | 0)) {
    break;
   }
   HEAP32[$1 >> 2] = 0; //@line 8489
   HEAP32[$agg$result >> 2] = 0; //@line 8491
   STACKTOP = sp; //@line 8492
   return;
  }
 } while (0);
 HEAP32[$9 >> 2] = 0; //@line 8495
 HEAP32[$agg$result >> 2] = $2; //@line 8497
 STACKTOP = sp; //@line 8498
 return;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $23 = 0, $31 = 0, $35 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4343
 STACKTOP = STACKTOP + 32 | 0; //@line 4344
 $__extbuf = sp; //@line 4345
 $__1buf = sp + 8 | 0; //@line 4346
 $__extbe = sp + 16 | 0; //@line 4347
 $__e = sp + 24 | 0; //@line 4348
 $1 = ($__c | 0) == -1; //@line 4349
 L1 : do {
  if (!$1) {
   HEAP32[$__1buf >> 2] = $__c; //@line 4352
   if ((HEAP8[$this + 44 | 0] | 0) != 0) {
    if ((_fwrite($__1buf | 0, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1; //@line 4365
    }
    STACKTOP = sp; //@line 4367
    return $$0 | 0; //@line 4367
   }
   $10 = $__extbuf; //@line 4369
   HEAP32[$__extbe >> 2] = $10; //@line 4370
   $11 = $__1buf + 4 | 0; //@line 4371
   $12 = $this + 36 | 0; //@line 4372
   $13 = $this + 40 | 0; //@line 4373
   $14 = $__extbuf + 8 | 0; //@line 4374
   $15 = $__extbuf; //@line 4375
   $16 = $this + 32 | 0; //@line 4376
   $pbase$0 = $__1buf; //@line 4377
   while (1) {
    $17 = HEAP32[$12 >> 2] | 0; //@line 4379
    $23 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] & 15]($17, HEAP32[$13 >> 2] | 0, $pbase$0, $11, $__e, $10, $14, $__extbe) | 0; //@line 4385
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1; //@line 4389
     label = 12; //@line 4390
     break;
    }
    if (($23 | 0) == 3) {
     label = 7; //@line 4395
     break;
    }
    $31 = ($23 | 0) == 1; //@line 4398
    if (!($23 >>> 0 < 2)) {
     $$0 = -1; //@line 4401
     label = 12; //@line 4402
     break;
    }
    $35 = (HEAP32[$__extbe >> 2] | 0) - $15 | 0; //@line 4407
    if ((_fwrite($10 | 0, 1, $35 | 0, HEAP32[$16 >> 2] | 0) | 0) != ($35 | 0)) {
     $$0 = -1; //@line 4412
     label = 12; //@line 4413
     break;
    }
    if ($31) {
     $pbase$0 = $31 ? HEAP32[$__e >> 2] | 0 : $pbase$0; //@line 4419
    } else {
     break L1;
    }
   }
   if ((label | 0) == 7) {
    if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$16 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1; //@line 4432
    }
    STACKTOP = sp; //@line 4434
    return $$0 | 0; //@line 4434
   } else if ((label | 0) == 12) {
    STACKTOP = sp; //@line 4437
    return $$0 | 0; //@line 4437
   }
  }
 } while (0);
 $$0 = $1 ? 0 : $__c; //@line 4442
 STACKTOP = sp; //@line 4443
 return $$0 | 0; //@line 4443
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $23 = 0, $30 = 0, $34 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4995
 STACKTOP = STACKTOP + 32 | 0; //@line 4996
 $__extbuf = sp; //@line 4997
 $__1buf = sp + 8 | 0; //@line 4998
 $__extbe = sp + 16 | 0; //@line 4999
 $__e = sp + 24 | 0; //@line 5000
 $1 = ($__c | 0) == -1; //@line 5001
 L1 : do {
  if (!$1) {
   HEAP8[$__1buf] = $__c; //@line 5005
   if ((HEAP8[$this + 44 | 0] | 0) != 0) {
    if ((_fwrite($__1buf | 0, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1; //@line 5017
    }
    STACKTOP = sp; //@line 5019
    return $$0 | 0; //@line 5019
   }
   $10 = $__extbuf; //@line 5021
   HEAP32[$__extbe >> 2] = $10; //@line 5022
   $11 = $__1buf + 1 | 0; //@line 5023
   $12 = $this + 36 | 0; //@line 5024
   $13 = $this + 40 | 0; //@line 5025
   $14 = $__extbuf + 8 | 0; //@line 5026
   $15 = $__extbuf; //@line 5027
   $16 = $this + 32 | 0; //@line 5028
   $pbase$0 = $__1buf; //@line 5029
   while (1) {
    $17 = HEAP32[$12 >> 2] | 0; //@line 5031
    $23 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] & 15]($17, HEAP32[$13 >> 2] | 0, $pbase$0, $11, $__e, $10, $14, $__extbe) | 0; //@line 5037
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1; //@line 5041
     label = 12; //@line 5042
     break;
    }
    if (($23 | 0) == 3) {
     label = 7; //@line 5047
     break;
    }
    $30 = ($23 | 0) == 1; //@line 5050
    if (!($23 >>> 0 < 2)) {
     $$0 = -1; //@line 5053
     label = 12; //@line 5054
     break;
    }
    $34 = (HEAP32[$__extbe >> 2] | 0) - $15 | 0; //@line 5059
    if ((_fwrite($10 | 0, 1, $34 | 0, HEAP32[$16 >> 2] | 0) | 0) != ($34 | 0)) {
     $$0 = -1; //@line 5064
     label = 12; //@line 5065
     break;
    }
    if ($30) {
     $pbase$0 = $30 ? HEAP32[$__e >> 2] | 0 : $pbase$0; //@line 5071
    } else {
     break L1;
    }
   }
   if ((label | 0) == 7) {
    if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$16 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1; //@line 5083
    }
    STACKTOP = sp; //@line 5085
    return $$0 | 0; //@line 5085
   } else if ((label | 0) == 12) {
    STACKTOP = sp; //@line 5088
    return $$0 | 0; //@line 5088
   }
  }
 } while (0);
 $$0 = $1 ? 0 : $__c; //@line 5093
 STACKTOP = sp; //@line 5094
 return $$0 | 0; //@line 5094
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $3 = 0, $32 = 0, $47 = 0, $7 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, sp = 0;
 sp = STACKTOP; //@line 6517
 if ($__res_arg >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6520
 }
 $2 = $this; //@line 6523
 $3 = HEAP8[$2] | 0; //@line 6524
 if (($3 & 1) == 0) {
  $10 = $3; //@line 6528
  $11 = 10; //@line 6528
 } else {
  $7 = HEAP32[$this >> 2] | 0; //@line 6531
  $10 = $7 & 255; //@line 6535
  $11 = ($7 & -2) + -1 | 0; //@line 6535
 }
 if (($10 & 1) == 0) {
  $18 = ($10 & 255) >>> 1; //@line 6542
 } else {
  $18 = HEAP32[$this + 4 >> 2] | 0; //@line 6546
 }
 $20 = $18 >>> 0 > $__res_arg >>> 0 ? $18 : $__res_arg; //@line 6549
 if ($20 >>> 0 < 11) {
  $24 = 10; //@line 6552
 } else {
  $24 = ($20 + 16 & -16) + -1 | 0; //@line 6557
 }
 if (($24 | 0) == ($11 | 0)) {
  STACKTOP = sp; //@line 6561
  return;
 }
 do {
  if (($24 | 0) == 10) {
   $__new_data$1 = $this + 1 | 0; //@line 6570
   $__now_long$0$off0 = 0; //@line 6570
   $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 6570
   $__was_long$0$off0 = 1; //@line 6570
  } else {
   $32 = $24 + 1 | 0; //@line 6573
   if ($24 >>> 0 > $11 >>> 0) {
    $__new_data$0 = __Znwj($32) | 0; //@line 6576
   } else {
    $__new_data$0 = __Znwj($32) | 0; //@line 6579
   }
   if (($10 & 1) == 0) {
    $__new_data$1 = $__new_data$0; //@line 6586
    $__now_long$0$off0 = 1; //@line 6586
    $__p$0 = $this + 1 | 0; //@line 6586
    $__was_long$0$off0 = 0; //@line 6586
    break;
   } else {
    $__new_data$1 = $__new_data$0; //@line 6591
    $__now_long$0$off0 = 1; //@line 6591
    $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 6591
    $__was_long$0$off0 = 1; //@line 6591
    break;
   }
  }
 } while (0);
 if (($10 & 1) == 0) {
  $47 = ($10 & 255) >>> 1; //@line 6601
 } else {
  $47 = HEAP32[$this + 4 >> 2] | 0; //@line 6605
 }
 _memcpy($__new_data$1 | 0, $__p$0 | 0, $47 + 1 | 0) | 0; //@line 6608
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0); //@line 6610
 }
 if ($__now_long$0$off0) {
  HEAP32[$this >> 2] = $24 + 1 | 1; //@line 6616
  HEAP32[$this + 4 >> 2] = $18; //@line 6618
  HEAP32[$this + 8 >> 2] = $__new_data$1; //@line 6620
  STACKTOP = sp; //@line 6621
  return;
 } else {
  HEAP8[$2] = $18 << 1; //@line 6625
  STACKTOP = sp; //@line 6626
  return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $22 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, sp = 0;
 sp = STACKTOP; //@line 7328
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 7332
 }
 if ((HEAP8[$this] & 1) == 0) {
  $10 = $this + 4 | 0; //@line 7341
 } else {
  $10 = HEAP32[$this + 8 >> 2] | 0; //@line 7345
 }
 do {
  if ($__old_cap >>> 0 < 536870887) {
   $12 = $__delta_cap + $__old_cap | 0; //@line 7350
   $13 = $__old_cap << 1; //@line 7351
   $15 = $12 >>> 0 < $13 >>> 0 ? $13 : $12; //@line 7353
   if ($15 >>> 0 < 2) {
    $19 = 2; //@line 7356
    break;
   }
   $19 = $15 + 4 & -4; //@line 7361
  } else {
   $19 = 1073741807; //@line 7363
  }
 } while (0);
 $22 = __Znwj($19 << 2) | 0; //@line 7368
 if (($__n_copy | 0) != 0) {
  _wmemcpy($22, $10, $__n_copy) | 0; //@line 7371
 }
 if (($__n_add | 0) != 0) {
  _wmemcpy($22 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0; //@line 7376
 }
 $26 = $__old_sz - $__n_del | 0; //@line 7378
 if (($26 | 0) != ($__n_copy | 0)) {
  _wmemcpy($22 + ($__n_add + $__n_copy << 2) | 0, $10 + ($__n_del + $__n_copy << 2) | 0, $26 - $__n_copy | 0) | 0; //@line 7386
 }
 if (($__old_cap | 0) == 1) {
  $33 = $this + 8 | 0; //@line 7390
  HEAP32[$33 >> 2] = $22; //@line 7391
  $34 = $19 | 1; //@line 7392
  $35 = $this; //@line 7393
  HEAP32[$35 >> 2] = $34; //@line 7394
  $36 = $26 + $__n_add | 0; //@line 7395
  $37 = $this + 4 | 0; //@line 7396
  HEAP32[$37 >> 2] = $36; //@line 7397
  $38 = $22 + ($36 << 2) | 0; //@line 7398
  HEAP32[$38 >> 2] = 0; //@line 7399
  STACKTOP = sp; //@line 7400
  return;
 }
 __ZdlPv($10); //@line 7403
 $33 = $this + 8 | 0; //@line 7404
 HEAP32[$33 >> 2] = $22; //@line 7405
 $34 = $19 | 1; //@line 7406
 $35 = $this; //@line 7407
 HEAP32[$35 >> 2] = $34; //@line 7408
 $36 = $26 + $__n_add | 0; //@line 7409
 $37 = $this + 4 | 0; //@line 7410
 HEAP32[$37 >> 2] = $36; //@line 7411
 $38 = $22 + ($36 << 2) | 0; //@line 7412
 HEAP32[$38 >> 2] = 0; //@line 7413
 STACKTOP = sp; //@line 7414
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $$sink = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $3 = 0, $32 = 0, $35 = 0, $47 = 0, $7 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, sp = 0;
 sp = STACKTOP; //@line 7134
 if ($__res_arg >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 7137
 }
 $2 = $this; //@line 7140
 $3 = HEAP8[$2] | 0; //@line 7141
 if (($3 & 1) == 0) {
  $10 = $3; //@line 7145
  $11 = 1; //@line 7145
 } else {
  $7 = HEAP32[$this >> 2] | 0; //@line 7148
  $10 = $7 & 255; //@line 7152
  $11 = ($7 & -2) + -1 | 0; //@line 7152
 }
 if (($10 & 1) == 0) {
  $18 = ($10 & 255) >>> 1; //@line 7159
 } else {
  $18 = HEAP32[$this + 4 >> 2] | 0; //@line 7163
 }
 $20 = $18 >>> 0 > $__res_arg >>> 0 ? $18 : $__res_arg; //@line 7166
 if ($20 >>> 0 < 2) {
  $24 = 1; //@line 7169
 } else {
  $24 = ($20 + 4 & -4) + -1 | 0; //@line 7174
 }
 if (($24 | 0) == ($11 | 0)) {
  STACKTOP = sp; //@line 7178
  return;
 }
 do {
  if (($24 | 0) == 1) {
   $__new_data$1 = $this + 4 | 0; //@line 7186
   $__now_long$0$off0 = 0; //@line 7186
   $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 7186
   $__was_long$0$off0 = 1; //@line 7186
  } else {
   $32 = ($24 << 2) + 4 | 0; //@line 7190
   if ($24 >>> 0 > $11 >>> 0) {
    $$sink = __Znwj($32) | 0; //@line 7193
   } else {
    $$sink = __Znwj($32) | 0; //@line 7196
   }
   $35 = $$sink; //@line 7198
   if (($10 & 1) == 0) {
    $__new_data$1 = $35; //@line 7203
    $__now_long$0$off0 = 1; //@line 7203
    $__p$0 = $this + 4 | 0; //@line 7203
    $__was_long$0$off0 = 0; //@line 7203
    break;
   } else {
    $__new_data$1 = $35; //@line 7208
    $__now_long$0$off0 = 1; //@line 7208
    $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 7208
    $__was_long$0$off0 = 1; //@line 7208
    break;
   }
  }
 } while (0);
 if (($10 & 1) == 0) {
  $47 = ($10 & 255) >>> 1; //@line 7218
 } else {
  $47 = HEAP32[$this + 4 >> 2] | 0; //@line 7222
 }
 _wmemcpy($__new_data$1, $__p$0, $47 + 1 | 0) | 0; //@line 7225
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0); //@line 7228
 }
 if ($__now_long$0$off0) {
  HEAP32[$this >> 2] = $24 + 1 | 1; //@line 7234
  HEAP32[$this + 4 >> 2] = $18; //@line 7236
  HEAP32[$this + 8 >> 2] = $__new_data$1; //@line 7238
  STACKTOP = sp; //@line 7239
  return;
 } else {
  HEAP8[$2] = $18 << 1; //@line 7243
  STACKTOP = sp; //@line 7244
  return;
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result, $this, $__s, u$0, u$1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$01$i$i = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, sp = 0;
 sp = STACKTOP; //@line 15755
 STACKTOP = STACKTOP + 112 | 0; //@line 15756
 $fmt$i = sp; //@line 15757
 $__nar = sp + 8 | 0; //@line 15758
 $1 = $__nar; //@line 15759
 $2 = $fmt$i; //@line 15760
 HEAP8[$2] = 37; //@line 15761
 $3 = $fmt$i + 1 | 0; //@line 15762
 HEAP8[$3] = $__fmt; //@line 15763
 $4 = $fmt$i + 2 | 0; //@line 15764
 HEAP8[$4] = $__mod; //@line 15765
 HEAP8[$fmt$i + 3 | 0] = 0; //@line 15767
 if (!($__mod << 24 >> 24 == 0)) {
  HEAP8[$3] = $__mod; //@line 15770
  HEAP8[$4] = $__fmt; //@line 15771
 }
 $9 = _strftime_l($1 | 0, 100, $2 | 0, $__tm | 0, HEAP32[$this + 8 >> 2] | 0) | 0; //@line 15775
 $10 = $__nar + $9 | 0; //@line 15776
 $12 = HEAP32[$__s >> 2] | 0; //@line 15778
 if (($9 | 0) == 0) {
  $35 = $12; //@line 15781
  $36 = $agg$result; //@line 15782
  HEAP32[$36 >> 2] = $35; //@line 15783
  STACKTOP = sp; //@line 15784
  return;
 } else {
  $$01$i$i = $1; //@line 15786
  $14 = $12; //@line 15786
  $15 = $12; //@line 15786
 }
 while (1) {
  $16 = HEAP8[$$01$i$i] | 0; //@line 15789
  do {
   if (($15 | 0) == 0) {
    $31 = $14; //@line 15793
    $32 = 0; //@line 15793
   } else {
    $18 = $15 + 24 | 0; //@line 15795
    $19 = HEAP32[$18 >> 2] | 0; //@line 15796
    if (($19 | 0) == (HEAP32[$15 + 28 >> 2] | 0)) {
     $30 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$15 >> 2] | 0) + 52 >> 2] & 31]($15, $16 & 255) | 0) == -1; //@line 15807
     $31 = $30 ? 0 : $14; //@line 15810
     $32 = $30 ? 0 : $15; //@line 15810
     break;
    } else {
     HEAP32[$18 >> 2] = $19 + 1; //@line 15814
     HEAP8[$19] = $16; //@line 15815
     $31 = $14; //@line 15816
     $32 = $15; //@line 15816
     break;
    }
   }
  } while (0);
  $33 = $$01$i$i + 1 | 0; //@line 15821
  if (($33 | 0) == ($10 | 0)) {
   $35 = $31; //@line 15824
   break;
  } else {
   $$01$i$i = $33; //@line 15827
   $14 = $31; //@line 15827
   $15 = $32; //@line 15827
  }
 }
 $36 = $agg$result; //@line 15830
 HEAP32[$36 >> 2] = $35; //@line 15831
 STACKTOP = sp; //@line 15832
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, sp = 0;
 sp = STACKTOP; //@line 6784
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6788
 }
 if ((HEAP8[$this] & 1) == 0) {
  $11 = $this + 1 | 0; //@line 6798
 } else {
  $11 = HEAP32[$this + 8 >> 2] | 0; //@line 6802
 }
 do {
  if ($__old_cap >>> 0 < 2147483623) {
   $13 = $__delta_cap + $__old_cap | 0; //@line 6807
   $14 = $__old_cap << 1; //@line 6808
   $16 = $13 >>> 0 < $14 >>> 0 ? $14 : $13; //@line 6810
   if ($16 >>> 0 < 11) {
    $20 = 11; //@line 6813
    break;
   }
   $20 = $16 + 16 & -16; //@line 6818
  } else {
   $20 = -17; //@line 6820
  }
 } while (0);
 $21 = __Znwj($20) | 0; //@line 6823
 if (($__n_copy | 0) != 0) {
  _memcpy($21 | 0, $11 | 0, $__n_copy | 0) | 0; //@line 6826
 }
 if (($__n_add | 0) != 0) {
  _memcpy($21 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0; //@line 6831
 }
 $25 = $__old_sz - $__n_del | 0; //@line 6833
 if (($25 | 0) != ($__n_copy | 0)) {
  _memcpy($21 + ($__n_add + $__n_copy) | 0, $11 + ($__n_del + $__n_copy) | 0, $25 - $__n_copy | 0) | 0; //@line 6841
 }
 if (($__old_cap | 0) == 10) {
  $31 = $this + 8 | 0; //@line 6845
  HEAP32[$31 >> 2] = $21; //@line 6846
  $32 = $20 | 1; //@line 6847
  $33 = $this; //@line 6848
  HEAP32[$33 >> 2] = $32; //@line 6849
  $34 = $25 + $__n_add | 0; //@line 6850
  $35 = $this + 4 | 0; //@line 6851
  HEAP32[$35 >> 2] = $34; //@line 6852
  $36 = $21 + $34 | 0; //@line 6853
  HEAP8[$36] = 0; //@line 6854
  STACKTOP = sp; //@line 6855
  return;
 }
 __ZdlPv($11); //@line 6857
 $31 = $this + 8 | 0; //@line 6858
 HEAP32[$31 >> 2] = $21; //@line 6859
 $32 = $20 | 1; //@line 6860
 $33 = $this; //@line 6861
 HEAP32[$33 >> 2] = $32; //@line 6862
 $34 = $25 + $__n_add | 0; //@line 6863
 $35 = $this + 4 | 0; //@line 6864
 HEAP32[$35 >> 2] = $34; //@line 6865
 $36 = $21 + $34 | 0; //@line 6866
 HEAP8[$36] = 0; //@line 6867
 STACKTOP = sp; //@line 6868
 return;
}
function _player_move_from_string($a) {
 $a = $a | 0;
 var $13 = 0, $14 = 0, $15 = 0, $2 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $pm$0 = 0, sp = 0;
 sp = STACKTOP; //@line 1755
 $2 = HEAP8[$a] | 0; //@line 1757
 $4 = ($2 & 1) == 0; //@line 1759
 if ($4) {
  $13 = ($2 & 255) >>> 1; //@line 1765
  $14 = $a + 1 | 0; //@line 1765
 } else {
  $13 = HEAP32[$a + 4 >> 2] | 0; //@line 1771
  $14 = HEAP32[$a + 8 >> 2] | 0; //@line 1771
 }
 $15 = $13 >>> 0 > 8; //@line 1773
 do {
  if ((_memcmp($14, 112, $15 ? 8 : $13) | 0) == 0) {
   if ($13 >>> 0 > 7 & ($15 ^ 1)) {
    $pm$0 = 1; //@line 1783
   } else {
    break;
   }
   STACKTOP = sp; //@line 1787
   return $pm$0 | 0; //@line 1787
  }
 } while (0);
 if ($4) {
  $29 = ($2 & 255) >>> 1; //@line 1795
  $30 = $a + 1 | 0; //@line 1795
 } else {
  $29 = HEAP32[$a + 4 >> 2] | 0; //@line 1801
  $30 = HEAP32[$a + 8 >> 2] | 0; //@line 1801
 }
 $31 = $29 >>> 0 > 10; //@line 1803
 do {
  if ((_memcmp($30, 128, $31 ? 10 : $29) | 0) == 0) {
   if ($29 >>> 0 > 9 & ($31 ^ 1)) {
    $pm$0 = 2; //@line 1813
   } else {
    break;
   }
   STACKTOP = sp; //@line 1817
   return $pm$0 | 0; //@line 1817
  }
 } while (0);
 if ($4) {
  $45 = ($2 & 255) >>> 1; //@line 1825
  $46 = $a + 1 | 0; //@line 1825
 } else {
  $45 = HEAP32[$a + 4 >> 2] | 0; //@line 1831
  $46 = HEAP32[$a + 8 >> 2] | 0; //@line 1831
 }
 $47 = $45 >>> 0 > 10; //@line 1833
 do {
  if ((_memcmp($46, 144, $47 ? 10 : $45) | 0) == 0) {
   if ($45 >>> 0 > 9 & ($47 ^ 1)) {
    $pm$0 = 3; //@line 1843
   } else {
    break;
   }
   STACKTOP = sp; //@line 1847
   return $pm$0 | 0; //@line 1847
  }
 } while (0);
 if ($4) {
  $61 = ($2 & 255) >>> 1; //@line 1855
  $62 = $a + 1 | 0; //@line 1855
 } else {
  $61 = HEAP32[$a + 4 >> 2] | 0; //@line 1861
  $62 = HEAP32[$a + 8 >> 2] | 0; //@line 1861
 }
 $63 = $61 >>> 0 > 11; //@line 1863
 if ((_memcmp($62, 160, $63 ? 11 : $61) | 0) != 0) {
  $69 = ___cxa_allocate_exception(8) | 0; //@line 1868
  $70 = $69; //@line 1869
  __ZNSt13runtime_errorC2EPKc($70, 256); //@line 1870
  ___cxa_throw($69 | 0, 2720, 32); //@line 1871
 }
 if ($61 >>> 0 > 10 & ($63 ^ 1)) {
  $pm$0 = 4; //@line 1878
  STACKTOP = sp; //@line 1879
  return $pm$0 | 0; //@line 1879
 } else {
  $69 = ___cxa_allocate_exception(8) | 0; //@line 1881
  $70 = $69; //@line 1882
  __ZNSt13runtime_errorC2EPKc($70, 256); //@line 1883
  ___cxa_throw($69 | 0, 2720, 32); //@line 1884
 }
 return 0; //@line 1887
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10428
 if ((HEAP8[6040] | 0) != 0) {
  $9 = HEAP32[1508] | 0; //@line 10432
  STACKTOP = sp; //@line 10433
  return $9 | 0; //@line 10433
 }
 if ((___cxa_guard_acquire(6040) | 0) == 0) {
  $9 = HEAP32[1508] | 0; //@line 10438
  STACKTOP = sp; //@line 10439
  return $9 | 0; //@line 10439
 }
 do {
  if ((HEAP8[12688] | 0) == 0) {
   if ((___cxa_guard_acquire(12688) | 0) == 0) {
    break;
   }
   _memset(12520, 0, 168) | 0; //@line 10450
   _atexit(130, 0, ___dso_handle | 0) | 0; //@line 10451
   ___cxa_guard_release(12688); //@line 10452
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12520, 12696) | 0; //@line 10455
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12532 | 0, 12728) | 0; //@line 10456
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12544 | 0, 12760) | 0; //@line 10457
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12556 | 0, 12792) | 0; //@line 10458
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12568 | 0, 12832) | 0; //@line 10459
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12580 | 0, 12872) | 0; //@line 10460
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12592 | 0, 12904) | 0; //@line 10461
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12604 | 0, 12944) | 0; //@line 10462
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12616 | 0, 12960) | 0; //@line 10463
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12628 | 0, 12976) | 0; //@line 10464
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12640 | 0, 12992) | 0; //@line 10465
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12652 | 0, 13008) | 0; //@line 10466
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12664 | 0, 13024) | 0; //@line 10467
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12676 | 0, 13040) | 0; //@line 10468
 HEAP32[1508] = 12520; //@line 10469
 ___cxa_guard_release(6040); //@line 10470
 $9 = HEAP32[1508] | 0; //@line 10471
 STACKTOP = sp; //@line 10472
 return $9 | 0; //@line 10472
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10379
 if ((HEAP8[6024] | 0) != 0) {
  $9 = HEAP32[1504] | 0; //@line 10383
  STACKTOP = sp; //@line 10384
  return $9 | 0; //@line 10384
 }
 if ((___cxa_guard_acquire(6024) | 0) == 0) {
  $9 = HEAP32[1504] | 0; //@line 10389
  STACKTOP = sp; //@line 10390
  return $9 | 0; //@line 10390
 }
 do {
  if ((HEAP8[13224] | 0) == 0) {
   if ((___cxa_guard_acquire(13224) | 0) == 0) {
    break;
   }
   _memset(13056, 0, 168) | 0; //@line 10401
   _atexit(129, 0, ___dso_handle | 0) | 0; //@line 10402
   ___cxa_guard_release(13224); //@line 10403
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13056, 13232) | 0; //@line 10406
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13068 | 0, 13240) | 0; //@line 10407
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13080 | 0, 13248) | 0; //@line 10408
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13092 | 0, 13256) | 0; //@line 10409
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13104 | 0, 13272) | 0; //@line 10410
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13116 | 0, 13288) | 0; //@line 10411
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13128 | 0, 13296) | 0; //@line 10412
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13140 | 0, 13312) | 0; //@line 10413
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13152 | 0, 13320) | 0; //@line 10414
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13164 | 0, 13328) | 0; //@line 10415
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13176 | 0, 13336) | 0; //@line 10416
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13188 | 0, 13344) | 0; //@line 10417
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13200 | 0, 13352) | 0; //@line 10418
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13212 | 0, 13360) | 0; //@line 10419
 HEAP32[1504] = 13056; //@line 10420
 ___cxa_guard_release(6024); //@line 10421
 $9 = HEAP32[1504] | 0; //@line 10422
 STACKTOP = sp; //@line 10423
 return $9 | 0; //@line 10423
}
function ___cxx_global_array_dtor81(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11697
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12284 | 0); //@line 11698
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12272 | 0); //@line 11699
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12260 | 0); //@line 11700
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12248 | 0); //@line 11701
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12236 | 0); //@line 11702
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12224 | 0); //@line 11703
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12212 | 0); //@line 11704
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12200 | 0); //@line 11705
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12188 | 0); //@line 11706
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12176 | 0); //@line 11707
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12164 | 0); //@line 11708
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12152 | 0); //@line 11709
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12140 | 0); //@line 11710
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12128 | 0); //@line 11711
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12116 | 0); //@line 11712
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12104 | 0); //@line 11713
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12092 | 0); //@line 11714
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12080 | 0); //@line 11715
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12068 | 0); //@line 11716
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12056 | 0); //@line 11717
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12044 | 0); //@line 11718
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12032 | 0); //@line 11719
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12020 | 0); //@line 11720
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12008); //@line 11721
 STACKTOP = sp; //@line 11722
 return;
}
function ___cxx_global_array_dtor56(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11667
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11444 | 0); //@line 11668
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11432 | 0); //@line 11669
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11420 | 0); //@line 11670
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11408 | 0); //@line 11671
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11396 | 0); //@line 11672
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11384 | 0); //@line 11673
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11372 | 0); //@line 11674
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11360 | 0); //@line 11675
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11348 | 0); //@line 11676
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11336 | 0); //@line 11677
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11324 | 0); //@line 11678
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11312 | 0); //@line 11679
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11300 | 0); //@line 11680
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11288 | 0); //@line 11681
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11276 | 0); //@line 11682
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11264 | 0); //@line 11683
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11252 | 0); //@line 11684
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11240 | 0); //@line 11685
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11228 | 0); //@line 11686
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11216 | 0); //@line 11687
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11204 | 0); //@line 11688
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11192 | 0); //@line 11689
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11180 | 0); //@line 11690
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11168); //@line 11691
 STACKTOP = sp; //@line 11692
 return;
}
function ___cxx_global_array_dtor53(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11637
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11132 | 0); //@line 11638
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11120 | 0); //@line 11639
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11108 | 0); //@line 11640
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11096 | 0); //@line 11641
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11084 | 0); //@line 11642
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11072 | 0); //@line 11643
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11060 | 0); //@line 11644
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11048 | 0); //@line 11645
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11036 | 0); //@line 11646
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11024 | 0); //@line 11647
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11012 | 0); //@line 11648
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11e3 | 0); //@line 11649
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10988 | 0); //@line 11650
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10976 | 0); //@line 11651
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10964 | 0); //@line 11652
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10952 | 0); //@line 11653
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10940 | 0); //@line 11654
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10928 | 0); //@line 11655
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10916 | 0); //@line 11656
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10904 | 0); //@line 11657
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10892 | 0); //@line 11658
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10880 | 0); //@line 11659
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10868 | 0); //@line 11660
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10856); //@line 11661
 STACKTOP = sp; //@line 11662
 return;
}
function ___cxx_global_array_dtor(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11607
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10804 | 0); //@line 11608
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10792 | 0); //@line 11609
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10780 | 0); //@line 11610
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10768 | 0); //@line 11611
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10756 | 0); //@line 11612
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10744 | 0); //@line 11613
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10732 | 0); //@line 11614
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10720 | 0); //@line 11615
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10708 | 0); //@line 11616
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10696 | 0); //@line 11617
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10684 | 0); //@line 11618
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10672 | 0); //@line 11619
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10660 | 0); //@line 11620
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10648 | 0); //@line 11621
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10636 | 0); //@line 11622
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10624 | 0); //@line 11623
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10612 | 0); //@line 11624
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10600 | 0); //@line 11625
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10588 | 0); //@line 11626
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10576 | 0); //@line 11627
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10564 | 0); //@line 11628
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10552 | 0); //@line 11629
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10540 | 0); //@line 11630
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10528); //@line 11631
 STACKTOP = sp; //@line 11632
 return;
}
function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 12466
 STACKTOP = STACKTOP + 8 | 0; //@line 12467
 $1 = sp; //@line 12468
 HEAP32[$1 >> 2] = $wc; //@line 12469
 if (($src | 0) == 0) {
  $$0 = 0; //@line 12472
  STACKTOP = sp; //@line 12473
  return $$0 | 0; //@line 12473
 }
 do {
  if (($n | 0) != 0) {
   if (($wc | 0) == 0) {
    $5 = $1; //@line 12480
    HEAP32[$1 >> 2] = $5; //@line 12481
    $6 = $5; //@line 12482
   } else {
    $6 = $wc; //@line 12484
   }
   $7 = HEAP8[$src] | 0; //@line 12486
   $8 = $7 & 255; //@line 12487
   if ($7 << 24 >> 24 > -1) {
    HEAP32[$6 >> 2] = $8; //@line 12490
    $$0 = $7 << 24 >> 24 != 0 | 0; //@line 12493
    STACKTOP = sp; //@line 12494
    return $$0 | 0; //@line 12494
   }
   $12 = $8 + -194 | 0; //@line 12496
   if ($12 >>> 0 > 50) {
    break;
   }
   $14 = $src + 1 | 0; //@line 12501
   $16 = HEAP32[13368 + ($12 << 2) >> 2] | 0; //@line 12503
   if ($n >>> 0 < 4) {
    if (($16 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0) != 0) {
     break;
    }
   }
   $24 = HEAPU8[$14] | 0; //@line 12516
   $25 = $24 >>> 3; //@line 12517
   if (($25 + -16 | $25 + ($16 >> 26)) >>> 0 > 7) {
    break;
   }
   $33 = $24 + -128 | $16 << 6; //@line 12528
   if (($33 | 0) >= 0) {
    HEAP32[$6 >> 2] = $33; //@line 12531
    $$0 = 2; //@line 12532
    STACKTOP = sp; //@line 12533
    return $$0 | 0; //@line 12533
   }
   $38 = (HEAPU8[$src + 2 | 0] | 0) + -128 | 0; //@line 12538
   if ($38 >>> 0 > 63) {
    break;
   }
   $41 = $38 | $33 << 6; //@line 12544
   if (($41 | 0) >= 0) {
    HEAP32[$6 >> 2] = $41; //@line 12547
    $$0 = 3; //@line 12548
    STACKTOP = sp; //@line 12549
    return $$0 | 0; //@line 12549
   }
   $46 = (HEAPU8[$src + 3 | 0] | 0) + -128 | 0; //@line 12554
   if ($46 >>> 0 > 63) {
    break;
   }
   HEAP32[$6 >> 2] = $46 | $41 << 6; //@line 12561
   $$0 = 4; //@line 12562
   STACKTOP = sp; //@line 12563
   return $$0 | 0; //@line 12563
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12567
 $$0 = -1; //@line 12568
 STACKTOP = sp; //@line 12569
 return $$0 | 0; //@line 12569
}
function __Z12strip_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $data) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $31 = 0, $33 = 0, $42 = 0, $43 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$02$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 99
 $2 = HEAP8[$data] | 0; //@line 101
 if (($2 & 1) == 0) {
  $15 = $data + 1 | 0; //@line 111
  $16 = $data + 1 | 0; //@line 111
  $17 = ($2 & 255) >>> 1; //@line 111
 } else {
  $6 = HEAP32[$data + 8 >> 2] | 0; //@line 114
  $15 = $6; //@line 117
  $16 = $6; //@line 117
  $17 = HEAP32[$data + 4 >> 2] | 0; //@line 117
 }
 $18 = $15; //@line 119
 while (1) {
  if ((_isspace(HEAP8[$18] | 0) | 0) == 0) {
   break;
  } else {
   $18 = $18 + 1 | 0; //@line 129
  }
 }
 $25 = $16 + $17 | 0; //@line 133
 while (1) {
  $26 = $25 + -1 | 0; //@line 135
  if ((_isspace(HEAP8[$26] | 0) | 0) == 0) {
   break;
  } else {
   $25 = $26; //@line 143
  }
 }
 $31 = $18; //@line 146
 $33 = $25 - $31 | 0; //@line 148
 if ($33 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 151
 }
 if ($33 >>> 0 < 11) {
  HEAP8[$agg$result] = $33 << 1; //@line 159
  $__p$0$ph$i$i$i = $agg$result + 1 | 0; //@line 162
 } else {
  $42 = $33 + 16 & -16; //@line 165
  $43 = __Znwj($42) | 0; //@line 166
  HEAP32[$agg$result + 8 >> 2] = $43; //@line 168
  HEAP32[$agg$result >> 2] = $42 | 1; //@line 171
  HEAP32[$agg$result + 4 >> 2] = $33; //@line 173
  $__p$0$ph$i$i$i = $43; //@line 174
 }
 if (($18 | 0) == ($25 | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i; //@line 178
  HEAP8[$__p$0$lcssa$i$i$i] = 0; //@line 179
  STACKTOP = sp; //@line 180
  return;
 }
 $49 = 0 - $31 | 0; //@line 182
 $50 = $18; //@line 183
 $__p$02$i$i$i = $__p$0$ph$i$i$i; //@line 183
 while (1) {
  HEAP8[$__p$02$i$i$i] = HEAP8[$50] | 0; //@line 186
  $52 = $50 + 1 | 0; //@line 187
  if (($52 | 0) == ($25 | 0)) {
   break;
  } else {
   $__p$02$i$i$i = $__p$02$i$i$i + 1 | 0; //@line 193
   $50 = $52; //@line 193
  }
 }
 $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + ($25 + $49) | 0; //@line 199
 HEAP8[$__p$0$lcssa$i$i$i] = 0; //@line 200
 STACKTOP = sp; //@line 201
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $40 = 0, $42 = 0, $__p$0$lcssa = 0, $__p$02 = 0, sp = 0;
 sp = STACKTOP; //@line 2163
 $1 = $this; //@line 2164
 $2 = $__first; //@line 2165
 $3 = HEAP8[$1] | 0; //@line 2166
 if (($3 & 1) == 0) {
  $14 = ($3 & 255) >>> 1; //@line 2172
  $15 = $3; //@line 2172
  $16 = 1; //@line 2172
 } else {
  $11 = HEAP32[$this >> 2] | 0; //@line 2177
  $14 = HEAP32[$this + 4 >> 2] | 0; //@line 2181
  $15 = $11 & 255; //@line 2181
  $16 = ($11 & -2) + -1 | 0; //@line 2181
 }
 $19 = $__last - $2 >> 2; //@line 2185
 if (($19 | 0) == 0) {
  STACKTOP = sp; //@line 2188
  return $this | 0; //@line 2188
 }
 if (($16 - $14 | 0) >>> 0 < $19 >>> 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $16, $14 + $19 - $16 | 0, $14, $14, 0, 0); //@line 2195
  $25 = HEAP8[$1] | 0; //@line 2197
 } else {
  $25 = $15; //@line 2199
 }
 if (($25 & 1) == 0) {
  $31 = $this + 4 | 0; //@line 2205
 } else {
  $31 = HEAP32[$this + 8 >> 2] | 0; //@line 2209
 }
 $32 = $31 + ($14 << 2) | 0; //@line 2211
 if (($__first | 0) == ($__last | 0)) {
  $__p$0$lcssa = $32; //@line 2214
 } else {
  $37 = $14 + (($__last + -4 + (0 - $2) | 0) >>> 2) + 1 | 0; //@line 2223
  $$01 = $__first; //@line 2224
  $__p$02 = $32; //@line 2224
  while (1) {
   HEAP32[$__p$02 >> 2] = HEAP32[$$01 >> 2]; //@line 2227
   $40 = $$01 + 4 | 0; //@line 2229
   if (($40 | 0) == ($__last | 0)) {
    break;
   } else {
    $__p$02 = $__p$02 + 4 | 0; //@line 2234
    $$01 = $40; //@line 2234
   }
  }
  $__p$0$lcssa = $31 + ($37 << 2) | 0; //@line 2238
 }
 HEAP32[$__p$0$lcssa >> 2] = 0; //@line 2240
 $42 = $14 + $19 | 0; //@line 2241
 if ((HEAP8[$1] & 1) == 0) {
  HEAP8[$1] = $42 << 1; //@line 2248
  STACKTOP = sp; //@line 2249
  return $this | 0; //@line 2249
 } else {
  HEAP32[$this + 4 >> 2] = $42; //@line 2252
  STACKTOP = sp; //@line 2253
  return $this | 0; //@line 2253
 }
 return 0; //@line 2255
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result, $this, $__s, u$0, u$1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $5 = 0, $7 = 0, $9 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP; //@line 15907
 STACKTOP = STACKTOP + 408 | 0; //@line 15908
 $__nar = sp; //@line 15909
 $__ne = sp + 400 | 0; //@line 15910
 $2 = $__nar; //@line 15912
 HEAP32[$__ne >> 2] = $__nar + 400; //@line 15914
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $2, $__ne, $__tm, $__fmt, $__mod); //@line 15916
 $5 = HEAP32[$__ne >> 2] | 0; //@line 15917
 $7 = HEAP32[$__s >> 2] | 0; //@line 15919
 if (($2 | 0) == ($5 | 0)) {
  $29 = $7; //@line 15922
  $30 = $agg$result; //@line 15923
  HEAP32[$30 >> 2] = $29; //@line 15924
  STACKTOP = sp; //@line 15925
  return;
 } else {
  $$01$i$i = $2; //@line 15927
  $10 = $7; //@line 15927
  $9 = $7; //@line 15927
 }
 while (1) {
  $11 = HEAP32[$$01$i$i >> 2] | 0; //@line 15930
  if (($10 | 0) == 0) {
   $25 = $9; //@line 15933
   $26 = 0; //@line 15933
  } else {
   $13 = $10 + 24 | 0; //@line 15935
   $14 = HEAP32[$13 >> 2] | 0; //@line 15936
   if (($14 | 0) == (HEAP32[$10 + 28 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 31]($10, $11) | 0; //@line 15946
   } else {
    HEAP32[$13 >> 2] = $14 + 4; //@line 15949
    HEAP32[$14 >> 2] = $11; //@line 15950
    $$0$i$i$i$i = $11; //@line 15951
   }
   $24 = ($$0$i$i$i$i | 0) == -1; //@line 15953
   $25 = $24 ? 0 : $9; //@line 15956
   $26 = $24 ? 0 : $10; //@line 15956
  }
  $27 = $$01$i$i + 4 | 0; //@line 15958
  if (($27 | 0) == ($5 | 0)) {
   $29 = $25; //@line 15961
   break;
  } else {
   $$01$i$i = $27; //@line 15964
   $10 = $26; //@line 15964
   $9 = $25; //@line 15964
  }
 }
 $30 = $agg$result; //@line 15967
 HEAP32[$30 >> 2] = $29; //@line 15968
 STACKTOP = sp; //@line 15969
 return;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 11347
 STACKTOP = STACKTOP + 8 | 0; //@line 11348
 $__p2 = sp; //@line 11349
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11352
  $$0 = 0; //@line 11353
  STACKTOP = sp; //@line 11354
  return $$0 | 0; //@line 11354
 }
 $2 = ___errno_location() | 0; //@line 11356
 $3 = HEAP32[$2 >> 2] | 0; //@line 11357
 HEAP32[$2 >> 2] = 0; //@line 11358
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11369
   ___cxa_guard_release(5608); //@line 11370
  }
 } while (0);
 $10 = _strtoll_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11374
 $11 = tempRet0; //@line 11375
 $12 = HEAP32[$2 >> 2] | 0; //@line 11376
 if (($12 | 0) == 0) {
  HEAP32[$2 >> 2] = $3; //@line 11379
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11384
  $$0 = 0; //@line 11385
  STACKTOP = sp; //@line 11386
  return $$0 | 0; //@line 11386
 }
 do {
  if (($12 | 0) == 34) {
   HEAP32[$__err >> 2] = 4; //@line 11391
   if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0) {
    $$0 = 2147483647; //@line 11398
   } else {
    break;
   }
   STACKTOP = sp; //@line 11402
   return $$0 | 0; //@line 11402
  } else {
   if (($11 | 0) < -1 | ($11 | 0) == -1 & $10 >>> 0 < 2147483648) {
    HEAP32[$__err >> 2] = 4; //@line 11410
    break;
   }
   if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 2147483647) {
    HEAP32[$__err >> 2] = 4; //@line 11419
    $$0 = 2147483647; //@line 11420
    STACKTOP = sp; //@line 11421
    return $$0 | 0; //@line 11421
   } else {
    $$0 = $10; //@line 11423
    STACKTOP = sp; //@line 11424
    return $$0 | 0; //@line 11424
   }
  }
 } while (0);
 $$0 = -2147483648; //@line 11428
 STACKTOP = sp; //@line 11429
 return $$0 | 0; //@line 11429
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP; //@line 4578
 STACKTOP = STACKTOP + 32 | 0; //@line 4579
 $__extbuf = sp; //@line 4580
 $__enxt = sp + 8 | 0; //@line 4581
 $__ci = sp + 16 | 0; //@line 4582
 $__inxt = sp + 24 | 0; //@line 4583
 $2 = $this + 52 | 0; //@line 4585
 $4 = (HEAP8[$2] | 0) != 0; //@line 4587
 if (($__c | 0) == -1) {
  if ($4) {
   $$01 = -1; //@line 4590
   STACKTOP = sp; //@line 4591
   return $$01 | 0; //@line 4591
  }
  $6 = HEAP32[$this + 48 >> 2] | 0; //@line 4594
  HEAP8[$2] = ($6 | 0) != -1 | 0; //@line 4597
  $$01 = $6; //@line 4598
  STACKTOP = sp; //@line 4599
  return $$01 | 0; //@line 4599
 }
 $9 = $this + 48 | 0; //@line 4601
 L8 : do {
  if ($4) {
   HEAP32[$__ci >> 2] = HEAP32[$9 >> 2]; //@line 4605
   $12 = HEAP32[$this + 36 >> 2] | 0; //@line 4607
   $16 = $__extbuf; //@line 4611
   $22 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $16, $__extbuf + 8 | 0, $__enxt) | 0; //@line 4617
   if (($22 | 0) == 3) {
    HEAP8[$16] = HEAP32[$9 >> 2]; //@line 4621
    HEAP32[$__enxt >> 2] = $__extbuf + 1; //@line 4623
   } else if (($22 | 0) == 1 | ($22 | 0) == 2) {
    $$01 = -1; //@line 4625
    STACKTOP = sp; //@line 4626
    return $$01 | 0; //@line 4626
   }
   $26 = $this + 32 | 0; //@line 4628
   while (1) {
    $27 = HEAP32[$__enxt >> 2] | 0; //@line 4630
    if (!($27 >>> 0 > $16 >>> 0)) {
     break L8;
    }
    $29 = $27 + -1 | 0; //@line 4635
    HEAP32[$__enxt >> 2] = $29; //@line 4636
    if ((_ungetc(HEAP8[$29] | 0, HEAP32[$26 >> 2] | 0) | 0) == -1) {
     $$01 = -1; //@line 4643
     break;
    }
   }
   STACKTOP = sp; //@line 4647
   return $$01 | 0; //@line 4647
  }
 } while (0);
 HEAP32[$9 >> 2] = $__c; //@line 4650
 HEAP8[$2] = 1; //@line 4651
 $$01 = $__c; //@line 4652
 STACKTOP = sp; //@line 4653
 return $$01 | 0; //@line 4653
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP; //@line 5229
 STACKTOP = STACKTOP + 32 | 0; //@line 5230
 $__extbuf = sp; //@line 5231
 $__enxt = sp + 8 | 0; //@line 5232
 $__ci = sp + 16 | 0; //@line 5233
 $__inxt = sp + 24 | 0; //@line 5234
 $2 = $this + 52 | 0; //@line 5236
 $4 = (HEAP8[$2] | 0) != 0; //@line 5238
 if (($__c | 0) == -1) {
  if ($4) {
   $$01 = -1; //@line 5241
   STACKTOP = sp; //@line 5242
   return $$01 | 0; //@line 5242
  }
  $6 = HEAP32[$this + 48 >> 2] | 0; //@line 5245
  HEAP8[$2] = ($6 | 0) != -1 | 0; //@line 5248
  $$01 = $6; //@line 5249
  STACKTOP = sp; //@line 5250
  return $$01 | 0; //@line 5250
 }
 $9 = $this + 48 | 0; //@line 5252
 L8 : do {
  if ($4) {
   HEAP8[$__ci] = HEAP32[$9 >> 2]; //@line 5257
   $13 = HEAP32[$this + 36 >> 2] | 0; //@line 5259
   $17 = $__extbuf; //@line 5263
   $23 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 15]($13, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $17, $__extbuf + 8 | 0, $__enxt) | 0; //@line 5269
   if (($23 | 0) == 3) {
    HEAP8[$17] = HEAP32[$9 >> 2]; //@line 5273
    HEAP32[$__enxt >> 2] = $__extbuf + 1; //@line 5275
   } else if (($23 | 0) == 1 | ($23 | 0) == 2) {
    $$01 = -1; //@line 5277
    STACKTOP = sp; //@line 5278
    return $$01 | 0; //@line 5278
   }
   $27 = $this + 32 | 0; //@line 5280
   while (1) {
    $28 = HEAP32[$__enxt >> 2] | 0; //@line 5282
    if (!($28 >>> 0 > $17 >>> 0)) {
     break L8;
    }
    $30 = $28 + -1 | 0; //@line 5287
    HEAP32[$__enxt >> 2] = $30; //@line 5288
    if ((_ungetc(HEAP8[$30] | 0, HEAP32[$27 >> 2] | 0) | 0) == -1) {
     $$01 = -1; //@line 5295
     break;
    }
   }
   STACKTOP = sp; //@line 5299
   return $$01 | 0; //@line 5299
  }
 } while (0);
 HEAP32[$9 >> 2] = $__c; //@line 5302
 HEAP8[$2] = 1; //@line 5303
 $$01 = $__c; //@line 5304
 STACKTOP = sp; //@line 5305
 return $$01 | 0; //@line 5305
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $3 = 0, $31 = 0, $36 = 0, $38 = 0, $__p$02 = 0, $scevgep3 = 0, sp = 0;
 sp = STACKTOP; //@line 18896
 $1 = $this; //@line 18897
 $2 = $__first; //@line 18898
 $3 = HEAP8[$1] | 0; //@line 18899
 if (($3 & 1) == 0) {
  $14 = ($3 & 255) >>> 1; //@line 18905
  $15 = $3; //@line 18905
  $16 = 10; //@line 18905
 } else {
  $11 = HEAP32[$this >> 2] | 0; //@line 18910
  $14 = HEAP32[$this + 4 >> 2] | 0; //@line 18914
  $15 = $11 & 255; //@line 18914
  $16 = ($11 & -2) + -1 | 0; //@line 18914
 }
 $18 = $__last - $2 | 0; //@line 18917
 if (($__last | 0) == ($__first | 0)) {
  STACKTOP = sp; //@line 18920
  return $this | 0; //@line 18920
 }
 if (($16 - $14 | 0) >>> 0 < $18 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $14 + $18 - $16 | 0, $14, $14, 0, 0); //@line 18927
  $24 = HEAP8[$1] | 0; //@line 18929
 } else {
  $24 = $15; //@line 18931
 }
 if (($24 & 1) == 0) {
  $31 = $this + 1 | 0; //@line 18938
 } else {
  $31 = HEAP32[$this + 8 >> 2] | 0; //@line 18942
 }
 $scevgep3 = $__last + ($14 - $2) | 0; //@line 18947
 $$01 = $__first; //@line 18948
 $__p$02 = $31 + $14 | 0; //@line 18948
 while (1) {
  HEAP8[$__p$02] = HEAP8[$$01] | 0; //@line 18951
  $36 = $$01 + 1 | 0; //@line 18953
  if (($36 | 0) == ($__last | 0)) {
   break;
  } else {
   $__p$02 = $__p$02 + 1 | 0; //@line 18958
   $$01 = $36; //@line 18958
  }
 }
 HEAP8[$31 + $scevgep3 | 0] = 0; //@line 18962
 $38 = $14 + $18 | 0; //@line 18963
 if ((HEAP8[$1] & 1) == 0) {
  HEAP8[$1] = $38 << 1; //@line 18970
  STACKTOP = sp; //@line 18971
  return $this | 0; //@line 18971
 } else {
  HEAP32[$this + 4 >> 2] = $38; //@line 18974
  STACKTOP = sp; //@line 18975
  return $this | 0; //@line 18975
 }
 return 0; //@line 18977
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $27 = 0, $3 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $47 = 0, $8 = 0, $__err = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 8514
 STACKTOP = STACKTOP + 64 | 0; //@line 8515
 $$byval_copy1 = sp; //@line 8516
 $$byval_copy = sp + 8 | 0; //@line 8517
 $1 = sp + 16 | 0; //@line 8518
 $2 = sp + 24 | 0; //@line 8519
 $__s = sp + 32 | 0; //@line 8520
 $__err = sp + 40 | 0; //@line 8521
 $3 = sp + 48 | 0; //@line 8522
 $4 = sp + 56 | 0; //@line 8523
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($__s, $this, 0); //@line 8524
 if ((HEAP8[$__s] | 0) == 0) {
  STACKTOP = sp; //@line 8529
  return $this | 0; //@line 8529
 }
 HEAP32[$__err >> 2] = 0; //@line 8531
 $8 = $this; //@line 8532
 $13 = $this; //@line 8537
 __ZNSt3__16localeC2ERKS0_($3, $13 + ((HEAP32[(HEAP32[$8 >> 2] | 0) + -12 >> 2] | 0) + 28) | 0); //@line 8541
 $16 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 4248) | 0; //@line 8542
 $17 = $16; //@line 8543
 $21 = HEAP32[(HEAP32[$8 >> 2] | 0) + -12 >> 2] | 0; //@line 8547
 $27 = $13 + $21 | 0; //@line 8554
 $33 = HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] | 0; //@line 8560
 HEAP32[$1 >> 2] = HEAP32[$13 + ($21 + 24) >> 2]; //@line 8562
 HEAP32[$2 >> 2] = 0; //@line 8564
 $37 = $$byval_copy; //@line 8566
 $38 = $1; //@line 8567
 HEAP32[$37 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 8568
 $40 = $$byval_copy1; //@line 8570
 $41 = $2; //@line 8571
 HEAP32[$40 + 0 >> 2] = HEAP32[$41 + 0 >> 2]; //@line 8572
 FUNCTION_TABLE_viiiiiii[$33 & 63]($4, $17, $$byval_copy, $$byval_copy1, $27, $__err, $__n); //@line 8573
 __ZNSt3__16localeD2Ev($3); //@line 8576
 $47 = HEAP32[(HEAP32[$8 >> 2] | 0) + -12 >> 2] | 0; //@line 8580
 __ZNSt3__18ios_base5clearEj($13 + $47 | 0, HEAP32[$13 + ($47 + 16) >> 2] | HEAP32[$__err >> 2]); //@line 8589
 STACKTOP = sp; //@line 8590
 return $this | 0; //@line 8590
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $ec, $what_arg) {
 $agg$result = $agg$result | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $$pre2 = 0, $1 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $33 = 0, $34 = 0, $40 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5878
 STACKTOP = STACKTOP + 16 | 0; //@line 5879
 $1 = sp; //@line 5880
 $2 = $ec; //@line 5881
 $3 = HEAP32[$2 >> 2] | 0; //@line 5882
 $$pre2 = $what_arg; //@line 5884
 do {
  if (($3 | 0) != 0) {
   $5 = HEAP8[$$pre2] | 0; //@line 5887
   if (($5 & 1) == 0) {
    $12 = ($5 & 255) >>> 1; //@line 5893
   } else {
    $12 = HEAP32[$what_arg + 4 >> 2] | 0; //@line 5897
   }
   if (($12 | 0) == 0) {
    $14 = $3; //@line 5901
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, 2736, 2) | 0; //@line 5903
    $14 = HEAP32[$2 >> 2] | 0; //@line 5905
   }
   $16 = HEAP32[$ec + 4 >> 2] | 0; //@line 5908
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$16 >> 2] | 0) + 24 >> 2] & 7]($1, $16, $14); //@line 5913
   $21 = $1; //@line 5914
   $22 = HEAP8[$21] | 0; //@line 5915
   if (($22 & 1) == 0) {
    $33 = $1 + 1 | 0; //@line 5923
    $34 = ($22 & 255) >>> 1; //@line 5923
   } else {
    $33 = HEAP32[$1 + 8 >> 2] | 0; //@line 5929
    $34 = HEAP32[$1 + 4 >> 2] | 0; //@line 5929
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, $33, $34) | 0; //@line 5931
   if ((HEAP8[$21] & 1) == 0) {
    break;
   }
   __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 5940
  }
 } while (0);
 $40 = $agg$result; //@line 5943
 HEAP32[$40 + 0 >> 2] = HEAP32[$$pre2 + 0 >> 2]; //@line 5944
 HEAP32[$40 + 4 >> 2] = HEAP32[$$pre2 + 4 >> 2]; //@line 5944
 HEAP32[$40 + 8 >> 2] = HEAP32[$$pre2 + 8 >> 2]; //@line 5944
 HEAP32[$$pre2 + 0 >> 2] = 0; //@line 5945
 HEAP32[$$pre2 + 4 >> 2] = 0; //@line 5945
 HEAP32[$$pre2 + 8 >> 2] = 0; //@line 5945
 STACKTOP = sp; //@line 5946
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $11 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $31 = 0, $36 = 0, sp = 0;
 sp = STACKTOP; //@line 14435
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $36 = HEAP32[$this + 8 >> 2] | 0; //@line 14443
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$36 >> 2] | 0) + 20 >> 2] & 31]($36, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp); //@line 14448
  STACKTOP = sp; //@line 14449
  return;
 }
 HEAP8[$info + 53 | 0] = 1; //@line 14452
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp; //@line 14457
  return;
 }
 HEAP8[$info + 52 | 0] = 1; //@line 14460
 $11 = $info + 16 | 0; //@line 14461
 $12 = HEAP32[$11 >> 2] | 0; //@line 14462
 if (($12 | 0) == 0) {
  HEAP32[$11 >> 2] = $dst_ptr; //@line 14465
  HEAP32[$info + 24 >> 2] = $path_below; //@line 14467
  HEAP32[$info + 36 >> 2] = 1; //@line 14469
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   STACKTOP = sp; //@line 14476
   return;
  }
  HEAP8[$info + 54 | 0] = 1; //@line 14479
  STACKTOP = sp; //@line 14480
  return;
 }
 if (($12 | 0) != ($dst_ptr | 0)) {
  $31 = $info + 36 | 0; //@line 14484
  HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1; //@line 14487
  HEAP8[$info + 54 | 0] = 1; //@line 14489
  STACKTOP = sp; //@line 14490
  return;
 }
 $22 = $info + 24 | 0; //@line 14492
 $23 = HEAP32[$22 >> 2] | 0; //@line 14493
 if (($23 | 0) == 2) {
  HEAP32[$22 >> 2] = $path_below; //@line 14496
  $25 = $path_below; //@line 14497
 } else {
  $25 = $23; //@line 14499
 }
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($25 | 0) == 1)) {
  STACKTOP = sp; //@line 14507
  return;
 }
 HEAP8[$info + 54 | 0] = 1; //@line 14510
 STACKTOP = sp; //@line 14511
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $22 = 0, $24 = 0, $31 = 0, $32 = 0, $33 = 0, sp = 0;
 sp = STACKTOP; //@line 7426
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 7430
 }
 if ((HEAP8[$this] & 1) == 0) {
  $10 = $this + 4 | 0; //@line 7439
 } else {
  $10 = HEAP32[$this + 8 >> 2] | 0; //@line 7443
 }
 do {
  if ($__old_cap >>> 0 < 536870887) {
   $12 = $__delta_cap + $__old_cap | 0; //@line 7448
   $13 = $__old_cap << 1; //@line 7449
   $15 = $12 >>> 0 < $13 >>> 0 ? $13 : $12; //@line 7451
   if ($15 >>> 0 < 2) {
    $19 = 2; //@line 7454
    break;
   }
   $19 = $15 + 4 & -4; //@line 7459
  } else {
   $19 = 1073741807; //@line 7461
  }
 } while (0);
 $22 = __Znwj($19 << 2) | 0; //@line 7466
 if (($__n_copy | 0) != 0) {
  _wmemcpy($22, $10, $__n_copy) | 0; //@line 7469
 }
 $24 = $__old_sz - $__n_del | 0; //@line 7471
 if (($24 | 0) != ($__n_copy | 0)) {
  _wmemcpy($22 + ($__n_add + $__n_copy << 2) | 0, $10 + ($__n_del + $__n_copy << 2) | 0, $24 - $__n_copy | 0) | 0; //@line 7479
 }
 if (($__old_cap | 0) == 1) {
  $31 = $this + 8 | 0; //@line 7483
  HEAP32[$31 >> 2] = $22; //@line 7484
  $32 = $19 | 1; //@line 7485
  $33 = $this; //@line 7486
  HEAP32[$33 >> 2] = $32; //@line 7487
  STACKTOP = sp; //@line 7488
  return;
 }
 __ZdlPv($10); //@line 7491
 $31 = $this + 8 | 0; //@line 7492
 HEAP32[$31 >> 2] = $22; //@line 7493
 $32 = $19 | 1; //@line 7494
 $33 = $this; //@line 7495
 HEAP32[$33 >> 2] = $32; //@line 7496
 STACKTOP = sp; //@line 7497
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, sp = 0;
 sp = STACKTOP; //@line 6880
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6884
 }
 if ((HEAP8[$this] & 1) == 0) {
  $11 = $this + 1 | 0; //@line 6894
 } else {
  $11 = HEAP32[$this + 8 >> 2] | 0; //@line 6898
 }
 do {
  if ($__old_cap >>> 0 < 2147483623) {
   $13 = $__delta_cap + $__old_cap | 0; //@line 6903
   $14 = $__old_cap << 1; //@line 6904
   $16 = $13 >>> 0 < $14 >>> 0 ? $14 : $13; //@line 6906
   if ($16 >>> 0 < 11) {
    $20 = 11; //@line 6909
    break;
   }
   $20 = $16 + 16 & -16; //@line 6914
  } else {
   $20 = -17; //@line 6916
  }
 } while (0);
 $21 = __Znwj($20) | 0; //@line 6919
 if (($__n_copy | 0) != 0) {
  _memcpy($21 | 0, $11 | 0, $__n_copy | 0) | 0; //@line 6922
 }
 $23 = $__old_sz - $__n_del | 0; //@line 6924
 if (($23 | 0) != ($__n_copy | 0)) {
  _memcpy($21 + ($__n_add + $__n_copy) | 0, $11 + ($__n_del + $__n_copy) | 0, $23 - $__n_copy | 0) | 0; //@line 6932
 }
 if (($__old_cap | 0) == 10) {
  $29 = $this + 8 | 0; //@line 6936
  HEAP32[$29 >> 2] = $21; //@line 6937
  $30 = $20 | 1; //@line 6938
  $31 = $this; //@line 6939
  HEAP32[$31 >> 2] = $30; //@line 6940
  STACKTOP = sp; //@line 6941
  return;
 }
 __ZdlPv($11); //@line 6943
 $29 = $this + 8 | 0; //@line 6944
 HEAP32[$29 >> 2] = $21; //@line 6945
 $30 = $20 | 1; //@line 6946
 $31 = $this; //@line 6947
 HEAP32[$31 >> 2] = $30; //@line 6948
 STACKTOP = sp; //@line 6949
 return;
}
function __ZN5BoardC2INSt3__16vectorI13CardPlacementNS1_9allocatorIS3_EEEEEERKT_9NextColor($this, $r, $nc_) {
 $this = $this | 0;
 $r = $r | 0;
 $nc_ = $nc_ | 0;
 var $12 = 0, $14 = 0, $18 = 0, $21 = 0, $26 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3886
 dest = $this + 0 | 0; //@line 3888
 stop = dest + 64 | 0; //@line 3888
 do {
  HEAP32[dest >> 2] = 0; //@line 3888
  dest = dest + 4 | 0; //@line 3888
 } while ((dest | 0) < (stop | 0));
 HEAP32[$this + 64 >> 2] = $nc_; //@line 3890
 $3 = HEAP32[$r >> 2] | 0; //@line 3892
 $5 = HEAP32[$r + 4 >> 2] | 0; //@line 3894
 if (($3 | 0) == ($5 | 0)) {
  STACKTOP = sp; //@line 3897
  return;
 } else {
  $7 = $3; //@line 3899
 }
 while (1) {
  $9 = HEAP32[$7 + 4 >> 2] | 0; //@line 3903
  if (!($9 >>> 0 < 4)) {
   label = 4; //@line 3906
   break;
  }
  $12 = HEAP32[$7 + 8 >> 2] | 0; //@line 3910
  if (!($12 >>> 0 < 4)) {
   label = 4; //@line 3913
   break;
  }
  $18 = $this + (($12 << 2) + $9 << 2) | 0; //@line 3918
  if ((HEAP32[$18 >> 2] | 0) != 0) {
   label = 6; //@line 3922
   break;
  }
  if (($12 | $9) >>> 0 > 3) {
   label = 8; //@line 3928
   break;
  }
  HEAP32[$18 >> 2] = HEAP32[$7 >> 2]; //@line 3933
  $26 = $7 + 12 | 0; //@line 3934
  if (($26 | 0) == ($5 | 0)) {
   label = 10; //@line 3937
   break;
  } else {
   $7 = $26; //@line 3940
  }
 }
 if ((label | 0) == 4) {
  $14 = ___cxa_allocate_exception(8) | 0; //@line 3944
  __ZNSt13runtime_errorC2EPKc($14, 856); //@line 3946
  ___cxa_throw($14 | 0, 2720, 32); //@line 3947
 } else if ((label | 0) == 6) {
  $21 = ___cxa_allocate_exception(8) | 0; //@line 3951
  __ZNSt13runtime_errorC2EPKc($21, 880); //@line 3953
  ___cxa_throw($21 | 0, 2720, 32); //@line 3954
 } else if ((label | 0) == 8) {
  ___assert_fail(640, 56, 198, 672); //@line 3958
 } else if ((label | 0) == 10) {
  STACKTOP = sp; //@line 3962
  return;
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 11278
 STACKTOP = STACKTOP + 8 | 0; //@line 11279
 $__p2 = sp; //@line 11280
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11283
  $24 = 0; //@line 11284
  $25 = 0; //@line 11284
  tempRet0 = $25; //@line 11285
  STACKTOP = sp; //@line 11286
  return $24 | 0; //@line 11286
 }
 $2 = ___errno_location() | 0; //@line 11288
 $3 = HEAP32[$2 >> 2] | 0; //@line 11289
 HEAP32[$2 >> 2] = 0; //@line 11290
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11301
   ___cxa_guard_release(5608); //@line 11302
  }
 } while (0);
 $10 = _strtoll_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11306
 $11 = tempRet0; //@line 11307
 $12 = HEAP32[$2 >> 2] | 0; //@line 11308
 if (($12 | 0) == 0) {
  HEAP32[$2 >> 2] = $3; //@line 11311
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11316
  $24 = 0; //@line 11317
  $25 = 0; //@line 11317
  tempRet0 = $25; //@line 11318
  STACKTOP = sp; //@line 11319
  return $24 | 0; //@line 11319
 }
 if (($12 | 0) == 34) {
  HEAP32[$__err >> 2] = 4; //@line 11323
  $21 = ($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0; //@line 11328
  tempRet0 = $21 ? 2147483647 : -2147483648; //@line 11331
  STACKTOP = sp; //@line 11332
  return ($21 ? -1 : 0) | 0; //@line 11332
 } else {
  $24 = $10; //@line 11334
  $25 = $11; //@line 11334
  tempRet0 = $25; //@line 11335
  STACKTOP = sp; //@line 11336
  return $24 | 0; //@line 11336
 }
 return 0; //@line 11338
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $1 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $4 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7252
 $1 = $this; //@line 7253
 $2 = HEAP8[$1] | 0; //@line 7254
 $4 = ($2 & 1) != 0; //@line 7256
 if ($4) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0; //@line 7264
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0; //@line 7264
 } else {
  $__cap$0 = 1; //@line 7268
  $__sz$0 = ($2 & 255) >>> 1; //@line 7268
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0); //@line 7272
  if ((HEAP8[$1] & 1) == 0) {
   label = 7; //@line 7277
  } else {
   label = 8; //@line 7279
  }
 } else {
  if ($4) {
   label = 8; //@line 7283
  } else {
   label = 7; //@line 7285
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$1] = ($__sz$0 << 1) + 2; //@line 7293
  $$pn = $this + 4 | 0; //@line 7295
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0; //@line 7295
  $__p$0 = $$pn + ($__sz$0 << 2) | 0; //@line 7296
  HEAP32[$__p$0 >> 2] = $__c; //@line 7297
  $25 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0; //@line 7298
  HEAP32[$25 >> 2] = 0; //@line 7299
  STACKTOP = sp; //@line 7300
  return;
 } else if ((label | 0) == 8) {
  $22 = HEAP32[$this + 8 >> 2] | 0; //@line 7304
  $23 = $__sz$0 + 1 | 0; //@line 7305
  HEAP32[$this + 4 >> 2] = $23; //@line 7307
  $$pn = $22; //@line 7308
  $__p$0$sum$pre$phiZZZ2D = $23; //@line 7308
  $__p$0 = $$pn + ($__sz$0 << 2) | 0; //@line 7309
  HEAP32[$__p$0 >> 2] = $__c; //@line 7310
  $25 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0; //@line 7311
  HEAP32[$25 >> 2] = 0; //@line 7312
  STACKTOP = sp; //@line 7313
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $1 = 0, $2 = 0, $23 = 0, $24 = 0, $26 = 0, $4 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6634
 $1 = $this; //@line 6635
 $2 = HEAP8[$1] | 0; //@line 6636
 $4 = ($2 & 1) != 0; //@line 6638
 if ($4) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0; //@line 6646
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0; //@line 6646
 } else {
  $__cap$0 = 10; //@line 6650
  $__sz$0 = ($2 & 255) >>> 1; //@line 6650
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0); //@line 6654
  if ((HEAP8[$1] & 1) == 0) {
   label = 7; //@line 6659
  } else {
   label = 8; //@line 6661
  }
 } else {
  if ($4) {
   label = 8; //@line 6665
  } else {
   label = 7; //@line 6667
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$1] = ($__sz$0 << 1) + 2; //@line 6676
  $$pn = $this + 1 | 0; //@line 6678
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0; //@line 6678
  $__p$0 = $$pn + $__sz$0 | 0; //@line 6679
  HEAP8[$__p$0] = $__c; //@line 6680
  $26 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0; //@line 6681
  HEAP8[$26] = 0; //@line 6682
  STACKTOP = sp; //@line 6683
  return;
 } else if ((label | 0) == 8) {
  $23 = HEAP32[$this + 8 >> 2] | 0; //@line 6687
  $24 = $__sz$0 + 1 | 0; //@line 6688
  HEAP32[$this + 4 >> 2] = $24; //@line 6690
  $$pn = $23; //@line 6691
  $__p$0$sum$pre$phiZZZ2D = $24; //@line 6691
  $__p$0 = $$pn + $__sz$0 | 0; //@line 6692
  HEAP8[$__p$0] = $__c; //@line 6693
  $26 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0; //@line 6694
  HEAP8[$26] = 0; //@line 6695
  STACKTOP = sp; //@line 6696
  return;
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3022
 $1 = $this + 44 | 0; //@line 3023
 $2 = HEAP32[$1 >> 2] | 0; //@line 3024
 $4 = HEAP32[$this + 24 >> 2] | 0; //@line 3026
 if ($2 >>> 0 < $4 >>> 0) {
  HEAP32[$1 >> 2] = $4; //@line 3029
  $6 = $4; //@line 3030
 } else {
  $6 = $2; //@line 3032
 }
 $7 = $this + 8 | 0; //@line 3034
 $8 = HEAP32[$7 >> 2] | 0; //@line 3035
 $9 = $this + 12 | 0; //@line 3036
 $10 = HEAP32[$9 >> 2] | 0; //@line 3037
 if (!($8 >>> 0 < $10 >>> 0)) {
  $$0 = -1; //@line 3040
  STACKTOP = sp; //@line 3041
  return $$0 | 0; //@line 3041
 }
 if (($__c | 0) == -1) {
  HEAP32[$7 >> 2] = $8; //@line 3046
  HEAP32[$9 >> 2] = $10 + -1; //@line 3047
  HEAP32[$this + 16 >> 2] = $6; //@line 3049
  $$0 = 0; //@line 3050
  STACKTOP = sp; //@line 3051
  return $$0 | 0; //@line 3051
 }
 do {
  if ((HEAP32[$this + 48 >> 2] & 16 | 0) == 0) {
   $19 = $__c & 255; //@line 3059
   $20 = $10 + -1 | 0; //@line 3060
   if ($19 << 24 >> 24 == (HEAP8[$20] | 0)) {
    $$pre$phi2Z2D = $19; //@line 3064
    $$pre$phiZ2D = $20; //@line 3064
    break;
   } else {
    $$0 = -1; //@line 3067
   }
   STACKTOP = sp; //@line 3069
   return $$0 | 0; //@line 3069
  } else {
   $$pre$phi2Z2D = $__c & 255; //@line 3073
   $$pre$phiZ2D = $10 + -1 | 0; //@line 3073
  }
 } while (0);
 HEAP32[$7 >> 2] = $8; //@line 3076
 HEAP32[$9 >> 2] = $$pre$phiZ2D; //@line 3077
 HEAP32[$this + 16 >> 2] = $6; //@line 3079
 HEAP8[$$pre$phiZ2D] = $$pre$phi2Z2D; //@line 3080
 $$0 = $__c; //@line 3081
 STACKTOP = sp; //@line 3082
 return $$0 | 0; //@line 3082
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $16 = 0, $2 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 13606
 STACKTOP = STACKTOP + 32 | 0; //@line 13607
 $$byval_copy1 = sp; //@line 13608
 $$byval_copy = sp + 8 | 0; //@line 13609
 $1 = sp + 16 | 0; //@line 13610
 $2 = sp + 24 | 0; //@line 13611
 $3 = $this + 8 | 0; //@line 13612
 $8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 127]($3) | 0; //@line 13617
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 13621
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 13625
 $16 = HEAP8[$8] | 0; //@line 13627
 if (($16 & 1) == 0) {
  $27 = $8 + 4 | 0; //@line 13635
  $28 = $8 + 4 | 0; //@line 13635
  $29 = ($16 & 255) >>> 1; //@line 13635
 } else {
  $20 = HEAP32[$8 + 8 >> 2] | 0; //@line 13638
  $27 = $20; //@line 13641
  $28 = $20; //@line 13641
  $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 13641
 }
 $30 = $27 + ($29 << 2) | 0; //@line 13643
 $32 = $$byval_copy; //@line 13645
 $33 = $1; //@line 13646
 HEAP32[$32 + 0 >> 2] = HEAP32[$33 + 0 >> 2]; //@line 13647
 $35 = $$byval_copy1; //@line 13649
 $36 = $2; //@line 13650
 HEAP32[$35 + 0 >> 2] = HEAP32[$36 + 0 >> 2]; //@line 13651
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $28, $30); //@line 13652
 STACKTOP = sp; //@line 13655
 return;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 11205
 STACKTOP = STACKTOP + 8 | 0; //@line 11206
 $__p2 = sp; //@line 11207
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11210
  $$0 = 0; //@line 11211
  STACKTOP = sp; //@line 11212
  return $$0 | 0; //@line 11212
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4; //@line 11217
  $$0 = 0; //@line 11218
  STACKTOP = sp; //@line 11219
  return $$0 | 0; //@line 11219
 }
 $4 = ___errno_location() | 0; //@line 11221
 $5 = HEAP32[$4 >> 2] | 0; //@line 11222
 HEAP32[$4 >> 2] = 0; //@line 11223
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11234
   ___cxa_guard_release(5608); //@line 11235
  }
 } while (0);
 $12 = _strtoull_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11239
 $13 = tempRet0; //@line 11240
 $14 = HEAP32[$4 >> 2] | 0; //@line 11241
 if (($14 | 0) == 0) {
  HEAP32[$4 >> 2] = $5; //@line 11244
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11249
  $$0 = 0; //@line 11250
  STACKTOP = sp; //@line 11251
  return $$0 | 0; //@line 11251
 }
 if (($14 | 0) == 34 | ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 65535)) {
  HEAP32[$__err >> 2] = 4; //@line 11261
  $$0 = -1; //@line 11262
  STACKTOP = sp; //@line 11263
  return $$0 | 0; //@line 11263
 } else {
  $$0 = $12 & 65535; //@line 11266
  STACKTOP = sp; //@line 11267
  return $$0 | 0; //@line 11267
 }
 return 0; //@line 11269
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 11061
 STACKTOP = STACKTOP + 8 | 0; //@line 11062
 $__p2 = sp; //@line 11063
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11066
  $$0 = 0; //@line 11067
  STACKTOP = sp; //@line 11068
  return $$0 | 0; //@line 11068
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4; //@line 11073
  $$0 = 0; //@line 11074
  STACKTOP = sp; //@line 11075
  return $$0 | 0; //@line 11075
 }
 $4 = ___errno_location() | 0; //@line 11077
 $5 = HEAP32[$4 >> 2] | 0; //@line 11078
 HEAP32[$4 >> 2] = 0; //@line 11079
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11090
   ___cxa_guard_release(5608); //@line 11091
  }
 } while (0);
 $12 = _strtoull_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11095
 $13 = tempRet0; //@line 11096
 $14 = HEAP32[$4 >> 2] | 0; //@line 11097
 if (($14 | 0) == 0) {
  HEAP32[$4 >> 2] = $5; //@line 11100
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11105
  $$0 = 0; //@line 11106
  STACKTOP = sp; //@line 11107
  return $$0 | 0; //@line 11107
 }
 if (($14 | 0) == 34 | ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4; //@line 11117
  $$0 = -1; //@line 11118
  STACKTOP = sp; //@line 11119
  return $$0 | 0; //@line 11119
 } else {
  $$0 = $12; //@line 11121
  STACKTOP = sp; //@line 11122
  return $$0 | 0; //@line 11122
 }
 return 0; //@line 11124
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 11133
 STACKTOP = STACKTOP + 8 | 0; //@line 11134
 $__p2 = sp; //@line 11135
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11138
  $$0 = 0; //@line 11139
  STACKTOP = sp; //@line 11140
  return $$0 | 0; //@line 11140
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4; //@line 11145
  $$0 = 0; //@line 11146
  STACKTOP = sp; //@line 11147
  return $$0 | 0; //@line 11147
 }
 $4 = ___errno_location() | 0; //@line 11149
 $5 = HEAP32[$4 >> 2] | 0; //@line 11150
 HEAP32[$4 >> 2] = 0; //@line 11151
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11162
   ___cxa_guard_release(5608); //@line 11163
  }
 } while (0);
 $12 = _strtoull_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11167
 $13 = tempRet0; //@line 11168
 $14 = HEAP32[$4 >> 2] | 0; //@line 11169
 if (($14 | 0) == 0) {
  HEAP32[$4 >> 2] = $5; //@line 11172
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 11177
  $$0 = 0; //@line 11178
  STACKTOP = sp; //@line 11179
  return $$0 | 0; //@line 11179
 }
 if (($14 | 0) == 34 | ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4; //@line 11189
  $$0 = -1; //@line 11190
  STACKTOP = sp; //@line 11191
  return $$0 | 0; //@line 11191
 } else {
  $$0 = $12; //@line 11193
  STACKTOP = sp; //@line 11194
  return $$0 | 0; //@line 11194
 }
 return 0; //@line 11196
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $16 = 0, $2 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 10883
 STACKTOP = STACKTOP + 32 | 0; //@line 10884
 $$byval_copy1 = sp; //@line 10885
 $$byval_copy = sp + 8 | 0; //@line 10886
 $1 = sp + 16 | 0; //@line 10887
 $2 = sp + 24 | 0; //@line 10888
 $3 = $this + 8 | 0; //@line 10889
 $8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 127]($3) | 0; //@line 10894
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 10898
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 10902
 $16 = HEAP8[$8] | 0; //@line 10904
 if (($16 & 1) == 0) {
  $29 = $8 + 1 | 0; //@line 10914
  $30 = $8 + 1 | 0; //@line 10914
  $31 = ($16 & 255) >>> 1; //@line 10914
 } else {
  $20 = HEAP32[$8 + 8 >> 2] | 0; //@line 10917
  $29 = $20; //@line 10920
  $30 = $20; //@line 10920
  $31 = HEAP32[$8 + 4 >> 2] | 0; //@line 10920
 }
 $32 = $29 + $31 | 0; //@line 10922
 $34 = $$byval_copy; //@line 10924
 $35 = $1; //@line 10925
 HEAP32[$34 + 0 >> 2] = HEAP32[$35 + 0 >> 2]; //@line 10926
 $37 = $$byval_copy1; //@line 10928
 $38 = $2; //@line 10929
 HEAP32[$37 + 0 >> 2] = HEAP32[$38 + 0 >> 2]; //@line 10930
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $30, $32); //@line 10931
 STACKTOP = sp; //@line 10934
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $25 = 0, $28 = 0, $3 = 0, $33 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 6244
 if (($this | 0) == ($__str | 0)) {
  STACKTOP = sp; //@line 6247
  return $this | 0; //@line 6247
 }
 $3 = HEAP8[$__str] | 0; //@line 6250
 if (($3 & 1) == 0) {
  $14 = $__str + 1 | 0; //@line 6258
  $15 = ($3 & 255) >>> 1; //@line 6258
 } else {
  $14 = HEAP32[$__str + 8 >> 2] | 0; //@line 6264
  $15 = HEAP32[$__str + 4 >> 2] | 0; //@line 6264
 }
 $16 = $this; //@line 6266
 $17 = HEAP8[$16] | 0; //@line 6267
 if (($17 & 1) == 0) {
  $24 = $17; //@line 6271
  $25 = 10; //@line 6271
 } else {
  $21 = HEAP32[$this >> 2] | 0; //@line 6274
  $24 = $21 & 255; //@line 6278
  $25 = ($21 & -2) + -1 | 0; //@line 6278
 }
 $28 = ($24 & 1) == 0; //@line 6282
 if ($25 >>> 0 < $15 >>> 0) {
  if ($28) {
   $45 = ($24 & 255) >>> 1; //@line 6287
  } else {
   $45 = HEAP32[$this + 4 >> 2] | 0; //@line 6291
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $25, $15 - $25 | 0, $45, 0, $45, $15, $14); //@line 6294
  STACKTOP = sp; //@line 6295
  return $this | 0; //@line 6295
 }
 if ($28) {
  $33 = $this + 1 | 0; //@line 6300
 } else {
  $33 = HEAP32[$this + 8 >> 2] | 0; //@line 6304
 }
 _memmove($33 | 0, $14 | 0, $15 | 0) | 0; //@line 6306
 HEAP8[$33 + $15 | 0] = 0; //@line 6308
 if ((HEAP8[$16] & 1) == 0) {
  HEAP8[$16] = $15 << 1; //@line 6315
  STACKTOP = sp; //@line 6316
  return $this | 0; //@line 6316
 } else {
  HEAP32[$this + 4 >> 2] = $15; //@line 6319
  STACKTOP = sp; //@line 6320
  return $this | 0; //@line 6320
 }
 return 0; //@line 6322
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $10 = 0, $20 = 0, $21 = 0, $23 = 0, $29 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 14522
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp; //@line 14527
  return;
 }
 HEAP8[$info + 53 | 0] = 1; //@line 14530
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp; //@line 14535
  return;
 }
 HEAP8[$info + 52 | 0] = 1; //@line 14538
 $9 = $info + 16 | 0; //@line 14539
 $10 = HEAP32[$9 >> 2] | 0; //@line 14540
 if (($10 | 0) == 0) {
  HEAP32[$9 >> 2] = $dst_ptr; //@line 14543
  HEAP32[$info + 24 >> 2] = $path_below; //@line 14545
  HEAP32[$info + 36 >> 2] = 1; //@line 14547
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   STACKTOP = sp; //@line 14554
   return;
  }
  HEAP8[$info + 54 | 0] = 1; //@line 14557
  STACKTOP = sp; //@line 14558
  return;
 }
 if (($10 | 0) != ($dst_ptr | 0)) {
  $29 = $info + 36 | 0; //@line 14562
  HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1; //@line 14565
  HEAP8[$info + 54 | 0] = 1; //@line 14567
  STACKTOP = sp; //@line 14568
  return;
 }
 $20 = $info + 24 | 0; //@line 14570
 $21 = HEAP32[$20 >> 2] | 0; //@line 14571
 if (($21 | 0) == 2) {
  HEAP32[$20 >> 2] = $path_below; //@line 14574
  $23 = $path_below; //@line 14575
 } else {
  $23 = $21; //@line 14577
 }
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($23 | 0) == 1)) {
  STACKTOP = sp; //@line 14585
  return;
 }
 HEAP8[$info + 54 | 0] = 1; //@line 14588
 STACKTOP = sp; //@line 14589
 return;
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $$02$i$i$i = 0, $1 = 0, $13 = 0, $16 = 0, $24 = 0, $3 = 0, $4 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $uglygep$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 9431
 $1 = $__lo; //@line 9432
 $3 = $__hi - $1 | 0; //@line 9434
 $4 = $3 >> 2; //@line 9435
 if ($4 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result); //@line 9439
 }
 if ($4 >>> 0 < 2) {
  HEAP8[$agg$result] = $3 >>> 1; //@line 9447
  $__p$0$ph$i$i$i = $agg$result + 4 | 0; //@line 9449
 } else {
  $13 = $4 + 4 & -4; //@line 9452
  $16 = __Znwj($13 << 2) | 0; //@line 9455
  HEAP32[$agg$result + 8 >> 2] = $16; //@line 9457
  HEAP32[$agg$result >> 2] = $13 | 1; //@line 9460
  HEAP32[$agg$result + 4 >> 2] = $4; //@line 9462
  $__p$0$ph$i$i$i = $16; //@line 9463
 }
 if (($__lo | 0) == ($__hi | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i; //@line 9467
  HEAP32[$__p$0$lcssa$i$i$i >> 2] = 0; //@line 9468
  STACKTOP = sp; //@line 9469
  return;
 }
 $uglygep$i$i$i = $__hi + -4 + (0 - $1) | 0; //@line 9474
 $$02$i$i$i = $__lo; //@line 9475
 $__p$01$i$i$i = $__p$0$ph$i$i$i; //@line 9475
 while (1) {
  HEAP32[$__p$01$i$i$i >> 2] = HEAP32[$$02$i$i$i >> 2]; //@line 9478
  $24 = $$02$i$i$i + 4 | 0; //@line 9479
  if (($24 | 0) == ($__hi | 0)) {
   break;
  } else {
   $__p$01$i$i$i = $__p$01$i$i$i + 4 | 0; //@line 9485
   $$02$i$i$i = $24; //@line 9485
  }
 }
 $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + (($uglygep$i$i$i >>> 2) + 1 << 2) | 0; //@line 9492
 HEAP32[$__p$0$lcssa$i$i$i >> 2] = 0; //@line 9493
 STACKTOP = sp; //@line 9494
 return;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $12 = 0, $14 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 10994
 STACKTOP = STACKTOP + 8 | 0; //@line 10995
 $__p2 = sp; //@line 10996
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 11000
   $19 = 0; //@line 11001
   $20 = 0; //@line 11001
  } else {
   if ((HEAP8[$__a] | 0) == 45) {
    HEAP32[$__err >> 2] = 4; //@line 11006
    $19 = 0; //@line 11007
    $20 = 0; //@line 11007
    break;
   }
   $4 = ___errno_location() | 0; //@line 11010
   $5 = HEAP32[$4 >> 2] | 0; //@line 11011
   HEAP32[$4 >> 2] = 0; //@line 11012
   do {
    if ((HEAP8[5608] | 0) == 0) {
     if ((___cxa_guard_acquire(5608) | 0) == 0) {
      break;
     }
     HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 11023
     ___cxa_guard_release(5608); //@line 11024
    }
   } while (0);
   $12 = _strtoull_l($__a | 0, $__p2 | 0, $__base | 0, HEAP32[1400] | 0) | 0; //@line 11028
   $14 = HEAP32[$4 >> 2] | 0; //@line 11030
   if (($14 | 0) == 0) {
    HEAP32[$4 >> 2] = $5; //@line 11033
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 11038
    $19 = 0; //@line 11039
    $20 = 0; //@line 11039
    break;
   }
   if (($14 | 0) != 34) {
    $19 = $12; //@line 11044
    $20 = tempRet0; //@line 11044
    break;
   }
   HEAP32[$__err >> 2] = 4; //@line 11047
   $19 = -1; //@line 11048
   $20 = -1; //@line 11048
  }
 } while (0);
 tempRet0 = $20; //@line 11051
 STACKTOP = sp; //@line 11052
 return $19 | 0; //@line 11052
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 $this = $this | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $1 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $36 = 0, $41 = 0, $42 = 0, $__p$0$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 5955
 STACKTOP = STACKTOP + 32 | 0; //@line 5956
 $1 = sp; //@line 5957
 $2 = sp + 16 | 0; //@line 5958
 $3 = _strlen($what_arg | 0) | 0; //@line 5959
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 5962
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$2] = $3 << 1; //@line 5970
  $__p$0$i$i$i = $2 + 1 | 0; //@line 5973
 } else {
  $12 = $3 + 16 & -16; //@line 5976
  $13 = __Znwj($12) | 0; //@line 5977
  HEAP32[$2 + 8 >> 2] = $13; //@line 5979
  HEAP32[$2 >> 2] = $12 | 1; //@line 5982
  HEAP32[$2 + 4 >> 2] = $3; //@line 5984
  $__p$0$i$i$i = $13; //@line 5985
 }
 _memcpy($__p$0$i$i$i | 0, $what_arg | 0, $3 | 0) | 0; //@line 5987
 HEAP8[$__p$0$i$i$i + $3 | 0] = 0; //@line 5989
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1, $ec, $2); //@line 5990
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $1); //@line 5992
 if (!((HEAP8[$1] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 6000
 }
 if (!((HEAP8[$2] & 1) == 0)) {
  __ZdlPv(HEAP32[$2 + 8 >> 2] | 0); //@line 6009
 }
 HEAP32[$this >> 2] = 2752; //@line 6012
 $36 = $ec; //@line 6016
 $41 = HEAP32[$36 + 4 >> 2] | 0; //@line 6021
 $42 = $this + 8 | 0; //@line 6022
 HEAP32[$42 >> 2] = HEAP32[$36 >> 2]; //@line 6024
 HEAP32[$42 + 4 >> 2] = $41; //@line 6027
 STACKTOP = sp; //@line 6028
 return;
}
function __ZN5Board14computers_moveERK10PlayerMoveRK13CardPlacement9NextColor($this, $pm, $cp, $nc_) {
 $this = $this | 0;
 $pm = $pm | 0;
 $cp = $cp | 0;
 $nc_ = $nc_ | 0;
 var $1 = 0, $14 = 0, $17 = 0, $20 = 0, $24 = 0, $27 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2046
 $1 = HEAP32[$pm >> 2] | 0; //@line 2047
 if (($1 | 0) == 2) {
  if ((HEAP32[$cp + 8 >> 2] | 0) != 0) {
   label = 7; //@line 2053
  }
 } else if (($1 | 0) == 3) {
  if ((HEAP32[$cp + 4 >> 2] | 0) != 3) {
   label = 7; //@line 2060
  }
 } else if (($1 | 0) == 1) {
  if ((HEAP32[$cp + 8 >> 2] | 0) != 3) {
   label = 7; //@line 2067
  }
 } else if (($1 | 0) == 4) {
  if ((HEAP32[$cp + 4 >> 2] | 0) != 0) {
   label = 7; //@line 2074
  }
 } else {
  ___assert_fail(48, 56, 325, 920); //@line 2077
 }
 if ((label | 0) == 7) {
  $14 = ___cxa_allocate_exception(8) | 0; //@line 2081
  __ZNSt13runtime_errorC2EPKc($14, 936); //@line 2083
  ___cxa_throw($14 | 0, 2720, 32); //@line 2084
 }
 $17 = HEAP32[$cp + 4 >> 2] | 0; //@line 2088
 if (!($17 >>> 0 < 4)) {
  ___assert_fail(640, 56, 198, 672); //@line 2091
 }
 $20 = HEAP32[$cp + 8 >> 2] | 0; //@line 2095
 if (!($20 >>> 0 < 4)) {
  ___assert_fail(640, 56, 198, 672); //@line 2098
 }
 $24 = $this + (($20 << 2) + $17 << 2) | 0; //@line 2103
 if ((HEAP32[$24 >> 2] | 0) != 0) {
  $27 = ___cxa_allocate_exception(8) | 0; //@line 2107
  __ZNSt13runtime_errorC2EPKc($27, 936); //@line 2109
  ___cxa_throw($27 | 0, 2720, 32); //@line 2110
 }
 if (($20 | $17) >>> 0 > 3) {
  ___assert_fail(640, 56, 198, 672); //@line 2116
 } else {
  HEAP32[$24 >> 2] = HEAP32[$cp >> 2]; //@line 2121
  HEAP32[$this + 64 >> 2] = $nc_; //@line 2123
  STACKTOP = sp; //@line 2124
  return;
 }
}
function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$pre = 0, $$pre3 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $20 = 0, $28 = 0, $33 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1913
 $1 = $f + 104 | 0; //@line 1914
 $2 = HEAP32[$1 >> 2] | 0; //@line 1915
 if (($2 | 0) == 0) {
  label = 3; //@line 1918
 } else {
  if ((HEAP32[$f + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 1924
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = ___uflow($f) | 0; //@line 1929
   if (($7 | 0) < 0) {
    break;
   }
   $10 = HEAP32[$1 >> 2] | 0; //@line 1934
   $$pre = HEAP32[$f + 8 >> 2] | 0; //@line 1937
   do {
    if (($10 | 0) == 0) {
     label = 8; //@line 1940
    } else {
     $13 = HEAP32[$f + 4 >> 2] | 0; //@line 1943
     $20 = $10 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0; //@line 1950
     if (($$pre - $13 | 0) <= ($20 | 0)) {
      label = 8; //@line 1953
      break;
     }
     HEAP32[$f + 100 >> 2] = $13 + $20; //@line 1958
    }
   } while (0);
   if ((label | 0) == 8) {
    HEAP32[$f + 100 >> 2] = $$pre; //@line 1963
   }
   $$pre3 = HEAP32[$f + 4 >> 2] | 0; //@line 1967
   if (($$pre | 0) != 0) {
    $28 = $f + 108 | 0; //@line 1971
    HEAP32[$28 >> 2] = $$pre + 1 - $$pre3 + (HEAP32[$28 >> 2] | 0); //@line 1976
   }
   $33 = $$pre3 + -1 | 0; //@line 1978
   if ((HEAPU8[$33] | 0 | 0) == ($7 | 0)) {
    $$0 = $7; //@line 1983
    STACKTOP = sp; //@line 1984
    return $$0 | 0; //@line 1984
   }
   HEAP8[$33] = $7; //@line 1987
   $$0 = $7; //@line 1988
   STACKTOP = sp; //@line 1989
   return $$0 | 0; //@line 1989
  }
 } while (0);
 HEAP32[$f + 100 >> 2] = 0; //@line 1993
 $$0 = -1; //@line 1994
 STACKTOP = sp; //@line 1995
 return $$0 | 0; //@line 1995
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $13 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8244
 if (($mx | 0) == 0 | ($frm | 0) == ($frm_end | 0)) {
  $nbytes$0$lcssa = 0; //@line 8249
  STACKTOP = sp; //@line 8250
  return $nbytes$0$lcssa | 0; //@line 8250
 }
 $3 = $frm_end; //@line 8252
 $4 = $this + 8 | 0; //@line 8253
 $$016 = $frm; //@line 8254
 $nbytes$07 = 0; //@line 8254
 $nwchar_t$08 = 0; //@line 8254
 while (1) {
  $8 = _uselocale(HEAP32[$4 >> 2] | 0) | 0; //@line 8259
  $9 = _mbrlen($$016, $3 - $$016 | 0, $st) | 0; //@line 8260
  if (($8 | 0) != 0) {
   _uselocale($8 | 0) | 0; //@line 8263
  }
  if (($9 | 0) == 0) {
   $$1 = $$016 + 1 | 0; //@line 8267
   $$pn = 1; //@line 8267
  } else if (($9 | 0) == -2 | ($9 | 0) == -1) {
   $nbytes$0$lcssa = $nbytes$07; //@line 8269
   label = 9; //@line 8270
   break;
  } else {
   $$1 = $$016 + $9 | 0; //@line 8274
   $$pn = $9; //@line 8274
  }
  $nbytes$1 = $$pn + $nbytes$07 | 0; //@line 8276
  $13 = $nwchar_t$08 + 1 | 0; //@line 8277
  if ($13 >>> 0 >= $mx >>> 0 | ($$1 | 0) == ($frm_end | 0)) {
   $nbytes$0$lcssa = $nbytes$1; //@line 8282
   label = 9; //@line 8283
   break;
  } else {
   $$016 = $$1; //@line 8286
   $nbytes$07 = $nbytes$1; //@line 8286
   $nwchar_t$08 = $13; //@line 8286
  }
 }
 if ((label | 0) == 9) {
  STACKTOP = sp; //@line 8290
  return $nbytes$0$lcssa | 0; //@line 8290
 }
 return 0; //@line 8292
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 4451
 STACKTOP = STACKTOP + 8 | 0; //@line 4452
 $1 = sp; //@line 4453
 $2 = $this; //@line 4454
 HEAP32[$2 >> 2] = 3048; //@line 4455
 $3 = $this + 4 | 0; //@line 4456
 __ZNSt3__16localeC2Ev($3); //@line 4457
 $5 = $this + 8 | 0; //@line 4459
 HEAP32[$5 + 0 >> 2] = 0; //@line 4460
 HEAP32[$5 + 4 >> 2] = 0; //@line 4460
 HEAP32[$5 + 8 >> 2] = 0; //@line 4460
 HEAP32[$5 + 12 >> 2] = 0; //@line 4460
 HEAP32[$5 + 16 >> 2] = 0; //@line 4460
 HEAP32[$5 + 20 >> 2] = 0; //@line 4460
 HEAP32[$2 >> 2] = 2160; //@line 4461
 HEAP32[$this + 32 >> 2] = $__fp; //@line 4463
 HEAP32[$this + 40 >> 2] = $__st; //@line 4465
 HEAP32[$this + 48 >> 2] = -1; //@line 4467
 HEAP8[$this + 52 | 0] = 0; //@line 4469
 __ZNSt3__16localeC2ERKS0_($1, $3); //@line 4470
 $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5784) | 0; //@line 4471
 $11 = $10; //@line 4472
 $12 = $this + 36 | 0; //@line 4473
 HEAP32[$12 >> 2] = $11; //@line 4474
 $18 = $this + 44 | 0; //@line 4480
 HEAP32[$18 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($11) | 0; //@line 4481
 $19 = HEAP32[$12 >> 2] | 0; //@line 4482
 HEAP8[$this + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 127]($19) | 0) & 1; //@line 4490
 if ((HEAP32[$18 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2256); //@line 4494
 } else {
  __ZNSt3__16localeD2Ev($1); //@line 4497
  STACKTOP = sp; //@line 4498
  return;
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5102
 STACKTOP = STACKTOP + 8 | 0; //@line 5103
 $1 = sp; //@line 5104
 $2 = $this; //@line 5105
 HEAP32[$2 >> 2] = 2984; //@line 5106
 $3 = $this + 4 | 0; //@line 5107
 __ZNSt3__16localeC2Ev($3); //@line 5108
 $5 = $this + 8 | 0; //@line 5110
 HEAP32[$5 + 0 >> 2] = 0; //@line 5111
 HEAP32[$5 + 4 >> 2] = 0; //@line 5111
 HEAP32[$5 + 8 >> 2] = 0; //@line 5111
 HEAP32[$5 + 12 >> 2] = 0; //@line 5111
 HEAP32[$5 + 16 >> 2] = 0; //@line 5111
 HEAP32[$5 + 20 >> 2] = 0; //@line 5111
 HEAP32[$2 >> 2] = 2416; //@line 5112
 HEAP32[$this + 32 >> 2] = $__fp; //@line 5114
 HEAP32[$this + 40 >> 2] = $__st; //@line 5116
 HEAP32[$this + 48 >> 2] = -1; //@line 5118
 HEAP8[$this + 52 | 0] = 0; //@line 5120
 __ZNSt3__16localeC2ERKS0_($1, $3); //@line 5121
 $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5776) | 0; //@line 5122
 $11 = $10; //@line 5123
 $12 = $this + 36 | 0; //@line 5124
 HEAP32[$12 >> 2] = $11; //@line 5125
 $18 = $this + 44 | 0; //@line 5131
 HEAP32[$18 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 127]($11) | 0; //@line 5132
 $19 = HEAP32[$12 >> 2] | 0; //@line 5133
 HEAP8[$this + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 127]($19) | 0) & 1; //@line 5141
 if ((HEAP32[$18 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2256); //@line 5145
 } else {
  __ZNSt3__16localeD2Ev($1); //@line 5148
  STACKTOP = sp; //@line 5149
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $16 = 0, $22 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 14151
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp; //@line 14160
   return;
  }
  $7 = $info + 28 | 0; //@line 14162
  if ((HEAP32[$7 >> 2] | 0) == 1) {
   STACKTOP = sp; //@line 14166
   return;
  }
  HEAP32[$7 >> 2] = $path_below; //@line 14168
  STACKTOP = sp; //@line 14169
  return;
 }
 if ((HEAP32[$info >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp; //@line 14175
  return;
 }
 do {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $16 = $info + 20 | 0; //@line 14182
   if ((HEAP32[$16 >> 2] | 0) == ($current_ptr | 0)) {
    break;
   }
   HEAP32[$info + 32 >> 2] = $path_below; //@line 14189
   HEAP32[$16 >> 2] = $current_ptr; //@line 14190
   $22 = $info + 40 | 0; //@line 14191
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1; //@line 14194
   do {
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
      break;
     }
     HEAP8[$info + 54 | 0] = 1; //@line 14207
    }
   } while (0);
   HEAP32[$info + 44 >> 2] = 4; //@line 14211
   STACKTOP = sp; //@line 14212
   return;
  }
 } while (0);
 if (($path_below | 0) != 1) {
  STACKTOP = sp; //@line 14217
  return;
 }
 HEAP32[$info + 32 >> 2] = 1; //@line 14220
 STACKTOP = sp; //@line 14221
 return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $1 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $__nb = 0, $fmt$i = 0, $mb = 0, sp = 0;
 sp = STACKTOP; //@line 15980
 STACKTOP = STACKTOP + 120 | 0; //@line 15981
 $fmt$i = sp; //@line 15982
 $mb = sp + 112 | 0; //@line 15984
 $__nb = STACKTOP; //@line 15986
 STACKTOP = STACKTOP + 8 | 0; //@line 15986
 $1 = sp + 8 | 0; //@line 15987
 $2 = $fmt$i; //@line 15988
 HEAP8[$2] = 37; //@line 15989
 $3 = $fmt$i + 1 | 0; //@line 15990
 HEAP8[$3] = $__fmt; //@line 15991
 $4 = $fmt$i + 2 | 0; //@line 15992
 HEAP8[$4] = $__mod; //@line 15993
 HEAP8[$fmt$i + 3 | 0] = 0; //@line 15995
 if (!($__mod << 24 >> 24 == 0)) {
  HEAP8[$3] = $__mod; //@line 15998
  HEAP8[$4] = $__fmt; //@line 15999
 }
 $7 = $this; //@line 16001
 _strftime_l($1 | 0, 100, $2 | 0, $__tm | 0, HEAP32[$7 >> 2] | 0) | 0; //@line 16003
 $9 = $mb; //@line 16004
 HEAP32[$9 >> 2] = 0; //@line 16006
 HEAP32[$9 + 4 >> 2] = 0; //@line 16009
 HEAP32[$__nb >> 2] = $1; //@line 16010
 $17 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2; //@line 16015
 $19 = _uselocale(HEAP32[$7 >> 2] | 0) | 0; //@line 16017
 $20 = _mbsrtowcs($__wb, $__nb, $17, $mb) | 0; //@line 16018
 if (($19 | 0) != 0) {
  _uselocale($19 | 0) | 0; //@line 16021
 }
 if (($20 | 0) == -1) {
  __ZNSt3__121__throw_runtime_errorEPKc(6592); //@line 16025
 } else {
  HEAP32[$__we >> 2] = $__wb + ($20 << 2); //@line 16029
  STACKTOP = sp; //@line 16030
  return;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $10 = 0, $12 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 6661
 __ZNSt3__114__shared_count12__add_sharedEv($f); //@line 6663
 $2 = $this + 8 | 0; //@line 6664
 $3 = $this + 12 | 0; //@line 6665
 $4 = HEAP32[$3 >> 2] | 0; //@line 6666
 $5 = $2; //@line 6667
 $6 = HEAP32[$5 >> 2] | 0; //@line 6668
 $10 = $4 - $6 >> 2; //@line 6672
 do {
  if ($10 >>> 0 > $id >>> 0) {
   $21 = $6; //@line 6676
  } else {
   $12 = $id + 1 | 0; //@line 6678
   if ($10 >>> 0 < $12 >>> 0) {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2, $12 - $10 | 0); //@line 6682
    $21 = HEAP32[$5 >> 2] | 0; //@line 6684
    break;
   }
   if (!($10 >>> 0 > $12 >>> 0)) {
    $21 = $6; //@line 6689
    break;
   }
   $16 = $6 + ($12 << 2) | 0; //@line 6692
   if (($4 | 0) == ($16 | 0)) {
    $21 = $6; //@line 6695
    break;
   }
   HEAP32[$3 >> 2] = $4 + (~(($4 + -4 + (0 - $16) | 0) >>> 2) << 2); //@line 6707
   $21 = $6; //@line 6708
  }
 } while (0);
 $23 = HEAP32[$21 + ($id << 2) >> 2] | 0; //@line 6712
 if (($23 | 0) == 0) {
  $26 = $21; //@line 6715
  $27 = $26 + ($id << 2) | 0; //@line 6716
  HEAP32[$27 >> 2] = $f; //@line 6717
  STACKTOP = sp; //@line 6718
  return;
 }
 __ZNSt3__114__shared_count16__release_sharedEv($23) | 0; //@line 6721
 $26 = HEAP32[$5 >> 2] | 0; //@line 6723
 $27 = $26 + ($id << 2) | 0; //@line 6724
 HEAP32[$27 >> 2] = $f; //@line 6725
 STACKTOP = sp; //@line 6726
 return;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $$02$i$i$i = 0, $1 = 0, $13 = 0, $14 = 0, $21 = 0, $3 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 9263
 $1 = $__lo; //@line 9264
 $3 = $__hi - $1 | 0; //@line 9266
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result); //@line 9270
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$agg$result] = $3 << 1; //@line 9278
  $__p$0$ph$i$i$i = $agg$result + 1 | 0; //@line 9281
 } else {
  $13 = $3 + 16 & -16; //@line 9284
  $14 = __Znwj($13) | 0; //@line 9285
  HEAP32[$agg$result + 8 >> 2] = $14; //@line 9287
  HEAP32[$agg$result >> 2] = $13 | 1; //@line 9290
  HEAP32[$agg$result + 4 >> 2] = $3; //@line 9292
  $__p$0$ph$i$i$i = $14; //@line 9293
 }
 if (($__lo | 0) == ($__hi | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i; //@line 9297
  HEAP8[$__p$0$lcssa$i$i$i] = 0; //@line 9298
  STACKTOP = sp; //@line 9299
  return;
 } else {
  $$02$i$i$i = $__lo; //@line 9301
  $__p$01$i$i$i = $__p$0$ph$i$i$i; //@line 9301
 }
 while (1) {
  HEAP8[$__p$01$i$i$i] = HEAP8[$$02$i$i$i] | 0; //@line 9305
  $21 = $$02$i$i$i + 1 | 0; //@line 9306
  if (($21 | 0) == ($__hi | 0)) {
   break;
  } else {
   $__p$01$i$i$i = $__p$01$i$i$i + 1 | 0; //@line 9312
   $$02$i$i$i = $21; //@line 9312
  }
 }
 $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + ($__hi + (0 - $1)) | 0; //@line 9319
 HEAP8[$__p$0$lcssa$i$i$i] = 0; //@line 9320
 STACKTOP = sp; //@line 9321
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$1 = 0, $6 = 0, $7 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13170
 STACKTOP = STACKTOP + 56 | 0; //@line 13171
 $info = sp; //@line 13172
 if (($this | 0) == ($thrown_type | 0)) {
  $$1 = 1; //@line 13177
  STACKTOP = sp; //@line 13178
  return $$1 | 0; //@line 13178
 }
 if (($thrown_type | 0) == 0) {
  $$1 = 0; //@line 13182
  STACKTOP = sp; //@line 13183
  return $$1 | 0; //@line 13183
 }
 $6 = ___dynamic_cast($thrown_type, 13728, 13784, 0) | 0; //@line 13186
 $7 = $6; //@line 13187
 if (($6 | 0) == 0) {
  $$1 = 0; //@line 13190
  STACKTOP = sp; //@line 13191
  return $$1 | 0; //@line 13191
 }
 dest = $info + 0 | 0; //@line 13194
 stop = dest + 56 | 0; //@line 13194
 do {
  HEAP32[dest >> 2] = 0; //@line 13194
  dest = dest + 4 | 0; //@line 13194
 } while ((dest | 0) < (stop | 0));
 HEAP32[$info >> 2] = $7; //@line 13196
 HEAP32[$info + 8 >> 2] = $this; //@line 13198
 HEAP32[$info + 12 >> 2] = -1; //@line 13200
 HEAP32[$info + 48 >> 2] = 1; //@line 13202
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 15]($7, $info, HEAP32[$adjustedPtr >> 2] | 0, 1); //@line 13208
 if ((HEAP32[$info + 24 >> 2] | 0) != 1) {
  $$1 = 0; //@line 13213
  STACKTOP = sp; //@line 13214
  return $$1 | 0; //@line 13214
 }
 HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2]; //@line 13218
 $$1 = 1; //@line 13219
 STACKTOP = sp; //@line 13220
 return $$1 | 0; //@line 13220
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $i$02 = 0, sp = 0;
 sp = STACKTOP; //@line 6742
 HEAP32[$this >> 2] = 5632; //@line 6744
 $2 = $this + 12 | 0; //@line 6745
 $3 = HEAP32[$2 >> 2] | 0; //@line 6746
 $4 = $this + 8 | 0; //@line 6747
 $5 = HEAP32[$4 >> 2] | 0; //@line 6748
 if (($3 | 0) != ($5 | 0)) {
  $7 = $3; //@line 6751
  $8 = $5; //@line 6751
  $i$02 = 0; //@line 6751
  while (1) {
   $10 = HEAP32[$8 + ($i$02 << 2) >> 2] | 0; //@line 6754
   if (($10 | 0) == 0) {
    $13 = $8; //@line 6757
    $14 = $7; //@line 6757
   } else {
    __ZNSt3__114__shared_count16__release_sharedEv($10) | 0; //@line 6760
    $13 = HEAP32[$4 >> 2] | 0; //@line 6763
    $14 = HEAP32[$2 >> 2] | 0; //@line 6763
   }
   $15 = $i$02 + 1 | 0; //@line 6765
   if ($15 >>> 0 < $14 - $13 >> 2 >>> 0) {
    $7 = $14; //@line 6772
    $8 = $13; //@line 6772
    $i$02 = $15; //@line 6772
   } else {
    break;
   }
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 144 | 0); //@line 6779
 $22 = HEAP32[$4 >> 2] | 0; //@line 6780
 if (($22 | 0) == 0) {
  STACKTOP = sp; //@line 6783
  return;
 }
 $24 = HEAP32[$2 >> 2] | 0; //@line 6785
 if (($24 | 0) != ($22 | 0)) {
  HEAP32[$2 >> 2] = $24 + (~(($24 + -4 + (0 - $22) | 0) >>> 2) << 2); //@line 6797
 }
 if (($this + 24 | 0) == ($22 | 0)) {
  HEAP8[$this + 136 | 0] = 0; //@line 6804
  STACKTOP = sp; //@line 6805
  return;
 } else {
  __ZdlPv($22); //@line 6808
  STACKTOP = sp; //@line 6809
  return;
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $15 = 0, $17 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $n$02 = 0, $p$03 = 0, sp = 0;
 sp = STACKTOP; //@line 8144
 STACKTOP = STACKTOP + 8 | 0; //@line 8145
 HEAP32[$to_nxt >> 2] = $to; //@line 8147
 $1 = sp; //@line 8148
 $4 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0; //@line 8151
 $5 = _wcrtomb($1, 0, $st) | 0; //@line 8152
 if (($4 | 0) != 0) {
  _uselocale($4 | 0) | 0; //@line 8155
 }
 if (($5 | 0) == 0 | ($5 | 0) == -1) {
  $$0 = 2; //@line 8158
  STACKTOP = sp; //@line 8159
  return $$0 | 0; //@line 8159
 }
 $7 = $5 + -1 | 0; //@line 8161
 $8 = HEAP32[$to_nxt >> 2] | 0; //@line 8162
 if ($7 >>> 0 > ($to_end - $8 | 0) >>> 0) {
  $$0 = 1; //@line 8168
  STACKTOP = sp; //@line 8169
  return $$0 | 0; //@line 8169
 }
 if (($7 | 0) == 0) {
  $$0 = 0; //@line 8173
  STACKTOP = sp; //@line 8174
  return $$0 | 0; //@line 8174
 } else {
  $14 = $8; //@line 8176
  $n$02 = $7; //@line 8176
  $p$03 = $1; //@line 8176
 }
 while (1) {
  $15 = HEAP8[$p$03] | 0; //@line 8179
  HEAP32[$to_nxt >> 2] = $14 + 1; //@line 8181
  HEAP8[$14] = $15; //@line 8182
  $17 = $n$02 + -1 | 0; //@line 8183
  if (($17 | 0) == 0) {
   $$0 = 0; //@line 8186
   break;
  }
  $14 = HEAP32[$to_nxt >> 2] | 0; //@line 8191
  $p$03 = $p$03 + 1 | 0; //@line 8191
  $n$02 = $17; //@line 8191
 }
 STACKTOP = sp; //@line 8193
 return $$0 | 0; //@line 8193
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $$pre12 = 0, $1 = 0, $11 = 0, $19 = 0, $23 = 0, $34 = 0, $5 = 0, $6 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 8649
 STACKTOP = STACKTOP + 8 | 0; //@line 8650
 $__s = sp; //@line 8651
 $1 = $this; //@line 8652
 $5 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8656
 $6 = $this; //@line 8657
 if ((HEAP32[$6 + ($5 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 8664
  return $this | 0; //@line 8664
 }
 $11 = $__s; //@line 8666
 HEAP8[$11] = 0; //@line 8667
 HEAP32[$__s + 4 >> 2] = $this; //@line 8669
 do {
  if ((HEAP32[$6 + ($5 + 16) >> 2] | 0) == 0) {
   $19 = HEAP32[$6 + ($5 + 72) >> 2] | 0; //@line 8680
   if (($19 | 0) == 0) {
    $$pre12 = $5; //@line 8683
   } else {
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($19) | 0; //@line 8685
    $$pre12 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8690
   }
   HEAP8[$11] = 1; //@line 8692
   $23 = HEAP32[$6 + ($$pre12 + 24) >> 2] | 0; //@line 8696
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 127]($23) | 0) == -1)) {
    break;
   }
   $34 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8710
   __ZNSt3__18ios_base5clearEj($6 + $34 | 0, HEAP32[$6 + ($34 + 16) >> 2] | 1); //@line 8718
  }
 } while (0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s); //@line 8721
 STACKTOP = sp; //@line 8722
 return $this | 0; //@line 8722
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $$pre12 = 0, $1 = 0, $11 = 0, $19 = 0, $23 = 0, $34 = 0, $5 = 0, $6 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 8413
 STACKTOP = STACKTOP + 8 | 0; //@line 8414
 $__s = sp; //@line 8415
 $1 = $this; //@line 8416
 $5 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8420
 $6 = $this; //@line 8421
 if ((HEAP32[$6 + ($5 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 8428
  return $this | 0; //@line 8428
 }
 $11 = $__s; //@line 8430
 HEAP8[$11] = 0; //@line 8431
 HEAP32[$__s + 4 >> 2] = $this; //@line 8433
 do {
  if ((HEAP32[$6 + ($5 + 16) >> 2] | 0) == 0) {
   $19 = HEAP32[$6 + ($5 + 72) >> 2] | 0; //@line 8444
   if (($19 | 0) == 0) {
    $$pre12 = $5; //@line 8447
   } else {
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($19) | 0; //@line 8449
    $$pre12 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8454
   }
   HEAP8[$11] = 1; //@line 8456
   $23 = HEAP32[$6 + ($$pre12 + 24) >> 2] | 0; //@line 8460
   if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 127]($23) | 0) == -1)) {
    break;
   }
   $34 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 8474
   __ZNSt3__18ios_base5clearEj($6 + $34 | 0, HEAP32[$6 + ($34 + 16) >> 2] | 1); //@line 8482
  }
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 8485
 STACKTOP = sp; //@line 8486
 return $this | 0; //@line 8486
}
function ___cxx_global_array_dtor120(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11747
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13212 | 0); //@line 11748
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13200 | 0); //@line 11749
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13188 | 0); //@line 11750
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13176 | 0); //@line 11751
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13164 | 0); //@line 11752
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13152 | 0); //@line 11753
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13140 | 0); //@line 11754
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13128 | 0); //@line 11755
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13116 | 0); //@line 11756
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13104 | 0); //@line 11757
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13092 | 0); //@line 11758
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13080 | 0); //@line 11759
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13068 | 0); //@line 11760
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13056); //@line 11761
 STACKTOP = sp; //@line 11762
 return;
}
function ___cxx_global_array_dtor105(u$0) {
 u$0 = u$0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 11727
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12676 | 0); //@line 11728
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12664 | 0); //@line 11729
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12652 | 0); //@line 11730
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12640 | 0); //@line 11731
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12628 | 0); //@line 11732
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12616 | 0); //@line 11733
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12604 | 0); //@line 11734
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12592 | 0); //@line 11735
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12580 | 0); //@line 11736
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12568 | 0); //@line 11737
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12556 | 0); //@line 11738
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12544 | 0); //@line 11739
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12532 | 0); //@line 11740
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12520); //@line 11741
 STACKTOP = sp; //@line 11742
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $1 = 0, $10 = 0, $17 = 0, $2 = 0, $27 = 0, $29 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6706
 $1 = $this; //@line 6707
 $2 = HEAP8[$1] | 0; //@line 6708
 if (($2 & 1) == 0) {
  $10 = 10; //@line 6712
  $9 = $2; //@line 6712
 } else {
  $6 = HEAP32[$this >> 2] | 0; //@line 6715
  $10 = ($6 & -2) + -1 | 0; //@line 6719
  $9 = $6 & 255; //@line 6719
 }
 if (($9 & 1) == 0) {
  $17 = ($9 & 255) >>> 1; //@line 6726
 } else {
  $17 = HEAP32[$this + 4 >> 2] | 0; //@line 6730
 }
 if (($10 - $17 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $10, $__n - $10 + $17 | 0, $17, $17, 0, $__n, $__s); //@line 6737
  STACKTOP = sp; //@line 6738
  return $this | 0; //@line 6738
 }
 if (($__n | 0) == 0) {
  STACKTOP = sp; //@line 6742
  return $this | 0; //@line 6742
 }
 if (($9 & 1) == 0) {
  $27 = $this + 1 | 0; //@line 6749
 } else {
  $27 = HEAP32[$this + 8 >> 2] | 0; //@line 6753
 }
 _memcpy($27 + $17 | 0, $__s | 0, $__n | 0) | 0; //@line 6756
 $29 = $17 + $__n | 0; //@line 6757
 if ((HEAP8[$1] & 1) == 0) {
  HEAP8[$1] = $29 << 1; //@line 6764
 } else {
  HEAP32[$this + 4 >> 2] = $29; //@line 6767
 }
 HEAP8[$27 + $29 | 0] = 0; //@line 6770
 STACKTOP = sp; //@line 6771
 return $this | 0; //@line 6771
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $10 = 0, $11 = 0, $18 = 0, $2 = 0, $23 = 0, $3 = 0, $30 = 0, $32 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 6440
 if (($__n | 0) == 0) {
  STACKTOP = sp; //@line 6443
  return $this | 0; //@line 6443
 }
 $2 = $this; //@line 6445
 $3 = HEAP8[$2] | 0; //@line 6446
 if (($3 & 1) == 0) {
  $10 = $3; //@line 6450
  $11 = 10; //@line 6450
 } else {
  $7 = HEAP32[$this >> 2] | 0; //@line 6453
  $10 = $7 & 255; //@line 6457
  $11 = ($7 & -2) + -1 | 0; //@line 6457
 }
 if (($10 & 1) == 0) {
  $18 = ($10 & 255) >>> 1; //@line 6464
 } else {
  $18 = HEAP32[$this + 4 >> 2] | 0; //@line 6468
 }
 if (($11 - $18 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $11, $__n - $11 + $18 | 0, $18, $18, 0, 0); //@line 6475
  $23 = HEAP8[$2] | 0; //@line 6477
 } else {
  $23 = $10; //@line 6479
 }
 if (($23 & 1) == 0) {
  $30 = $this + 1 | 0; //@line 6486
 } else {
  $30 = HEAP32[$this + 8 >> 2] | 0; //@line 6490
 }
 _memset($30 + $18 | 0, $__c | 0, $__n | 0) | 0; //@line 6493
 $32 = $18 + $__n | 0; //@line 6494
 if ((HEAP8[$2] & 1) == 0) {
  HEAP8[$2] = $32 << 1; //@line 6501
 } else {
  HEAP32[$this + 4 >> 2] = $32; //@line 6504
 }
 HEAP8[$30 + $32 | 0] = 0; //@line 6507
 STACKTOP = sp; //@line 6508
 return $this | 0; //@line 6508
}
function _shift_board($board, $players_move) {
 $board = $board | 0;
 $players_move = $players_move | 0;
 var $1 = 0, $12 = 0, $13 = 0, $19 = 0, $27 = 0, $3 = 0, $__p$0$i$i$i = 0, $pm = 0, sp = 0;
 sp = STACKTOP; //@line 2132
 STACKTOP = STACKTOP + 24 | 0; //@line 2133
 $pm = sp; //@line 2134
 $1 = sp + 8 | 0; //@line 2135
 $3 = _strlen($players_move | 0) | 0; //@line 2137
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 2140
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$1] = $3 << 1; //@line 2148
  $__p$0$i$i$i = $1 + 1 | 0; //@line 2151
 } else {
  $12 = $3 + 16 & -16; //@line 2154
  $13 = __Znwj($12) | 0; //@line 2155
  HEAP32[$1 + 8 >> 2] = $13; //@line 2157
  HEAP32[$1 >> 2] = $12 | 1; //@line 2160
  HEAP32[$1 + 4 >> 2] = $3; //@line 2162
  $__p$0$i$i$i = $13; //@line 2163
 }
 _memcpy($__p$0$i$i$i | 0, $players_move | 0, $3 | 0) | 0; //@line 2165
 HEAP8[$__p$0$i$i$i + $3 | 0] = 0; //@line 2167
 $19 = _player_move_from_string($1) | 0; //@line 2168
 if (!((HEAP8[$1] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0); //@line 2176
 }
 HEAP32[$pm >> 2] = $19; //@line 2178
 if (__ZN5Board12_shift_innerERK10PlayerMoveb($board, $pm, 1) | 0) {
  STACKTOP = sp; //@line 2181
  return 1; //@line 2181
 } else {
  $27 = ___cxa_allocate_exception(8) | 0; //@line 2183
  __ZNSt13runtime_errorC2EPKc($27, 904); //@line 2185
  ___cxa_throw($27 | 0, 2720, 32); //@line 2186
 }
 return 0; //@line 2189
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $1 = 0, $10 = 0, $11 = 0, $14 = 0, $19 = 0, $2 = 0, $3 = 0, $31 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 6329
 $1 = _strlen($__s | 0) | 0; //@line 6330
 $2 = $this; //@line 6331
 $3 = HEAP8[$2] | 0; //@line 6332
 if (($3 & 1) == 0) {
  $10 = $3; //@line 6336
  $11 = 10; //@line 6336
 } else {
  $7 = HEAP32[$this >> 2] | 0; //@line 6339
  $10 = $7 & 255; //@line 6343
  $11 = ($7 & -2) + -1 | 0; //@line 6343
 }
 $14 = ($10 & 1) == 0; //@line 6347
 if ($11 >>> 0 < $1 >>> 0) {
  if ($14) {
   $31 = ($10 & 255) >>> 1; //@line 6352
  } else {
   $31 = HEAP32[$this + 4 >> 2] | 0; //@line 6356
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $11, $1 - $11 | 0, $31, 0, $31, $1, $__s); //@line 6359
  STACKTOP = sp; //@line 6360
  return $this | 0; //@line 6360
 }
 if ($14) {
  $19 = $this + 1 | 0; //@line 6365
 } else {
  $19 = HEAP32[$this + 8 >> 2] | 0; //@line 6369
 }
 _memmove($19 | 0, $__s | 0, $1 | 0) | 0; //@line 6371
 HEAP8[$19 + $1 | 0] = 0; //@line 6373
 if ((HEAP8[$2] & 1) == 0) {
  HEAP8[$2] = $1 << 1; //@line 6380
  STACKTOP = sp; //@line 6381
  return $this | 0; //@line 6381
 } else {
  HEAP32[$this + 4 >> 2] = $1; //@line 6384
  STACKTOP = sp; //@line 6385
  return $this | 0; //@line 6385
 }
 return 0; //@line 6387
}
function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 12578
 if (($s | 0) == 0) {
  $$0 = 1; //@line 12581
  STACKTOP = sp; //@line 12582
  return $$0 | 0; //@line 12582
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s] = $wc; //@line 12587
  $$0 = 1; //@line 12588
  STACKTOP = sp; //@line 12589
  return $$0 | 0; //@line 12589
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s] = $wc >>> 6 | 192; //@line 12597
  HEAP8[$s + 1 | 0] = $wc & 63 | 128; //@line 12601
  $$0 = 2; //@line 12602
  STACKTOP = sp; //@line 12603
  return $$0 | 0; //@line 12603
 }
 if ($wc >>> 0 < 55296 | ($wc + -57344 | 0) >>> 0 < 8192) {
  HEAP8[$s] = $wc >>> 12 | 224; //@line 12614
  HEAP8[$s + 1 | 0] = $wc >>> 6 & 63 | 128; //@line 12620
  HEAP8[$s + 2 | 0] = $wc & 63 | 128; //@line 12624
  $$0 = 3; //@line 12625
  STACKTOP = sp; //@line 12626
  return $$0 | 0; //@line 12626
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s] = $wc >>> 18 | 240; //@line 12635
  HEAP8[$s + 1 | 0] = $wc >>> 12 & 63 | 128; //@line 12641
  HEAP8[$s + 2 | 0] = $wc >>> 6 & 63 | 128; //@line 12647
  HEAP8[$s + 3 | 0] = $wc & 63 | 128; //@line 12651
  $$0 = 4; //@line 12652
  STACKTOP = sp; //@line 12653
  return $$0 | 0; //@line 12653
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12656
  $$0 = -1; //@line 12657
  STACKTOP = sp; //@line 12658
  return $$0 | 0; //@line 12658
 }
 return 0; //@line 12660
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $13 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8004
 $1 = $this; //@line 8005
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0; //@line 8008
  STACKTOP = sp; //@line 8009
  return $__i$0$lcssa | 0; //@line 8009
 }
 $3 = $this + 12 | 0; //@line 8011
 $4 = $this + 16 | 0; //@line 8012
 $$01 = $__s; //@line 8013
 $__i$02 = 0; //@line 8013
 while (1) {
  $5 = HEAP32[$3 >> 2] | 0; //@line 8015
  if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $5 + 4; //@line 8020
   $storemerge = HEAP32[$5 >> 2] | 0; //@line 8022
  } else {
   $13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 40 >> 2] & 127]($this) | 0; //@line 8027
   if (($13 | 0) == -1) {
    $__i$0$lcssa = $__i$02; //@line 8030
    label = 8; //@line 8031
    break;
   } else {
    $storemerge = $13; //@line 8034
   }
  }
  HEAP32[$$01 >> 2] = $storemerge; //@line 8037
  $15 = $__i$02 + 1 | 0; //@line 8038
  if (($15 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $15; //@line 8041
   label = 8; //@line 8042
   break;
  }
  $$01 = $$01 + 4 | 0; //@line 8046
  $__i$02 = $15; //@line 8046
 }
 if ((label | 0) == 8) {
  STACKTOP = sp; //@line 8049
  return $__i$0$lcssa | 0; //@line 8049
 }
 return 0; //@line 8051
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 var $1 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $4 = 0, $tmpcast$i$byval_copy = 0, sp = 0;
 sp = STACKTOP; //@line 7504
 STACKTOP = STACKTOP + 16 | 0; //@line 7505
 $tmpcast$i$byval_copy = sp; //@line 7506
 $1 = sp + 8 | 0; //@line 7507
 $4 = (HEAP32[$this + 24 >> 2] | 0) == 0; //@line 7510
 if ($4) {
  HEAP32[$this + 16 >> 2] = $state | 1; //@line 7514
 } else {
  HEAP32[$this + 16 >> 2] = $state; //@line 7517
 }
 if ((($4 & 1 | $state) & HEAP32[$this + 20 >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 7526
  return;
 }
 $14 = ___cxa_allocate_exception(16) | 0; //@line 7528
 do {
  if ((HEAP8[3328] | 0) == 0) {
   if ((___cxa_guard_acquire(3328) | 0) == 0) {
    break;
   }
   HEAP32[830] = 4024; //@line 7538
   _atexit(53, 3320, ___dso_handle | 0) | 0; //@line 7539
   ___cxa_guard_release(3328); //@line 7540
  }
 } while (0);
 $20 = $14; //@line 7545
 $21 = $1; //@line 7546
 HEAP32[$21 >> 2] = 1; //@line 7548
 HEAP32[$21 + 4 >> 2] = 3320; //@line 7551
 $26 = $tmpcast$i$byval_copy; //@line 7553
 $27 = $1; //@line 7554
 HEAP32[$26 + 0 >> 2] = HEAP32[$27 + 0 >> 2]; //@line 7555
 HEAP32[$26 + 4 >> 2] = HEAP32[$27 + 4 >> 2]; //@line 7555
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($20, $tmpcast$i$byval_copy, 3376); //@line 7556
 HEAP32[$14 >> 2] = 3344; //@line 7559
 ___cxa_throw($14 | 0, 3424, 49); //@line 7560
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $13 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7753
 $1 = $this; //@line 7754
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0; //@line 7757
  STACKTOP = sp; //@line 7758
  return $__i$0$lcssa | 0; //@line 7758
 }
 $3 = $this + 12 | 0; //@line 7760
 $4 = $this + 16 | 0; //@line 7761
 $$01 = $__s; //@line 7762
 $__i$02 = 0; //@line 7762
 while (1) {
  $5 = HEAP32[$3 >> 2] | 0; //@line 7764
  if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $5 + 1; //@line 7769
   $storemerge = HEAP8[$5] | 0; //@line 7771
  } else {
   $13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 40 >> 2] & 127]($this) | 0; //@line 7776
   if (($13 | 0) == -1) {
    $__i$0$lcssa = $__i$02; //@line 7779
    label = 8; //@line 7780
    break;
   }
   $storemerge = $13 & 255; //@line 7784
  }
  HEAP8[$$01] = $storemerge; //@line 7786
  $16 = $__i$02 + 1 | 0; //@line 7787
  if (($16 | 0) < ($__n | 0)) {
   $$01 = $$01 + 1 | 0; //@line 7791
   $__i$02 = $16; //@line 7791
  } else {
   $__i$0$lcssa = $16; //@line 7793
   label = 8; //@line 7794
   break;
  }
 }
 if ((label | 0) == 8) {
  STACKTOP = sp; //@line 7799
  return $__i$0$lcssa | 0; //@line 7799
 }
 return 0; //@line 7801
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $1 = 0, $10 = 0, $13 = 0, $17 = 0, $2 = 0, $29 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 7069
 $1 = $this; //@line 7070
 $2 = HEAP8[$1] | 0; //@line 7071
 if (($2 & 1) == 0) {
  $10 = 1; //@line 7075
  $9 = $2; //@line 7075
 } else {
  $6 = HEAP32[$this >> 2] | 0; //@line 7078
  $10 = ($6 & -2) + -1 | 0; //@line 7082
  $9 = $6 & 255; //@line 7082
 }
 $13 = ($9 & 1) == 0; //@line 7086
 if ($10 >>> 0 < $__n >>> 0) {
  if ($13) {
   $29 = ($9 & 255) >>> 1; //@line 7091
  } else {
   $29 = HEAP32[$this + 4 >> 2] | 0; //@line 7095
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $10, $__n - $10 | 0, $29, 0, $29, $__n, $__s); //@line 7098
  STACKTOP = sp; //@line 7099
  return $this | 0; //@line 7099
 }
 if ($13) {
  $17 = $this + 4 | 0; //@line 7103
 } else {
  $17 = HEAP32[$this + 8 >> 2] | 0; //@line 7107
 }
 _wmemmove($17, $__s, $__n) | 0; //@line 7109
 HEAP32[$17 + ($__n << 2) >> 2] = 0; //@line 7111
 if ((HEAP8[$1] & 1) == 0) {
  HEAP8[$1] = $__n << 1; //@line 7118
  STACKTOP = sp; //@line 7119
  return $this | 0; //@line 7119
 } else {
  HEAP32[$this + 4 >> 2] = $__n; //@line 7122
  STACKTOP = sp; //@line 7123
  return $this | 0; //@line 7123
 }
 return 0; //@line 7125
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4232
 STACKTOP = STACKTOP + 16 | 0; //@line 4233
 $__extbuf = sp; //@line 4234
 $__extbe = sp + 8 | 0; //@line 4235
 $1 = $this + 36 | 0; //@line 4236
 $2 = $this + 40 | 0; //@line 4237
 $3 = $__extbuf; //@line 4238
 $4 = $__extbuf + 8 | 0; //@line 4239
 $5 = $__extbuf; //@line 4240
 $6 = $this + 32 | 0; //@line 4241
 while (1) {
  $7 = HEAP32[$1 >> 2] | 0; //@line 4243
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] & 15]($7, HEAP32[$2 >> 2] | 0, $3, $4, $__extbe) | 0; //@line 4249
  $16 = (HEAP32[$__extbe >> 2] | 0) - $5 | 0; //@line 4252
  if ((_fwrite($3 | 0, 1, $16 | 0, HEAP32[$6 >> 2] | 0) | 0) != ($16 | 0)) {
   $$0 = -1; //@line 4257
   label = 5; //@line 4258
   break;
  }
  if (($13 | 0) == 2) {
   $$0 = -1; //@line 4262
   label = 5; //@line 4263
   break;
  } else if (($13 | 0) != 1) {
   label = 4; //@line 4266
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$6 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 4275
  STACKTOP = sp; //@line 4276
  return $$0 | 0; //@line 4276
 } else if ((label | 0) == 5) {
  STACKTOP = sp; //@line 4279
  return $$0 | 0; //@line 4279
 }
 return 0; //@line 4281
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4884
 STACKTOP = STACKTOP + 16 | 0; //@line 4885
 $__extbuf = sp; //@line 4886
 $__extbe = sp + 8 | 0; //@line 4887
 $1 = $this + 36 | 0; //@line 4888
 $2 = $this + 40 | 0; //@line 4889
 $3 = $__extbuf; //@line 4890
 $4 = $__extbuf + 8 | 0; //@line 4891
 $5 = $__extbuf; //@line 4892
 $6 = $this + 32 | 0; //@line 4893
 while (1) {
  $7 = HEAP32[$1 >> 2] | 0; //@line 4895
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] & 15]($7, HEAP32[$2 >> 2] | 0, $3, $4, $__extbe) | 0; //@line 4901
  $16 = (HEAP32[$__extbe >> 2] | 0) - $5 | 0; //@line 4904
  if ((_fwrite($3 | 0, 1, $16 | 0, HEAP32[$6 >> 2] | 0) | 0) != ($16 | 0)) {
   $$0 = -1; //@line 4909
   label = 5; //@line 4910
   break;
  }
  if (($13 | 0) == 2) {
   $$0 = -1; //@line 4914
   label = 5; //@line 4915
   break;
  } else if (($13 | 0) != 1) {
   label = 4; //@line 4918
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$6 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 4927
  STACKTOP = sp; //@line 4928
  return $$0 | 0; //@line 4928
 } else if ((label | 0) == 5) {
  STACKTOP = sp; //@line 4931
  return $$0 | 0; //@line 4931
 }
 return 0; //@line 4933
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $15 = 0, $21 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 13274
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $21 = HEAP32[$this + 8 >> 2] | 0; //@line 13282
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 15]($21, $info, $adjustedPtr, $path_below); //@line 13287
  STACKTOP = sp; //@line 13288
  return;
 }
 $6 = $info + 16 | 0; //@line 13290
 $7 = HEAP32[$6 >> 2] | 0; //@line 13291
 if (($7 | 0) == 0) {
  HEAP32[$6 >> 2] = $adjustedPtr; //@line 13294
  HEAP32[$info + 24 >> 2] = $path_below; //@line 13296
  HEAP32[$info + 36 >> 2] = 1; //@line 13298
  STACKTOP = sp; //@line 13299
  return;
 }
 if (($7 | 0) != ($adjustedPtr | 0)) {
  $15 = $info + 36 | 0; //@line 13303
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1; //@line 13306
  HEAP32[$info + 24 >> 2] = 2; //@line 13308
  HEAP8[$info + 54 | 0] = 1; //@line 13310
  STACKTOP = sp; //@line 13311
  return;
 }
 $12 = $info + 24 | 0; //@line 13313
 if ((HEAP32[$12 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 13317
  return;
 }
 HEAP32[$12 >> 2] = $path_below; //@line 13319
 STACKTOP = sp; //@line 13320
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 10831
 STACKTOP = STACKTOP + 8 | 0; //@line 10832
 $__p2 = sp; //@line 10833
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10836
  $$0 = 0.0; //@line 10837
  STACKTOP = sp; //@line 10838
  return +$$0;
 }
 $2 = ___errno_location() | 0; //@line 10840
 $3 = HEAP32[$2 >> 2] | 0; //@line 10841
 HEAP32[$2 >> 2] = 0; //@line 10842
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 10853
   ___cxa_guard_release(5608); //@line 10854
  }
 } while (0);
 $10 = +_strtold_l($__a, $__p2, HEAP32[1400] | 0); //@line 10858
 $11 = HEAP32[$2 >> 2] | 0; //@line 10859
 if (($11 | 0) == 0) {
  HEAP32[$2 >> 2] = $3; //@line 10862
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10867
  $$0 = 0.0; //@line 10868
  STACKTOP = sp; //@line 10869
  return +$$0;
 }
 if (($11 | 0) != 34) {
  $$0 = $10; //@line 10873
  STACKTOP = sp; //@line 10874
  return +$$0;
 }
 HEAP32[$__err >> 2] = 4; //@line 10876
 $$0 = $10; //@line 10877
 STACKTOP = sp; //@line 10878
 return +$$0;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 10885
 STACKTOP = STACKTOP + 8 | 0; //@line 10886
 $__p2 = sp; //@line 10887
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10890
  $$0 = 0.0; //@line 10891
  STACKTOP = sp; //@line 10892
  return +$$0;
 }
 $2 = ___errno_location() | 0; //@line 10894
 $3 = HEAP32[$2 >> 2] | 0; //@line 10895
 HEAP32[$2 >> 2] = 0; //@line 10896
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 10907
   ___cxa_guard_release(5608); //@line 10908
  }
 } while (0);
 $10 = +_strtold_l($__a, $__p2, HEAP32[1400] | 0); //@line 10912
 $11 = HEAP32[$2 >> 2] | 0; //@line 10913
 if (($11 | 0) == 0) {
  HEAP32[$2 >> 2] = $3; //@line 10916
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10921
  $$0 = 0.0; //@line 10922
  STACKTOP = sp; //@line 10923
  return +$$0;
 }
 if (($11 | 0) != 34) {
  $$0 = $10; //@line 10927
  STACKTOP = sp; //@line 10928
  return +$$0;
 }
 HEAP32[$__err >> 2] = 4; //@line 10930
 $$0 = $10; //@line 10931
 STACKTOP = sp; //@line 10932
 return +$$0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8094
 $1 = $this; //@line 8095
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0; //@line 8098
  STACKTOP = sp; //@line 8099
  return $__i$0$lcssa | 0; //@line 8099
 }
 $3 = $this + 24 | 0; //@line 8101
 $4 = $this + 28 | 0; //@line 8102
 $$02 = $__s; //@line 8103
 $__i$01 = 0; //@line 8103
 while (1) {
  $5 = HEAP32[$3 >> 2] | 0; //@line 8105
  if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   $8 = HEAP32[$$02 >> 2] | 0; //@line 8109
   HEAP32[$3 >> 2] = $5 + 4; //@line 8111
   HEAP32[$5 >> 2] = $8; //@line 8112
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$02 >> 2] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01; //@line 8121
    label = 8; //@line 8122
    break;
   }
  }
  $16 = $__i$01 + 1 | 0; //@line 8126
  if (($16 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $16; //@line 8129
   label = 8; //@line 8130
   break;
  }
  $$02 = $$02 + 4 | 0; //@line 8134
  $__i$01 = $16; //@line 8134
 }
 if ((label | 0) == 8) {
  STACKTOP = sp; //@line 8137
  return $__i$0$lcssa | 0; //@line 8137
 }
 return 0; //@line 8139
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7845
 $1 = $this; //@line 7846
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0; //@line 7849
  STACKTOP = sp; //@line 7850
  return $__i$0$lcssa | 0; //@line 7850
 }
 $3 = $this + 24 | 0; //@line 7852
 $4 = $this + 28 | 0; //@line 7853
 $$02 = $__s; //@line 7854
 $__i$01 = 0; //@line 7854
 while (1) {
  $5 = HEAP32[$3 >> 2] | 0; //@line 7856
  if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   $8 = HEAP8[$$02] | 0; //@line 7860
   HEAP32[$3 >> 2] = $5 + 1; //@line 7862
   HEAP8[$5] = $8; //@line 7863
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$02] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01; //@line 7873
    label = 7; //@line 7874
    break;
   }
  }
  $18 = $__i$01 + 1 | 0; //@line 7879
  if (($18 | 0) < ($__n | 0)) {
   $$02 = $$02 + 1 | 0; //@line 7882
   $__i$01 = $18; //@line 7882
  } else {
   $__i$0$lcssa = $18; //@line 7884
   label = 7; //@line 7885
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp; //@line 7890
  return $__i$0$lcssa | 0; //@line 7890
 }
 return 0; //@line 7892
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9210
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1; //@line 9214
   label = 6; //@line 9215
  } else {
   $$015 = $__lo2; //@line 9217
   $$024 = $__lo1; //@line 9217
   while (1) {
    if (($$024 | 0) == ($__hi1 | 0)) {
     $$0 = -1; //@line 9221
     break L1;
    }
    $3 = HEAP8[$$024] | 0; //@line 9224
    $4 = HEAP8[$$015] | 0; //@line 9225
    if ($3 << 24 >> 24 < $4 << 24 >> 24) {
     $$0 = -1; //@line 9228
     break L1;
    }
    if ($4 << 24 >> 24 < $3 << 24 >> 24) {
     $$0 = 1; //@line 9233
     break L1;
    }
    $7 = $$024 + 1 | 0; //@line 9236
    $8 = $$015 + 1 | 0; //@line 9237
    if (($8 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $7; //@line 9240
     label = 6; //@line 9241
     break;
    } else {
     $$015 = $8; //@line 9244
     $$024 = $7; //@line 9244
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) | 0; //@line 9252
 }
 STACKTOP = sp; //@line 9254
 return $$0 | 0; //@line 9254
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $11 = 0, $15 = 0, $19 = 0, $24 = 0, $8 = 0, $mem$0 = 0, sp = 0;
 sp = STACKTOP; //@line 18190
 if (($oldmem | 0) == 0) {
  $mem$0 = _malloc($bytes) | 0; //@line 18194
  STACKTOP = sp; //@line 18195
  return $mem$0 | 0; //@line 18195
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 18200
  $mem$0 = 0; //@line 18201
  STACKTOP = sp; //@line 18202
  return $mem$0 | 0; //@line 18202
 }
 if ($bytes >>> 0 < 11) {
  $8 = 16; //@line 18206
 } else {
  $8 = $bytes + 11 & -8; //@line 18210
 }
 $11 = _try_realloc_chunk($oldmem + -8 | 0, $8) | 0; //@line 18214
 if (($11 | 0) != 0) {
  $mem$0 = $11 + 8 | 0; //@line 18219
  STACKTOP = sp; //@line 18220
  return $mem$0 | 0; //@line 18220
 }
 $15 = _malloc($bytes) | 0; //@line 18222
 if (($15 | 0) == 0) {
  $mem$0 = 0; //@line 18225
  STACKTOP = sp; //@line 18226
  return $mem$0 | 0; //@line 18226
 }
 $19 = HEAP32[$oldmem + -4 >> 2] | 0; //@line 18230
 $24 = ($19 & -8) - (($19 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 18235
 _memcpy($15 | 0, $oldmem | 0, ($24 >>> 0 < $bytes >>> 0 ? $24 : $bytes) | 0) | 0; //@line 18238
 _free($oldmem); //@line 18239
 $mem$0 = $15; //@line 18240
 STACKTOP = sp; //@line 18241
 return $mem$0 | 0; //@line 18241
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9377
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1; //@line 9381
   label = 6; //@line 9382
  } else {
   $$015 = $__lo2; //@line 9384
   $$024 = $__lo1; //@line 9384
   while (1) {
    if (($$024 | 0) == ($__hi1 | 0)) {
     $$0 = -1; //@line 9388
     break L1;
    }
    $3 = HEAP32[$$024 >> 2] | 0; //@line 9391
    $4 = HEAP32[$$015 >> 2] | 0; //@line 9392
    if (($3 | 0) < ($4 | 0)) {
     $$0 = -1; //@line 9395
     break L1;
    }
    if (($4 | 0) < ($3 | 0)) {
     $$0 = 1; //@line 9400
     break L1;
    }
    $7 = $$024 + 4 | 0; //@line 9403
    $8 = $$015 + 4 | 0; //@line 9404
    if (($8 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $7; //@line 9407
     label = 6; //@line 9408
     break;
    } else {
     $$015 = $8; //@line 9411
     $$024 = $7; //@line 9411
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) | 0; //@line 9419
 }
 STACKTOP = sp; //@line 9421
 return $$0 | 0; //@line 9421
}
function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0.0, $2 = 0.0, $3 = 0, $6 = 0, $9 = 0.0, $y$0 = 0.0, sp = 0;
 sp = STACKTOP; //@line 2002
 do {
  if (($n | 0) > 1023) {
   $2 = $x * 8.98846567431158e+307; //@line 2006
   $3 = $n + -1023 | 0; //@line 2007
   if (($3 | 0) <= 1023) {
    $$0 = $3; //@line 2010
    $y$0 = $2; //@line 2010
    break;
   }
   $6 = $n + -2046 | 0; //@line 2014
   $$0 = ($6 | 0) > 1023 ? 1023 : $6; //@line 2017
   $y$0 = $2 * 8.98846567431158e+307; //@line 2017
  } else {
   if (!(($n | 0) < -1022)) {
    $$0 = $n; //@line 2021
    $y$0 = $x; //@line 2021
    break;
   }
   $9 = $x * 2.2250738585072014e-308; //@line 2024
   $10 = $n + 1022 | 0; //@line 2025
   if (!(($10 | 0) < -1022)) {
    $$0 = $10; //@line 2028
    $y$0 = $9; //@line 2028
    break;
   }
   $13 = $n + 2044 | 0; //@line 2032
   $$0 = ($13 | 0) < -1022 ? -1022 : $13; //@line 2035
   $y$0 = $9 * 2.2250738585072014e-308; //@line 2035
  }
 } while (0);
 $16 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0; //@line 2039
 $17 = tempRet0; //@line 2040
 HEAP32[tempDoublePtr >> 2] = $16; //@line 2041
 HEAP32[tempDoublePtr + 4 >> 2] = $17; //@line 2041
 $19 = $y$0 * +HEAPF64[tempDoublePtr >> 3]; //@line 2042
 STACKTOP = sp; //@line 2043
 return +$19;
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 10939
 STACKTOP = STACKTOP + 8 | 0; //@line 10940
 $__p2 = sp; //@line 10941
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10944
  $$0 = 0.0; //@line 10945
  STACKTOP = sp; //@line 10946
  return +$$0;
 }
 $2 = ___errno_location() | 0; //@line 10948
 $3 = HEAP32[$2 >> 2] | 0; //@line 10949
 HEAP32[$2 >> 2] = 0; //@line 10950
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 10961
   ___cxa_guard_release(5608); //@line 10962
  }
 } while (0);
 $10 = +_strtold_l($__a, $__p2, HEAP32[1400] | 0); //@line 10966
 $11 = HEAP32[$2 >> 2] | 0; //@line 10967
 if (($11 | 0) == 0) {
  HEAP32[$2 >> 2] = $3; //@line 10970
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4; //@line 10975
  $$0 = 0.0; //@line 10976
  STACKTOP = sp; //@line 10977
  return +$$0;
 }
 if (($11 | 0) == 34) {
  HEAP32[$__err >> 2] = 4; //@line 10981
 }
 $$0 = $10; //@line 10984
 STACKTOP = sp; //@line 10985
 return +$$0;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $12 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $__p$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 6894
 STACKTOP = STACKTOP + 16 | 0; //@line 6895
 $__p$i$i = sp; //@line 6896
 $2 = HEAP32[$this >> 2] | 0; //@line 6898
 $4 = $x; //@line 6900
 if (!((HEAP32[$4 >> 2] | 0) == -1)) {
  HEAP32[$__p$i$i >> 2] = $x; //@line 6905
  HEAP32[$__p$i$i + 4 >> 2] = 125; //@line 6907
  HEAP32[$__p$i$i + 8 >> 2] = 0; //@line 6909
  __ZNSt3__111__call_onceERVmPvPFvS2_E($4, $__p$i$i, 126); //@line 6910
 }
 $12 = (HEAP32[$x + 4 >> 2] | 0) + -1 | 0; //@line 6914
 $16 = HEAP32[$2 + 8 >> 2] | 0; //@line 6918
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $16 >> 2 >>> 0 > $12 >>> 0)) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 6925
  $26 = $25; //@line 6926
  __ZNSt8bad_castC2Ev($26); //@line 6927
  ___cxa_throw($25 | 0, 13672, 114); //@line 6928
 }
 $23 = HEAP32[$16 + ($12 << 2) >> 2] | 0; //@line 6932
 if (($23 | 0) == 0) {
  $25 = ___cxa_allocate_exception(4) | 0; //@line 6935
  $26 = $25; //@line 6936
  __ZNSt8bad_castC2Ev($26); //@line 6937
  ___cxa_throw($25 | 0, 13672, 114); //@line 6938
 } else {
  STACKTOP = sp; //@line 6941
  return $23 | 0; //@line 6941
 }
 return 0; //@line 6943
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $23 = 0, $32 = 0, $40 = 0, $45 = 0, $46 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 9044
 $1 = $this + 4 | 0; //@line 9045
 $2 = HEAP32[$1 >> 2] | 0; //@line 9046
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0; //@line 9051
 $8 = $2; //@line 9052
 if ((HEAP32[$8 + ($7 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 9059
  return;
 }
 if ((HEAP32[$8 + ($7 + 16) >> 2] | 0) != 0) {
  STACKTOP = sp; //@line 9067
  return;
 }
 if ((HEAP32[$8 + ($7 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = sp; //@line 9076
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp; //@line 9080
  return;
 }
 $23 = HEAP32[$1 >> 2] | 0; //@line 9082
 $32 = HEAP32[$23 + ((HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 9092
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] & 127]($32) | 0) == -1)) {
  STACKTOP = sp; //@line 9101
  return;
 }
 $40 = HEAP32[$1 >> 2] | 0; //@line 9103
 $45 = HEAP32[(HEAP32[$40 >> 2] | 0) + -12 >> 2] | 0; //@line 9108
 $46 = $40; //@line 9109
 __ZNSt3__18ios_base5clearEj($46 + $45 | 0, HEAP32[$46 + ($45 + 16) >> 2] | 1); //@line 9117
 STACKTOP = sp; //@line 9118
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $23 = 0, $32 = 0, $40 = 0, $45 = 0, $46 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 8781
 $1 = $this + 4 | 0; //@line 8782
 $2 = HEAP32[$1 >> 2] | 0; //@line 8783
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0; //@line 8788
 $8 = $2; //@line 8789
 if ((HEAP32[$8 + ($7 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp; //@line 8796
  return;
 }
 if ((HEAP32[$8 + ($7 + 16) >> 2] | 0) != 0) {
  STACKTOP = sp; //@line 8804
  return;
 }
 if ((HEAP32[$8 + ($7 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = sp; //@line 8813
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp; //@line 8817
  return;
 }
 $23 = HEAP32[$1 >> 2] | 0; //@line 8819
 $32 = HEAP32[$23 + ((HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 8829
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] & 127]($32) | 0) == -1)) {
  STACKTOP = sp; //@line 8838
  return;
 }
 $40 = HEAP32[$1 >> 2] | 0; //@line 8840
 $45 = HEAP32[(HEAP32[$40 >> 2] | 0) + -12 >> 2] | 0; //@line 8845
 $46 = $40; //@line 8846
 __ZNSt3__18ios_base5clearEj($46 + $45 | 0, HEAP32[$46 + ($45 + 16) >> 2] | 1); //@line 8854
 STACKTOP = sp; //@line 8855
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $1 = 0, $18 = 0, $19 = 0, $5 = 0, $7 = 0, $9 = 0, $__p$0$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 6100
 $1 = $__str; //@line 6101
 if ((HEAP8[$1] & 1) == 0) {
  $5 = $this; //@line 6106
  HEAP32[$5 + 0 >> 2] = HEAP32[$1 + 0 >> 2]; //@line 6107
  HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6107
  HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6107
  STACKTOP = sp; //@line 6108
  return;
 }
 $7 = HEAP32[$__str + 8 >> 2] | 0; //@line 6111
 $9 = HEAP32[$__str + 4 >> 2] | 0; //@line 6113
 if ($9 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6116
 }
 if ($9 >>> 0 < 11) {
  HEAP8[$this] = $9 << 1; //@line 6124
  $__p$0$i$i = $this + 1 | 0; //@line 6127
 } else {
  $18 = $9 + 16 & -16; //@line 6130
  $19 = __Znwj($18) | 0; //@line 6131
  HEAP32[$this + 8 >> 2] = $19; //@line 6133
  HEAP32[$this >> 2] = $18 | 1; //@line 6136
  HEAP32[$this + 4 >> 2] = $9; //@line 6138
  $__p$0$i$i = $19; //@line 6139
 }
 _memcpy($__p$0$i$i | 0, $7 | 0, $9 | 0) | 0; //@line 6141
 HEAP8[$__p$0$i$i + $9 | 0] = 0; //@line 6143
 STACKTOP = sp; //@line 6144
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 13568
 STACKTOP = STACKTOP + 32 | 0; //@line 13569
 $$byval_copy1 = sp; //@line 13570
 $$byval_copy = sp + 8 | 0; //@line 13571
 $1 = sp + 16 | 0; //@line 13572
 $2 = sp + 24 | 0; //@line 13573
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 13577
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 13581
 $10 = $$byval_copy; //@line 13583
 $11 = $1; //@line 13584
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 13585
 $13 = $$byval_copy1; //@line 13587
 $14 = $2; //@line 13588
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 13589
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 4768, 4800 | 0); //@line 13590
 STACKTOP = sp; //@line 13593
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 10845
 STACKTOP = STACKTOP + 32 | 0; //@line 10846
 $$byval_copy1 = sp; //@line 10847
 $$byval_copy = sp + 8 | 0; //@line 10848
 $1 = sp + 16 | 0; //@line 10849
 $2 = sp + 24 | 0; //@line 10850
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 10854
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 10858
 $10 = $$byval_copy; //@line 10860
 $11 = $1; //@line 10861
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 10862
 $13 = $$byval_copy1; //@line 10864
 $14 = $2; //@line 10865
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 10866
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 4616, 4624 | 0); //@line 10867
 STACKTOP = sp; //@line 10870
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 12759
 STACKTOP = STACKTOP + 32 | 0; //@line 12760
 $$byval_copy1 = sp; //@line 12761
 $$byval_copy = sp + 8 | 0; //@line 12762
 $1 = sp + 16 | 0; //@line 12763
 $2 = sp + 24 | 0; //@line 12764
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 12768
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 12772
 $10 = $$byval_copy; //@line 12774
 $11 = $1; //@line 12775
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 12776
 $13 = $$byval_copy1; //@line 12778
 $14 = $2; //@line 12779
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 12780
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 12781
 STACKTOP = sp; //@line 12784
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 13583
 STACKTOP = STACKTOP + 32 | 0; //@line 13584
 $$byval_copy1 = sp; //@line 13585
 $$byval_copy = sp + 8 | 0; //@line 13586
 $1 = sp + 16 | 0; //@line 13587
 $2 = sp + 24 | 0; //@line 13588
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 13592
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 13596
 $10 = $$byval_copy; //@line 13598
 $11 = $1; //@line 13599
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 13600
 $13 = $$byval_copy1; //@line 13602
 $14 = $2; //@line 13603
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 13604
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 13605
 STACKTOP = sp; //@line 13608
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 13171
 STACKTOP = STACKTOP + 32 | 0; //@line 13172
 $$byval_copy1 = sp; //@line 13173
 $$byval_copy = sp + 8 | 0; //@line 13174
 $1 = sp + 16 | 0; //@line 13175
 $2 = sp + 24 | 0; //@line 13176
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 13180
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 13184
 $10 = $$byval_copy; //@line 13186
 $11 = $1; //@line 13187
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 13188
 $13 = $$byval_copy1; //@line 13190
 $14 = $2; //@line 13191
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 13192
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 13193
 STACKTOP = sp; //@line 13196
 return;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index = 0, $$idx1$val$index1 = 0, $1 = 0, $14 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 11435
 $1 = $__vp + 4 | 0; //@line 11439
 $$idx1$val$index = $1; //@line 11440
 $$idx1$val$field = HEAPU8[$$idx1$val$index] | HEAPU8[$$idx1$val$index + 1 | 0] << 8 | HEAPU8[$$idx1$val$index + 2 | 0] << 16 | HEAPU8[$$idx1$val$index + 3 | 0] << 24; //@line 11441
 $$idx1$val$index1 = $1 + 4 | 0; //@line 11442
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1] | HEAPU8[$$idx1$val$index1 + 1 | 0] << 8 | HEAPU8[$$idx1$val$index1 + 2 | 0] << 16 | HEAPU8[$$idx1$val$index1 + 3 | 0] << 24; //@line 11443
 $4 = (HEAP32[$__vp >> 2] | 0) + ($$idx1$val$field2 >> 1) | 0; //@line 11446
 $5 = $4; //@line 11447
 if (($$idx1$val$field2 & 1 | 0) == 0) {
  $14 = $$idx1$val$field; //@line 11452
  FUNCTION_TABLE_vi[$14 & 255]($5); //@line 11453
  STACKTOP = sp; //@line 11454
  return;
 } else {
  $14 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$idx1$val$field >> 2] | 0; //@line 11461
  FUNCTION_TABLE_vi[$14 & 255]($5); //@line 11462
  STACKTOP = sp; //@line 11463
  return;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11513
 STACKTOP = STACKTOP + 32 | 0; //@line 11514
 $$byval_copy1 = sp; //@line 11515
 $$byval_copy = sp + 8 | 0; //@line 11516
 $1 = sp + 16 | 0; //@line 11517
 $2 = sp + 24 | 0; //@line 11518
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 11522
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 11526
 $10 = $$byval_copy; //@line 11528
 $11 = $1; //@line 11529
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 11530
 $13 = $$byval_copy1; //@line 11532
 $14 = $2; //@line 11533
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 11534
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 11535
 STACKTOP = sp; //@line 11538
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 12339
 STACKTOP = STACKTOP + 32 | 0; //@line 12340
 $$byval_copy1 = sp; //@line 12341
 $$byval_copy = sp + 8 | 0; //@line 12342
 $1 = sp + 16 | 0; //@line 12343
 $2 = sp + 24 | 0; //@line 12344
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 12348
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 12352
 $10 = $$byval_copy; //@line 12354
 $11 = $1; //@line 12355
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 12356
 $13 = $$byval_copy1; //@line 12358
 $14 = $2; //@line 12359
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 12360
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 12361
 STACKTOP = sp; //@line 12364
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11100
 STACKTOP = STACKTOP + 32 | 0; //@line 11101
 $$byval_copy1 = sp; //@line 11102
 $$byval_copy = sp + 8 | 0; //@line 11103
 $1 = sp + 16 | 0; //@line 11104
 $2 = sp + 24 | 0; //@line 11105
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 11109
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 11113
 $10 = $$byval_copy; //@line 11115
 $11 = $1; //@line 11116
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 11117
 $13 = $$byval_copy1; //@line 11119
 $14 = $2; //@line 11120
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 11121
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 11122
 STACKTOP = sp; //@line 11125
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11926
 STACKTOP = STACKTOP + 32 | 0; //@line 11927
 $$byval_copy1 = sp; //@line 11928
 $$byval_copy = sp + 8 | 0; //@line 11929
 $1 = sp + 16 | 0; //@line 11930
 $2 = sp + 24 | 0; //@line 11931
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 11935
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 11939
 $10 = $$byval_copy; //@line 11941
 $11 = $1; //@line 11942
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 11943
 $13 = $$byval_copy1; //@line 11945
 $14 = $2; //@line 11946
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 11947
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 11948
 STACKTOP = sp; //@line 11951
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 15419
 STACKTOP = STACKTOP + 32 | 0; //@line 15420
 $$byval_copy1 = sp; //@line 15421
 $$byval_copy = sp + 8 | 0; //@line 15422
 $1 = sp + 16 | 0; //@line 15423
 $2 = sp + 24 | 0; //@line 15424
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 15428
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 15432
 $10 = $$byval_copy; //@line 15434
 $11 = $1; //@line 15435
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 15436
 $13 = $$byval_copy1; //@line 15438
 $14 = $2; //@line 15439
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 15440
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 15441
 STACKTOP = sp; //@line 15444
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 10680
 STACKTOP = STACKTOP + 32 | 0; //@line 10681
 $$byval_copy1 = sp; //@line 10682
 $$byval_copy = sp + 8 | 0; //@line 10683
 $1 = sp + 16 | 0; //@line 10684
 $2 = sp + 24 | 0; //@line 10685
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 10689
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 10693
 $10 = $$byval_copy; //@line 10695
 $11 = $1; //@line 10696
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 10697
 $13 = $$byval_copy1; //@line 10699
 $14 = $2; //@line 10700
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 10701
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 10702
 STACKTOP = sp; //@line 10705
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 10267
 STACKTOP = STACKTOP + 32 | 0; //@line 10268
 $$byval_copy1 = sp; //@line 10269
 $$byval_copy = sp + 8 | 0; //@line 10270
 $1 = sp + 16 | 0; //@line 10271
 $2 = sp + 24 | 0; //@line 10272
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 10276
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 10280
 $10 = $$byval_copy; //@line 10282
 $11 = $1; //@line 10283
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 10284
 $13 = $$byval_copy1; //@line 10286
 $14 = $2; //@line 10287
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 10288
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 10289
 STACKTOP = sp; //@line 10292
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 2421
 STACKTOP = STACKTOP + 32 | 0; //@line 2422
 $$byval_copy1 = sp; //@line 2423
 $$byval_copy = sp + 8 | 0; //@line 2424
 $1 = sp + 16 | 0; //@line 2425
 $2 = sp + 24 | 0; //@line 2426
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 2430
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 2434
 $10 = $$byval_copy; //@line 2436
 $11 = $1; //@line 2437
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 2438
 $13 = $$byval_copy1; //@line 2440
 $14 = $2; //@line 2441
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 2442
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 2443
 STACKTOP = sp; //@line 2446
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 3231
 STACKTOP = STACKTOP + 32 | 0; //@line 3232
 $$byval_copy1 = sp; //@line 3233
 $$byval_copy = sp + 8 | 0; //@line 3234
 $1 = sp + 16 | 0; //@line 3235
 $2 = sp + 24 | 0; //@line 3236
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 3240
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 3244
 $10 = $$byval_copy; //@line 3246
 $11 = $1; //@line 3247
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 3248
 $13 = $$byval_copy1; //@line 3250
 $14 = $2; //@line 3251
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 3252
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 3253
 STACKTOP = sp; //@line 3256
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 2826
 STACKTOP = STACKTOP + 32 | 0; //@line 2827
 $$byval_copy1 = sp; //@line 2828
 $$byval_copy = sp + 8 | 0; //@line 2829
 $1 = sp + 16 | 0; //@line 2830
 $2 = sp + 24 | 0; //@line 2831
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 2835
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 2839
 $10 = $$byval_copy; //@line 2841
 $11 = $1; //@line 2842
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 2843
 $13 = $$byval_copy1; //@line 2845
 $14 = $2; //@line 2846
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 2847
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 2848
 STACKTOP = sp; //@line 2851
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 1197
 STACKTOP = STACKTOP + 32 | 0; //@line 1198
 $$byval_copy1 = sp; //@line 1199
 $$byval_copy = sp + 8 | 0; //@line 1200
 $1 = sp + 16 | 0; //@line 1201
 $2 = sp + 24 | 0; //@line 1202
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 1206
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 1210
 $10 = $$byval_copy; //@line 1212
 $11 = $1; //@line 1213
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 1214
 $13 = $$byval_copy1; //@line 1216
 $14 = $2; //@line 1217
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 1218
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 1219
 STACKTOP = sp; //@line 1222
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 2009
 STACKTOP = STACKTOP + 32 | 0; //@line 2010
 $$byval_copy1 = sp; //@line 2011
 $$byval_copy = sp + 8 | 0; //@line 2012
 $1 = sp + 16 | 0; //@line 2013
 $2 = sp + 24 | 0; //@line 2014
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 2018
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 2022
 $10 = $$byval_copy; //@line 2024
 $11 = $1; //@line 2025
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 2026
 $13 = $$byval_copy1; //@line 2028
 $14 = $2; //@line 2029
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 2030
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 2031
 STACKTOP = sp; //@line 2034
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 1603
 STACKTOP = STACKTOP + 32 | 0; //@line 1604
 $$byval_copy1 = sp; //@line 1605
 $$byval_copy = sp + 8 | 0; //@line 1606
 $1 = sp + 16 | 0; //@line 1607
 $2 = sp + 24 | 0; //@line 1608
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 1612
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 1616
 $10 = $$byval_copy; //@line 1618
 $11 = $1; //@line 1619
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 1620
 $13 = $$byval_copy1; //@line 1622
 $14 = $2; //@line 1623
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 1624
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 1625
 STACKTOP = sp; //@line 1628
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 791
 STACKTOP = STACKTOP + 32 | 0; //@line 792
 $$byval_copy1 = sp; //@line 793
 $$byval_copy = sp + 8 | 0; //@line 794
 $1 = sp + 16 | 0; //@line 795
 $2 = sp + 24 | 0; //@line 796
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 800
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 804
 $10 = $$byval_copy; //@line 806
 $11 = $1; //@line 807
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 808
 $13 = $$byval_copy1; //@line 810
 $14 = $2; //@line 811
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 812
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 813
 STACKTOP = sp; //@line 816
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 379
 STACKTOP = STACKTOP + 32 | 0; //@line 380
 $$byval_copy1 = sp; //@line 381
 $$byval_copy = sp + 8 | 0; //@line 382
 $1 = sp + 16 | 0; //@line 383
 $2 = sp + 24 | 0; //@line 384
 HEAP32[$1 >> 2] = HEAP32[$__b >> 2]; //@line 388
 HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 392
 $10 = $$byval_copy; //@line 394
 $11 = $1; //@line 395
 HEAP32[$10 + 0 >> 2] = HEAP32[$11 + 0 >> 2]; //@line 396
 $13 = $$byval_copy1; //@line 398
 $14 = $2; //@line 399
 HEAP32[$13 + 0 >> 2] = HEAP32[$14 + 0 >> 2]; //@line 400
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v); //@line 401
 STACKTOP = sp; //@line 404
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 13228
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp; //@line 13233
  return;
 }
 $4 = $info + 16 | 0; //@line 13235
 $5 = HEAP32[$4 >> 2] | 0; //@line 13236
 if (($5 | 0) == 0) {
  HEAP32[$4 >> 2] = $adjustedPtr; //@line 13239
  HEAP32[$info + 24 >> 2] = $path_below; //@line 13241
  HEAP32[$info + 36 >> 2] = 1; //@line 13243
  STACKTOP = sp; //@line 13244
  return;
 }
 if (($5 | 0) != ($adjustedPtr | 0)) {
  $13 = $info + 36 | 0; //@line 13248
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 13251
  HEAP32[$info + 24 >> 2] = 2; //@line 13253
  HEAP8[$info + 54 | 0] = 1; //@line 13255
  STACKTOP = sp; //@line 13256
  return;
 }
 $10 = $info + 24 | 0; //@line 13258
 if ((HEAP32[$10 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 13262
  return;
 }
 HEAP32[$10 >> 2] = $path_below; //@line 13264
 STACKTOP = sp; //@line 13265
 return;
}
function __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $2 = 0, $__p$0$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 5832
 $1 = _strerror($ev | 0) | 0; //@line 5833
 $2 = _strlen($1 | 0) | 0; //@line 5834
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 5837
 }
 if ($2 >>> 0 < 11) {
  HEAP8[$agg$result] = $2 << 1; //@line 5845
  $__p$0$i$i$i = $agg$result + 1 | 0; //@line 5848
  _memcpy($__p$0$i$i$i | 0, $1 | 0, $2 | 0) | 0; //@line 5849
  $17 = $__p$0$i$i$i + $2 | 0; //@line 5850
  HEAP8[$17] = 0; //@line 5851
  STACKTOP = sp; //@line 5852
  return;
 } else {
  $11 = $2 + 16 & -16; //@line 5855
  $12 = __Znwj($11) | 0; //@line 5856
  HEAP32[$agg$result + 8 >> 2] = $12; //@line 5858
  HEAP32[$agg$result >> 2] = $11 | 1; //@line 5861
  HEAP32[$agg$result + 4 >> 2] = $2; //@line 5863
  $__p$0$i$i$i = $12; //@line 5864
  _memcpy($__p$0$i$i$i | 0, $1 | 0, $2 | 0) | 0; //@line 5865
  $17 = $__p$0$i$i$i + $2 | 0; //@line 5866
  HEAP8[$17] = 0; //@line 5867
  STACKTOP = sp; //@line 5868
  return;
 }
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $16 = 0, $4 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4289
 if ((HEAP8[$this + 44 | 0] | 0) != 0) {
  $$0 = _fwrite($__s | 0, 4, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0; //@line 4298
  STACKTOP = sp; //@line 4299
  return $$0 | 0; //@line 4299
 }
 $4 = $this; //@line 4301
 if (($__n | 0) > 0) {
  $$012 = $__s; //@line 4304
  $__i$03 = 0; //@line 4304
 } else {
  $$0 = 0; //@line 4306
  STACKTOP = sp; //@line 4307
  return $$0 | 0; //@line 4307
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$012 >> 2] | 0) | 0) == -1) {
   $$0 = $__i$03; //@line 4317
   label = 6; //@line 4318
   break;
  }
  $16 = $__i$03 + 1 | 0; //@line 4321
  if (($16 | 0) < ($__n | 0)) {
   $$012 = $$012 + 4 | 0; //@line 4325
   $__i$03 = $16; //@line 4325
  } else {
   $$0 = $16; //@line 4327
   label = 6; //@line 4328
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp; //@line 4333
  return $$0 | 0; //@line 4333
 }
 return 0; //@line 4335
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $16 = 0, $4 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4941
 if ((HEAP8[$this + 44 | 0] | 0) != 0) {
  $$0 = _fwrite($__s | 0, 1, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0; //@line 4949
  STACKTOP = sp; //@line 4950
  return $$0 | 0; //@line 4950
 }
 $4 = $this; //@line 4952
 if (($__n | 0) > 0) {
  $$012 = $__s; //@line 4955
  $__i$03 = 0; //@line 4955
 } else {
  $$0 = 0; //@line 4957
  STACKTOP = sp; //@line 4958
  return $$0 | 0; //@line 4958
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$012] | 0) | 0) == -1) {
   $$0 = $__i$03; //@line 4969
   label = 6; //@line 4970
   break;
  }
  $16 = $__i$03 + 1 | 0; //@line 4973
  if (($16 | 0) < ($__n | 0)) {
   $$012 = $$012 + 1 | 0; //@line 4977
   $__i$03 = $16; //@line 4977
  } else {
   $$0 = $16; //@line 4979
   label = 6; //@line 4980
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp; //@line 4985
  return $$0 | 0; //@line 4985
 }
 return 0; //@line 4987
}
function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $1 = 0, $16 = 0, $17 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 2057
 $1 = $f + 74 | 0; //@line 2058
 $3 = HEAP8[$1] | 0; //@line 2060
 HEAP8[$1] = $3 + 255 | $3; //@line 2064
 $7 = $f + 20 | 0; //@line 2065
 $9 = $f + 44 | 0; //@line 2067
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0; //@line 2073
 }
 HEAP32[$f + 16 >> 2] = 0; //@line 2076
 HEAP32[$f + 28 >> 2] = 0; //@line 2078
 HEAP32[$7 >> 2] = 0; //@line 2079
 $16 = $f; //@line 2080
 $17 = HEAP32[$16 >> 2] | 0; //@line 2081
 if (($17 & 20 | 0) == 0) {
  $23 = HEAP32[$9 >> 2] | 0; //@line 2085
  HEAP32[$f + 8 >> 2] = $23; //@line 2087
  HEAP32[$f + 4 >> 2] = $23; //@line 2089
  $$0 = 0; //@line 2090
  STACKTOP = sp; //@line 2091
  return $$0 | 0; //@line 2091
 }
 if (($17 & 4 | 0) == 0) {
  $$0 = -1; //@line 2096
  STACKTOP = sp; //@line 2097
  return $$0 | 0; //@line 2097
 }
 HEAP32[$16 >> 2] = $17 | 32; //@line 2100
 $$0 = -1; //@line 2101
 STACKTOP = sp; //@line 2102
 return $$0 | 0; //@line 2102
}
function _strtold_l($s, $p, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $loc = $loc | 0;
 var $14 = 0, $18 = 0, $2 = 0, $3 = 0, $6 = 0.0, $f$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2147
 STACKTOP = STACKTOP + 112 | 0; //@line 2148
 $f$i$i = sp; //@line 2149
 dest = $f$i$i + 0 | 0; //@line 2151
 stop = dest + 112 | 0; //@line 2151
 do {
  HEAP32[dest >> 2] = 0; //@line 2151
  dest = dest + 4 | 0; //@line 2151
 } while ((dest | 0) < (stop | 0));
 $2 = $f$i$i + 4 | 0; //@line 2152
 HEAP32[$2 >> 2] = $s; //@line 2153
 $3 = $f$i$i + 8 | 0; //@line 2154
 HEAP32[$3 >> 2] = -1; //@line 2155
 HEAP32[$f$i$i + 44 >> 2] = $s; //@line 2157
 HEAP32[$f$i$i + 76 >> 2] = -1; //@line 2159
 ___shlim($f$i$i, 0); //@line 2160
 $6 = +___floatscan($f$i$i, 2, 1); //@line 2161
 $14 = (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) + (HEAP32[$f$i$i + 108 >> 2] | 0) | 0; //@line 2169
 if (($p | 0) == 0) {
  STACKTOP = sp; //@line 2172
  return +$6;
 }
 if (($14 | 0) == 0) {
  $18 = $s; //@line 2176
 } else {
  $18 = $s + $14 | 0; //@line 2179
 }
 HEAP32[$p >> 2] = $18; //@line 2181
 STACKTOP = sp; //@line 2182
 return +$6;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 2432
 STACKTOP = STACKTOP + 8 | 0; //@line 2433
 $rem = __stackBase__ | 0; //@line 2434
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 2435
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 2436
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 2437
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 2438
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 2439
 $4$1 = tempRet0; //@line 2440
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0; //@line 2442
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0; //@line 2443
 $10$1 = tempRet0; //@line 2444
 STACKTOP = __stackBase__; //@line 2445
 return (tempRet0 = $10$1, $10$0) | 0; //@line 2446
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 2976
 $1 = $this + 44 | 0; //@line 2977
 $2 = HEAP32[$1 >> 2] | 0; //@line 2978
 $4 = HEAP32[$this + 24 >> 2] | 0; //@line 2980
 if ($2 >>> 0 < $4 >>> 0) {
  HEAP32[$1 >> 2] = $4; //@line 2983
  $6 = $4; //@line 2984
 } else {
  $6 = $2; //@line 2986
 }
 if ((HEAP32[$this + 48 >> 2] & 8 | 0) == 0) {
  $$0 = -1; //@line 2993
  STACKTOP = sp; //@line 2994
  return $$0 | 0; //@line 2994
 }
 $11 = $this + 16 | 0; //@line 2996
 $12 = HEAP32[$11 >> 2] | 0; //@line 2997
 $15 = HEAP32[$this + 12 >> 2] | 0; //@line 3000
 if ($12 >>> 0 < $6 >>> 0) {
  HEAP32[$11 >> 2] = $6; //@line 3002
  $16 = $6; //@line 3003
 } else {
  $16 = $12; //@line 3005
 }
 if (!($15 >>> 0 < $16 >>> 0)) {
  $$0 = -1; //@line 3009
  STACKTOP = sp; //@line 3010
  return $$0 | 0; //@line 3010
 }
 $$0 = HEAPU8[$15] | 0; //@line 3014
 STACKTOP = sp; //@line 3015
 return $$0 | 0; //@line 3015
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10632
 if ((HEAP8[6104] | 0) != 0) {
  $9 = HEAP32[1524] | 0; //@line 10636
  STACKTOP = sp; //@line 10637
  return $9 | 0; //@line 10637
 }
 if ((___cxa_guard_acquire(6104) | 0) == 0) {
  $9 = HEAP32[1524] | 0; //@line 10642
  STACKTOP = sp; //@line 10643
  return $9 | 0; //@line 10643
 }
 do {
  if ((HEAP8[10816] | 0) == 0) {
   if ((___cxa_guard_acquire(10816) | 0) == 0) {
    break;
   }
   _memset(10528, 0, 288) | 0; //@line 10654
   _atexit(134, 0, ___dso_handle | 0) | 0; //@line 10655
   ___cxa_guard_release(10816); //@line 10656
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10528, 10824) | 0; //@line 10659
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10540 | 0, 10840) | 0; //@line 10660
 HEAP32[1524] = 10528; //@line 10661
 ___cxa_guard_release(6104); //@line 10662
 $9 = HEAP32[1524] | 0; //@line 10663
 STACKTOP = sp; //@line 10664
 return $9 | 0; //@line 10664
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10595
 if ((HEAP8[6088] | 0) != 0) {
  $9 = HEAP32[1520] | 0; //@line 10599
  STACKTOP = sp; //@line 10600
  return $9 | 0; //@line 10600
 }
 if ((___cxa_guard_acquire(6088) | 0) == 0) {
  $9 = HEAP32[1520] | 0; //@line 10605
  STACKTOP = sp; //@line 10606
  return $9 | 0; //@line 10606
 }
 do {
  if ((HEAP8[11144] | 0) == 0) {
   if ((___cxa_guard_acquire(11144) | 0) == 0) {
    break;
   }
   _memset(10856, 0, 288) | 0; //@line 10617
   _atexit(133, 0, ___dso_handle | 0) | 0; //@line 10618
   ___cxa_guard_release(11144); //@line 10619
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10856, 11152) | 0; //@line 10622
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10868 | 0, 11160) | 0; //@line 10623
 HEAP32[1520] = 10856; //@line 10624
 ___cxa_guard_release(6088); //@line 10625
 $9 = HEAP32[1520] | 0; //@line 10626
 STACKTOP = sp; //@line 10627
 return $9 | 0; //@line 10627
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $11 = 0, $16 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP; //@line 6956
 if ($__sz >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6959
 }
 if ($__sz >>> 0 < 2) {
  HEAP8[$this] = $__sz << 1; //@line 6967
  $__p$0 = $this + 4 | 0; //@line 6969
  _wmemcpy($__p$0, $__s, $__sz) | 0; //@line 6970
  $16 = $__p$0 + ($__sz << 2) | 0; //@line 6971
  HEAP32[$16 >> 2] = 0; //@line 6972
  STACKTOP = sp; //@line 6973
  return;
 } else {
  $8 = $__sz + 4 & -4; //@line 6976
  $11 = __Znwj($8 << 2) | 0; //@line 6979
  HEAP32[$this + 8 >> 2] = $11; //@line 6981
  HEAP32[$this >> 2] = $8 | 1; //@line 6984
  HEAP32[$this + 4 >> 2] = $__sz; //@line 6986
  $__p$0 = $11; //@line 6987
  _wmemcpy($__p$0, $__s, $__sz) | 0; //@line 6988
  $16 = $__p$0 + ($__sz << 2) | 0; //@line 6989
  HEAP32[$16 >> 2] = 0; //@line 6990
  STACKTOP = sp; //@line 6991
  return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $11 = 0, $16 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP; //@line 6999
 if ($__n >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 7002
 }
 if ($__n >>> 0 < 2) {
  HEAP8[$this] = $__n << 1; //@line 7010
  $__p$0 = $this + 4 | 0; //@line 7012
  _wmemset($__p$0, $__c, $__n) | 0; //@line 7013
  $16 = $__p$0 + ($__n << 2) | 0; //@line 7014
  HEAP32[$16 >> 2] = 0; //@line 7015
  STACKTOP = sp; //@line 7016
  return;
 } else {
  $8 = $__n + 4 & -4; //@line 7019
  $11 = __Znwj($8 << 2) | 0; //@line 7022
  HEAP32[$this + 8 >> 2] = $11; //@line 7024
  HEAP32[$this >> 2] = $8 | 1; //@line 7027
  HEAP32[$this + 4 >> 2] = $__n; //@line 7029
  $__p$0 = $11; //@line 7030
  _wmemset($__p$0, $__c, $__n) | 0; //@line 7031
  $16 = $__p$0 + ($__n << 2) | 0; //@line 7032
  HEAP32[$16 >> 2] = 0; //@line 7033
  STACKTOP = sp; //@line 7034
  return;
 }
}
function __ZNK4Card7combineES_($agg$result, $this, $b) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $b = $b | 0;
 var $14 = 0, $19 = 0, $2 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3476
 $2 = HEAP32[$this >> 2] | 0; //@line 3478
 $5 = HEAP32[$b >> 2] | 0; //@line 3481
 if (($2 | 0) == 1 & ($5 | 0) == 1) {
  $7 = ___cxa_allocate_exception(8) | 0; //@line 3485
  __ZNSt13runtime_errorC2EPKc($7, 600); //@line 3487
  ___cxa_throw($7 | 0, 2720, 32); //@line 3488
 }
 $9 = $5 + $2 | 0; //@line 3491
 HEAP32[$agg$result >> 2] = $9; //@line 3493
 if (($9 + -1 | 0) >>> 0 < 2) {
  STACKTOP = sp; //@line 3497
  return;
 }
 do {
  if ((($9 >>> 0) % 3 | 0 | 0) == 0) {
   $14 = ($9 >>> 0) / 3 | 0; //@line 3503
   if ($9 >>> 0 < 3) {
    break;
   }
   if (($14 + 2147483647 & $14 | 0) != 0) {
    break;
   }
   STACKTOP = sp; //@line 3514
   return;
  }
 } while (0);
 $19 = ___cxa_allocate_exception(8) | 0; //@line 3517
 __ZNSt13runtime_errorC2EPKc($19, 960); //@line 3519
 ___cxa_throw($19 | 0, 2720, 32); //@line 3520
}
function __ZNSt3__16locale8__globalEv() {
 var $11 = 0, $13 = 0, sp = 0;
 sp = STACKTOP; //@line 6814
 if ((HEAP8[5688] | 0) != 0) {
  $13 = HEAP32[1420] | 0; //@line 6818
  STACKTOP = sp; //@line 6819
  return $13 | 0; //@line 6819
 }
 if ((___cxa_guard_acquire(5688) | 0) == 0) {
  $13 = HEAP32[1420] | 0; //@line 6824
  STACKTOP = sp; //@line 6825
  return $13 | 0; //@line 6825
 }
 do {
  if ((HEAP8[5664] | 0) == 0) {
   if ((___cxa_guard_acquire(5664) | 0) == 0) {
    break;
   }
   __ZNSt3__16locale5__impC2Ej(10056, 1); //@line 6836
   HEAP32[1412] = 10056; //@line 6837
   HEAP32[1414] = 5648; //@line 6838
   ___cxa_guard_release(5664); //@line 6839
  }
 } while (0);
 $11 = HEAP32[HEAP32[1414] >> 2] | 0; //@line 6844
 HEAP32[1418] = $11; //@line 6845
 __ZNSt3__114__shared_count12__add_sharedEv($11); //@line 6847
 HEAP32[1420] = 5672; //@line 6848
 ___cxa_guard_release(5688); //@line 6849
 $13 = HEAP32[1420] | 0; //@line 6850
 STACKTOP = sp; //@line 6851
 return $13 | 0; //@line 6851
}
function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $12 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 13011
 $6 = ($n | 0) == 0; //@line 13017
 do {
  if ($d - $s >> 2 >>> 0 < $n >>> 0) {
   if ($6) {
    break;
   } else {
    $$in = $n; //@line 13023
   }
   do {
    $$in = $$in + -1 | 0; //@line 13026
    HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2]; //@line 13030
   } while (($$in | 0) != 0);
  } else {
   if ($6) {
    break;
   } else {
    $$025 = $s; //@line 13042
    $$07 = $d; //@line 13042
    $$16 = $n; //@line 13042
   }
   while (1) {
    $12 = $$16 + -1 | 0; //@line 13045
    HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2]; //@line 13049
    if (($12 | 0) == 0) {
     break;
    } else {
     $$16 = $12; //@line 13054
     $$07 = $$07 + 4 | 0; //@line 13054
     $$025 = $$025 + 4 | 0; //@line 13054
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13059
 return $d | 0; //@line 13059
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, u$0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 8335
 STACKTOP = STACKTOP + 16 | 0; //@line 8336
 $_frm_nxt = sp; //@line 8337
 $_to_nxt = sp + 8 | 0; //@line 8338
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 8339
 HEAP32[$_to_nxt >> 2] = $to; //@line 8340
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 8341
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 1 << 1); //@line 8348
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to); //@line 8354
 STACKTOP = sp; //@line 8355
 return $1 | 0; //@line 8355
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, u$0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 8647
 STACKTOP = STACKTOP + 16 | 0; //@line 8648
 $_frm_nxt = sp; //@line 8649
 $_to_nxt = sp + 8 | 0; //@line 8650
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 8651
 HEAP32[$_to_nxt >> 2] = $to; //@line 8652
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 8653
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm); //@line 8659
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 1 << 1); //@line 8666
 STACKTOP = sp; //@line 8667
 return $1 | 0; //@line 8667
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, u$0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 9365
 STACKTOP = STACKTOP + 16 | 0; //@line 9366
 $_frm_nxt = sp; //@line 9367
 $_to_nxt = sp + 8 | 0; //@line 9368
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 9369
 HEAP32[$_to_nxt >> 2] = $to; //@line 9370
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 9371
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 2 << 2); //@line 9378
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to); //@line 9384
 STACKTOP = sp; //@line 9385
 return $1 | 0; //@line 9385
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, u$0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 9593
 STACKTOP = STACKTOP + 16 | 0; //@line 9594
 $_frm_nxt = sp; //@line 9595
 $_to_nxt = sp + 8 | 0; //@line 9596
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 9597
 HEAP32[$_to_nxt >> 2] = $to; //@line 9598
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 9599
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm); //@line 9605
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 2 << 2); //@line 9612
 STACKTOP = sp; //@line 9613
 return $1 | 0; //@line 9613
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 7012
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low; //@line 7015
  STACKTOP = sp; //@line 7016
  return $$01$lcssa | 0; //@line 7016
 } else {
  $$013 = $low; //@line 7018
  $$04 = $vec; //@line 7018
 }
 while (1) {
  $2 = HEAP32[$$013 >> 2] | 0; //@line 7021
  if ($2 >>> 0 < 128) {
   $7 = HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($2 << 1) >> 1] | 0; //@line 7028
  } else {
   $7 = 0; //@line 7030
  }
  HEAP16[$$04 >> 1] = $7; //@line 7032
  $8 = $$013 + 4 | 0; //@line 7033
  if (($8 | 0) == ($high | 0)) {
   $$01$lcssa = $high; //@line 7037
   break;
  } else {
   $$013 = $8; //@line 7040
   $$04 = $$04 + 2 | 0; //@line 7040
  }
 }
 STACKTOP = sp; //@line 7043
 return $$01$lcssa | 0; //@line 7043
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 7294
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low; //@line 7297
  STACKTOP = sp; //@line 7298
  return $$01$lcssa | 0; //@line 7298
 }
 $4 = (($high + -4 + (0 - $low) | 0) >>> 2) + 1 | 0; //@line 7307
 $$012 = $low; //@line 7308
 $$03 = $dest; //@line 7308
 while (1) {
  $5 = HEAP32[$$012 >> 2] | 0; //@line 7310
  HEAP8[$$03] = $5 >>> 0 < 128 ? $5 & 255 : $dfault; //@line 7314
  $7 = $$012 + 4 | 0; //@line 7315
  if (($7 | 0) == ($high | 0)) {
   break;
  } else {
   $$03 = $$03 + 1 | 0; //@line 7321
   $$012 = $7; //@line 7321
  }
 }
 $$01$lcssa = $low + ($4 << 2) | 0; //@line 7325
 STACKTOP = sp; //@line 7326
 return $$01$lcssa | 0; //@line 7326
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6395
 $1 = $this; //@line 6396
 $2 = HEAP8[$1] | 0; //@line 6397
 $4 = ($2 & 1) == 0; //@line 6399
 if ($4) {
  $9 = ($2 & 255) >>> 1; //@line 6403
 } else {
  $9 = HEAP32[$this + 4 >> 2] | 0; //@line 6407
 }
 if ($9 >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $9 | 0, $__c) | 0; //@line 6412
  STACKTOP = sp; //@line 6413
  return;
 }
 if ($4) {
  HEAP8[$this + $__n + 1 | 0] = 0; //@line 6418
  HEAP8[$1] = $__n << 1; //@line 6421
  STACKTOP = sp; //@line 6422
  return;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n | 0] = 0; //@line 6427
  HEAP32[$this + 4 >> 2] = $__n; //@line 6429
  STACKTOP = sp; //@line 6430
  return;
 }
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 2413
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 2414
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 2415
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 2416
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 2417
 $4$1 = tempRet0; //@line 2418
 $7$0 = $2$0 ^ $1$0; //@line 2420
 $7$1 = $2$1 ^ $1$1; //@line 2421
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0; //@line 2423
 return (tempRet0 = tempRet0, $10$0) | 0; //@line 2424
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $10 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7092
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $low; //@line 7096
  } else {
   $$02 = $low; //@line 7098
   while (1) {
    $3 = HEAP32[$$02 >> 2] | 0; //@line 7100
    if (!($3 >>> 0 < 128)) {
     $$0$lcssa = $$02; //@line 7103
     break L1;
    }
    $10 = $$02 + 4 | 0; //@line 7112
    if ((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($3 << 1) >> 1] & $m) << 16 >> 16 == 0) {
     $$0$lcssa = $$02; //@line 7114
     break L1;
    }
    if (($10 | 0) == ($high | 0)) {
     $$0$lcssa = $high; //@line 7119
     break;
    } else {
     $$02 = $10; //@line 7122
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7127
 return $$0$lcssa | 0; //@line 7127
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 var $$pre = 0, $$pre1 = 0, $3 = 0, $i$01$i = 0, sp = 0;
 sp = STACKTOP; //@line 7567
 HEAP32[$this >> 2] = 3368; //@line 7569
 $3 = HEAP32[$this + 40 >> 2] | 0; //@line 7571
 $$pre = $this + 32 | 0; //@line 7573
 $$pre1 = $this + 36 | 0; //@line 7574
 if (($3 | 0) != 0) {
  $i$01$i = $3; //@line 7576
  do {
   $i$01$i = $i$01$i + -1 | 0; //@line 7578
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$$pre >> 2] | 0) + ($i$01$i << 2) >> 2] & 7](0, $this, HEAP32[(HEAP32[$$pre1 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0); //@line 7585
  } while (($i$01$i | 0) != 0);
 }
 __ZNSt3__16localeD2Ev($this + 28 | 0); //@line 7596
 _free(HEAP32[$$pre >> 2] | 0); //@line 7599
 _free(HEAP32[$$pre1 >> 2] | 0); //@line 7602
 _free(HEAP32[$this + 48 >> 2] | 0); //@line 7606
 _free(HEAP32[$this + 60 >> 2] | 0); //@line 7610
 STACKTOP = sp; //@line 7611
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 2285
 ret = dest | 0; //@line 2286
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0; //@line 2289
   HEAP8[dest] = HEAP8[src] | 0; //@line 2290
   dest = dest + 1 | 0; //@line 2291
   src = src + 1 | 0; //@line 2292
   num = num - 1 | 0; //@line 2293
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2296
   dest = dest + 4 | 0; //@line 2297
   src = src + 4 | 0; //@line 2298
   num = num - 4 | 0; //@line 2299
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest] = HEAP8[src] | 0; //@line 2303
  dest = dest + 1 | 0; //@line 2304
  src = src + 1 | 0; //@line 2305
  num = num - 1 | 0; //@line 2306
 }
 return ret | 0; //@line 2308
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$03 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 7399
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low; //@line 7402
  STACKTOP = sp; //@line 7403
  return $$0$lcssa | 0; //@line 7403
 } else {
  $$03 = $low; //@line 7405
 }
 while (1) {
  $2 = HEAP8[$$03] | 0; //@line 7408
  if ($2 << 24 >> 24 > -1) {
   $9 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($2 << 24 >> 24 << 2) >> 2] & 255; //@line 7417
  } else {
   $9 = $2; //@line 7419
  }
  HEAP8[$$03] = $9; //@line 7421
  $10 = $$03 + 1 | 0; //@line 7422
  if (($10 | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 7425
   break;
  } else {
   $$03 = $10; //@line 7428
  }
 }
 STACKTOP = sp; //@line 7431
 return $$0$lcssa | 0; //@line 7431
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$03 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 7457
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low; //@line 7460
  STACKTOP = sp; //@line 7461
  return $$0$lcssa | 0; //@line 7461
 } else {
  $$03 = $low; //@line 7463
 }
 while (1) {
  $2 = HEAP8[$$03] | 0; //@line 7466
  if ($2 << 24 >> 24 > -1) {
   $9 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($2 << 24 >> 24 << 2) >> 2] & 255; //@line 7475
  } else {
   $9 = $2; //@line 7477
  }
  HEAP8[$$03] = $9; //@line 7479
  $10 = $$03 + 1 | 0; //@line 7480
  if (($10 | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 7483
   break;
  } else {
   $$03 = $10; //@line 7486
  }
 }
 STACKTOP = sp; //@line 7489
 return $$0$lcssa | 0; //@line 7489
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP; //@line 9501
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0; //@line 9504
  STACKTOP = sp; //@line 9505
  return $__h$0$lcssa | 0; //@line 9505
 } else {
  $__h$02 = 0; //@line 9507
  $__p$01 = $__lo; //@line 9507
 }
 while (1) {
  $4 = (HEAP32[$__p$01 >> 2] | 0) + ($__h$02 << 4) | 0; //@line 9512
  $5 = $4 & -268435456; //@line 9513
  $8 = ($5 >>> 24 | $5) ^ $4; //@line 9516
  $9 = $__p$01 + 4 | 0; //@line 9517
  if (($9 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $8; //@line 9520
   break;
  } else {
   $__p$01 = $9; //@line 9523
   $__h$02 = $8; //@line 9523
  }
 }
 STACKTOP = sp; //@line 9526
 return $__h$0$lcssa | 0; //@line 9526
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $10 = 0, $5 = 0, $6 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP; //@line 9328
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0; //@line 9331
  STACKTOP = sp; //@line 9332
  return $__h$0$lcssa | 0; //@line 9332
 } else {
  $__h$02 = 0; //@line 9334
  $__p$01 = $__lo; //@line 9334
 }
 while (1) {
  $5 = (HEAP8[$__p$01] | 0) + ($__h$02 << 4) | 0; //@line 9340
  $6 = $5 & -268435456; //@line 9341
  $9 = ($6 >>> 24 | $6) ^ $5; //@line 9344
  $10 = $__p$01 + 1 | 0; //@line 9345
  if (($10 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $9; //@line 9348
   break;
  } else {
   $__p$01 = $10; //@line 9351
   $__h$02 = $9; //@line 9351
  }
 }
 STACKTOP = sp; //@line 9354
 return $__h$0$lcssa | 0; //@line 9354
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 7151
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low; //@line 7154
  STACKTOP = sp; //@line 7155
  return $$0$lcssa | 0; //@line 7155
 } else {
  $$02 = $low; //@line 7157
 }
 while (1) {
  $2 = HEAP32[$$02 >> 2] | 0; //@line 7160
  if ($2 >>> 0 < 128) {
   $7 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($2 << 2) >> 2] | 0; //@line 7167
  } else {
   $7 = $2; //@line 7169
  }
  HEAP32[$$02 >> 2] = $7; //@line 7171
  $8 = $$02 + 4 | 0; //@line 7172
  if (($8 | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 7175
   break;
  } else {
   $$02 = $8; //@line 7178
  }
 }
 STACKTOP = sp; //@line 7181
 return $$0$lcssa | 0; //@line 7181
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 7205
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low; //@line 7208
  STACKTOP = sp; //@line 7209
  return $$0$lcssa | 0; //@line 7209
 } else {
  $$02 = $low; //@line 7211
 }
 while (1) {
  $2 = HEAP32[$$02 >> 2] | 0; //@line 7214
  if ($2 >>> 0 < 128) {
   $7 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($2 << 2) >> 2] | 0; //@line 7221
  } else {
   $7 = $2; //@line 7223
  }
  HEAP32[$$02 >> 2] = $7; //@line 7225
  $8 = $$02 + 4 | 0; //@line 7226
  if (($8 | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 7229
   break;
  } else {
   $$02 = $8; //@line 7232
  }
 }
 STACKTOP = sp; //@line 7235
 return $$0$lcssa | 0; //@line 7235
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7543
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low; //@line 7546
  STACKTOP = sp; //@line 7547
  return $$01$lcssa | 0; //@line 7547
 } else {
  $$013 = $low; //@line 7549
  $$04 = $dest; //@line 7549
 }
 while (1) {
  $2 = HEAP8[$$013] | 0; //@line 7552
  HEAP8[$$04] = $2 << 24 >> 24 > -1 ? $2 : $dfault; //@line 7555
  $3 = $$013 + 1 | 0; //@line 7556
  if (($3 | 0) == ($high | 0)) {
   $$01$lcssa = $high; //@line 7560
   break;
  } else {
   $$04 = $$04 + 1 | 0; //@line 7563
   $$013 = $3; //@line 7563
  }
 }
 STACKTOP = sp; //@line 7566
 return $$01$lcssa | 0; //@line 7566
}
function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $l$04 = 0, $r$05 = 0, sp = 0;
 sp = STACKTOP; //@line 2189
 L1 : do {
  if (($n | 0) == 0) {
   $12 = 0; //@line 2193
  } else {
   $$03 = $n; //@line 2195
   $l$04 = $vl; //@line 2195
   $r$05 = $vr; //@line 2195
   while (1) {
    $2 = HEAP8[$l$04] | 0; //@line 2197
    $3 = HEAP8[$r$05] | 0; //@line 2198
    if (!($2 << 24 >> 24 == $3 << 24 >> 24)) {
     break;
    }
    $5 = $$03 + -1 | 0; //@line 2203
    if (($5 | 0) == 0) {
     $12 = 0; //@line 2208
     break L1;
    } else {
     $$03 = $5; //@line 2211
     $l$04 = $l$04 + 1 | 0; //@line 2211
     $r$05 = $r$05 + 1 | 0; //@line 2211
    }
   }
   $12 = ($2 & 255) - ($3 & 255) | 0; //@line 2217
  }
 } while (0);
 STACKTOP = sp; //@line 2220
 return $12 | 0; //@line 2220
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 7051
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $low; //@line 7055
  } else {
   $$02 = $low; //@line 7057
   while (1) {
    $2 = HEAP32[$$02 >> 2] | 0; //@line 7059
    if ($2 >>> 0 < 128) {
     if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($2 << 1) >> 1] & $m) << 16 >> 16 == 0)) {
      $$0$lcssa = $$02; //@line 7069
      break L1;
     }
    }
    $9 = $$02 + 4 | 0; //@line 7073
    if (($9 | 0) == ($high | 0)) {
     $$0$lcssa = $high; //@line 7076
     break;
    } else {
     $$02 = $9; //@line 7079
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7084
 return $$0$lcssa | 0; //@line 7084
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $10 = 0, $9 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP; //@line 6151
 if ($__sz >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6154
 }
 if ($__sz >>> 0 < 11) {
  HEAP8[$this] = $__sz << 1; //@line 6162
  $__p$0 = $this + 1 | 0; //@line 6165
 } else {
  $9 = $__sz + 16 & -16; //@line 6168
  $10 = __Znwj($9) | 0; //@line 6169
  HEAP32[$this + 8 >> 2] = $10; //@line 6171
  HEAP32[$this >> 2] = $9 | 1; //@line 6174
  HEAP32[$this + 4 >> 2] = $__sz; //@line 6176
  $__p$0 = $10; //@line 6177
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0; //@line 6179
 HEAP8[$__p$0 + $__sz | 0] = 0; //@line 6181
 STACKTOP = sp; //@line 6182
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6053
 _pthread_mutex_lock(2888) | 0; //@line 6054
 if ((HEAP32[$flag >> 2] | 0) == 1) {
  do {
   _pthread_cond_wait(2912, 2888) | 0; //@line 6059
  } while ((HEAP32[$flag >> 2] | 0) == 1);
 }
 if ((HEAP32[$flag >> 2] | 0) == 0) {
  HEAP32[$flag >> 2] = 1; //@line 6070
  _pthread_mutex_unlock(2888) | 0; //@line 6071
  FUNCTION_TABLE_vi[$func & 255]($arg); //@line 6072
  _pthread_mutex_lock(2888) | 0; //@line 6073
  HEAP32[$flag >> 2] = -1; //@line 6074
  _pthread_mutex_unlock(2888) | 0; //@line 6075
  _pthread_cond_broadcast(2912) | 0; //@line 6076
  STACKTOP = sp; //@line 6077
  return;
 } else {
  _pthread_mutex_unlock(2888) | 0; //@line 6079
  STACKTOP = sp; //@line 6080
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $10 = 0, $9 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP; //@line 6189
 if ($__n >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0); //@line 6192
 }
 if ($__n >>> 0 < 11) {
  HEAP8[$this] = $__n << 1; //@line 6200
  $__p$0 = $this + 1 | 0; //@line 6203
 } else {
  $9 = $__n + 16 & -16; //@line 6206
  $10 = __Znwj($9) | 0; //@line 6207
  HEAP32[$this + 8 >> 2] = $10; //@line 6209
  HEAP32[$this >> 2] = $9 | 1; //@line 6212
  HEAP32[$this + 4 >> 2] = $__n; //@line 6214
  $__p$0 = $10; //@line 6215
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0; //@line 6217
 HEAP8[$__p$0 + $__n | 0] = 0; //@line 6219
 STACKTOP = sp; //@line 6220
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0; //@line 2228
 if ((num | 0) >= 20) {
  value = value & 255; //@line 2231
  unaligned = ptr & 3; //@line 2232
  value4 = value | value << 8 | value << 16 | value << 24; //@line 2233
  stop4 = stop & ~3; //@line 2234
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0; //@line 2236
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr] = value; //@line 2238
    ptr = ptr + 1 | 0; //@line 2239
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 2243
   ptr = ptr + 4 | 0; //@line 2244
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr] = value; //@line 2248
  ptr = ptr + 1 | 0; //@line 2249
 }
 return ptr - num | 0; //@line 2251
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $12 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3840
 $1 = $this; //@line 3841
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 3846
 $7 = $1 + $6 | 0; //@line 3847
 HEAP32[$7 >> 2] = 700; //@line 3849
 $9 = $1 + ($6 + 60) | 0; //@line 3851
 HEAP32[$9 >> 2] = 720; //@line 3853
 $12 = $1 + ($6 + 8) | 0; //@line 3856
 HEAP32[$12 >> 2] = 456; //@line 3857
 if (!((HEAP8[$1 + ($6 + 40) | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + ($6 + 48) >> 2] | 0); //@line 3868
 }
 HEAP32[$12 >> 2] = 2984; //@line 3870
 __ZNSt3__16localeD2Ev($1 + ($6 + 12) | 0); //@line 3874
 __ZNSt3__18ios_baseD2Ev($9); //@line 3876
 __ZdlPv($7); //@line 3877
 STACKTOP = sp; //@line 3878
 return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $12 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 2574
 $1 = $this; //@line 2575
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 2580
 $7 = $1 + $6 | 0; //@line 2581
 HEAP32[$7 >> 2] = 292; //@line 2583
 $9 = $1 + ($6 + 56) | 0; //@line 2585
 HEAP32[$9 >> 2] = 312; //@line 2587
 $12 = $1 + ($6 + 4) | 0; //@line 2590
 HEAP32[$12 >> 2] = 456; //@line 2591
 if (!((HEAP8[$1 + ($6 + 36) | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + ($6 + 44) >> 2] | 0); //@line 2602
 }
 HEAP32[$12 >> 2] = 2984; //@line 2604
 __ZNSt3__16localeD2Ev($1 + ($6 + 8) | 0); //@line 2608
 __ZNSt3__18ios_baseD2Ev($9); //@line 2610
 __ZdlPv($7); //@line 2611
 STACKTOP = sp; //@line 2612
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 4528
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5784) | 0; //@line 4529
 $2 = $1; //@line 4530
 $3 = $this + 36 | 0; //@line 4531
 HEAP32[$3 >> 2] = $2; //@line 4532
 $9 = $this + 44 | 0; //@line 4538
 HEAP32[$9 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 127]($2) | 0; //@line 4539
 $10 = HEAP32[$3 >> 2] | 0; //@line 4540
 HEAP8[$this + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($10) | 0) & 1; //@line 4548
 if ((HEAP32[$9 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2256); //@line 4552
 } else {
  STACKTOP = sp; //@line 4555
  return;
 }
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 5179
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5776) | 0; //@line 5180
 $2 = $1; //@line 5181
 $3 = $this + 36 | 0; //@line 5182
 HEAP32[$3 >> 2] = $2; //@line 5183
 $9 = $this + 44 | 0; //@line 5189
 HEAP32[$9 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 127]($2) | 0; //@line 5190
 $10 = HEAP32[$3 >> 2] | 0; //@line 5191
 HEAP8[$this + 53 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($10) | 0) & 1; //@line 5199
 if ((HEAP32[$9 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(2256); //@line 5203
 } else {
  STACKTOP = sp; //@line 5206
  return;
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 8198
 $1 = $this + 8 | 0; //@line 8199
 $3 = _uselocale(HEAP32[$1 >> 2] | 0) | 0; //@line 8201
 $4 = _mbtowc(0, 0, 4) | 0; //@line 8202
 if (($3 | 0) != 0) {
  _uselocale($3 | 0) | 0; //@line 8205
 }
 do {
  if (($4 | 0) == 0) {
   $7 = HEAP32[$1 >> 2] | 0; //@line 8210
   if (($7 | 0) == 0) {
    $$0 = 1; //@line 8213
    break;
   }
   $9 = _uselocale($7 | 0) | 0; //@line 8216
   if (($9 | 0) == 0) {
    $$0 = 0; //@line 8219
    break;
   }
   _uselocale($9 | 0) | 0; //@line 8222
   $$0 = 0; //@line 8223
  } else {
   $$0 = -1; //@line 8225
  }
 } while (0);
 STACKTOP = sp; //@line 8228
 return $$0 | 0; //@line 8228
}
function __Znwj($size) {
 $size = $size | 0;
 var $$size = 0, $2 = 0, $4 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19618
 $$size = ($size | 0) == 0 ? 1 : $size; //@line 19620
 while (1) {
  $2 = _malloc($$size) | 0; //@line 19622
  if (($2 | 0) != 0) {
   label = 6; //@line 19625
   break;
  }
  $4 = HEAP32[3632] | 0; //@line 19628
  HEAP32[3632] = $4 + 0; //@line 19628
  if (($4 | 0) == 0) {
   label = 5; //@line 19631
   break;
  }
  FUNCTION_TABLE_v[$4 & 3](); //@line 19635
 }
 if ((label | 0) == 5) {
  $7 = ___cxa_allocate_exception(4) | 0; //@line 19638
  HEAP32[$7 >> 2] = 14544; //@line 19640
  ___cxa_throw($7 | 0, 14592, 122); //@line 19641
 } else if ((label | 0) == 6) {
  STACKTOP = sp; //@line 19645
  return $2 | 0; //@line 19645
 }
 return 0; //@line 19647
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $11 = 0, $12 = 0, $14 = 0, $19 = 0, sp = 0;
 sp = STACKTOP; //@line 5620
 HEAP32[$this >> 2] = 2584; //@line 5622
 if ((HEAP8[$msg] & 1) == 0) {
  $11 = $msg + 1 | 0; //@line 5631
 } else {
  $11 = HEAP32[$msg + 8 >> 2] | 0; //@line 5635
 }
 $12 = _strlen($11 | 0) | 0; //@line 5637
 $14 = __Znaj($12 + 13 | 0) | 0; //@line 5639
 HEAP32[$14 + 4 >> 2] = $12; //@line 5644
 HEAP32[$14 >> 2] = $12; //@line 5645
 $19 = $14 + 12 | 0; //@line 5646
 HEAP32[$this + 4 >> 2] = $19; //@line 5647
 HEAP32[$14 + 8 >> 2] = 0; //@line 5650
 _memcpy($19 | 0, $11 | 0, $12 + 1 | 0) | 0; //@line 5651
 STACKTOP = sp; //@line 5652
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $11 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 15837
 $1 = $this + 8 | 0; //@line 15838
 $2 = HEAP32[$1 >> 2] | 0; //@line 15839
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 15850
   ___cxa_guard_release(5608); //@line 15851
  }
 } while (0);
 if (($2 | 0) == (HEAP32[1400] | 0)) {
  $11 = $this; //@line 15857
  __ZdlPv($11); //@line 15858
  STACKTOP = sp; //@line 15859
  return;
 }
 _freelocale(HEAP32[$1 >> 2] | 0); //@line 15862
 $11 = $this; //@line 15863
 __ZdlPv($11); //@line 15864
 STACKTOP = sp; //@line 15865
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $11 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 15684
 $1 = $this + 8 | 0; //@line 15685
 $2 = HEAP32[$1 >> 2] | 0; //@line 15686
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 15697
   ___cxa_guard_release(5608); //@line 15698
  }
 } while (0);
 if (($2 | 0) == (HEAP32[1400] | 0)) {
  $11 = $this; //@line 15704
  __ZdlPv($11); //@line 15705
  STACKTOP = sp; //@line 15706
  return;
 }
 _freelocale(HEAP32[$1 >> 2] | 0); //@line 15709
 $11 = $this; //@line 15710
 __ZdlPv($11); //@line 15711
 STACKTOP = sp; //@line 15712
 return;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 7251
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low; //@line 7254
  STACKTOP = sp; //@line 7255
  return $$01$lcssa | 0; //@line 7255
 } else {
  $$012 = $low; //@line 7257
  $$03 = $dest; //@line 7257
 }
 while (1) {
  HEAP32[$$03 >> 2] = HEAP8[$$012] | 0; //@line 7262
  $4 = $$012 + 1 | 0; //@line 7263
  if (($4 | 0) == ($high | 0)) {
   $$01$lcssa = $high; //@line 7267
   break;
  } else {
   $$03 = $$03 + 4 | 0; //@line 7270
   $$012 = $4; //@line 7270
  }
 }
 STACKTOP = sp; //@line 7273
 return $$01$lcssa | 0; //@line 7273
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $12 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3797
 $1 = $this; //@line 3798
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 3803
 HEAP32[$1 + $6 >> 2] = 700; //@line 3806
 $9 = $1 + ($6 + 60) | 0; //@line 3808
 HEAP32[$9 >> 2] = 720; //@line 3810
 $12 = $1 + ($6 + 8) | 0; //@line 3813
 HEAP32[$12 >> 2] = 456; //@line 3814
 if (!((HEAP8[$1 + ($6 + 40) | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + ($6 + 48) >> 2] | 0); //@line 3825
 }
 HEAP32[$12 >> 2] = 2984; //@line 3827
 __ZNSt3__16localeD2Ev($1 + ($6 + 12) | 0); //@line 3831
 __ZNSt3__18ios_baseD2Ev($9); //@line 3833
 STACKTOP = sp; //@line 3834
 return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $12 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 2531
 $1 = $this; //@line 2532
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 2537
 HEAP32[$1 + $6 >> 2] = 292; //@line 2540
 $9 = $1 + ($6 + 56) | 0; //@line 2542
 HEAP32[$9 >> 2] = 312; //@line 2544
 $12 = $1 + ($6 + 4) | 0; //@line 2547
 HEAP32[$12 >> 2] = 456; //@line 2548
 if (!((HEAP8[$1 + ($6 + 36) | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + ($6 + 44) >> 2] | 0); //@line 2559
 }
 HEAP32[$12 >> 2] = 2984; //@line 2561
 __ZNSt3__16localeD2Ev($1 + ($6 + 8) | 0); //@line 2565
 __ZNSt3__18ios_baseD2Ev($9); //@line 2567
 STACKTOP = sp; //@line 2568
 return;
}
function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $10 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7627
 HEAP32[$this + 24 >> 2] = $sb; //@line 7629
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0; //@line 7633
 HEAP32[$this + 20 >> 2] = 0; //@line 7635
 HEAP32[$this + 4 >> 2] = 4098; //@line 7637
 HEAP32[$this + 12 >> 2] = 0; //@line 7639
 HEAP32[$this + 8 >> 2] = 6; //@line 7641
 $10 = $this + 28 | 0; //@line 7644
 dest = $this + 32 | 0; //@line 7646
 stop = dest + 40 | 0; //@line 7646
 do {
  HEAP32[dest >> 2] = 0; //@line 7646
  dest = dest + 4 | 0; //@line 7646
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($10); //@line 7647
 STACKTOP = sp; //@line 7648
 return;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7504
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low; //@line 7507
 } else {
  $$012 = $low; //@line 7509
  $$03 = $dest; //@line 7509
  while (1) {
   HEAP8[$$03] = HEAP8[$$012] | 0; //@line 7512
   $3 = $$012 + 1 | 0; //@line 7513
   if (($3 | 0) == ($high | 0)) {
    $$01$lcssa = $high; //@line 7517
    break;
   } else {
    $$03 = $$03 + 1 | 0; //@line 7520
    $$012 = $3; //@line 7520
   }
  }
 }
 STACKTOP = sp; //@line 7524
 return $$01$lcssa | 0; //@line 7524
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 5602
 STACKTOP = STACKTOP + 16 | 0; //@line 5603
 $__va = sp; //@line 5604
 HEAP32[$__va >> 2] = $varargs; //@line 5608
 $3 = _uselocale($__l | 0) | 0; //@line 5609
 $4 = _vsnprintf($__s | 0, $__n | 0, $__format | 0, $__va | 0) | 0; //@line 5610
 if (($3 | 0) == 0) {
  STACKTOP = sp; //@line 5613
  return $4 | 0; //@line 5613
 }
 _uselocale($3 | 0) | 0; //@line 5615
 STACKTOP = sp; //@line 5616
 return $4 | 0; //@line 5616
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $1 = 0, $16 = 0, sp = 0;
 sp = STACKTOP; //@line 5783
 STACKTOP = STACKTOP + 8 | 0; //@line 5784
 $1 = sp; //@line 5785
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($1, $this, $code); //@line 5790
 if ((HEAP32[$1 + 4 >> 2] | 0) != (HEAP32[$condition + 4 >> 2] | 0)) {
  $16 = 0; //@line 5797
  STACKTOP = sp; //@line 5798
  return $16 | 0; //@line 5798
 }
 $16 = (HEAP32[$1 >> 2] | 0) == (HEAP32[$condition >> 2] | 0); //@line 5805
 STACKTOP = sp; //@line 5806
 return $16 | 0; //@line 5806
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 14664
 STACKTOP = STACKTOP + 16 | 0; //@line 14665
 $__va = sp; //@line 14666
 HEAP32[$__va >> 2] = $varargs; //@line 14670
 $3 = _uselocale($__l | 0) | 0; //@line 14671
 $4 = _vsscanf($__s | 0, $__format | 0, $__va | 0) | 0; //@line 14672
 if (($3 | 0) == 0) {
  STACKTOP = sp; //@line 14675
  return $4 | 0; //@line 14675
 }
 _uselocale($3 | 0) | 0; //@line 14677
 STACKTOP = sp; //@line 14678
 return $4 | 0; //@line 14678
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 6728
 STACKTOP = STACKTOP + 16 | 0; //@line 6729
 $__va = sp; //@line 6730
 HEAP32[$__va >> 2] = $varargs; //@line 6734
 $3 = _uselocale($__l | 0) | 0; //@line 6735
 $4 = _vasprintf($__s | 0, $__format | 0, $__va | 0) | 0; //@line 6736
 if (($3 | 0) == 0) {
  STACKTOP = sp; //@line 6739
  return $4 | 0; //@line 6739
 }
 _uselocale($3 | 0) | 0; //@line 6741
 STACKTOP = sp; //@line 6742
 return $4 | 0; //@line 6742
}
function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 12983
 if (($n | 0) == 0) {
  STACKTOP = sp; //@line 12986
  return $d | 0; //@line 12986
 } else {
  $$014 = $n; //@line 12988
  $$023 = $s; //@line 12988
  $$05 = $d; //@line 12988
 }
 while (1) {
  $2 = $$014 + -1 | 0; //@line 12991
  HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2]; //@line 12995
  if (($2 | 0) == 0) {
   break;
  } else {
   $$05 = $$05 + 4 | 0; //@line 13000
   $$023 = $$023 + 4 | 0; //@line 13000
   $$014 = $2; //@line 13000
  }
 }
 STACKTOP = sp; //@line 13003
 return $d | 0; //@line 13003
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5706
 HEAP32[$this >> 2] = 2584; //@line 5708
 $2 = $this + 4 | 0; //@line 5709
 $4 = (HEAP32[$2 >> 2] | 0) + -4 | 0; //@line 5712
 $5 = HEAP32[$4 >> 2] | 0; //@line 5713
 HEAP32[$4 >> 2] = $5 + -1; //@line 5713
 if (($5 + -1 | 0) >= 0) {
  $10 = $this; //@line 5717
  __ZNSt9exceptionD2Ev($10 | 0); //@line 5718
  STACKTOP = sp; //@line 5719
  return;
 }
 __ZdaPv((HEAP32[$2 >> 2] | 0) + -12 | 0); //@line 5723
 $10 = $this; //@line 5724
 __ZNSt9exceptionD2Ev($10 | 0); //@line 5725
 STACKTOP = sp; //@line 5726
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5585
 HEAP32[$this >> 2] = 2560; //@line 5587
 $2 = $this + 4 | 0; //@line 5588
 $4 = (HEAP32[$2 >> 2] | 0) + -4 | 0; //@line 5591
 $5 = HEAP32[$4 >> 2] | 0; //@line 5592
 HEAP32[$4 >> 2] = $5 + -1; //@line 5592
 if (($5 + -1 | 0) >= 0) {
  $10 = $this; //@line 5596
  __ZNSt9exceptionD2Ev($10 | 0); //@line 5597
  STACKTOP = sp; //@line 5598
  return;
 }
 __ZdaPv((HEAP32[$2 >> 2] | 0) + -12 | 0); //@line 5602
 $10 = $this; //@line 5603
 __ZNSt9exceptionD2Ev($10 | 0); //@line 5604
 STACKTOP = sp; //@line 5605
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 15870
 $1 = $this + 8 | 0; //@line 15871
 $2 = HEAP32[$1 >> 2] | 0; //@line 15872
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 15883
   ___cxa_guard_release(5608); //@line 15884
  }
 } while (0);
 if (($2 | 0) == (HEAP32[1400] | 0)) {
  STACKTOP = sp; //@line 15890
  return;
 }
 _freelocale(HEAP32[$1 >> 2] | 0); //@line 15893
 STACKTOP = sp; //@line 15894
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 15717
 $1 = $this + 8 | 0; //@line 15718
 $2 = HEAP32[$1 >> 2] | 0; //@line 15719
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 15730
   ___cxa_guard_release(5608); //@line 15731
  }
 } while (0);
 if (($2 | 0) == (HEAP32[1400] | 0)) {
  STACKTOP = sp; //@line 15737
  return;
 }
 _freelocale(HEAP32[$1 >> 2] | 0); //@line 15740
 STACKTOP = sp; //@line 15741
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5968
 HEAP32[$this >> 2] = 5800; //@line 5970
 $2 = $this + 8 | 0; //@line 5971
 $3 = HEAP32[$2 >> 2] | 0; //@line 5972
 do {
  if ((HEAP8[5608] | 0) == 0) {
   if ((___cxa_guard_acquire(5608) | 0) == 0) {
    break;
   }
   HEAP32[1400] = _newlocale(2147483647, 5616, 0) | 0; //@line 5983
   ___cxa_guard_release(5608); //@line 5984
  }
 } while (0);
 if (($3 | 0) == (HEAP32[1400] | 0)) {
  STACKTOP = sp; //@line 5990
  return;
 }
 _freelocale(HEAP32[$2 >> 2] | 0); //@line 5993
 STACKTOP = sp; //@line 5994
 return;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3767
 HEAP32[$this >> 2] = 700; //@line 3769
 HEAP32[$this + 60 >> 2] = 720; //@line 3771
 $3 = $this + 8 | 0; //@line 3772
 HEAP32[$3 >> 2] = 456; //@line 3773
 if (!((HEAP8[$this + 40 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 48 >> 2] | 0); //@line 3782
 }
 HEAP32[$3 >> 2] = 2984; //@line 3784
 __ZNSt3__16localeD2Ev($this + 12 | 0); //@line 3786
 __ZNSt3__18ios_baseD2Ev($this + 60 | 0); //@line 3788
 __ZdlPv($this); //@line 3790
 STACKTOP = sp; //@line 3791
 return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 2501
 HEAP32[$this >> 2] = 292; //@line 2503
 HEAP32[$this + 56 >> 2] = 312; //@line 2505
 $3 = $this + 4 | 0; //@line 2506
 HEAP32[$3 >> 2] = 456; //@line 2507
 if (!((HEAP8[$this + 36 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 44 >> 2] | 0); //@line 2516
 }
 HEAP32[$3 >> 2] = 2984; //@line 2518
 __ZNSt3__16localeD2Ev($this + 8 | 0); //@line 2520
 __ZNSt3__18ios_baseD2Ev($this + 56 | 0); //@line 2522
 __ZdlPv($this); //@line 2524
 STACKTOP = sp; //@line 2525
 return;
}
function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2107
 STACKTOP = STACKTOP + 8 | 0; //@line 2108
 $c = sp; //@line 2109
 if ((HEAP32[$f + 8 >> 2] | 0) == 0) {
  if ((___toread($f) | 0) == 0) {
   label = 3; //@line 2117
  } else {
   $$0 = -1; //@line 2119
  }
 } else {
  label = 3; //@line 2122
 }
 do {
  if ((label | 0) == 3) {
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) != 1) {
    $$0 = -1; //@line 2131
    break;
   }
   $$0 = HEAPU8[$c] | 0; //@line 2136
  }
 } while (0);
 STACKTOP = sp; //@line 2139
 return $$0 | 0; //@line 2139
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10689
 if ((HEAP8[6168] | 0) != 0) {
  STACKTOP = sp; //@line 10693
  return 6152; //@line 10693
 }
 if ((___cxa_guard_acquire(6168) | 0) == 0) {
  STACKTOP = sp; //@line 10698
  return 6152; //@line 10698
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6152, 6176, _wcslen(6176) | 0); //@line 10701
 _atexit(136, 6152, ___dso_handle | 0) | 0; //@line 10702
 ___cxa_guard_release(6168); //@line 10703
 STACKTOP = sp; //@line 10704
 return 6152; //@line 10704
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10809
 if ((HEAP8[6536] | 0) != 0) {
  STACKTOP = sp; //@line 10813
  return 6520; //@line 10813
 }
 if ((___cxa_guard_acquire(6536) | 0) == 0) {
  STACKTOP = sp; //@line 10818
  return 6520; //@line 10818
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6520, 6544, _wcslen(6544) | 0); //@line 10821
 _atexit(136, 6520, ___dso_handle | 0) | 0; //@line 10822
 ___cxa_guard_release(6536); //@line 10823
 STACKTOP = sp; //@line 10824
 return 6520; //@line 10824
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10769
 if ((HEAP8[6384] | 0) != 0) {
  STACKTOP = sp; //@line 10773
  return 6368; //@line 10773
 }
 if ((___cxa_guard_acquire(6384) | 0) == 0) {
  STACKTOP = sp; //@line 10778
  return 6368; //@line 10778
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6368, 6392, _wcslen(6392) | 0); //@line 10781
 _atexit(136, 6368, ___dso_handle | 0) | 0; //@line 10782
 ___cxa_guard_release(6384); //@line 10783
 STACKTOP = sp; //@line 10784
 return 6368; //@line 10784
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10729
 if ((HEAP8[6272] | 0) != 0) {
  STACKTOP = sp; //@line 10733
  return 6256; //@line 10733
 }
 if ((___cxa_guard_acquire(6272) | 0) == 0) {
  STACKTOP = sp; //@line 10738
  return 6256; //@line 10738
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(6256, 6280, _wcslen(6280) | 0); //@line 10741
 _atexit(136, 6256, ___dso_handle | 0) | 0; //@line 10742
 ___cxa_guard_release(6272); //@line 10743
 STACKTOP = sp; //@line 10744
 return 6256; //@line 10744
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 1579
 HEAP32[$this >> 2] = 292; //@line 1581
 HEAP32[$this + 56 >> 2] = 312; //@line 1583
 $3 = $this + 4 | 0; //@line 1584
 HEAP32[$3 >> 2] = 456; //@line 1585
 if (!((HEAP8[$this + 36 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 44 >> 2] | 0); //@line 1594
 }
 HEAP32[$3 >> 2] = 2984; //@line 1596
 __ZNSt3__16localeD2Ev($this + 8 | 0); //@line 1598
 __ZNSt3__18ios_baseD2Ev($this + 56 | 0); //@line 1600
 STACKTOP = sp; //@line 1601
 return;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 976
 HEAP32[$this >> 2] = 700; //@line 978
 HEAP32[$this + 60 >> 2] = 720; //@line 980
 $3 = $this + 8 | 0; //@line 981
 HEAP32[$3 >> 2] = 456; //@line 982
 if (!((HEAP8[$this + 40 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 48 >> 2] | 0); //@line 991
 }
 HEAP32[$3 >> 2] = 2984; //@line 993
 __ZNSt3__16localeD2Ev($this + 12 | 0); //@line 995
 __ZNSt3__18ios_baseD2Ev($this + 60 | 0); //@line 997
 STACKTOP = sp; //@line 998
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 2454
 $y_sroa_0_0_extract_trunc = $b$0; //@line 2455
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 2456
 $1$1 = tempRet0; //@line 2457
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 2459
}
function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5658
 HEAP32[$this >> 2] = 2584; //@line 5660
 $2 = _strlen($msg | 0) | 0; //@line 5661
 $4 = __Znaj($2 + 13 | 0) | 0; //@line 5663
 HEAP32[$4 + 4 >> 2] = $2; //@line 5669
 HEAP32[$4 >> 2] = $2; //@line 5670
 $10 = $4 + 12 | 0; //@line 5671
 HEAP32[$this + 4 >> 2] = $10; //@line 5672
 HEAP32[$4 + 8 >> 2] = 0; //@line 5675
 _memcpy($10 | 0, $msg | 0, $2 + 1 | 0) | 0; //@line 5676
 STACKTOP = sp; //@line 5677
 return;
}
function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5537
 HEAP32[$this >> 2] = 2560; //@line 5539
 $2 = _strlen($msg | 0) | 0; //@line 5540
 $4 = __Znaj($2 + 13 | 0) | 0; //@line 5542
 HEAP32[$4 + 4 >> 2] = $2; //@line 5548
 HEAP32[$4 >> 2] = $2; //@line 5549
 $10 = $4 + 12 | 0; //@line 5550
 HEAP32[$this + 4 >> 2] = $10; //@line 5551
 HEAP32[$4 + 8 >> 2] = 0; //@line 5554
 _memcpy($10 | 0, $msg | 0, $2 + 1 | 0) | 0; //@line 5555
 STACKTOP = sp; //@line 5556
 return;
}
function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $3 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 1882
 HEAP32[$f + 104 >> 2] = $lim; //@line 1884
 $3 = HEAP32[$f + 8 >> 2] | 0; //@line 1886
 $5 = HEAP32[$f + 4 >> 2] | 0; //@line 1888
 $8 = $3 - $5 | 0; //@line 1891
 HEAP32[$f + 108 >> 2] = $8; //@line 1893
 if (($lim | 0) != 0 & ($8 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $5 + $lim; //@line 1900
  STACKTOP = sp; //@line 1901
  return;
 } else {
  HEAP32[$f + 100 >> 2] = $3; //@line 1904
  STACKTOP = sp; //@line 1905
  return;
 }
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 4208
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0; //@line 4213
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5784) | 0; //@line 4214
 $6 = $5; //@line 4215
 HEAP32[$this + 36 >> 2] = $6; //@line 4217
 HEAP8[$this + 44 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1; //@line 4225
 STACKTOP = sp; //@line 4226
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 4860
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0; //@line 4865
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5776) | 0; //@line 4866
 $6 = $5; //@line 4867
 HEAP32[$this + 36 >> 2] = $6; //@line 4869
 HEAP8[$this + 44 | 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1; //@line 4877
 STACKTOP = sp; //@line 4878
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 8062
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) {
  $$0 = -1; //@line 8070
  STACKTOP = sp; //@line 8071
  return $$0 | 0; //@line 8071
 }
 $7 = $this + 12 | 0; //@line 8073
 $8 = HEAP32[$7 >> 2] | 0; //@line 8074
 HEAP32[$7 >> 2] = $8 + 4; //@line 8076
 $$0 = HEAP32[$8 >> 2] | 0; //@line 8078
 STACKTOP = sp; //@line 8079
 return $$0 | 0; //@line 8079
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 2315
  src = src + num | 0; //@line 2316
  dest = dest + num | 0; //@line 2317
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 2319
   src = src - 1 | 0; //@line 2320
   num = num - 1 | 0; //@line 2321
   HEAP8[dest] = HEAP8[src] | 0; //@line 2322
  }
  dest = ret; //@line 2324
 } else {
  _memcpy(dest, src, num) | 0; //@line 2326
 }
 return dest | 0; //@line 2328
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 7812
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0) == -1) {
  $$0 = -1; //@line 7820
  STACKTOP = sp; //@line 7821
  return $$0 | 0; //@line 7821
 }
 $7 = $this + 12 | 0; //@line 7823
 $8 = HEAP32[$7 >> 2] | 0; //@line 7824
 HEAP32[$7 >> 2] = $8 + 1; //@line 7826
 $$0 = HEAPU8[$8] | 0; //@line 7829
 STACKTOP = sp; //@line 7830
 return $$0 | 0; //@line 7830
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 5517
 $1 = $this + 4 | 0; //@line 5518
 $2 = HEAP32[$1 >> 2] | 0; //@line 5519
 HEAP32[$1 >> 2] = $2 + -1; //@line 5519
 if (($2 | 0) != 0) {
  $$0 = 0; //@line 5522
  STACKTOP = sp; //@line 5523
  return $$0 | 0; //@line 5523
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 255]($this); //@line 5529
 $$0 = 1; //@line 5530
 STACKTOP = sp; //@line 5531
 return $$0 | 0; //@line 5531
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 2398
 $2 = $b & 65535; //@line 2399
 $3 = Math_imul($2, $1) | 0; //@line 2400
 $6 = $a >>> 16; //@line 2401
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 2402
 $11 = $b >>> 16; //@line 2403
 $12 = Math_imul($11, $1) | 0; //@line 2404
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 2405
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 var $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5682
 HEAP32[$this >> 2] = 2584; //@line 5684
 $2 = $this + 4 | 0; //@line 5685
 $4 = (HEAP32[$2 >> 2] | 0) + -4 | 0; //@line 5688
 $5 = HEAP32[$4 >> 2] | 0; //@line 5689
 HEAP32[$4 >> 2] = $5 + -1; //@line 5689
 if (($5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[$2 >> 2] | 0) + -12 | 0); //@line 5695
 }
 __ZNSt9exceptionD2Ev($this | 0); //@line 5698
 __ZdlPv($this); //@line 5700
 STACKTOP = sp; //@line 5701
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, u$0, u$1, u$2, u$3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 u$2 = u$2 | 0;
 u$3 = u$3 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 7948
 HEAP32[$2 >> 2] = 0; //@line 7950
 HEAP32[$2 + 4 >> 2] = 0; //@line 7953
 $7 = $agg$result + 8 | 0; //@line 7955
 HEAP32[$7 >> 2] = -1; //@line 7957
 HEAP32[$7 + 4 >> 2] = -1; //@line 7960
 STACKTOP = STACKTOP; //@line 7961
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, u$0, u$1, u$2, u$3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 u$2 = u$2 | 0;
 u$3 = u$3 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 7697
 HEAP32[$2 >> 2] = 0; //@line 7699
 HEAP32[$2 + 4 >> 2] = 0; //@line 7702
 $7 = $agg$result + 8 | 0; //@line 7704
 HEAP32[$7 >> 2] = -1; //@line 7706
 HEAP32[$7 + 4 >> 2] = -1; //@line 7709
 STACKTOP = STACKTOP; //@line 7710
 return;
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 var $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5739
 HEAP32[$this >> 2] = 2560; //@line 5741
 $2 = $this + 4 | 0; //@line 5742
 $4 = (HEAP32[$2 >> 2] | 0) + -4 | 0; //@line 5745
 $5 = HEAP32[$4 >> 2] | 0; //@line 5746
 HEAP32[$4 >> 2] = $5 + -1; //@line 5746
 if (($5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[$2 >> 2] | 0) + -12 | 0); //@line 5752
 }
 __ZNSt9exceptionD2Ev($this | 0); //@line 5755
 __ZdlPv($this); //@line 5757
 STACKTOP = sp; //@line 5758
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 5561
 HEAP32[$this >> 2] = 2560; //@line 5563
 $2 = $this + 4 | 0; //@line 5564
 $4 = (HEAP32[$2 >> 2] | 0) + -4 | 0; //@line 5567
 $5 = HEAP32[$4 >> 2] | 0; //@line 5568
 HEAP32[$4 >> 2] = $5 + -1; //@line 5568
 if (($5 + -1 | 0) < 0) {
  __ZdaPv((HEAP32[$2 >> 2] | 0) + -12 | 0); //@line 5574
 }
 __ZNSt9exceptionD2Ev($this | 0); //@line 5577
 __ZdlPv($this); //@line 5579
 STACKTOP = sp; //@line 5580
 return;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr]; //@line 32
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0]; //@line 33
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0]; //@line 34
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0]; //@line 35
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[ptr + 4 | 0]; //@line 36
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[ptr + 5 | 0]; //@line 37
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[ptr + 6 | 0]; //@line 38
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[ptr + 7 | 0]; //@line 39
}
function _get_next_move($wh, $board, $cb, $level) {
 $wh = $wh | 0;
 $board = $board | 0;
 $cb = $cb | 0;
 $level = $level | 0;
 var $serialized_board = 0, sp = 0;
 sp = STACKTOP; //@line 1736
 STACKTOP = STACKTOP + 256 | 0; //@line 1737
 $serialized_board = sp; //@line 1738
 HEAP32[$serialized_board >> 2] = $level; //@line 1741
 _emscripten_call_worker($wh | 0, 240, $serialized_board | 0, (_serialize_board($board, $serialized_board + 4 | 0, 252) | 0) + 4 | 0, 6, $cb | 0); //@line 1746
 STACKTOP = sp; //@line 1747
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $__sp, $__wch) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__sp = $__sp | 0;
 $__wch = $__wch | 0;
 var $6 = 0, sp = 0;
 sp = STACKTOP; //@line 2956
 $6 = $__sp + 8 | 0; //@line 2962
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 31]($agg$result, $this, HEAP32[$6 >> 2] | 0, HEAP32[$6 + 4 >> 2] | 0, 0, $__wch); //@line 2969
 STACKTOP = sp; //@line 2970
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $2 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 8297
 $2 = HEAP32[$this + 8 >> 2] | 0; //@line 8299
 do {
  if (($2 | 0) == 0) {
   $6 = 1; //@line 8303
  } else {
   $4 = _uselocale($2 | 0) | 0; //@line 8305
   if (($4 | 0) == 0) {
    $6 = 4; //@line 8308
    break;
   }
   _uselocale($4 | 0) | 0; //@line 8311
   $6 = 4; //@line 8312
  }
 } while (0);
 STACKTOP = sp; //@line 8315
 return $6 | 0; //@line 8315
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10789
 do {
  if ((HEAP8[6496] | 0) == 0) {
   if ((___cxa_guard_acquire(6496) | 0) == 0) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6480, 6504, 11); //@line 10799
   _atexit(135, 6480, ___dso_handle | 0) | 0; //@line 10800
   ___cxa_guard_release(6496); //@line 10801
  }
 } while (0);
 STACKTOP = sp; //@line 10804
 return 6480; //@line 10804
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10749
 do {
  if ((HEAP8[6336] | 0) == 0) {
   if ((___cxa_guard_acquire(6336) | 0) == 0) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6320, 6344, 20); //@line 10759
   _atexit(135, 6320, ___dso_handle | 0) | 0; //@line 10760
   ___cxa_guard_release(6336); //@line 10761
  }
 } while (0);
 STACKTOP = sp; //@line 10764
 return 6320; //@line 10764
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10669
 do {
  if ((HEAP8[6128] | 0) == 0) {
   if ((___cxa_guard_acquire(6128) | 0) == 0) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6112, 6136, 8); //@line 10679
   _atexit(135, 6112, ___dso_handle | 0) | 0; //@line 10680
   ___cxa_guard_release(6128); //@line 10681
  }
 } while (0);
 STACKTOP = sp; //@line 10684
 return 6112; //@line 10684
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10709
 do {
  if ((HEAP8[6232] | 0) == 0) {
   if ((___cxa_guard_acquire(6232) | 0) == 0) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(6216, 6240, 8); //@line 10719
   _atexit(135, 6216, ___dso_handle | 0) | 0; //@line 10720
   ___cxa_guard_release(6232); //@line 10721
  }
 } while (0);
 STACKTOP = sp; //@line 10724
 return 6216; //@line 10724
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, u$0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 u$0 = u$0 | 0;
 var $10 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 5716
 if ((HEAP8[$__nm] & 1) == 0) {
  $9 = $__nm + 1 | 0; //@line 5724
 } else {
  $9 = HEAP32[$__nm + 8 >> 2] | 0; //@line 5728
 }
 $10 = _catopen($9 | 0, 1) | 0; //@line 5730
 STACKTOP = sp; //@line 5735
 return $10 >>> (($10 | 0) != (-1 | 0) | 0) | 0; //@line 5735
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, u$0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 u$0 = u$0 | 0;
 var $10 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 5559
 if ((HEAP8[$__nm] & 1) == 0) {
  $9 = $__nm + 1 | 0; //@line 5567
 } else {
  $9 = HEAP32[$__nm + 8 >> 2] | 0; //@line 5571
 }
 $10 = _catopen($9 | 0, 1) | 0; //@line 5573
 STACKTOP = sp; //@line 5578
 return $10 >>> (($10 | 0) != (-1 | 0) | 0) | 0; //@line 5578
}
function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 13066
 if (($n | 0) != 0) {
  $$012 = $n; //@line 13069
  $$03 = $d; //@line 13069
  while (1) {
   $2 = $$012 + -1 | 0; //@line 13071
   HEAP32[$$03 >> 2] = $c; //@line 13073
   if (($2 | 0) == 0) {
    break;
   } else {
    $$03 = $$03 + 4 | 0; //@line 13078
    $$012 = $2; //@line 13078
   }
  }
 }
 STACKTOP = sp; //@line 13082
 return $d | 0; //@line 13082
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9131
 if (($ev | 0) == 1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 3280, 35); //@line 9134
  STACKTOP = sp; //@line 9135
  return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev); //@line 9138
  STACKTOP = sp; //@line 9139
  return;
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, u$0, u$1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 7971
 HEAP32[$2 >> 2] = 0; //@line 7973
 HEAP32[$2 + 4 >> 2] = 0; //@line 7976
 $7 = $agg$result + 8 | 0; //@line 7978
 HEAP32[$7 >> 2] = -1; //@line 7980
 HEAP32[$7 + 4 >> 2] = -1; //@line 7983
 STACKTOP = STACKTOP; //@line 7984
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, u$0, u$1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 7720
 HEAP32[$2 >> 2] = 0; //@line 7722
 HEAP32[$2 + 4 >> 2] = 0; //@line 7725
 $7 = $agg$result + 8 | 0; //@line 7727
 HEAP32[$7 >> 2] = -1; //@line 7729
 HEAP32[$7 + 4 >> 2] = -1; //@line 7732
 STACKTOP = STACKTOP; //@line 7733
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 2638
 $1 = $this; //@line 2639
 HEAP32[$1 >> 2] = 456; //@line 2640
 if (!((HEAP8[$this + 32 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 40 >> 2] | 0); //@line 2649
 }
 HEAP32[$1 >> 2] = 2984; //@line 2651
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 2653
 __ZdlPv($this); //@line 2655
 STACKTOP = sp; //@line 2656
 return;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $7 = 0, sp = 0;
 sp = STACKTOP; //@line 5813
 if ((HEAP32[$code + 4 >> 2] | 0) != ($this | 0)) {
  $7 = 0; //@line 5818
  STACKTOP = sp; //@line 5819
  return $7 | 0; //@line 5819
 }
 $7 = (HEAP32[$code >> 2] | 0) == ($condition | 0); //@line 5824
 STACKTOP = sp; //@line 5825
 return $7 | 0; //@line 5825
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4175
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(1064) | 0; //@line 4176
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(1240) | 0; //@line 4177
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1416) | 0; //@line 4178
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1592) | 0; //@line 4179
 STACKTOP = sp; //@line 4180
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 2476
 STACKTOP = STACKTOP + 8 | 0; //@line 2477
 $rem = __stackBase__ | 0; //@line 2478
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 2479
 STACKTOP = __stackBase__; //@line 2480
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 2481
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) | 0] | 0; //@line 2384
 if ((ret | 0) < 8) return ret | 0; //@line 2385
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) | 0] | 0; //@line 2386
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 2387
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) | 0] | 0; //@line 2388
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 2389
 return (HEAP8[cttz_i8 + (x >>> 24) | 0] | 0) + 24 | 0; //@line 2390
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) | 0] | 0; //@line 2372
 if ((ret | 0) < 8) return ret | 0; //@line 2373
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) | 0] | 0; //@line 2374
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 2375
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) | 0] | 0; //@line 2376
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 2377
 return (HEAP8[ctlz_i8 + (x & 255) | 0] | 0) + 24 | 0; //@line 2378
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 2617
 $1 = $this; //@line 2618
 HEAP32[$1 >> 2] = 456; //@line 2619
 if (!((HEAP8[$this + 32 | 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$this + 40 >> 2] | 0); //@line 2628
 }
 HEAP32[$1 >> 2] = 2984; //@line 2630
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 2632
 STACKTOP = sp; //@line 2633
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $7 = 0, sp = 0;
 sp = STACKTOP; //@line 6991
 if (!($c >>> 0 < 128)) {
  $7 = 0; //@line 6994
  STACKTOP = sp; //@line 6995
  return $7 | 0; //@line 6995
 }
 $7 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; //@line 7003
 STACKTOP = sp; //@line 7004
 return $7 | 0; //@line 7004
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, u$0, $frm, u$1, $frm_nxt, $to, u$2, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 u$1 = u$1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 u$2 = u$2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 7587
 HEAP32[$to_nxt >> 2] = $to; //@line 7588
 STACKTOP = STACKTOP; //@line 7589
 return 3; //@line 7589
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $7 = 0, sp = 0;
 sp = STACKTOP; //@line 7437
 if (!($c << 24 >> 24 > -1)) {
  $7 = $c; //@line 7440
  STACKTOP = sp; //@line 7441
  return $7 | 0; //@line 7441
 }
 $7 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 24 >> 24 << 2) >> 2] & 255; //@line 7449
 STACKTOP = sp; //@line 7450
 return $7 | 0; //@line 7450
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, u$0, $frm, u$1, $frm_nxt, $to, u$2, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 u$1 = u$1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 u$2 = u$2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 7602
 HEAP32[$to_nxt >> 2] = $to; //@line 7603
 STACKTOP = STACKTOP; //@line 7604
 return 3; //@line 7604
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16336
 $this2$i$i$i = $agg$result; //@line 16337
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16338
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16338
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16338
 STACKTOP = sp; //@line 16339
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16251
 $this2$i$i$i = $agg$result; //@line 16252
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16253
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16253
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16253
 STACKTOP = sp; //@line 16254
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16166
 $this2$i$i$i = $agg$result; //@line 16167
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16168
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16168
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16168
 STACKTOP = sp; //@line 16169
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16081
 $this2$i$i$i = $agg$result; //@line 16082
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16083
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16083
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16083
 STACKTOP = sp; //@line 16084
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, u$0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9034
 $1 = __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0; //@line 9035
 STACKTOP = sp; //@line 9036
 return $1 | 0; //@line 9036
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, u$0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9927
 $1 = __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0; //@line 9928
 STACKTOP = sp; //@line 9929
 return $1 | 0; //@line 9929
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16327
 $this2$i$i$i = $agg$result; //@line 16328
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16329
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16329
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16329
 STACKTOP = sp; //@line 16330
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16242
 $this2$i$i$i = $agg$result; //@line 16243
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16244
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16244
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16244
 STACKTOP = sp; //@line 16245
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16157
 $this2$i$i$i = $agg$result; //@line 16158
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16159
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16159
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16159
 STACKTOP = sp; //@line 16160
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16072
 $this2$i$i$i = $agg$result; //@line 16073
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16074
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16074
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16074
 STACKTOP = sp; //@line 16075
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $7 = 0, sp = 0;
 sp = STACKTOP; //@line 7379
 if (!($c << 24 >> 24 > -1)) {
  $7 = $c; //@line 7382
  STACKTOP = sp; //@line 7383
  return $7 | 0; //@line 7383
 }
 $7 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (($c & 255) << 2) >> 2] & 255; //@line 7391
 STACKTOP = sp; //@line 7392
 return $7 | 0; //@line 7392
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16318
 $this2$i$i$i = $agg$result; //@line 16319
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16320
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16320
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16320
 STACKTOP = sp; //@line 16321
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16233
 $this2$i$i$i = $agg$result; //@line 16234
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16235
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16235
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16235
 STACKTOP = sp; //@line 16236
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16148
 $this2$i$i$i = $agg$result; //@line 16149
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16150
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16150
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16150
 STACKTOP = sp; //@line 16151
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $this2$i$i$i = 0, sp = 0;
 sp = STACKTOP; //@line 16063
 $this2$i$i$i = $agg$result; //@line 16064
 HEAP32[$this2$i$i$i + 0 >> 2] = 0; //@line 16065
 HEAP32[$this2$i$i$i + 4 >> 2] = 0; //@line 16065
 HEAP32[$this2$i$i$i + 8 >> 2] = 0; //@line 16065
 STACKTOP = sp; //@line 16066
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7356
 HEAP32[$this >> 2] = 5728; //@line 7358
 $3 = HEAP32[$this + 8 >> 2] | 0; //@line 7360
 if (($3 | 0) == 0) {
  STACKTOP = sp; //@line 7363
  return;
 }
 if ((HEAP8[$this + 12 | 0] | 0) == 0) {
  STACKTOP = sp; //@line 7369
  return;
 }
 __ZdaPv($3); //@line 7372
 STACKTOP = sp; //@line 7373
 return;
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP; //@line 7133
 if (!($c >>> 0 < 128)) {
  $5 = $c; //@line 7136
  STACKTOP = sp; //@line 7137
  return $5 | 0; //@line 7137
 }
 $5 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; //@line 7143
 STACKTOP = sp; //@line 7144
 return $5 | 0; //@line 7144
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP; //@line 7187
 if (!($c >>> 0 < 128)) {
  $5 = $c; //@line 7190
  STACKTOP = sp; //@line 7191
  return $5 | 0; //@line 7191
 }
 $5 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; //@line 7197
 STACKTOP = sp; //@line 7198
 return $5 | 0; //@line 7198
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7331
 HEAP32[$this >> 2] = 5728; //@line 7333
 $3 = HEAP32[$this + 8 >> 2] | 0; //@line 7335
 do {
  if (($3 | 0) != 0) {
   if ((HEAP8[$this + 12 | 0] | 0) == 0) {
    break;
   }
   __ZdaPv($3); //@line 7346
  }
 } while (0);
 __ZdlPv($this); //@line 7350
 STACKTOP = sp; //@line 7351
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 9008
 $1 = $this; //@line 9009
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 9014
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 4) | 0); //@line 9019
 __ZdlPv($1 + $6 | 0); //@line 9020
 STACKTOP = sp; //@line 9021
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 8745
 $1 = $this; //@line 8746
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 8751
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 4) | 0); //@line 8756
 __ZdlPv($1 + $6 | 0); //@line 8757
 STACKTOP = sp; //@line 8758
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 8613
 $1 = $this; //@line 8614
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 8619
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 8) | 0); //@line 8624
 __ZdlPv($1 + $6 | 0); //@line 8625
 STACKTOP = sp; //@line 8626
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 8169
 $1 = $this; //@line 8170
 $6 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 8175
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 8) | 0); //@line 8180
 __ZdlPv($1 + $6 | 0); //@line 8181
 STACKTOP = sp; //@line 8182
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16360
 HEAP8[$1] = 67109634; //@line 16361
 HEAP8[$1 + 1 | 0] = 262147; //@line 16361
 HEAP8[$1 + 2 | 0] = 1024; //@line 16361
 HEAP8[$1 + 3 | 0] = 4; //@line 16361
 STACKTOP = STACKTOP; //@line 16362
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16369
 HEAP8[$1] = 67109634; //@line 16370
 HEAP8[$1 + 1 | 0] = 262147; //@line 16370
 HEAP8[$1 + 2 | 0] = 1024; //@line 16370
 HEAP8[$1 + 3 | 0] = 4; //@line 16370
 STACKTOP = STACKTOP; //@line 16371
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16275
 HEAP8[$1] = 67109634; //@line 16276
 HEAP8[$1 + 1 | 0] = 262147; //@line 16276
 HEAP8[$1 + 2 | 0] = 1024; //@line 16276
 HEAP8[$1 + 3 | 0] = 4; //@line 16276
 STACKTOP = STACKTOP; //@line 16277
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16284
 HEAP8[$1] = 67109634; //@line 16285
 HEAP8[$1 + 1 | 0] = 262147; //@line 16285
 HEAP8[$1 + 2 | 0] = 1024; //@line 16285
 HEAP8[$1 + 3 | 0] = 4; //@line 16285
 STACKTOP = STACKTOP; //@line 16286
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16190
 HEAP8[$1] = 67109634; //@line 16191
 HEAP8[$1 + 1 | 0] = 262147; //@line 16191
 HEAP8[$1 + 2 | 0] = 1024; //@line 16191
 HEAP8[$1 + 3 | 0] = 4; //@line 16191
 STACKTOP = STACKTOP; //@line 16192
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16199
 HEAP8[$1] = 67109634; //@line 16200
 HEAP8[$1 + 1 | 0] = 262147; //@line 16200
 HEAP8[$1 + 2 | 0] = 1024; //@line 16200
 HEAP8[$1 + 3 | 0] = 4; //@line 16200
 STACKTOP = STACKTOP; //@line 16201
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16105
 HEAP8[$1] = 67109634; //@line 16106
 HEAP8[$1 + 1 | 0] = 262147; //@line 16106
 HEAP8[$1 + 2 | 0] = 1024; //@line 16106
 HEAP8[$1 + 3 | 0] = 4; //@line 16106
 STACKTOP = STACKTOP; //@line 16107
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0;
 $1 = $agg$result; //@line 16114
 HEAP8[$1] = 67109634; //@line 16115
 HEAP8[$1 + 1 | 0] = 262147; //@line 16115
 HEAP8[$1 + 2 | 0] = 1024; //@line 16115
 HEAP8[$1 + 3 | 0] = 4; //@line 16115
 STACKTOP = STACKTOP; //@line 16116
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 7058
 $2 = __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0; //@line 7060
 STACKTOP = sp; //@line 7061
 return $2 | 0; //@line 7061
}
function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0); //@line 2770
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10371
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5992, _wcslen(5992) | 0); //@line 10373
 STACKTOP = sp; //@line 10374
 return;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = $this + 16 | 0; //@line 8492
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1; //@line 8495
 if ((HEAP32[$this + 20 >> 2] & 1 | 0) == 0) {
  STACKTOP = STACKTOP; //@line 8501
  return;
 } else {
  ___cxa_rethrow(); //@line 8503
 }
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10354
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5960, _wcslen(5960) | 0); //@line 10356
 STACKTOP = sp; //@line 10357
 return;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits; //@line 2363
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 2364
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0; //@line 2366
 return high >> bits - 32 | 0; //@line 2367
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, u$0, $frm, $end, $mx) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0; //@line 7639
 STACKTOP = STACKTOP; //@line 7642
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0; //@line 7642
}
function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0; //@line 2854
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16345
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45); //@line 16346
 STACKTOP = sp; //@line 16347
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16260
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45); //@line 16261
 STACKTOP = sp; //@line 16262
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16175
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45); //@line 16176
 STACKTOP = sp; //@line 16177
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16090
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45); //@line 16091
 STACKTOP = sp; //@line 16092
 return;
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP; //@line 6856
 $4 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0; //@line 6860
 HEAP32[$this >> 2] = $4; //@line 6861
 __ZNSt3__114__shared_count12__add_sharedEv($4); //@line 6863
 STACKTOP = sp; //@line 6864
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10337
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 16 | 0); //@line 10339
 STACKTOP = sp; //@line 10340
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10328
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 12 | 0); //@line 10330
 STACKTOP = sp; //@line 10331
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10273
 HEAP32[$this >> 2] = 5920; //@line 10275
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 16 | 0); //@line 10277
 __ZdlPv($this); //@line 10279
 STACKTOP = sp; //@line 10280
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10251
 HEAP32[$this >> 2] = 5880; //@line 10253
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 12 | 0); //@line 10255
 __ZdlPv($this); //@line 10257
 STACKTOP = sp; //@line 10258
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10363
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5984, 5); //@line 10364
 STACKTOP = sp; //@line 10365
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6956
 if (($this | 0) == 0) {
  STACKTOP = sp; //@line 6959
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 255]($this); //@line 6965
 STACKTOP = sp; //@line 6966
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10346
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5952, 4); //@line 10347
 STACKTOP = sp; //@line 10348
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 2341
  return low << bits; //@line 2342
 }
 tempRet0 = low << bits - 32; //@line 2344
 return 0; //@line 2345
}
function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0); //@line 2882
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 2352
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 2353
 }
 tempRet0 = 0; //@line 2355
 return high >>> bits - 32 | 0; //@line 2356
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7040
 if ((HEAP8[$this] & 1) == 0) {
  STACKTOP = sp; //@line 7046
  return;
 }
 __ZdlPv(HEAP32[$this + 8 >> 2] | 0); //@line 7051
 STACKTOP = sp; //@line 7052
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6225
 if ((HEAP8[$this] & 1) == 0) {
  STACKTOP = sp; //@line 6231
  return;
 }
 __ZdlPv(HEAP32[$this + 8 >> 2] | 0); //@line 6235
 STACKTOP = sp; //@line 6236
 return;
}
function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 6870
 $3 = HEAP32[$l >> 2] | 0; //@line 6873
 HEAP32[$this >> 2] = $3; //@line 6874
 __ZNSt3__114__shared_count12__add_sharedEv($3); //@line 6876
 STACKTOP = sp; //@line 6877
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 6087
 __ZNSt11logic_errorC2EPKc($1, 2960); //@line 6089
 HEAP32[$1 >> 2] = 2640; //@line 6091
 ___cxa_throw($1 | 0, 2680, 30); //@line 6092
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 6000
 __ZNSt11logic_errorC2EPKc($1, 5592); //@line 6002
 HEAP32[$1 >> 2] = 2640; //@line 6004
 ___cxa_throw($1 | 0, 2680, 30); //@line 6005
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 HEAP32[$agg$result >> 2] = $ev; //@line 5773
 HEAP32[$agg$result + 4 >> 2] = $this; //@line 5775
 STACKTOP = STACKTOP; //@line 5776
 return;
}
function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 12960
 $$0 = $s; //@line 12961
 while (1) {
  if ((HEAP32[$$0 >> 2] | 0) == 0) {
   break;
  } else {
   $$0 = $$0 + 4 | 0; //@line 12969
  }
 }
 STACKTOP = sp; //@line 12976
 return $$0 - $s >> 2 | 0; //@line 12976
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, u$0, $to, u$1, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $to = $to | 0;
 u$1 = u$1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 9012
 STACKTOP = STACKTOP; //@line 9013
 return 3; //@line 9013
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, u$0, $to, u$1, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $to = $to | 0;
 u$1 = u$1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 9905
 STACKTOP = STACKTOP; //@line 9906
 return 3; //@line 9906
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, u$0, $to, u$1, $to_nxt) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 $to = $to | 0;
 u$1 = u$1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 7614
 STACKTOP = STACKTOP; //@line 7615
 return 3; //@line 7615
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7904
 HEAP32[$this >> 2] = 3048; //@line 7906
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 7908
 __ZdlPv($this); //@line 7910
 STACKTOP = sp; //@line 7911
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7653
 HEAP32[$this >> 2] = 2984; //@line 7655
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 7657
 __ZdlPv($this); //@line 7659
 STACKTOP = sp; //@line 7660
 return;
}
function jsCall_viiiiiiiii_0(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0); //@line 2776
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10285
 HEAP32[$this >> 2] = 5920; //@line 10287
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 16 | 0); //@line 10289
 STACKTOP = sp; //@line 10290
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10263
 HEAP32[$this >> 2] = 5880; //@line 10265
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 12 | 0); //@line 10267
 STACKTOP = sp; //@line 10268
 return;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0); //@line 2714
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9026
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0); //@line 9036
 STACKTOP = sp; //@line 9037
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8763
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0); //@line 8773
 STACKTOP = sp; //@line 8774
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8631
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0); //@line 8641
 STACKTOP = sp; //@line 8642
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8187
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0); //@line 8197
 STACKTOP = sp; //@line 8198
 return;
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr]; //@line 25
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0]; //@line 26
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0]; //@line 27
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0]; //@line 28
}
function dynCall_viiiiiid(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = +a7;
 FUNCTION_TABLE_viiiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, +a7); //@line 2798
}
function jsCall_iiiiiiiii_0(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0; //@line 2860
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4195
 HEAP32[$this >> 2] = 3048; //@line 4197
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4199
 __ZdlPv($this); //@line 4201
 STACKTOP = sp; //@line 4202
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4847
 HEAP32[$this >> 2] = 2984; //@line 4849
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4851
 __ZdlPv($this); //@line 4853
 STACKTOP = sp; //@line 4854
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4514
 HEAP32[$this >> 2] = 3048; //@line 4516
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4518
 __ZdlPv($this); //@line 4520
 STACKTOP = sp; //@line 4521
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5165
 HEAP32[$this >> 2] = 2984; //@line 5167
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 5169
 __ZdlPv($this); //@line 5171
 STACKTOP = sp; //@line 5172
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7916
 HEAP32[$this >> 2] = 3048; //@line 7918
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 7920
 STACKTOP = sp; //@line 7921
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7665
 HEAP32[$this >> 2] = 2984; //@line 7667
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 7669
 STACKTOP = sp; //@line 7670
 return;
}
function jsCall_viiiiiiii_0(a1, a2, a3, a4, a5, a6, a7, a8) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0); //@line 2888
}
function __ZNKSt3__18ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7617
 __ZNSt3__16localeC2ERKS0_($agg$result, $this + 28 | 0); //@line 7620
 STACKTOP = sp; //@line 7621
 return;
}
function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 11769
 $3 = _mbrtowc(0, $s, $n, ($st | 0) != 0 ? $st : 13576) | 0; //@line 11772
 STACKTOP = sp; //@line 11773
 return $3 | 0; //@line 11773
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 2896
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 4561
 $1 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0; //@line 4562
 STACKTOP = sp; //@line 4563
 return $1 | 0; //@line 4563
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 5212
 $1 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0; //@line 5213
 STACKTOP = sp; //@line 5214
 return $1 | 0; //@line 5214
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8990
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 8992
 __ZdlPv($this); //@line 8994
 STACKTOP = sp; //@line 8995
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8727
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 8729
 __ZdlPv($this); //@line 8731
 STACKTOP = sp; //@line 8732
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8595
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 8597
 __ZdlPv($this); //@line 8599
 STACKTOP = sp; //@line 8600
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8151
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 8153
 __ZdlPv($this); //@line 8155
 STACKTOP = sp; //@line 8156
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 2467
 return (tempRet0 = tempRet0, $1$0) | 0; //@line 2468
}
function dynCall_viiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 FUNCTION_TABLE_viiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6); //@line 2826
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 4568
 $1 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0; //@line 4569
 STACKTOP = sp; //@line 4570
 return $1 | 0; //@line 4570
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 5219
 $1 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0; //@line 5220
 STACKTOP = sp; //@line 5221
 return $1 | 0; //@line 5221
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7653
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this); //@line 7654
 __ZdlPv($this); //@line 7656
 STACKTOP = sp; //@line 7657
 return;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5957
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0; //@line 5962
 STACKTOP = sp; //@line 5963
 return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5689
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0; //@line 5694
 STACKTOP = sp; //@line 5695
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = HEAP32[1424] | 0; //@line 6972
 HEAP32[1424] = $1 + 1; //@line 6972
 HEAP32[$this + 4 >> 2] = $1 + 1; //@line 6975
 STACKTOP = STACKTOP; //@line 6976
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 2924
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 2257
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 2258
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 2259
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4185
 HEAP32[$this >> 2] = 3048; //@line 4187
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4189
 STACKTOP = sp; //@line 4190
 return;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4837
 HEAP32[$this >> 2] = 2984; //@line 4839
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4841
 STACKTOP = sp; //@line 4842
 return;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 var $1 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 18639
 __ZNSt13runtime_errorC2EPKc($1, $msg); //@line 18641
 ___cxa_throw($1 | 0, 2720, 32); //@line 18642
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4504
 HEAP32[$this >> 2] = 3048; //@line 4506
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 4508
 STACKTOP = sp; //@line 4509
 return;
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5155
 HEAP32[$this >> 2] = 2984; //@line 5157
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 5159
 STACKTOP = sp; //@line 5160
 return;
}
function jsCall_viiiiiii_0(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0); //@line 2720
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 2728
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9151
 __ZNSt3__112system_errorD2Ev($this); //@line 9153
 __ZdlPv($this); //@line 9155
 STACKTOP = sp; //@line 9156
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = $this + 4 | 0; //@line 5510
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5511
 STACKTOP = STACKTOP; //@line 5512
 return;
}
function jsCall_viiiiiid_0(a1, a2, a3, a4, a5, a6, a7) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = +a7;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, +a7); //@line 2804
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6882
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0; //@line 6886
 STACKTOP = sp; //@line 6887
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 19497
 __ZdlPv($this); //@line 19499
 STACKTOP = sp; //@line 19500
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16376
 __ZdlPv($this); //@line 16378
 STACKTOP = sp; //@line 16379
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13542
 __ZdlPv($this); //@line 13544
 STACKTOP = sp; //@line 13545
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10819
 __ZdlPv($this); //@line 10821
 STACKTOP = sp; //@line 10822
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6731
 __ZNSt3__16locale5__impD2Ev($this); //@line 6732
 __ZdlPv($this); //@line 6734
 STACKTOP = sp; //@line 6735
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14683
 __ZdlPv($this); //@line 14685
 STACKTOP = sp; //@line 14686
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9000
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 9002
 STACKTOP = sp; //@line 9003
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8737
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 8739
 STACKTOP = sp; //@line 8740
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8605
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 8607
 STACKTOP = sp; //@line 8608
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8161
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 8163
 STACKTOP = sp; //@line 8164
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6033
 __ZNSt13runtime_errorD2Ev($this); //@line 6035
 __ZdlPv($this); //@line 6037
 STACKTOP = sp; //@line 6038
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 4084
 __ZdlPv($this); //@line 4086
 STACKTOP = sp; //@line 4087
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2638
 __ZdlPv($this); //@line 2640
 STACKTOP = sp; //@line 2641
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7707
 __ZdlPv($this); //@line 7709
 STACKTOP = sp; //@line 7710
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5268
 __ZdlPv($this); //@line 5270
 STACKTOP = sp; //@line 5271
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9531
 __ZdlPv($this); //@line 9533
 STACKTOP = sp; //@line 9534
 return;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 STACKTOP = STACKTOP; //@line 7284
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0; //@line 7284
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 STACKTOP = STACKTOP; //@line 7534
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0; //@line 7534
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 19676
 __ZNSt9exceptionD2Ev($this | 0); //@line 19678
 __ZdlPv($this); //@line 19680
 STACKTOP = sp; //@line 19681
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13101
 __ZNSt9exceptionD2Ev($this | 0); //@line 13103
 __ZdlPv($this); //@line 13105
 STACKTOP = sp; //@line 13106
 return;
}
function _create_worker($url) {
 $url = $url | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 1616
 $1 = _emscripten_create_worker($url | 0) | 0; //@line 1617
 STACKTOP = sp; //@line 1618
 return $1 | 0; //@line 1618
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9169
 __ZNSt3__18ios_baseD2Ev($this); //@line 9170
 __ZdlPv($this); //@line 9172
 STACKTOP = sp; //@line 9173
 return;
}
function runPostSets() {
 HEAP32[656] = __ZTISt9exception; //@line 2223
 HEAP32[682] = __ZTISt9exception; //@line 2223
 HEAP32[3420] = __ZTISt9exception; //@line 2223
 HEAP32[3650] = __ZTISt9exception; //@line 2223
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 2868
}
function __GLOBAL__I_a() {
 var sp = 0;
 sp = STACKTOP; //@line 5495
 __ZNSt3__18ios_base4InitC2Ev(0); //@line 5496
 _atexit(124, 1680, ___dso_handle | 0) | 0; //@line 5497
 STACKTOP = sp; //@line 5498
 return;
}
function jsCall_viiiiii_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 2902
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, u$0, u$1) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 STACKTOP = STACKTOP; //@line 7936
 return $this | 0; //@line 7936
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, u$0, u$1) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 u$1 = u$1 | 0;
 STACKTOP = STACKTOP; //@line 7685
 return $this | 0; //@line 7685
}
function b11(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(11); //@line 2959
 return 0; //@line 2959
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 2269
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 2271
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 2938
}
function jsCall_viiiiid_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6); //@line 2832
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9161
 __ZNSt3__112system_errorD2Ev($this); //@line 9163
 STACKTOP = sp; //@line 9164
 return;
}
function b5(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(5); //@line 2953
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 3
 STACKTOP = STACKTOP + size | 0; //@line 4
 STACKTOP = STACKTOP + 7 & -8; //@line 5
 return ret | 0; //@line 6
}
function __Znaj($size) {
 $size = $size | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 19652
 $1 = __Znwj($size) | 0; //@line 19653
 STACKTOP = sp; //@line 19654
 return $1 | 0; //@line 19654
}
function __ZSt17__throw_bad_allocv() {
 var $1 = 0;
 $1 = ___cxa_allocate_exception(4) | 0; //@line 19700
 HEAP32[$1 >> 2] = 14544; //@line 19702
 ___cxa_throw($1 | 0, 14592, 122); //@line 19703
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6043
 __ZNSt13runtime_errorD2Ev($this); //@line 6045
 STACKTOP = sp; //@line 6046
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13159
 __ZdlPv($this); //@line 13161
 STACKTOP = sp; //@line 13162
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13151
 __ZdlPv($this); //@line 13153
 STACKTOP = sp; //@line 13154
 return;
}
function jsCall_iiiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 2930
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10243
 __ZdlPv($this); //@line 10245
 STACKTOP = sp; //@line 10246
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 10235
 __ZdlPv($this); //@line 10237
 STACKTOP = sp; //@line 10238
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13143
 __ZdlPv($this); //@line 13145
 STACKTOP = sp; //@line 13146
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 19686
 __ZNSt9exceptionD2Ev($this | 0); //@line 19688
 STACKTOP = sp; //@line 19689
 return;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8320
 __ZdlPv($this); //@line 8322
 STACKTOP = sp; //@line 8323
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9350
 __ZdlPv($this); //@line 9352
 STACKTOP = sp; //@line 9353
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13111
 __ZNSt9exceptionD2Ev($this | 0); //@line 13113
 STACKTOP = sp; //@line 13114
 return;
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 7571
 __ZdlPv($this); //@line 7573
 STACKTOP = sp; //@line 7574
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13557
 return 2; //@line 13557
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10834
 return 2; //@line 10834
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 2700
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16291
 __ZdlPv($this); //@line 16293
 STACKTOP = sp; //@line 16294
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16206
 __ZdlPv($this); //@line 16208
 STACKTOP = sp; //@line 16209
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16121
 __ZdlPv($this); //@line 16123
 STACKTOP = sp; //@line 16124
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16036
 __ZdlPv($this); //@line 16038
 STACKTOP = sp; //@line 16039
 return;
}
function b13(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(13); //@line 2961
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr; //@line 2276
 while (HEAP8[curr] | 0) {
  curr = curr + 1 | 0; //@line 2278
 }
 return curr - ptr | 0; //@line 2280
}
function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $1 = 0.0, sp = 0;
 sp = STACKTOP; //@line 2049
 $1 = +_scalbn($x, $n); //@line 2050
 STACKTOP = sp; //@line 2051
 return +$1;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9178
 __ZdlPv($this); //@line 9180
 STACKTOP = sp; //@line 9181
 return;
}
function jsCall_viiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 2734
}
function _tolower(chr) {
 chr = chr | 0;
 if ((chr | 0) < 65) return chr | 0; //@line 2332
 if ((chr | 0) > 90) return chr | 0; //@line 2333
 return chr - 65 + 97 | 0; //@line 2334
}
function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 var sp = 0;
 sp = STACKTOP; //@line 19659
 if (($ptr | 0) != 0) {
  _free($ptr); //@line 19662
 }
 STACKTOP = sp; //@line 19664
 return;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6948
 __ZdlPv($this); //@line 6950
 STACKTOP = sp; //@line 6951
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 2812
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5700
 __ZdlPv($this); //@line 5702
 STACKTOP = sp; //@line 5703
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 5543
 __ZdlPv($this); //@line 5545
 STACKTOP = sp; //@line 5546
 return;
}
function _free_board($b) {
 $b = $b | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1606
 if (($b | 0) != 0) {
  __ZdaPv($b); //@line 1609
 }
 STACKTOP = sp; //@line 1611
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9359
 __ZdlPv($this); //@line 9361
 STACKTOP = sp; //@line 9362
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9186
 __ZdlPv($this); //@line 9188
 STACKTOP = sp; //@line 9189
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 7928
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 7677
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6981
 __ZdlPv($this); //@line 6983
 STACKTOP = sp; //@line 6984
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw; //@line 19
  threwValue = value; //@line 20
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 8086
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 7837
 return -1;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10322
 return HEAP32[$this + 12 >> 2] | 0; //@line 10322
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 8146
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, u$0) {
 $this = $this | 0;
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 7899
 return -1;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10306
 return HEAP32[$this + 8 >> 2] | 0; //@line 10306
}
function jsCall_iiiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 2874
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10314
 return HEAP8[$this + 9 | 0] | 0; //@line 10314
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10298
 return HEAP8[$this + 8 | 0] | 0; //@line 10298
}
function b1(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(1); //@line 2949
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 STACKTOP = STACKTOP; //@line 7243
 return $c << 24 >> 24 | 0; //@line 7243
}
function b7(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = +p6;
 abort(7); //@line 2955
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7996
 return 0; //@line 7996
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7745
 return 0; //@line 7745
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 2910
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 19506
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16385
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16312
 return 2147483647; //@line 16312
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16306
 return 2147483647; //@line 16306
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16227
 return 2147483647; //@line 16227
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16221
 return 2147483647; //@line 16221
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 4093
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 2647
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13551
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10828
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 14692
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7716
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5277
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9540
 return;
}
function jsCall_viiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 2944
}
function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 var sp = 0;
 sp = STACKTOP; //@line 19669
 __ZdlPv($ptr); //@line 19670
 STACKTOP = sp; //@line 19671
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7990
 return 0; //@line 7990
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7739
 return 0; //@line 7739
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9025
 return 0; //@line 9025
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9918
 return 0; //@line 9918
}
function b16(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(16); //@line 2964
 return 0; //@line 2964
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 8234
 return 0; //@line 8234
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7627
 return 1; //@line 7627
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 10230
 return 4; //@line 10230
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9345
 return 4; //@line 9345
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 STACKTOP = STACKTOP; //@line 7496
 return $c | 0; //@line 7496
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16142
 return 127; //@line 16142
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16136
 return 127; //@line 16136
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16057
 return 127; //@line 16057
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16051
 return 127; //@line 16051
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5734
 return HEAP32[$this + 4 >> 2] | 0; //@line 5734
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7648
 return 1; //@line 7648
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9019
 return 0; //@line 9019
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9912
 return 0; //@line 9912
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5613
 return HEAP32[$this + 4 >> 2] | 0; //@line 5613
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7621
 return 1; //@line 7621
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0); //@line 2756
}
function b14(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(14); //@line 2962
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 8057
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 7807
 return -1;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16353
 return 0; //@line 16353
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16268
 return 0; //@line 16268
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16183
 return 0; //@line 16183
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16098
 return 0; //@line 16098
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13600; //@line 13095
 STACKTOP = STACKTOP; //@line 13096
 return;
}
function b9(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(9); //@line 2957
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9124
 return 3264; //@line 9124
}
function jsCall_iiii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0) | 0; //@line 2706
}
function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(12); //@line 2960
 return 0; //@line 2960
}
function ___clang_call_terminate($1) {
 $1 = $1 | 0;
 ___cxa_begin_catch($1 | 0) | 0; //@line 2345
 __ZSt9terminatev(); //@line 2346
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0; //@line 2784
}
function jsCall_viii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0); //@line 2818
}
function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2); //@line 2950
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 19695
 return 14560; //@line 19695
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13120
 return 13616; //@line 13120
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13138
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13132
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13126
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0); //@line 2742
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9146
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16300
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16215
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16130
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 16045
 return;
}
function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0); //@line 2948
 return 0; //@line 2948
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5764
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5504
 return;
}
function jsCall_iii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(0, a1 | 0, a2 | 0) | 0; //@line 2916
}
function b17(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(17); //@line 2965
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9201
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5709
 return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 5552
 return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9368
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 9195
 return;
}
function __ZNSt3__112__do_nothingEPv(u$0) {
 u$0 = u$0 | 0;
 STACKTOP = STACKTOP; //@line 16680
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 STACKTOP = STACKTOP; //@line 13088
 return;
}
function jsCall_vii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(0, a1 | 0, a2 | 0); //@line 2762
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(15); //@line 2963
 return 0; //@line 2963
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3](); //@line 2840
}
function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(8); //@line 2956
}
function jsCall_ii_0(a1) {
 a1 = a1 | 0;
 return jsCall(0, a1 | 0) | 0; //@line 2790
}
function setTempRet9(value) {
 value = value | 0;
 tempRet9 = value; //@line 89
}
function setTempRet8(value) {
 value = value | 0;
 tempRet8 = value; //@line 84
}
function setTempRet7(value) {
 value = value | 0;
 tempRet7 = value; //@line 79
}
function setTempRet6(value) {
 value = value | 0;
 tempRet6 = value; //@line 74
}
function setTempRet5(value) {
 value = value | 0;
 tempRet5 = value; //@line 69
}
function setTempRet4(value) {
 value = value | 0;
 tempRet4 = value; //@line 64
}
function setTempRet3(value) {
 value = value | 0;
 tempRet3 = value; //@line 59
}
function setTempRet2(value) {
 value = value | 0;
 tempRet2 = value; //@line 54
}
function setTempRet1(value) {
 value = value | 0;
 tempRet1 = value; //@line 49
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 44
}
function b6(p0) {
 p0 = p0 | 0;
 abort(6); //@line 2954
 return 0; //@line 2954
}
function jsCall_vi_0(a1) {
 a1 = a1 | 0;
 jsCall(0, a1 | 0); //@line 2748
}
function b4(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(4); //@line 2952
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 13
}
function b3(p0) {
 p0 = p0 | 0;
 abort(3); //@line 2951
}
function stackSave() {
 return STACKTOP | 0; //@line 9
}
function jsCall_v_0() {
 jsCall(0); //@line 2846
}
function b10() {
 abort(10); //@line 2958
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiiiii = [b1,b1,jsCall_viiiiiii_0,b1,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx
  ,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiii = [b2,b2,jsCall_viiiii_0,b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2];
  var FUNCTION_TABLE_vi = [b3,b3,jsCall_vi_0,b3,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev
  ,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev
  ,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev
  ,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__112__do_nothingEPv,_free,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,jsCall_vii_0,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv
  ,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viiiiiiiii = [b5,b5,jsCall_viiiiiiiii_0,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b5,b5];
  var FUNCTION_TABLE_ii = [b6,b6,jsCall_ii_0,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv
  ,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiid = [b7,b7,jsCall_viiiiiid_0,b7,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7,b7];
  var FUNCTION_TABLE_viii = [b8,b8,jsCall_viii_0,b8,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,_callback_js,b8];
  var FUNCTION_TABLE_viiiiid = [b9,b9,jsCall_viiiiid_0,b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe];
  var FUNCTION_TABLE_v = [b10,b10,jsCall_v_0,b10];
  var FUNCTION_TABLE_iiiiiiiii = [b11,b11,jsCall_iiiiiiiii_0,b11,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b11,b11,b11,b11];
  var FUNCTION_TABLE_iiiii = [b12,b12,jsCall_iiiii_0,b12,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b12,b12,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiiii = [b13,b13,jsCall_viiiiiiii_0,b13,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiii = [b14,b14,jsCall_viiiiii_0,b14,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iii = [b15,b15,jsCall_iii_0,b15,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_iiiiii = [b16,b16,jsCall_iiiiii_0,b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j];
  var FUNCTION_TABLE_viiii = [b17,b17,jsCall_viiii_0,b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b17,b17,b17,b17];

  return { _i64Subtract: _i64Subtract, _free: _free, _memset: _memset, _serialize_board: _serialize_board, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _tolower: _tolower, _strlen: _strlen, _create_worker: _create_worker, _free_board: _free_board, _malloc: _malloc, _memcpy: _memcpy, _get_next_move: _get_next_move, _make_computers_move: _make_computers_move, _create_board: _create_board, _shift_board: _shift_board, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_fileno": _fileno, "_fread": _fread, "_write": _write, "__isLeapYear": __isLeapYear, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_llvm_lifetime_end": _llvm_lifetime_end, "_send": _send, "_emscripten_call_worker": _emscripten_call_worker, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "_freelocale": _freelocale, "_sprintf": _sprintf, "_vasprintf": _vasprintf, "_vsnprintf": _vsnprintf, "_emscripten_create_worker": _emscripten_create_worker, "_strtoull_l": _strtoull_l, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_allocate_exception": ___cxa_allocate_exception, "_strtoll": _strtoll, "_pwrite": _pwrite, "_uselocale": _uselocale, "_snprintf": _snprintf, "__scanString": __scanString, "___cxa_end_catch": ___cxa_end_catch, "_strtoull": _strtoull, "_strftime": _strftime, "_isxdigit": _isxdigit, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_fgetc": _fgetc, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_abort": _abort, "_isspace": _isspace, "_pthread_cond_wait": _pthread_cond_wait, "_llvm_lifetime_start": _llvm_lifetime_start, "___cxa_is_number_type": ___cxa_is_number_type, "_ungetc": _ungetc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_sscanf": _sscanf, "_catgets": _catgets, "_asprintf": _asprintf, "_strtoll_l": _strtoll_l, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "___errno_location": ___errno_location, "_copysign": _copysign, "___cxa_throw": ___cxa_throw, "_isdigit": _isdigit, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _serialize_board = Module["_serialize_board"] = asm["_serialize_board"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _create_worker = Module["_create_worker"] = asm["_create_worker"];
var _free_board = Module["_free_board"] = asm["_free_board"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _get_next_move = Module["_get_next_move"] = asm["_get_next_move"];
var _make_computers_move = Module["_make_computers_move"] = asm["_make_computers_move"];
var _create_board = Module["_create_board"] = asm["_create_board"];
var _shift_board = Module["_shift_board"] = asm["_shift_board"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






//# sourceMappingURL=threes-solver-main.js.map